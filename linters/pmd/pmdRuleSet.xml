<?xml version="1.0"?>
<ruleset name="PMD-Rules" xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">
    <description>
        For a detailed description of pmd rulesets: http://pmd.sourceforge.net/rules/index.html
        Instead of excluding rules, consider locally deactivating Rules using @SuppressWarnings("PMD.RuleName")
    </description>

    <rule ref="category/java/multithreading.xml">
        <!--<exclude name="UseConcurrentHashMap"/>-->
    </rule>

    <rule ref="category/java/bestpractices.xml">
        <exclude name="AbstractClassWithoutAbstractMethod"/>
        <exclude name="AccessorClassGeneration"/>
        <exclude name="AccessorMethodGeneration"/>

        <!-- Handled by Checkstyle -->
        <exclude name="UnusedImports"/>
    </rule>
    <rule ref="category/java/bestpractices.xml/GuardLogStatement">
        <properties>
            <property name="guardsMethods" value="isTraceEnabled,isDebugEnabled"/>
            <property name="logLevels" value="trace,debug"/>
        </properties>
    </rule>

    <rule ref="category/java/errorprone.xml">
        <exclude name="DataflowAnomalyAnalysis"/>
        <exclude name="BeanMembersShouldSerialize"/>
        <exclude name="AvoidLiteralsInIfCondition"/>
        <!--<exclude name="MissingSerialVersionUID"/> low prio-->
    </rule>
    <rule ref="category/java/errorprone.xml/AvoidDuplicateLiterals">
        <properties>
            <property name="skipAnnotations" value="true"/>
        </properties>
    </rule>

    <rule ref="category/java/codestyle.xml">

        <!-- Handled by Checkstyle -->

        <exclude name="ShortClassName"/>
        <exclude name="ShortVariable"/>
        <exclude name="ShortMethodName"/>
        <exclude name="FieldNamingConventions"/>
        <exclude name="VariableNamingConventions"/>
        <exclude name="ClassNamingConventions"/>
        <exclude name="AvoidPrefixingMethodParameters"/>
        <exclude name="LongVariable"/>

        <exclude name="MethodArgumentCouldBeFinal"/> <!-- There is a rule to avoid reassigning anyway -->
        <!--<exclude name="LinguisticNaming"/> low prio-->

        <!-- too strict, will generate too many warnings -->

        <exclude name="UselessParentheses"/>
        <exclude name="CommentDefaultAccessModifier"/>
        <exclude name="DefaultPackage"/>
        <exclude name="AtLeastOneConstructor"/>
        <exclude name="TooManyStaticImports"/>
        <exclude name="OnlyOneReturn"/>
        <exclude name="AvoidFinalLocalVariable"/>
    </rule>


    <rule ref="category/java/performance.xml">
    </rule>
    <rule ref="category/java/performance.xml/BooleanInstantiation">
    </rule>


    <rule ref="category/java/design.xml">
        <exclude name="UseUtilityClass"/> <!-- Too strict to break the build. Would be ok as warning. -->
        <exclude name="LawOfDemeter"/>    <!-- Too strict to break the build. Would be ok as warning. -->
        <exclude name="AvoidThrowingNullPointerException"/>    <!-- Controversial. -->
        <exclude name="ClassWithOnlyPrivateConstructorsShouldBeFinal"/> <!-- Little benefit -->
        <exclude name="AvoidThrowingRawExceptionTypes"/> <!-- Little benefit -->
        <exclude name="NcssCount"/> <!-- Little benefit -->
        <exclude name="NPathComplexity"/> <!-- Little benefit -->
        <exclude name="CyclomaticComplexity"/> <!-- Little benefit -->
        <exclude name="DataClass"/> <!-- Little benefit -->
        <exclude name="LoosePackageCoupling"/> <!-- needs package list -->
    </rule>
    <rule ref="category/java/design.xml/CyclomaticComplexity">
        <properties>
            <property name="methodReportLevel" value="20" />
        </properties>
    </rule>


</ruleset>
