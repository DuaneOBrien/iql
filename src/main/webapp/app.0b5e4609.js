webpackJsonp([0],{

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/// <reference path=\"deps.d.ts\" />\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(1), __webpack_require__(2), __webpack_require__(3), __webpack_require__(9), __webpack_require__(12), __webpack_require__(13), __webpack_require__(22), __webpack_require__(369), __webpack_require__(27), __webpack_require__(370), __webpack_require__(371), __webpack_require__(378), __webpack_require__(471), __webpack_require__(479), __webpack_require__(464)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, $, _, router_1, events_1, utils_1, fieldbar_1, topui_1, queryset_1, querymodel_1, controlsmodel_1, executor_1, presentationmodel_1, presentationview_1) {\n    \"use strict\";\n    // TODO: split between components actually using the styles\n    /// <amd-dependency path=\"index.css\"/>\n    /// <amd-dependency path=\"d3\"/>\n    var d3 = __webpack_require__(464);\n    \"use strict\";\n    __webpack_require__(482);\n    __webpack_require__(173);\n    __webpack_require__(489);\n    // statics for onebox\n    __webpack_require__(501);\n    __webpack_require__(503);\n    __webpack_require__(505);\n    __webpack_require__(507);\n    __webpack_require__(509);\n    var Index = (function () {\n        function Index() {\n            $(_.bind(this.onLoad, this));\n            window.d3 = d3; // has to be registered as global for use by pivottable_gchart\n        }\n        Index.prototype.onLoad = function () {\n            var _this = this;\n            utils_1.default.ensureLatestCacheLoaded().done(function () {\n                _this.applicationStart();\n            });\n        };\n        Index.prototype.applicationStart = function () {\n            var querySet = new queryset_1.default();\n            var defaultQueryModel = new querymodel_1.default();\n            querySet.add(defaultQueryModel);\n            var presentationModel = new presentationmodel_1.default();\n            var controlsModel = new controlsmodel_1.default({ presentationModel: presentationModel });\n            var router = new router_1.default(querySet, presentationModel, controlsModel);\n            new executor_1.default(querySet, presentationModel);\n            $('body').keydown(function (e) {\n                // TODO\n                if ((e.ctrlKey == true || e.metaKey == true) && e.keyCode == $.ui.keyCode.ENTER) {\n                    e.preventDefault();\n                    events_1.default.eventBus.trigger(events_1.default.execute, false);\n                }\n            });\n            var topUI = new topui_1.default({ collection: querySet, el: $('#topui'), controlsModel: controlsModel });\n            topUI.render();\n            var fieldBar = new fieldbar_1.default({ collection: querySet, el: $('#fieldbar') });\n            fieldBar.render();\n            var presentationView = new presentationview_1.default({ model: presentationModel, el: $('#presentationdiv') });\n            presentationView.render();\n            router.updateModelsFromHash($.address.value(), true);\n        };\n        return Index;\n    }());\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Index;\n    // Start the app\n    new Index();\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9pbmRleC50cz9lZDAwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJkZXBzLmQudHNcIiAvPlxuXG4vLyBUT0RPOiBzcGxpdCBiZXR3ZWVuIGNvbXBvbmVudHMgYWN0dWFsbHkgdXNpbmcgdGhlIHN0eWxlc1xuLy8vIDxhbWQtZGVwZW5kZW5jeSBwYXRoPVwiaW5kZXguY3NzXCIvPlxuXG4vLy8gPGFtZC1kZXBlbmRlbmN5IHBhdGg9XCJkM1wiLz5cbnZhciBkMyA6IGFueSA9IHJlcXVpcmUoJ2QzJyk7XG5cblwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgJCA9IHJlcXVpcmUoJ2pxdWVyeScpO1xuaW1wb3J0IF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJyk7XG5pbXBvcnQgVGFibGVWaWV3IGZyb20gJ3RhYmxldmlldy90YWJsZXZpZXcnO1xuaW1wb3J0IFJvdXRlciBmcm9tICdyb3V0ZXIvcm91dGVyJztcbmltcG9ydCBFdmVudHMgZnJvbSAnZXZlbnRzJztcbmltcG9ydCBVdGlscyBmcm9tICd1dGlscyc7XG5pbXBvcnQgSVFMQ2xpZW50IGZyb20gJ2lxbGNsaWVudCc7XG5pbXBvcnQgUmVzdWx0U2V0IGZyb20gJ3Jlc3VsdHNldCc7XG5pbXBvcnQgRmllbGRCYXIgZnJvbSAnZmllbGRiYXIvZmllbGRiYXInO1xuaW1wb3J0IFRvcFVJIGZyb20gJ3RvcHVpL3RvcHVpJztcbmltcG9ydCBRdWVyeVNldCBmcm9tICd0b3B1aS9xdWVyeXNldC9xdWVyeXNldCc7XG5pbXBvcnQgUXVlcnlNb2RlbCBmcm9tICd0b3B1aS9xdWVyeXNldC9xdWVyeS9xdWVyeW1vZGVsJztcbmltcG9ydCBFcnJvclZpZXcgZnJvbSAnZXJyb3J2aWV3JztcbmltcG9ydCBDb250cm9scyBmcm9tICdjb250cm9scy9jb250cm9scyc7XG5pbXBvcnQgQ29udHJvbHNNb2RlbCBmcm9tICdjb250cm9scy9jb250cm9sc21vZGVsJztcbmltcG9ydCBFeGVjdXRvciBmcm9tICdleGVjdXRvcic7XG5pbXBvcnQgUHJlc2VudGF0aW9uTW9kZWwgZnJvbSAncmVzdWx0cHJlc2VudGF0aW9uL3ByZXNlbnRhdGlvbm1vZGVsJztcbmltcG9ydCBQcmVzZW50YXRpb25WaWV3IGZyb20gJ3Jlc3VsdHByZXNlbnRhdGlvbi9wcmVzZW50YXRpb252aWV3JztcblxucmVxdWlyZShcImJvb3RzdHJhcC9kaXN0L2Nzcy9ib290c3RyYXAuY3NzXCIpO1xucmVxdWlyZShcImpxdWVyeXVpXCIpO1xucmVxdWlyZShcImxpYnMvanF1ZXJ5LXVpLTEuMTIuMS5jdXN0b20vanF1ZXJ5LXVpLmNzc1wiKTtcblxuLy8gc3RhdGljcyBmb3Igb25lYm94XG5yZXF1aXJlKCdjb2RlbWlycm9yL2xpYi9jb2RlbWlycm9yLmNzcycpO1xucmVxdWlyZSgnY29kZW1pcnJvci9hZGRvbi9oaW50L3Nob3ctaGludC5jc3MnKTtcbnJlcXVpcmUoJ2NvZGVtaXJyb3IvYWRkb24vbGludC9saW50LmNzcycpO1xucmVxdWlyZSgncmVhY3QtZGF0ZS1waWNrZXIvYmFzZS5jc3MnKTtcbnJlcXVpcmUoJ3JlYWN0LWRhdGUtcGlja2VyL3RoZW1lL2RlZmF1bHQuY3NzJyk7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEluZGV4IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgJChfLmJpbmQodGhpcy5vbkxvYWQsIHRoaXMpKTtcblxuICAgICAgICAoPGFueT53aW5kb3cpLmQzID0gZDM7ICAvLyBoYXMgdG8gYmUgcmVnaXN0ZXJlZCBhcyBnbG9iYWwgZm9yIHVzZSBieSBwaXZvdHRhYmxlX2djaGFydFxuICAgIH1cblxuICAgIG9uTG9hZCgpIHtcbiAgICAgICAgVXRpbHMuZW5zdXJlTGF0ZXN0Q2FjaGVMb2FkZWQoKS5kb25lKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYXBwbGljYXRpb25TdGFydCgpXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFwcGxpY2F0aW9uU3RhcnQoKSB7XG4gICAgICAgIHZhciBxdWVyeVNldCA9IG5ldyBRdWVyeVNldCgpO1xuICAgICAgICB2YXIgZGVmYXVsdFF1ZXJ5TW9kZWwgPSBuZXcgUXVlcnlNb2RlbCgpO1xuICAgICAgICBxdWVyeVNldC5hZGQoZGVmYXVsdFF1ZXJ5TW9kZWwpO1xuXG4gICAgICAgIHZhciBwcmVzZW50YXRpb25Nb2RlbCA9IG5ldyBQcmVzZW50YXRpb25Nb2RlbCgpO1xuICAgICAgICB2YXIgY29udHJvbHNNb2RlbCA9IG5ldyBDb250cm9sc01vZGVsKHtwcmVzZW50YXRpb25Nb2RlbDogcHJlc2VudGF0aW9uTW9kZWx9KTtcblxuICAgICAgICB2YXIgcm91dGVyID0gbmV3IFJvdXRlcihxdWVyeVNldCwgcHJlc2VudGF0aW9uTW9kZWwsIGNvbnRyb2xzTW9kZWwpO1xuICAgICAgICBuZXcgRXhlY3V0b3IocXVlcnlTZXQsIHByZXNlbnRhdGlvbk1vZGVsKTtcblxuICAgICAgICAkKCdib2R5Jykua2V5ZG93bihmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAvLyBUT0RPXG4gICAgICAgICAgICBpZigoZS5jdHJsS2V5ID09IHRydWUgfHwgZS5tZXRhS2V5ID09IHRydWUpICYmIGUua2V5Q29kZSA9PSAkLnVpLmtleUNvZGUuRU5URVIpIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgRXZlbnRzLmV2ZW50QnVzLnRyaWdnZXIoRXZlbnRzLmV4ZWN1dGUsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIHRvcFVJID0gbmV3IFRvcFVJKDxCYWNrYm9uZS5WaWV3T3B0aW9uczxRdWVyeU1vZGVsPj57Y29sbGVjdGlvbjogcXVlcnlTZXQsIGVsOiAkKCcjdG9wdWknKSwgY29udHJvbHNNb2RlbDogY29udHJvbHNNb2RlbH0pO1xuICAgICAgICB0b3BVSS5yZW5kZXIoKTtcblxuICAgICAgICB2YXIgZmllbGRCYXIgPSBuZXcgRmllbGRCYXIoe2NvbGxlY3Rpb246IHF1ZXJ5U2V0LCBlbDogJCgnI2ZpZWxkYmFyJyl9KTtcbiAgICAgICAgZmllbGRCYXIucmVuZGVyKCk7XG5cbiAgICAgICAgdmFyIHByZXNlbnRhdGlvblZpZXcgPSBuZXcgUHJlc2VudGF0aW9uVmlldyh7bW9kZWw6IHByZXNlbnRhdGlvbk1vZGVsLCBlbDogJCgnI3ByZXNlbnRhdGlvbmRpdicpfSk7XG4gICAgICAgIHByZXNlbnRhdGlvblZpZXcucmVuZGVyKCk7XG5cbiAgICAgICAgcm91dGVyLnVwZGF0ZU1vZGVsc0Zyb21IYXNoKCQuYWRkcmVzcy52YWx1ZSgpLCB0cnVlKTtcblxuICAgIH1cbn1cblxuLy8gU3RhcnQgdGhlIGFwcFxubmV3IEluZGV4KCk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBpbmRleC50c1xuICoqLyJdLCJtYXBwaW5ncyI6IkFBQUE7OztBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFxQkE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUFBOzs7QUFFQTtBQUNBOzs7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 3:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Promise) {/// <reference path=\"../deps.d.ts\" />\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(1), __webpack_require__(2), __webpack_require__(9), __webpack_require__(7), __webpack_require__(10), __webpack_require__(11)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, $, _, events_1, iquerymodel_1) {\n    \"use strict\";\n    /// <amd-dependency path=\"address\" />\n    /// <amd-dependency path=\"jquery-deparam\" />\n    var deparam = __webpack_require__(11);\n    var Router = (function () {\n        function Router(querySet, presentationModel, controlsModel) {\n            this.querySet = querySet;\n            this.presentationModel = presentationModel;\n            this.controlsModel = controlsModel;\n            this.modelsBeingUpdated = false;\n            this.dontRunOnLoad = false;\n            this.lastExecutedQuerySet = null;\n            this.lastLoadedHash = \"\";\n            this.lastExecutedQuerySet = querySet;\n            $.address.externalChange(_.bind(this.onExternalAddressChange, this));\n            $.address.strict(false);\n            this.presentationModel.on('change:selectedView', this.updateHashFromModels, this);\n            this.presentationModel.on('change:viewSettings', this.updateHashFromModels, this);\n            this.controlsModel.on('change:backend', this.updateHashFromModels, this);\n            this.controlsModel.on('change:limit', this.updateHashFromModels, this);\n            this.controlsModel.on('change:extremeMode', this.updateHashFromModels, this);\n            events_1.default.eventBus.on(events_1.default.execute, this.onQueryExecution, this);\n            events_1.default.eventBus.on(events_1.default.termClicked, this.onTermClicked, this);\n            events_1.default.eventBus.on(events_1.default.distinctValueClicked, this.onDistinctValueClicked, this);\n            // TODO enable\n            //this.onExternalAddressChange({value: $.address.value()});\n        }\n        Router.prototype.onExternalAddressChange = function (event) {\n            this.updateModelsFromHash(event.value, false);\n        };\n        Router.prototype.updateModelsFromHash = function (hash, initial) {\n            // deduping\n            if (hash == this.lastLoadedHash) {\n                return;\n            }\n            this.lastLoadedHash = hash;\n            this.modelsBeingUpdated = true;\n            try {\n                var params = deparam(hash);\n                if (params.dontrun == 1) {\n                    this.dontRunOnLoad = true;\n                }\n                if (params.view) {\n                    this.presentationModel.selectedView = params.view;\n                }\n                this.presentationModel.filterAndSetSettings(params);\n                this.controlsModel.extremeMode = params.v == \"2\";\n                this.controlsModel.backend = params.backend || this.controlsModel.defaults().backend;\n                this.controlsModel.limit = params.limit || iquerymodel_1.default.DEFAULT_LIMIT;\n                if (params.macro) {\n                    this.controlsModel.macro = params.macro.join(\"; \");\n                }\n                var hashQueriesList = (typeof params.q === \"string\") ? [params.q] : params.q;\n                if (hashQueriesList) {\n                    this.useNewQueries(hashQueriesList, this.controlsModel.extremeMode);\n                }\n            }\n            finally {\n                this.modelsBeingUpdated = false;\n            }\n        };\n        Router.prototype.useNewQueries = function (hashQueriesList, extremeMode) {\n            var _this = this;\n            Router.updateTitleWithQueries(hashQueriesList);\n            Promise.all([this.querySet.setNewQueries(hashQueriesList, extremeMode)])\n                .then(function () {\n                if (!_this.dontRunOnLoad) {\n                    events_1.default.eventBus.trigger(events_1.default.execute, true);\n                }\n            });\n        };\n        Router.prototype.onQueryExecution = function (initialExec) {\n            this.lastExecutedQuerySet = this.querySet.getCopy();\n            if (initialExec) {\n                return; // don't update url when it was just loaded\n            }\n            this.updateHashFromModels();\n        };\n        Router.prototype.updateHashFromModels = function () {\n            if (this.modelsBeingUpdated) {\n                return; // avoid self-triggering\n            }\n            var hash = this.getHashFromModels();\n            $.address.value(hash);\n            this.lastLoadedHash = hash;\n            var queries = this.lastExecutedQuerySet.getQueryStrings();\n            Router.updateTitleWithQueries(queries);\n        };\n        Router.prototype.getHashFromModels = function (querySet) {\n            if (!querySet) {\n                querySet = this.lastExecutedQuerySet;\n            }\n            var hashParams = {};\n            hashParams.q = querySet.getQueryStrings();\n            if (this.controlsModel.backend != this.controlsModel.defaults().backend) {\n                hashParams.backend = this.controlsModel.backend;\n            }\n            if (this.controlsModel.limit !== iquerymodel_1.default.DEFAULT_LIMIT) {\n                hashParams.limit = this.controlsModel.limit;\n            }\n            if ($.trim(this.controlsModel.macro) != \"\") {\n                hashParams.macro = this.controlsModel.macro.split(';').map($.trim);\n            }\n            if (this.controlsModel.extremeMode) {\n                hashParams.v = \"2\";\n            }\n            //        if(this.presentationModel.selectedView != this.presentationModel.defaults().selectedView) {\n            hashParams.view = this.presentationModel.selectedView;\n            //        }\n            hashParams = _.extend(hashParams, this.presentationModel.viewSettings);\n            return Router.objectToParams(hashParams);\n        };\n        Router.prototype.getHash = function () {\n            return $.address.value();\n        };\n        Router.prototype.getHashParams = function () {\n            return deparam(this.getHash());\n        };\n        Router.updateTitleWithQueries = function (queries) {\n            document.title = 'IQL: ' + queries.join('; ');\n        };\n        Router.objectToParams = function (obj) {\n            var objAsString = $.param(obj);\n            return objAsString.replace(/%5B/g, \"[\").replace(/%5D/g, \"]\"); // don't URL encode brackets to keep urls readable\n        };\n        Router.prototype.getLinkForModels = function (querySet) {\n            var hash = this.getHashFromModels(querySet);\n            return window.location.toString().replace(/#.*/, '#' + hash);\n        };\n        Router.prototype.getLinkWithAction = function (queryModelAction) {\n            var args = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n            }\n            var modifiedQuerySet = this.querySet.getCopy();\n            return this.getLinkWithActionForModel.apply(this, [modifiedQuerySet, queryModelAction].concat(args));\n        };\n        Router.prototype.getLinkWithActionForModel = function (modifiedQuerySet, queryModelAction) {\n            var args = [];\n            for (var _i = 2; _i < arguments.length; _i++) {\n                args[_i - 2] = arguments[_i];\n            }\n            modifiedQuerySet.getModels().forEach(function (queryModel) {\n                queryModel[queryModelAction].apply(queryModel, args);\n            });\n            return this.getLinkForModels(modifiedQuerySet);\n        };\n        Router.prototype.onTermClicked = function (field, term, processLocally, $eventTarget) {\n            if (processLocally) {\n                return;\n            }\n            // set the link so that browser can open in new tab. has to be handled synchronously from the click event\n            var link = this.getLinkWithAction(\"appendFilter\", field, term);\n            if (this.querySet.equals(this.lastExecutedQuerySet)) {\n                link += \"&dontrun=1\";\n            }\n            $eventTarget.closest('a').attr('href', link);\n        };\n        Router.prototype.onDistinctValueClicked = function (groupBys, rawField, field, processLocally, $eventTarget) {\n            if (processLocally) {\n                return;\n            }\n            var link;\n            var modifiedQuerySet = this.querySet.getCopy();\n            for (var _i = 0, groupBys_1 = groupBys; _i < groupBys_1.length; _i++) {\n                var groupBy = groupBys_1[_i];\n                var groupField = groupBy[0];\n                var groupTerm = groupBy[1];\n                this.getLinkWithActionForModel(modifiedQuerySet, \"appendFilter\", groupField, groupTerm);\n            }\n            this.getLinkWithActionForModel(modifiedQuerySet, \"removeSelect\", field);\n            var fieldMetric = rawField.substring(rawField.indexOf(\"(\") + 1, rawField.length - 1);\n            link = this.getLinkWithActionForModel(modifiedQuerySet, \"setGroupBy\", fieldMetric + \"[100]\");\n            $eventTarget.closest('a').attr('href', link);\n        };\n        return Router;\n    }());\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Router;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))//# sourceMappingURL=data:application/json;base64,");

/***/ },

/***/ 7:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function($) {/// <reference path=\"../deps.d.ts\" />\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(8), __webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, Backbone, _) {\n    \"use strict\";\n    var IQueryModel = (function (_super) {\n        __extends(IQueryModel, _super);\n        function IQueryModel() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        IQueryModel.prototype.equals = function (other) {\n            return this.getCompleteQuery(true) === other.getCompleteQuery(true);\n        };\n        IQueryModel.applyMacros = function (value) {\n            var macros = {};\n            var macrosList = IQueryModel.MACROS.split(/\\n|;/);\n            _.each(macrosList, function (str) {\n                var macroValue = str.split('=');\n                macros[$.trim(macroValue[0])] = $.trim(macroValue.slice(1).join(\"=\"));\n            });\n            for (var key in macros) {\n                //http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\n                key.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n                //// escape characters for regex match\n                var reg = new RegExp(\"\\\\$\" + key + \"(?!\\\\w)\", \"g\");\n                value = value.replace(reg, macros[key]);\n            }\n            return value;\n        };\n        IQueryModel.prototype.getPart = function (prefix, value, addNewLines) {\n            if (addNewLines === void 0) { addNewLines = false; }\n            if (!value || value.trim() === '') {\n                return '';\n            }\n            else {\n                if (addNewLines) {\n                    prefix = \"\\n\" + prefix.substring(1);\n                }\n                return prefix + value;\n            }\n        };\n        /** Replaces full value with the comment part in it, if present. */\n        IQueryModel.applyCommentsToPart = function (value) {\n            var commentRegex = /\\/\\*(.*)\\*\\//;\n            var regexResult = commentRegex.exec(value);\n            if (regexResult && regexResult.length > 1) {\n                return regexResult[1].trim();\n            }\n            else {\n                return value;\n            }\n        };\n        return IQueryModel;\n    }(Backbone.Model));\n    IQueryModel.DEFAULT_LIMIT = 5000;\n    IQueryModel.CURRENT_LIMIT = IQueryModel.DEFAULT_LIMIT;\n    IQueryModel.MACROS = \"\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = IQueryModel;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy90b3B1aS9pcXVlcnltb2RlbC50cz81NWU2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9kZXBzLmQudHNcIiAvPlxuXG5pbXBvcnQgQmFja2JvbmUgPSByZXF1aXJlKCdiYWNrYm9uZScpO1xuaW1wb3J0IF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJyk7XG5pbXBvcnQgUHJvbWlzZSA9IHJlcXVpcmUoJ2JsdWViaXJkJyk7XG5cbmltcG9ydCBDb2x1bW5JbmZvIGZyb20gJ2NvbHVtbmluZm8nO1xuXG5cbmFic3RyYWN0IGNsYXNzIElRdWVyeU1vZGVsIGV4dGVuZHMgQmFja2JvbmUuTW9kZWwge1xuICAgIHN0YXRpYyBERUZBVUxUX0xJTUlUID0gNTAwMDtcbiAgICBwdWJsaWMgc3RhdGljIENVUlJFTlRfTElNSVQgPSBJUXVlcnlNb2RlbC5ERUZBVUxUX0xJTUlUO1xuICAgIHB1YmxpYyBzdGF0aWMgTUFDUk9TOiBzdHJpbmcgPSBcIlwiO1xuXG4gICAgYWJzdHJhY3QgZ2V0Q29tcGxldGVRdWVyeShza2lwTGltaXQ/OiBib29sZWFuLCBkb250QXBwbHlNYWNyb3M/OiBib29sZWFuLCBhZGROZXdMaW5lcz86IGJvb2xlYW4pOiBzdHJpbmc7XG5cbiAgICBhYnN0cmFjdCBnZXRDb2x1bW5JbmZvcygpIDogQ29sdW1uSW5mb1tdO1xuXG4gICAgYWJzdHJhY3QgZ3JvdXBCeUNvbHVtbkluZm8oKTogQ29sdW1uSW5mb1tdO1xuXG4gICAgYWJzdHJhY3QgZ2V0RGF0YXNldCgpOiBzdHJpbmc7XG5cbiAgICBhYnN0cmFjdCBzZXRHcm91cEJ5KHZhbDogc3RyaW5nKTogdm9pZDtcblxuICAgIGFic3RyYWN0IHNldEZyb21GdWxsUXVlcnkocXVlcnk6IHN0cmluZyk6IFByb21pc2U8SVF1ZXJ5TW9kZWw+O1xuXG4gICAgYWJzdHJhY3QgZ2V0UXVlcnlQYXJzZXIoKTogYW55O1xuXG4gICAgYWJzdHJhY3QgYXBwZW5kRmlsdGVyKGZpZWxkOiBzdHJpbmcsIHRlcm06IHN0cmluZyk6IHZvaWQ7XG5cbiAgICBhYnN0cmFjdCByZW1vdmVTZWxlY3Qoc2VsZWN0VG9SZW1vdmU6IHN0cmluZyk6IHZvaWQ7XG5cbiAgICBwdWJsaWMgZXF1YWxzKG90aGVyOiBJUXVlcnlNb2RlbCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRDb21wbGV0ZVF1ZXJ5KHRydWUpID09PSBvdGhlci5nZXRDb21wbGV0ZVF1ZXJ5KHRydWUpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBzdGF0aWMgYXBwbHlNYWNyb3ModmFsdWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHZhciBtYWNyb3M6IGFueSA9IHt9O1xuICAgICAgICB2YXIgbWFjcm9zTGlzdD0gSVF1ZXJ5TW9kZWwuTUFDUk9TLnNwbGl0KC9cXG58Oy8pO1xuICAgICAgICBfLmVhY2gobWFjcm9zTGlzdCwgZnVuY3Rpb24oc3RyKXtcbiAgICAgICAgICAgIHZhciBtYWNyb1ZhbHVlID0gc3RyLnNwbGl0KCc9Jyk7XG4gICAgICAgICAgICBtYWNyb3NbJC50cmltKG1hY3JvVmFsdWVbMF0pXSA9ICQudHJpbShtYWNyb1ZhbHVlLnNsaWNlKDEpLmpvaW4oXCI9XCIpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBtYWNyb3MpIHtcblxuICAgICAgICAgICAgLy9odHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzM1NjE0OTMvaXMtdGhlcmUtYS1yZWdleHAtZXNjYXBlLWZ1bmN0aW9uLWluLWphdmFzY3JpcHRcbiAgICAgICAgICAgIGtleS5yZXBsYWNlKC9bLVxcL1xcXFxeJCorPy4oKXxbXFxde31dL2csICdcXFxcJCYnKTtcbiAgICAgICAgICAgIC8vLy8gZXNjYXBlIGNoYXJhY3RlcnMgZm9yIHJlZ2V4IG1hdGNoXG4gICAgICAgICAgICB2YXIgcmVnID0gbmV3IFJlZ0V4cChcIlxcXFwkXCIra2V5K1wiKD8hXFxcXHcpXCIsXCJnXCIpO1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKHJlZyxtYWNyb3Nba2V5XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXRQYXJ0KHByZWZpeDogc3RyaW5nLCB2YWx1ZTogc3RyaW5nLCBhZGROZXdMaW5lcyA9IGZhbHNlKSA6IHN0cmluZyB7XG4gICAgICAgIGlmKCF2YWx1ZSB8fCB2YWx1ZS50cmltKCkgPT09ICcnKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZihhZGROZXdMaW5lcykge1xuICAgICAgICAgICAgICAgIHByZWZpeCA9IFwiXFxuXCIgKyBwcmVmaXguc3Vic3RyaW5nKDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHByZWZpeCArIHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqIFJlcGxhY2VzIGZ1bGwgdmFsdWUgd2l0aCB0aGUgY29tbWVudCBwYXJ0IGluIGl0LCBpZiBwcmVzZW50LiAqL1xuICAgIHByb3RlY3RlZCBzdGF0aWMgYXBwbHlDb21tZW50c1RvUGFydCh2YWx1ZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgdmFyIGNvbW1lbnRSZWdleCA9IC9cXC9cXCooLiopXFwqXFwvLztcbiAgICAgICAgdmFyIHJlZ2V4UmVzdWx0ID0gY29tbWVudFJlZ2V4LmV4ZWModmFsdWUpO1xuICAgICAgICBpZihyZWdleFJlc3VsdCAmJiByZWdleFJlc3VsdC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVnZXhSZXN1bHRbMV0udHJpbSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBJUXVlcnlNb2RlbDtcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiB0b3B1aS9pcXVlcnltb2RlbC50c1xuICoqLyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0FBU0E7QUFBQTtBQUFBOztBQW9FQTtBQTdDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBbkVBO0FBQ0E7QUFDQTs7QUFtRUE7Ozs7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 9:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/// <reference path=\"deps.d.ts\" />\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(2), __webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, _, Backbone) {\n    \"use strict\";\n    /**\n     * Application global event bus.\n     */\n    var Events = (function () {\n        function Events() {\n        }\n        Events.buildEventBus = function () {\n            var eventBus = new Events();\n            _.extend(eventBus, Backbone.Events);\n            return eventBus;\n        };\n        return Events;\n    }());\n    Events.execute = \"execute\";\n    Events.cancel = \"cancel\";\n    Events.termClicked = \"term:click\";\n    Events.distinctValueClicked = \"distinctValue:click\";\n    Events.backendChanged = \"backend:change\";\n    Events.extractMacroRequest = \"extractMacroRequest\";\n    Events.extractMacroResponse = \"extractMacroResponse\";\n    Events.updateMacroModel = \"updateMacroModel\";\n    // invoked after the app is made visible post authentication check\n    Events.appBecameVisible = \"appBecameVisible\";\n    Events.makeDatesAbsolute = \"makeDatesAbsolute\";\n    Events.eventBus = Events.buildEventBus(); // global event bus\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Events;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9ldmVudHMudHM/OTE3YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiZGVwcy5kLnRzXCIgLz5cblxuaW1wb3J0IF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJyk7XG5pbXBvcnQgQmFja2JvbmUgPSByZXF1aXJlKCdiYWNrYm9uZScpO1xuXG4vKipcbiAqIEFwcGxpY2F0aW9uIGdsb2JhbCBldmVudCBidXMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV2ZW50cyBpbXBsZW1lbnRzIEJhY2tib25lLkV2ZW50cyB7XG4gICAgc3RhdGljIGV4ZWN1dGUgPSBcImV4ZWN1dGVcIjtcbiAgICBzdGF0aWMgY2FuY2VsID0gXCJjYW5jZWxcIjtcbiAgICBzdGF0aWMgdGVybUNsaWNrZWQgPSBcInRlcm06Y2xpY2tcIjtcbiAgICBzdGF0aWMgZGlzdGluY3RWYWx1ZUNsaWNrZWQgPSBcImRpc3RpbmN0VmFsdWU6Y2xpY2tcIjtcbiAgICBzdGF0aWMgYmFja2VuZENoYW5nZWQgPSBcImJhY2tlbmQ6Y2hhbmdlXCI7XG4gICAgc3RhdGljIGV4dHJhY3RNYWNyb1JlcXVlc3QgPSBcImV4dHJhY3RNYWNyb1JlcXVlc3RcIjtcbiAgICBzdGF0aWMgZXh0cmFjdE1hY3JvUmVzcG9uc2UgPSBcImV4dHJhY3RNYWNyb1Jlc3BvbnNlXCI7XG4gICAgc3RhdGljIHVwZGF0ZU1hY3JvTW9kZWwgPSBcInVwZGF0ZU1hY3JvTW9kZWxcIjtcbiAgICAvLyBpbnZva2VkIGFmdGVyIHRoZSBhcHAgaXMgbWFkZSB2aXNpYmxlIHBvc3QgYXV0aGVudGljYXRpb24gY2hlY2tcbiAgICBzdGF0aWMgYXBwQmVjYW1lVmlzaWJsZSA9IFwiYXBwQmVjYW1lVmlzaWJsZVwiO1xuICAgIHN0YXRpYyBtYWtlRGF0ZXNBYnNvbHV0ZSA9IFwibWFrZURhdGVzQWJzb2x1dGVcIjtcblxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgYnVpbGRFdmVudEJ1cygpIDogRXZlbnRzIHtcbiAgICAgICAgdmFyIGV2ZW50QnVzIDogRXZlbnRzID0gbmV3IEV2ZW50cygpO1xuICAgICAgICBfLmV4dGVuZChldmVudEJ1cywgQmFja2JvbmUuRXZlbnRzKTtcbiAgICAgICAgcmV0dXJuIGV2ZW50QnVzO1xuICAgIH1cblxuICAgIC8vIEV2ZW50cyBhcmUgYWRkZWQgYXMgYSBtaXhpbi4gZS5nLiBodHRwOi8vdHlwZXNjcmlwdC5jb2RlcGxleC5jb20vd2lraXBhZ2U/dGl0bGU9TWl4aW5zJTIwaW4lMjBUeXBlU2NyaXB0XG4gICAgb246KGV2ZW50TmFtZTogYW55LCBjYWxsYmFjaz86IEZ1bmN0aW9uLCBjb250ZXh0PzogYW55KT0+IGFueTtcbiAgICBvZmY6KGV2ZW50TmFtZT86IHN0cmluZywgY2FsbGJhY2s/OiBGdW5jdGlvbiwgY29udGV4dD86IGFueSk9PiBhbnk7XG4gICAgdHJpZ2dlcjooZXZlbnROYW1lOiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiBhbnk7XG4gICAgYmluZDooZXZlbnROYW1lOiBzdHJpbmcsIGNhbGxiYWNrOiBGdW5jdGlvbiwgY29udGV4dD86IGFueSkgPT4gYW55O1xuICAgIHVuYmluZDooZXZlbnROYW1lPzogc3RyaW5nLCBjYWxsYmFjaz86IEZ1bmN0aW9uLCBjb250ZXh0PzogYW55KSA9PiBhbnk7XG5cbiAgICBvbmNlOihldmVudHM6IHN0cmluZywgY2FsbGJhY2s6IEZ1bmN0aW9uLCBjb250ZXh0PzogYW55KSA9PiBhbnk7XG4gICAgbGlzdGVuVG86KG9iamVjdDogYW55LCBldmVudHM6IHN0cmluZywgY2FsbGJhY2s6IEZ1bmN0aW9uKSA9PiBhbnk7XG4gICAgbGlzdGVuVG9PbmNlOihvYmplY3Q6IGFueSwgZXZlbnRzOiBzdHJpbmcsIGNhbGxiYWNrOiBGdW5jdGlvbikgPT4gYW55O1xuICAgIHN0b3BMaXN0ZW5pbmc6KG9iamVjdD86IGFueSwgZXZlbnRzPzogc3RyaW5nLCBjYWxsYmFjaz86IEZ1bmN0aW9uKSA9PiBhbnk7XG5cbiAgICBzdGF0aWMgZXZlbnRCdXMgOiBFdmVudHMgPSBFdmVudHMuYnVpbGRFdmVudEJ1cygpOyAvLyBnbG9iYWwgZXZlbnQgYnVzXG59XG5cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIGV2ZW50cy50c1xuICoqLyJdLCJtYXBwaW5ncyI6IkFBQUE7OztBQUtBOztBQUVBO0FBQ0E7QUFBQTtBQWlDQTtBQW5CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBZUE7QUFBQTtBQWhDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBcUJBOzs7OzsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 10:
/***/ function(module, exports, __webpack_require__) {

	eval("/* WEBPACK VAR INJECTION */(function(jQuery) {/*! jQuery Address v${version} | (c) 2009, 2013 Rostislav Hristov | jquery.org/license */\n(function ($) {\n\n    $.address = (function () {\n\n        var _trigger = function(name) {\n               var e = $.extend($.Event(name), (function() {\n                    var parameters = {},\n                        parameterNames = $.address.parameterNames();\n                    for (var i = 0, l = parameterNames.length; i < l; i++) {\n                        parameters[parameterNames[i]] = $.address.parameter(parameterNames[i]);\n                    }\n                    return {\n                        value: $.address.value(),\n                        path: $.address.path(),\n                        pathNames: $.address.pathNames(),\n                        parameterNames: parameterNames,\n                        parameters: parameters,\n                        queryString: $.address.queryString()\n                    };\n                }).call($.address));\n                $($.address).trigger(e);\n                return e;\n            },\n            _array = function(obj) {\n                return Array.prototype.slice.call(obj);\n            },\n            _bind = function(value, data, fn) {\n                $().bind.apply($($.address), Array.prototype.slice.call(arguments));\n                return $.address;\n            },\n            _unbind = function(value,  fn) {\n                $().unbind.apply($($.address), Array.prototype.slice.call(arguments));\n                return $.address;\n            },\n            _supportsState = function() {\n                return (_h.pushState && _opts.state !== UNDEFINED);\n            },\n            _hrefState = function() {\n                return ('/' + _l.pathname.replace(new RegExp(_opts.state), '') + \n                    _l.search + (_hrefHash() ? '#' + _hrefHash() : '')).replace(_re, '/');\n            },\n            _hrefHash = function() {\n                var index = _l.href.indexOf('#');\n                return index != -1 ? _l.href.substr(index + 1) : '';\n            },\n            _href = function() {\n                return _supportsState() ? _hrefState() : _hrefHash();\n            },\n            _window = function() {\n                try {\n                    return top.document !== UNDEFINED && top.document.title !== UNDEFINED && top.jQuery !== UNDEFINED && \n                        top.jQuery.address !== UNDEFINED && top.jQuery.address.frames() !== false ? top : window;\n                } catch (e) { \n                    return window;\n                }\n            },\n            _js = function() {\n                return 'javascript';\n            },\n            _strict = function(value) {\n                value = value.toString();\n                return (_opts.strict && value.substr(0, 1) != '/' ? '/' : '') + value;\n            },\n            _cssint = function(el, value) {\n                return parseInt(el.css(value), 10);\n            },\n            _listen = function() {\n                if (!_silent) {\n                    var hash = _href(),\n                        diff = decodeURI(_value) != decodeURI(hash);\n                    if (diff) {\n                        if (_msie && _version < 7) {\n                            _l.reload();\n                        } else {\n                            if (_msie && !_hashchange && _opts.history) {\n                                _st(_html, 50);\n                            }\n                            _value = hash;\n                            _update(FALSE);\n                        }\n                    }\n                }\n            },\n            _update = function(internal) {\n                _st(_track, 10);\n                return _trigger(CHANGE).isDefaultPrevented() || \n                    _trigger(internal ? INTERNAL_CHANGE : EXTERNAL_CHANGE).isDefaultPrevented();\n            },\n            _track = function() {\n                if (_opts.tracker !== 'null' && _opts.tracker !== NULL) {\n                    var fn = $.isFunction(_opts.tracker) ? _opts.tracker : _t[_opts.tracker],\n                        value = (_l.pathname + _l.search + \n                                ($.address && !_supportsState() ? $.address.value() : ''))\n                                .replace(/\\/\\//, '/').replace(/^\\/$/, '');\n                    if ($.isFunction(fn)) {\n                        fn(value);\n                    } else if ($.isFunction(_t.urchinTracker)) {\n                        _t.urchinTracker(value);\n                    } else if (_t.pageTracker !== UNDEFINED && $.isFunction(_t.pageTracker._trackPageview)) {\n                        _t.pageTracker._trackPageview(value);\n                    } else if (_t._gaq !== UNDEFINED && $.isFunction(_t._gaq.push)) {\n                        _t._gaq.push(['_trackPageview', decodeURI(value)]);\n                    }\n                }\n            },\n            _html = function() {\n                var src = _js() + ':' + FALSE + ';document.open();document.writeln(\\'<html><head><title>' + \n                    _d.title.replace(/\\'/g, '\\\\\\'') + '</title><script>var ' + ID + ' = \"' + encodeURIComponent(_href()).replace(/\\'/g, '\\\\\\'') + \n                    (_d.domain != _l.hostname ? '\";document.domain=\"' + _d.domain : '') + \n                    '\";</' + 'script></head></html>\\');document.close();';\n                if (_version < 7) {\n                    _frame.src = src;\n                } else {\n                    _frame.contentWindow.location.replace(src);\n                }\n            },\n            _options = function() {\n                if (_url && _qi != -1) {\n                    var i, param, params = _url.substr(_qi + 1).split('&');\n                    for (i = 0; i < params.length; i++) {\n                        param = params[i].split('=');\n                        if (/^(autoUpdate|history|strict|wrap)$/.test(param[0])) {\n                            _opts[param[0]] = (isNaN(param[1]) ? /^(true|yes)$/i.test(param[1]) : (parseInt(param[1], 10) !== 0));\n                        }\n                        if (/^(state|tracker)$/.test(param[0])) {\n                            _opts[param[0]] = param[1];\n                        }\n                    }\n                    _url = NULL;\n                }\n                _value = _href();\n            },\n            _load = function() {\n                if (!_loaded) {\n                    _loaded = TRUE;\n                    _options();\n                    $('a[rel*=\"address:\"]').address();\n                    if (_opts.wrap) {\n                        var body = $('body'),\n                            wrap = $('body > *')\n                                .wrapAll('<div style=\"padding:' + \n                                    (_cssint(body, 'marginTop') + _cssint(body, 'paddingTop')) + 'px ' + \n                                    (_cssint(body, 'marginRight') + _cssint(body, 'paddingRight')) + 'px ' + \n                                    (_cssint(body, 'marginBottom') + _cssint(body, 'paddingBottom')) + 'px ' + \n                                    (_cssint(body, 'marginLeft') + _cssint(body, 'paddingLeft')) + 'px;\" />')\n                                .parent()\n                                .wrap('<div id=\"' + ID + '\" style=\"height:100%;overflow:auto;position:relative;' + \n                                    (_webkit && !window.statusbar.visible ? 'resize:both;' : '') + '\" />');\n                        $('html, body')\n                            .css({\n                                height: '100%',\n                                margin: 0,\n                                padding: 0,\n                                overflow: 'hidden'\n                            });\n                        if (_webkit) {\n                            $('<style type=\"text/css\" />')\n                                .appendTo('head')\n                                .text('#' + ID + '::-webkit-resizer { background-color: #fff; }');\n                        }\n                    }\n                    if (_msie && !_hashchange) {\n                        var frameset = _d.getElementsByTagName('frameset')[0];\n                        _frame = _d.createElement((frameset ? '' : 'i') + 'frame');\n                        _frame.src = _js() + ':' + FALSE;\n                        if (frameset) {\n                            frameset.insertAdjacentElement('beforeEnd', _frame);\n                            frameset[frameset.cols ? 'cols' : 'rows'] += ',0';\n                            _frame.noResize = TRUE;\n                            _frame.frameBorder = _frame.frameSpacing = 0;\n                        } else {\n                            _frame.style.display = 'none';\n                            _frame.style.width = _frame.style.height = 0;\n                            _frame.tabIndex = -1;\n                            _d.body.insertAdjacentElement('afterBegin', _frame);\n                        }\n                        _st(function() {\n                            $(_frame).bind('load', function() {\n                                var win = _frame.contentWindow;\n                                _value = win[ID] !== UNDEFINED ? win[ID] : '';\n                                if (_value != _href()) {\n                                    _update(FALSE);\n                                    _l.hash = _value;\n                                }\n                            });\n                            if (_frame.contentWindow[ID] === UNDEFINED) {\n                                _html();\n                            }\n                        }, 50);\n                    }\n                    _st(function() {\n                        _trigger('init');\n                        _update(FALSE);\n                    }, 1);\n                    if (!_supportsState()) {\n                        if ((_msie && _version > 7) || (!_msie && _hashchange)) {\n                            if (_t.addEventListener) {\n                                _t.addEventListener(HASH_CHANGE, _listen, FALSE);\n                            } else if (_t.attachEvent) {\n                                _t.attachEvent('on' + HASH_CHANGE, _listen);\n                            }\n                        } else {\n                            _si(_listen, 50);\n                        }\n                    }\n                    if ('state' in window.history) {\n                        $(window).trigger('popstate');\n                    }\n                }\n            },\n            _popstate = function() {\n                if (decodeURI(_value) != decodeURI(_href())) {\n                    _value = _href();\n                    _update(FALSE);\n                }\n            },\n            _unload = function() {\n                if (_t.removeEventListener) {\n                    _t.removeEventListener(HASH_CHANGE, _listen, FALSE);\n                } else if (_t.detachEvent) {\n                    _t.detachEvent('on' + HASH_CHANGE, _listen);\n                }\n            },\n            _uaMatch = function(ua) {\n                ua = ua.toLowerCase();\n                var match = /(chrome)[ \\/]([\\w.]+)/.exec( ua ) ||\n                    /(webkit)[ \\/]([\\w.]+)/.exec( ua ) ||\n                    /(opera)(?:.*version|)[ \\/]([\\w.]+)/.exec( ua ) ||\n                    /(msie) ([\\w.]+)/.exec( ua ) ||\n                    ua.indexOf('compatible') < 0 && /(mozilla)(?:.*? rv:([\\w.]+)|)/.exec( ua ) ||\n                    [];\n                return {\n                    browser: match[ 1 ] || '',\n                    version: match[ 2 ] || '0'\n                };\n            },\n            _detectBrowser = function() {\n                var browser = {},\n                    matched = _uaMatch(navigator.userAgent);\n                if (matched.browser) {\n                    browser[matched.browser] = true;\n                    browser.version = matched.version;\n                }\n                if (browser.chrome) {\n                    browser.webkit = true;\n                } else if (browser.webkit) {\n                    browser.safari = true;\n                }\n                return browser;\n            },\n            UNDEFINED,\n            NULL = null,\n            ID = 'jQueryAddress',\n            STRING = 'string',\n            HASH_CHANGE = 'hashchange',\n            INIT = 'init',\n            CHANGE = 'change',\n            INTERNAL_CHANGE = 'internalChange',\n            EXTERNAL_CHANGE = 'externalChange',\n            TRUE = true,\n            FALSE = false,\n            _opts = {\n                autoUpdate: TRUE, \n                history: TRUE, \n                strict: TRUE,\n                frames: TRUE,\n                wrap: FALSE\n            },\n            _browser = _detectBrowser(),\n            _version = parseFloat(_browser.version),\n            _webkit = _browser.webkit || _browser.safari,\n            _msie = !$.support.opacity,\n            _t = _window(),\n            _d = _t.document,\n            _h = _t.history, \n            _l = _t.location,\n            _si = setInterval,\n            _st = setTimeout,\n            _re = /\\/{2,9}/g,\n            _agent = navigator.userAgent,\n            _hashchange = 'on' + HASH_CHANGE in _t,\n            _frame,\n            _form,\n            _url = $('script:last').attr('src'),\n            _qi = _url ? _url.indexOf('?') : -1,\n            _title = _d.title, \n            _silent = FALSE,\n            _loaded = FALSE,\n            _juststart = TRUE,\n            _updating = FALSE,\n            _listeners = {}, \n            _value = _href();\n            \n        if (_msie) {\n            _version = parseFloat(_agent.substr(_agent.indexOf('MSIE') + 4));\n            if (_d.documentMode && _d.documentMode != _version) {\n                _version = _d.documentMode != 8 ? 7 : 8;\n            }\n            var pc = _d.onpropertychange;\n            _d.onpropertychange = function() {\n                if (pc) {\n                    pc.call(_d);\n                }\n                if (_d.title != _title && _d.title.indexOf('#' + _href()) != -1) {\n                    _d.title = _title;\n                }\n            };\n        }\n        \n        if (_h.navigationMode) {\n            _h.navigationMode = 'compatible';\n        }\n        // NOTE: fixed loading (@vladimir)\n        _options();\n        $(function() {\n            var interval = setInterval(function() {\n                if ($.address) {\n                    _load();\n                    clearInterval(interval);\n                }\n            }, 50);\n        });\n        $(window).bind('popstate', _popstate).bind('unload', _unload);\n\n        return {\n            bind: function(type, data, fn) {\n                return _bind.apply(this, _array(arguments));\n            },\n            unbind: function(type, fn) {\n                return _unbind.apply(this, _array(arguments));\n            },\n            init: function(data, fn) {\n                return _bind.apply(this, [INIT].concat(_array(arguments)));\n            },\n            change: function(data, fn) {\n                return _bind.apply(this, [CHANGE].concat(_array(arguments)));\n            },\n            internalChange: function(data, fn) {\n                return _bind.apply(this, [INTERNAL_CHANGE].concat(_array(arguments)));\n            },\n            externalChange: function(data, fn) {\n                return _bind.apply(this, [EXTERNAL_CHANGE].concat(_array(arguments)));\n            },\n            baseURL: function() {\n                var url = _l.href;\n                if (url.indexOf('#') != -1) {\n                    url = url.substr(0, url.indexOf('#'));\n                }\n                if (/\\/$/.test(url)) {\n                    url = url.substr(0, url.length - 1);\n                }\n                return url;\n            },\n            autoUpdate: function(value) {\n                if (value !== UNDEFINED) {\n                    _opts.autoUpdate = value;\n                    return this;\n                }\n                return _opts.autoUpdate;\n            },\n            history: function(value) {\n                if (value !== UNDEFINED) {\n                    _opts.history = value;\n                    return this;\n                }\n                return _opts.history;\n            },\n            state: function(value) {\n                if (value !== UNDEFINED) {\n                    _opts.state = value;\n                    var hrefState = _hrefState();\n                    if (_opts.state !== UNDEFINED) {\n                        if (_h.pushState) {\n                            if (hrefState.substr(0, 3) == '/#/') {\n                                _l.replace(_opts.state.replace(/^\\/$/, '') + hrefState.substr(2));\n                            }\n                        } else if (hrefState != '/' && hrefState.replace(/^\\/#/, '') != _hrefHash()) {\n                            _st(function() {\n                                _l.replace(_opts.state.replace(/^\\/$/, '') + '/#' + hrefState);\n                            }, 1);\n                        }\n                    }\n                    return this;\n                }\n                return _opts.state;\n            },\n            frames: function(value) {\n                if (value !== UNDEFINED) {\n                    _opts.frames = value;\n                    _t = _window();\n                    return this;\n                }\n                return _opts.frames;\n            },            \n            strict: function(value) {\n                if (value !== UNDEFINED) {\n                    _opts.strict = value;\n                    return this;\n                }\n                return _opts.strict;\n            },\n            tracker: function(value) {\n                if (value !== UNDEFINED) {\n                    _opts.tracker = value;\n                    return this;\n                }\n                return _opts.tracker;\n            },\n            wrap: function(value) {\n                if (value !== UNDEFINED) {\n                    _opts.wrap = value;\n                    return this;\n                }\n                return _opts.wrap;\n            },\n            update: function() {\n                _updating = TRUE;\n                this.value(_value);\n                _updating = FALSE;\n                return this;\n            },\n            title: function(value) {\n                if (value !== UNDEFINED) {\n                    _st(function() {\n                        _title = _d.title = value;\n                        if (_juststart && _frame && _frame.contentWindow && _frame.contentWindow.document) {\n                            _frame.contentWindow.document.title = value;\n                            _juststart = FALSE;\n                        }\n                    }, 50);\n                    return this;\n                }\n                return _d.title;\n            },\n            value: function(value) {\n                if (value !== UNDEFINED) {\n                    value = _strict(value);\n                    if (value == '/') {\n                        value = '';\n                    }\n                    if (_value == value && !_updating) {\n                        return;\n                    }\n                    _value = value;\n                    if (_opts.autoUpdate || _updating) {\n                        if (_update(TRUE)) {\n                            return this;\n                        }\n                        if (_supportsState()) {\n                            _h[_opts.history ? 'pushState' : 'replaceState']({}, '', \n                                    _opts.state.replace(/\\/$/, '') + (_value === '' ? '/' : _value));\n                        } else {\n                            _silent = TRUE;\n                            if (_webkit) {\n                                if (_opts.history) {\n                                    _l.hash = '#' + _value;\n                                } else {\n                                    _l.replace('#' + _value);\n                                }\n                            } else if (_value != _href()) {\n                                if (_opts.history) {\n                                    _l.hash = '#' + _value;\n                                } else {\n                                    _l.replace('#' + _value);\n                                }\n                            }\n                            if ((_msie && !_hashchange) && _opts.history) {\n                                _st(_html, 50);\n                            }\n                            if (_webkit) {\n                                _st(function(){ _silent = FALSE; }, 1);\n                            } else {\n                                _silent = FALSE;\n                            }\n                        }\n                    }\n                    return this;\n                }\n                return _strict(_value);\n            },\n            path: function(value) {\n                if (value !== UNDEFINED) {\n                    var qs = this.queryString(),\n                        hash = this.hash();\n                    this.value(value + (qs ? '?' + qs : '') + (hash ? '#' + hash : ''));\n                    return this;\n                }\n                return _strict(_value).split('#')[0].split('?')[0];\n            },\n            pathNames: function() {\n                var path = this.path(),\n                    names = path.replace(_re, '/').split('/');\n                if (path.substr(0, 1) == '/' || path.length === 0) {\n                    names.splice(0, 1);\n                }\n                if (path.substr(path.length - 1, 1) == '/') {\n                    names.splice(names.length - 1, 1);\n                }\n                return names;\n            },\n            queryString: function(value) {\n                if (value !== UNDEFINED) {\n                    var hash = this.hash();\n                    this.value(this.path() + (value ? '?' + value : '') + (hash ? '#' + hash : ''));\n                    return this;\n                }\n                var arr = _value.split('?');\n                return arr.slice(1, arr.length).join('?').split('#')[0];\n            },\n            parameter: function(name, value, append) {\n                var i, params;\n                if (value !== UNDEFINED) {\n                    var names = this.parameterNames();\n                    params = [];\n                    value = value === UNDEFINED || value === NULL ? '' : value.toString();\n                    for (i = 0; i < names.length; i++) {\n                        var n = names[i],\n                            v = this.parameter(n);\n                        if (typeof v == STRING) {\n                            v = [v];\n                        }\n                        if (n == name) {\n                            v = (value === NULL || value === '') ? [] : \n                                (append ? v.concat([value]) : [value]);\n                        }\n                        for (var j = 0; j < v.length; j++) {\n                            params.push(n + '=' + v[j]);\n                        }\n                    }\n                    if ($.inArray(name, names) == -1 && value !== NULL && value !== '') {\n                        params.push(name + '=' + value);\n                    }\n                    this.queryString(params.join('&'));\n                    return this;\n                }\n                value = this.queryString();\n                if (value) {\n                    var r = [];\n                    params = value.split('&');\n                    for (i = 0; i < params.length; i++) {\n                        var p = params[i].split('=');\n                        if (p[0] == name) {\n                            r.push(p.slice(1).join('='));\n                        }\n                    }\n                    if (r.length !== 0) {\n                        return r.length != 1 ? r : r[0];\n                    }\n                }\n            },\n            parameterNames: function() {\n                var qs = this.queryString(),\n                    names = [];\n                if (qs && qs.indexOf('=') != -1) {\n                    var params = qs.split('&');\n                    for (var i = 0; i < params.length; i++) {\n                        var name = params[i].split('=')[0];\n                        if ($.inArray(name, names) == -1) {\n                            names.push(name);\n                        }\n                    }\n                }\n                return names;\n            },\n            hash: function(value) {\n                if (value !== UNDEFINED) {\n                    this.value(_value.split('#')[0] + (value ? '#' + value : ''));\n                    return this;\n                }\n                var arr = _value.split('#');\n                return arr.slice(1, arr.length).join('#');                \n            }\n        };\n    })();\n    \n    $.fn.address = function(fn) {\n        $(this).each(function(index) {\n            if (!$(this).data('address')) {\n                $(this).on('click', function(e) {\n                    if (e.shiftKey || e.ctrlKey || e.metaKey || e.which == 2) {\n                        return true;\n                    }\n                    var target = e.currentTarget;\n                    if ($(target).is('a')) {\n                        e.preventDefault();\n                        var value = fn ? fn.call(target) : \n                            /address:/.test($(target).attr('rel')) ? $(target).attr('rel').split('address:')[1].split(' ')[0] : \n                            $.address.state() !== undefined && !/^\\/?$/.test($.address.state()) ? \n                                    $(target).attr('href').replace(new RegExp('^(.*' + $.address.state() + '|\\\\.)'), '') : \n                                    $(target).attr('href').replace(/^(#\\!?|\\.)/, '');\n                        $.address.value(value);\n                    }\n                }).on('submit', function(e) {\n                    var target = e.currentTarget;\n                    if ($(target).is('form')) {\n                        e.preventDefault();\n                        var action = $(target).attr('action'),\n                            value = fn ? fn.call(target) : (action.indexOf('?') != -1 ? action.replace(/&$/, '') : action + '?') + \n                                $(target).serialize();\n                        $.address.value(value);\n                    }\n                }).data('address', true);\n            }\n        });\n        return this;\n    };\n    \n})(jQuery);\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))//# sourceMappingURL=data:application/json;base64,");

/***/ },

/***/ 12:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, $) {\n    \"use strict\";\n    var bucketStartExtractionRegex = /\\[([^,]+),.*/;\n    var bucketEndExtractionRegex = /\\[[^,]+, ([^)]+)\\)/;\n    var Utils = (function () {\n        function Utils() {\n        }\n        Utils.staticConstructor = function () {\n            Utils.DOMnative.appendChild(Utils.DOMtext);\n        };\n        Utils.htmlEncode = function (text) {\n            Utils.DOMtext.nodeValue = text;\n            return Utils.DOMnative.innerHTML;\n        };\n        // http://stackoverflow.com/questions/4878887/how-do-you-work-with-an-array-of-jquery-deferreds\n        Utils.whenAll = function (deferreds) {\n            var deferred = $.Deferred();\n            $.when.apply($, deferreds).then(function () {\n                if (deferreds.length === 1) {\n                    deferred.resolve([Array.prototype.slice.call(arguments)]);\n                }\n                else {\n                    deferred.resolve(Array.prototype.slice.call(arguments));\n                }\n            }, function () {\n                deferred.reject(Array.prototype.slice.call(arguments));\n            });\n            return deferred;\n        };\n        Utils.importScript = function (sSrc, fOnload) {\n            function loadError(oError) {\n                throw new URIError(\"The script \" + oError.target.src + \" is not accessible.\");\n            }\n            var oHead = document.getElementsByTagName(\"head\")[0];\n            var oScript = document.createElement(\"script\");\n            oScript.type = \"text\\/javascript\";\n            oScript.onerror = loadError;\n            if (fOnload) {\n                oScript.onload = fOnload;\n            }\n            oHead.appendChild(oScript);\n            oScript.src = sSrc;\n        };\n        Utils.ensureLatestCacheLoaded = function () {\n            var deferred = $.Deferred();\n            Utils.ensureLatestCacheLoadedHelper(deferred);\n            return deferred.promise();\n        };\n        Utils.ensureLatestCacheLoadedHelper = function (deferred) {\n            if (!applicationCache) {\n                deferred.resolve();\n                return;\n            }\n            // if the cache is already outdated on load, we should reload the page with the updated cache when it's ready\n            //        console.log(window.applicationCache.status);\n            var timeout = 0;\n            if (window.applicationCache.status === window.applicationCache.CHECKING) {\n                timeout = 5;\n            }\n            else if (window.applicationCache.status === window.applicationCache.DOWNLOADING) {\n                timeout = 50;\n            }\n            if (timeout > 0) {\n                window.setTimeout(Utils.ensureLatestCacheLoadedHelper, timeout, deferred);\n                return;\n            }\n            if (window.applicationCache.status === window.applicationCache.UPDATEREADY) {\n                location.reload();\n                return;\n            }\n            deferred.resolve();\n        };\n        Utils.dateFromRange = function (datepair) {\n            var split = datepair.indexOf(',');\n            // Z suffix tells Firefox the date should be interpreted as UTC\n            var start = new Date(datepair.substring(1, split).replace(' ', 'T') + \".000Z\");\n            var end = new Date(datepair.substring(split + 2, datepair.length - 1).replace(' ', 'T') + \".000Z\");\n            return [start, end];\n        };\n        Utils.sameTime = function (d1, d2) {\n            // returns true if two dates have the exact same time since midnight (date is irrelevant)\n            if (d1 == null || d2 == null || d1 == undefined || d2 == undefined)\n                return false;\n            return d1.getUTCHours() === d2.getUTCHours()\n                && d1.getUTCMinutes() === d2.getUTCMinutes()\n                && d1.getUTCSeconds() === d2.getUTCSeconds()\n                && d1.getUTCMilliseconds() === d2.getUTCMilliseconds();\n        };\n        Utils.getBucketStart = function (bucketVal) {\n            var result = bucketStartExtractionRegex.exec(bucketVal);\n            if (!result || result.length < 2) {\n                return null;\n            }\n            return result[1];\n        };\n        Utils.getBucketEnd = function (bucketVal) {\n            var result = bucketEndExtractionRegex.exec(bucketVal);\n            if (!result || result.length < 2) {\n                return null;\n            }\n            return result[1];\n        };\n        Utils.isIdentifier = function (str) {\n            return /^[a-zA-Z_][a-zA-Z0-9_]*$/.test(str);\n        };\n        Utils.isInteger = function (str) {\n            return /^-?[0-9]+$/.test(str);\n        };\n        Utils.iqlTokenNeedsQuoting = function (str) {\n            return str.length == 0 || (!Utils.isIdentifier(str) && !Utils.isInteger(str));\n        };\n        return Utils;\n    }());\n    // hack for fast HTML encoding. benchmarked here: http://jsperf.com/htmlencoderegex/40\n    Utils.DOMtext = document.createTextNode(\"encoder\");\n    Utils.DOMnative = document.createElement(\"span\");\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Utils;\n    Utils.staticConstructor();\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vdXRpbHMudHM/NTI3NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiZGVwcy5kLnRzXCIgLz5cbmltcG9ydCAkID0gcmVxdWlyZSgnanF1ZXJ5Jyk7XG5cbnZhciBidWNrZXRTdGFydEV4dHJhY3Rpb25SZWdleCA9IC9cXFsoW14sXSspLC4qLztcbnZhciBidWNrZXRFbmRFeHRyYWN0aW9uUmVnZXggPSAvXFxbW14sXSssIChbXildKylcXCkvO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVdGlscyB7XG4gICAgLy8gaGFjayBmb3IgZmFzdCBIVE1MIGVuY29kaW5nLiBiZW5jaG1hcmtlZCBoZXJlOiBodHRwOi8vanNwZXJmLmNvbS9odG1sZW5jb2RlcmVnZXgvNDBcbiAgICBwcml2YXRlIHN0YXRpYyBET010ZXh0ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCJlbmNvZGVyXCIpO1xuICAgIHByaXZhdGUgc3RhdGljIERPTW5hdGl2ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuXG4gICAgc3RhdGljIHN0YXRpY0NvbnN0cnVjdG9yKCkge1xuICAgICAgICBVdGlscy5ET01uYXRpdmUuYXBwZW5kQ2hpbGQoVXRpbHMuRE9NdGV4dCk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBodG1sRW5jb2RlKHRleHQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIFV0aWxzLkRPTXRleHQubm9kZVZhbHVlID0gdGV4dDtcbiAgICAgICAgcmV0dXJuIFV0aWxzLkRPTW5hdGl2ZS5pbm5lckhUTUw7XG4gICAgfVxuXG5cblxuLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80ODc4ODg3L2hvdy1kby15b3Utd29yay13aXRoLWFuLWFycmF5LW9mLWpxdWVyeS1kZWZlcnJlZHNcbiAgICBzdGF0aWMgd2hlbkFsbDxUPihkZWZlcnJlZHM6SlF1ZXJ5R2VuZXJpY1Byb21pc2U8VD5bXSkge1xuICAgICAgICB2YXIgZGVmZXJyZWQgPSAkLkRlZmVycmVkKCk7XG4gICAgICAgICQud2hlbi5hcHBseSgkLCBkZWZlcnJlZHMpLnRoZW4oXG4gICAgICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYoZGVmZXJyZWRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKFtBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpXSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBkZWZlcnJlZDtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGltcG9ydFNjcmlwdChzU3JjOiBzdHJpbmcsIGZPbmxvYWQ/OiAoZXY6IEV2ZW50KSA9PiBhbnkpIHtcbiAgICAgICAgZnVuY3Rpb24gbG9hZEVycm9yKG9FcnJvcjogYW55KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVVJJRXJyb3IoXCJUaGUgc2NyaXB0IFwiICsgb0Vycm9yLnRhcmdldC5zcmMgKyBcIiBpcyBub3QgYWNjZXNzaWJsZS5cIik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb0hlYWQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF07XG4gICAgICAgIHZhciBvU2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgb1NjcmlwdC50eXBlID0gXCJ0ZXh0XFwvamF2YXNjcmlwdFwiO1xuICAgICAgICBvU2NyaXB0Lm9uZXJyb3IgPSBsb2FkRXJyb3I7XG4gICAgICAgIGlmIChmT25sb2FkKSB7XG4gICAgICAgICAgICBvU2NyaXB0Lm9ubG9hZCA9IGZPbmxvYWQ7XG4gICAgICAgIH1cbiAgICAgICAgb0hlYWQuYXBwZW5kQ2hpbGQob1NjcmlwdCk7XG4gICAgICAgIG9TY3JpcHQuc3JjID0gc1NyYztcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGVuc3VyZUxhdGVzdENhY2hlTG9hZGVkKCkgOiBKUXVlcnlQcm9taXNlPGFueT4ge1xuICAgICAgICB2YXIgZGVmZXJyZWQgPSAkLkRlZmVycmVkKCk7XG4gICAgICAgIFV0aWxzLmVuc3VyZUxhdGVzdENhY2hlTG9hZGVkSGVscGVyKGRlZmVycmVkKTtcbiAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBlbnN1cmVMYXRlc3RDYWNoZUxvYWRlZEhlbHBlcihkZWZlcnJlZDogSlF1ZXJ5RGVmZXJyZWQ8YW55Pik6IEpRdWVyeVByb21pc2U8YW55PiB7XG4gICAgICAgIGlmKCFhcHBsaWNhdGlvbkNhY2hlKSB7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgdGhlIGNhY2hlIGlzIGFscmVhZHkgb3V0ZGF0ZWQgb24gbG9hZCwgd2Ugc2hvdWxkIHJlbG9hZCB0aGUgcGFnZSB3aXRoIHRoZSB1cGRhdGVkIGNhY2hlIHdoZW4gaXQncyByZWFkeVxuLy8gICAgICAgIGNvbnNvbGUubG9nKHdpbmRvdy5hcHBsaWNhdGlvbkNhY2hlLnN0YXR1cyk7XG4gICAgICAgIHZhciB0aW1lb3V0ID0gMDtcbiAgICAgICAgaWYod2luZG93LmFwcGxpY2F0aW9uQ2FjaGUuc3RhdHVzID09PSB3aW5kb3cuYXBwbGljYXRpb25DYWNoZS5DSEVDS0lORykge1xuICAgICAgICAgICAgdGltZW91dCA9IDU7XG4gICAgICAgIH0gZWxzZSBpZih3aW5kb3cuYXBwbGljYXRpb25DYWNoZS5zdGF0dXMgPT09IHdpbmRvdy5hcHBsaWNhdGlvbkNhY2hlLkRPV05MT0FESU5HKSB7XG4gICAgICAgICAgICB0aW1lb3V0ID0gNTA7XG4gICAgICAgIH1cbiAgICAgICAgaWYodGltZW91dCA+IDApIHtcbiAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KFV0aWxzLmVuc3VyZUxhdGVzdENhY2hlTG9hZGVkSGVscGVyLCB0aW1lb3V0LCBkZWZlcnJlZCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYod2luZG93LmFwcGxpY2F0aW9uQ2FjaGUuc3RhdHVzID09PSB3aW5kb3cuYXBwbGljYXRpb25DYWNoZS5VUERBVEVSRUFEWSkge1xuICAgICAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBkYXRlRnJvbVJhbmdlKGRhdGVwYWlyOiBzdHJpbmcpIDogQXJyYXk8RGF0ZT4ge1xuICAgICAgICB2YXIgc3BsaXQ6IG51bWJlciA9IGRhdGVwYWlyLmluZGV4T2YoJywnKTtcbiAgICAgICAgLy8gWiBzdWZmaXggdGVsbHMgRmlyZWZveCB0aGUgZGF0ZSBzaG91bGQgYmUgaW50ZXJwcmV0ZWQgYXMgVVRDXG4gICAgICAgIHZhciBzdGFydCA9IG5ldyBEYXRlKGRhdGVwYWlyLnN1YnN0cmluZygxLCBzcGxpdCkucmVwbGFjZSgnICcsICdUJykrXCIuMDAwWlwiKTtcbiAgICAgICAgdmFyIGVuZCA9IG5ldyBEYXRlKGRhdGVwYWlyLnN1YnN0cmluZyhzcGxpdCsyLCBkYXRlcGFpci5sZW5ndGgtMSkucmVwbGFjZSgnICcsICdUJykrXCIuMDAwWlwiKTtcbiAgICAgICAgcmV0dXJuIFtzdGFydCwgZW5kXTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHNhbWVUaW1lKGQxOiBEYXRlLCBkMjogRGF0ZSk6IGJvb2xlYW4ge1xuICAgICAgICAvLyByZXR1cm5zIHRydWUgaWYgdHdvIGRhdGVzIGhhdmUgdGhlIGV4YWN0IHNhbWUgdGltZSBzaW5jZSBtaWRuaWdodCAoZGF0ZSBpcyBpcnJlbGV2YW50KVxuICAgICAgICBpZihkMSA9PSBudWxsIHx8IGQyID09IG51bGwgfHwgZDEgPT0gdW5kZWZpbmVkIHx8IGQyID09IHVuZGVmaW5lZCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIHJldHVybiBkMS5nZXRVVENIb3VycygpID09PSBkMi5nZXRVVENIb3VycygpXG4gICAgICAgICYmIGQxLmdldFVUQ01pbnV0ZXMoKSA9PT0gZDIuZ2V0VVRDTWludXRlcygpXG4gICAgICAgICYmIGQxLmdldFVUQ1NlY29uZHMoKSA9PT0gZDIuZ2V0VVRDU2Vjb25kcygpXG4gICAgICAgICYmIGQxLmdldFVUQ01pbGxpc2Vjb25kcygpID09PSBkMi5nZXRVVENNaWxsaXNlY29uZHMoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGdldEJ1Y2tldFN0YXJ0KGJ1Y2tldFZhbDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGJ1Y2tldFN0YXJ0RXh0cmFjdGlvblJlZ2V4LmV4ZWMoYnVja2V0VmFsKTtcbiAgICAgICAgaWYoIXJlc3VsdCB8fCByZXN1bHQubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdFsxXTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGdldEJ1Y2tldEVuZChidWNrZXRWYWw6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHZhciByZXN1bHQgPSBidWNrZXRFbmRFeHRyYWN0aW9uUmVnZXguZXhlYyhidWNrZXRWYWwpO1xuICAgICAgICBpZighcmVzdWx0IHx8IHJlc3VsdC5sZW5ndGggPCAyKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0WzFdO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgaXNJZGVudGlmaWVyKHN0cjogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAvXlthLXpBLVpfXVthLXpBLVowLTlfXSokLy50ZXN0KHN0cik7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBpc0ludGVnZXIoc3RyOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIC9eLT9bMC05XSskLy50ZXN0KHN0cik7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBpcWxUb2tlbk5lZWRzUXVvdGluZyhzdHI6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gc3RyLmxlbmd0aCA9PSAwIHx8ICghVXRpbHMuaXNJZGVudGlmaWVyKHN0cikgJiYgIVV0aWxzLmlzSW50ZWdlcihzdHIpKTtcbiAgICB9XG59XG5cblV0aWxzLnN0YXRpY0NvbnN0cnVjdG9yKCk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiB1dGlscy50c1xuICoqLyJdLCJtYXBwaW5ncyI6Ijs7QUFHQTtBQUNBO0FBRUE7QUFBQTtBQThIQTtBQXpIQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQTdIQTtBQUNBO0FBQ0E7OztBQTZIQTs7OyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 13:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/// <reference path=\"../deps.d.ts\" />\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(8), __webpack_require__(2), __webpack_require__(9), __webpack_require__(14), __webpack_require__(17), __webpack_require__(21)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, Backbone, _, events_1, metadatacache_1) {\n    \"use strict\";\n    /// <amd-dependency path=\"fieldbar/fieldbar.css\"/>\n    /// <amd-dependency path=\"fieldbar/fieldbar.html\"/>\n    var templateText = __webpack_require__(21);\n    var FieldBar = (function (_super) {\n        __extends(FieldBar, _super);\n        function FieldBar() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.template = _.template(templateText);\n            _this.LS_SHOW_FIELDS_TOGGLE_NAME = \"iqlshowfieldlist\";\n            _this.renderedDataset = \"\";\n            _this.panelVisible = localStorage.getItem(_this.LS_SHOW_FIELDS_TOGGLE_NAME) !== \"0\";\n            return _this;\n        }\n        FieldBar.prototype.initialize = function () {\n            this.listenTo(this.collection, \"change add remove\", this.onCollectionChanged);\n            this.listenTo(events_1.default.eventBus, events_1.default.backendChanged, this.render);\n        };\n        FieldBar.prototype.events = function () {\n            var _this = this;\n            return {\n                \"click .fieldnamelink\": this.fieldClicked,\n                \"click .showfieldpanel\": function () { _this.togglePanel(true); },\n                \"click .hidefieldpanel\": function () { _this.togglePanel(false); }\n            };\n        };\n        FieldBar.prototype.render = function () {\n            var _this = this;\n            var firstDataset = this.collection.first().getDataset();\n            metadatacache_1.default.getFullDatasetInfo(firstDataset).done(function (datasetInfo) {\n                _this.$el.html(_this.template({ datasetInfo: datasetInfo, visible: _this.panelVisible }));\n            });\n            this.renderedDataset = firstDataset;\n            return this;\n        };\n        FieldBar.prototype.fieldClicked = function (e) {\n            var elem = e.target;\n            var fieldName = elem.textContent.trim();\n            var newGroupBy = fieldName + \"[1000]\";\n            this.collection.models.forEach(function (model) {\n                model.setGroupBy(newGroupBy);\n            });\n            events_1.default.eventBus.trigger(events_1.default.execute);\n        };\n        // TODO update for extreme mode\n        FieldBar.prototype.onCollectionChanged = function () {\n            if (this.collection.length < 1) {\n                return;\n            }\n            var firstDataset = this.collection.first().getDataset();\n            if (firstDataset != this.renderedDataset) {\n                this.render();\n            }\n        };\n        FieldBar.prototype.togglePanel = function (toShow) {\n            this.panelVisible = toShow;\n            localStorage.setItem(this.LS_SHOW_FIELDS_TOGGLE_NAME, toShow ? \"1\" : \"0\");\n            this.render();\n        };\n        return FieldBar;\n    }(Backbone.View));\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = FieldBar;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZmllbGRiYXIvZmllbGRiYXIudHM/NzVlYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vZGVwcy5kLnRzXCIgLz5cblxuLy8vIDxhbWQtZGVwZW5kZW5jeSBwYXRoPVwiZmllbGRiYXIvZmllbGRiYXIuY3NzXCIvPlxuLy8vIDxhbWQtZGVwZW5kZW5jeSBwYXRoPVwiZmllbGRiYXIvZmllbGRiYXIuaHRtbFwiLz5cbnZhciB0ZW1wbGF0ZVRleHQgOiBzdHJpbmcgPSByZXF1aXJlKCdmaWVsZGJhci9maWVsZGJhci5odG1sJyk7XG5cbmltcG9ydCAkID0gcmVxdWlyZSgnanF1ZXJ5Jyk7XG5pbXBvcnQgQmFja2JvbmUgPSByZXF1aXJlKCdiYWNrYm9uZScpO1xuaW1wb3J0IF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJyk7XG5cbmltcG9ydCBGaWVsZFR5cGUgPSByZXF1aXJlKCdtZXRhZGF0YS9maWVsZHR5cGUnKTtcblxuaW1wb3J0IEV2ZW50cyBmcm9tICdldmVudHMnO1xuaW1wb3J0IElRdWVyeU1vZGVsIGZyb20gJ3RvcHVpL2lxdWVyeW1vZGVsJztcbmltcG9ydCBJUXVlcnlMaXN0IGZyb20gJ3RvcHVpL2lxdWVyeWxpc3QnO1xuaW1wb3J0IE1ldGFkYXRhQ2FjaGUgZnJvbSAnbWV0YWRhdGEvbWV0YWRhdGFjYWNoZSc7XG5pbXBvcnQgRGF0YXNldEluZm8gZnJvbSAnbWV0YWRhdGEvZGF0YXNldGluZm8nO1xuaW1wb3J0IEZpZWxkSW5mbyBmcm9tICdtZXRhZGF0YS9maWVsZGluZm8nO1xuaW1wb3J0IE1ldHJpY0luZm8gZnJvbSAnbWV0YWRhdGEvbWV0cmljaW5mbyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZpZWxkQmFyIGV4dGVuZHMgQmFja2JvbmUuVmlldzxJUXVlcnlNb2RlbD4ge1xuICAgIHByaXZhdGUgdGVtcGxhdGU6KC4uLmRhdGE6YW55W10pID0+IHN0cmluZyA9IF8udGVtcGxhdGUodGVtcGxhdGVUZXh0KTtcbiAgICBwcml2YXRlIExTX1NIT1dfRklFTERTX1RPR0dMRV9OQU1FID0gXCJpcWxzaG93ZmllbGRsaXN0XCI7XG4gICAgcHJpdmF0ZSByZW5kZXJlZERhdGFzZXQgPSBcIlwiO1xuICAgIHByaXZhdGUgcGFuZWxWaXNpYmxlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0odGhpcy5MU19TSE9XX0ZJRUxEU19UT0dHTEVfTkFNRSkgIT09IFwiMFwiO1xuXG4gICAgaW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgdGhpcy5saXN0ZW5Ubyh0aGlzLmNvbGxlY3Rpb24sIFwiY2hhbmdlIGFkZCByZW1vdmVcIiwgdGhpcy5vbkNvbGxlY3Rpb25DaGFuZ2VkKTtcbiAgICAgICAgdGhpcy5saXN0ZW5UbyhFdmVudHMuZXZlbnRCdXMsIEV2ZW50cy5iYWNrZW5kQ2hhbmdlZCwgdGhpcy5yZW5kZXIpO1xuICAgIH1cblxuICAgIGV2ZW50cygpIHtcbiAgICAgICAgcmV0dXJuIDxhbnk+e1xuICAgICAgICAgICAgXCJjbGljayAuZmllbGRuYW1lbGlua1wiOiB0aGlzLmZpZWxkQ2xpY2tlZCxcbiAgICAgICAgICAgIFwiY2xpY2sgLnNob3dmaWVsZHBhbmVsXCI6ICgpID0+IHt0aGlzLnRvZ2dsZVBhbmVsKHRydWUpO30sXG4gICAgICAgICAgICBcImNsaWNrIC5oaWRlZmllbGRwYW5lbFwiOiAoKSA9PiB7dGhpcy50b2dnbGVQYW5lbChmYWxzZSk7fVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyKCkgOiBCYWNrYm9uZS5WaWV3PElRdWVyeU1vZGVsPiB7XG4gICAgICAgIHZhciBmaXJzdERhdGFzZXQgPSB0aGlzLmNvbGxlY3Rpb24uZmlyc3QoKS5nZXREYXRhc2V0KCk7XG5cbiAgICAgICAgTWV0YWRhdGFDYWNoZS5nZXRGdWxsRGF0YXNldEluZm8oZmlyc3REYXRhc2V0KS5kb25lKChkYXRhc2V0SW5mbzpEYXRhc2V0SW5mbykgPT4ge1xuICAgICAgICAgICAgdGhpcy4kZWwuaHRtbCh0aGlzLnRlbXBsYXRlKHtkYXRhc2V0SW5mbzogZGF0YXNldEluZm8sIHZpc2libGU6IHRoaXMucGFuZWxWaXNpYmxlfSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5yZW5kZXJlZERhdGFzZXQgPSBmaXJzdERhdGFzZXQ7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZmllbGRDbGlja2VkKGU6IEV2ZW50KSB7XG4gICAgICAgIHZhciBlbGVtID0gPEhUTUxMaW5rRWxlbWVudD5lLnRhcmdldDtcbiAgICAgICAgdmFyIGZpZWxkTmFtZSA9IGVsZW0udGV4dENvbnRlbnQudHJpbSgpO1xuICAgICAgICB2YXIgbmV3R3JvdXBCeSA9IGZpZWxkTmFtZSArIFwiWzEwMDBdXCI7XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbi5tb2RlbHMuZm9yRWFjaCgobW9kZWw6IElRdWVyeU1vZGVsKSA9PiB7XG4gICAgICAgICAgICBtb2RlbC5zZXRHcm91cEJ5KG5ld0dyb3VwQnkpO1xuICAgICAgICB9KTtcbiAgICAgICAgRXZlbnRzLmV2ZW50QnVzLnRyaWdnZXIoRXZlbnRzLmV4ZWN1dGUpO1xuICAgIH1cblxuICAgIC8vIFRPRE8gdXBkYXRlIGZvciBleHRyZW1lIG1vZGVcbiAgICBvbkNvbGxlY3Rpb25DaGFuZ2VkKCkge1xuICAgICAgICBpZih0aGlzLmNvbGxlY3Rpb24ubGVuZ3RoIDwgMSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBmaXJzdERhdGFzZXQgPSB0aGlzLmNvbGxlY3Rpb24uZmlyc3QoKS5nZXREYXRhc2V0KCk7XG4gICAgICAgIGlmKGZpcnN0RGF0YXNldCAhPSB0aGlzLnJlbmRlcmVkRGF0YXNldCkge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRvZ2dsZVBhbmVsKHRvU2hvdzogYm9vbGVhbikge1xuICAgICAgICB0aGlzLnBhbmVsVmlzaWJsZSA9IHRvU2hvdztcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0odGhpcy5MU19TSE9XX0ZJRUxEU19UT0dHTEVfTkFNRSwgdG9TaG93ID8gXCIxXCIgOiBcIjBcIik7XG4gICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfVxufVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogZmllbGRiYXIvZmllbGRiYXIudHNcbiAqKi8iXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQUVBO0FBQ0E7QUFDQTtBQWdCQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQW9EQTtBQWxEQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBOzs7OzsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 14:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function($) {/// <reference path=\"../deps.d.ts\" />\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(15)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, iqlclient_1) {\n    \"use strict\";\n    var LS_PREFIX = \"iql\";\n    var LS_CACHE_SUFFIX = \"cache\";\n    var LS_TIMESTAMP_SUFFIX = \"timestamp\";\n    var MetadataCache = (function () {\n        function MetadataCache() {\n        }\n        // provides layer of caching above the IQLClient JSON calling functions\n        MetadataCache.cachedGetJson = function (methodName, extractFunc) {\n            var args = [];\n            for (var _i = 2; _i < arguments.length; _i++) {\n                args[_i - 2] = arguments[_i];\n            }\n            var deferred = $.Deferred();\n            var backendInstanceId = iqlclient_1.default.backendInstance.id;\n            var cacheDataEntryName = LS_PREFIX + '_' + backendInstanceId + '_' + methodName + '_' + args.join('_') + '_' + LS_CACHE_SUFFIX;\n            var cacheTimestampEntryName = LS_PREFIX + '_' + backendInstanceId + '_' + methodName + '_' + args.join('_') + '_' + LS_TIMESTAMP_SUFFIX;\n            var cachedValue = localStorage.getItem(cacheDataEntryName);\n            var cacheTimestamp = localStorage.getItem(cacheTimestampEntryName);\n            var cacheUsed = !!cachedValue && !!cacheTimestamp;\n            if (cacheUsed) {\n                var deserializedValue = $.parseJSON(cachedValue);\n                deferred.resolve(deserializedValue);\n            }\n            if (!cacheUsed || parseInt(cacheTimestamp) < Date.now() - this.CACHE_TIME_LIMIT_MS) {\n                // update from server\n                var method = iqlclient_1.default[methodName];\n                var promise = method.apply(iqlclient_1.default, args);\n                promise.done(function (data) {\n                    var extractedData = extractFunc(data);\n                    // save to cache\n                    localStorage.setItem(cacheDataEntryName, JSON.stringify(extractedData));\n                    localStorage.setItem(cacheTimestampEntryName, Date.now().toString());\n                    if (!cacheUsed) {\n                        // return to caller\n                        deferred.resolve(extractedData);\n                    }\n                }).fail(function () {\n                    if (!cacheUsed) {\n                        deferred.reject();\n                    }\n                });\n            }\n            return deferred.promise();\n        };\n        MetadataCache.getDatasetList = function () {\n            return this.cachedGetJson(\"getDatasets\", function (data) {\n                return data['datasets'];\n            });\n        };\n        MetadataCache.getFullDatasetInfo = function (dataset) {\n            return this.cachedGetJson(\"describe\", function (data) {\n                return data;\n            }, dataset);\n        };\n        MetadataCache.getTermList = function (dataset, field) {\n            return this.cachedGetJson(\"describeField\", function (data) {\n                return data;\n            }, dataset, field);\n        };\n        MetadataCache.getElaborateableFields = function () {\n            return this.cachedGetJson(\"getElaborateableFields\", function (data) {\n                return data;\n            });\n        };\n        MetadataCache.clearCache = function () {\n            var filterString = LS_PREFIX + '.*(' + LS_CACHE_SUFFIX + '|' + LS_TIMESTAMP_SUFFIX + ')$';\n            var filter = new RegExp(filterString);\n            for (var i = 0, len = localStorage.length; i < len; ++i) {\n                var key = localStorage.key(i);\n                if (key && key.match(filter)) {\n                    localStorage.removeItem(key);\n                }\n            }\n        };\n        return MetadataCache;\n    }());\n    MetadataCache.CACHE_TIME_LIMIT_MS = 24 * 60 * 60 * 1000;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = MetadataCache;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vbWV0YWRhdGEvbWV0YWRhdGFjYWNoZS50cz9hY2QyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9kZXBzLmQudHNcIiAvPlxuXG5pbXBvcnQgSVFMQ2xpZW50IGZyb20gJ2lxbGNsaWVudCc7XG5pbXBvcnQgRGF0YXNldEluZm8gZnJvbSAnbWV0YWRhdGEvZGF0YXNldGluZm8nO1xuaW1wb3J0IEZpZWxkVHlwZSA9IHJlcXVpcmUoJ21ldGFkYXRhL2ZpZWxkdHlwZScpO1xuaW1wb3J0IEZpZWxkSW5mbyBmcm9tICdtZXRhZGF0YS9maWVsZGluZm8nO1xuaW1wb3J0IE1ldHJpY0luZm8gZnJvbSAnbWV0YWRhdGEvbWV0cmljaW5mbyc7XG5cbnZhciBMU19QUkVGSVggPSBcImlxbFwiO1xudmFyIExTX0NBQ0hFX1NVRkZJWCA9IFwiY2FjaGVcIjtcbnZhciBMU19USU1FU1RBTVBfU1VGRklYID0gXCJ0aW1lc3RhbXBcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWV0YWRhdGFDYWNoZSB7XG4gICAgcHJpdmF0ZSBzdGF0aWMgQ0FDSEVfVElNRV9MSU1JVF9NUyA9IDI0ICogNjAgKiA2MCAqIDEwMDA7XG5cbiAgICAvLyBwcm92aWRlcyBsYXllciBvZiBjYWNoaW5nIGFib3ZlIHRoZSBJUUxDbGllbnQgSlNPTiBjYWxsaW5nIGZ1bmN0aW9uc1xuICAgIHN0YXRpYyBjYWNoZWRHZXRKc29uKG1ldGhvZE5hbWU6IHN0cmluZywgZXh0cmFjdEZ1bmM6IChkYXRhOiBhbnkpPT5hbnksIC4uLmFyZ3M6IGFueVtdKTogSlF1ZXJ5UHJvbWlzZTxhbnk+IHtcbiAgICAgICAgdmFyIGRlZmVycmVkID0gJC5EZWZlcnJlZCgpO1xuXG4gICAgICAgIHZhciBiYWNrZW5kSW5zdGFuY2VJZCA9IElRTENsaWVudC5iYWNrZW5kSW5zdGFuY2UuaWQ7XG4gICAgICAgIHZhciBjYWNoZURhdGFFbnRyeU5hbWUgPSBMU19QUkVGSVggKyAnXycgKyBiYWNrZW5kSW5zdGFuY2VJZCArICdfJyArIG1ldGhvZE5hbWUgKyAnXycgKyBhcmdzLmpvaW4oJ18nKSArICdfJyArIExTX0NBQ0hFX1NVRkZJWDtcbiAgICAgICAgdmFyIGNhY2hlVGltZXN0YW1wRW50cnlOYW1lID0gTFNfUFJFRklYICsgJ18nICsgYmFja2VuZEluc3RhbmNlSWQgKyAnXycgKyBtZXRob2ROYW1lICsgJ18nICsgYXJncy5qb2luKCdfJykgKyAnXycgKyBMU19USU1FU1RBTVBfU1VGRklYO1xuICAgICAgICB2YXIgY2FjaGVkVmFsdWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShjYWNoZURhdGFFbnRyeU5hbWUpO1xuICAgICAgICB2YXIgY2FjaGVUaW1lc3RhbXAgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShjYWNoZVRpbWVzdGFtcEVudHJ5TmFtZSk7XG4gICAgICAgIHZhciBjYWNoZVVzZWQgPSAhIWNhY2hlZFZhbHVlICYmICEhY2FjaGVUaW1lc3RhbXA7XG4gICAgICAgIGlmKGNhY2hlVXNlZCkge1xuICAgICAgICAgICAgdmFyIGRlc2VyaWFsaXplZFZhbHVlID0gJC5wYXJzZUpTT04oY2FjaGVkVmFsdWUpO1xuICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShkZXNlcmlhbGl6ZWRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYoIWNhY2hlVXNlZCB8fCBwYXJzZUludChjYWNoZVRpbWVzdGFtcCkgPCBEYXRlLm5vdygpIC0gdGhpcy5DQUNIRV9USU1FX0xJTUlUX01TKSB7XG4gICAgICAgICAgICAvLyB1cGRhdGUgZnJvbSBzZXJ2ZXJcbiAgICAgICAgICAgIHZhciBtZXRob2QgPSAoPGFueT5JUUxDbGllbnQpW21ldGhvZE5hbWVdO1xuICAgICAgICAgICAgdmFyIHByb21pc2U6IEpRdWVyeVByb21pc2U8YW55PiA9IG1ldGhvZC5hcHBseShJUUxDbGllbnQsIGFyZ3MpO1xuICAgICAgICAgICAgcHJvbWlzZS5kb25lKChkYXRhOiBhbnkpPT4ge1xuICAgICAgICAgICAgICAgIHZhciBleHRyYWN0ZWREYXRhID0gZXh0cmFjdEZ1bmMoZGF0YSk7XG4gICAgICAgICAgICAgICAgLy8gc2F2ZSB0byBjYWNoZVxuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGNhY2hlRGF0YUVudHJ5TmFtZSwgSlNPTi5zdHJpbmdpZnkoZXh0cmFjdGVkRGF0YSkpXG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oY2FjaGVUaW1lc3RhbXBFbnRyeU5hbWUsIERhdGUubm93KCkudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgaWYoIWNhY2hlVXNlZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm4gdG8gY2FsbGVyXG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoZXh0cmFjdGVkRGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkuZmFpbCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYoIWNhY2hlVXNlZCkge1xuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZSgpO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXREYXRhc2V0TGlzdCgpOiBKUXVlcnlQcm9taXNlPERhdGFzZXRJbmZvW10+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVkR2V0SnNvbihcImdldERhdGFzZXRzXCIsXG4gICAgICAgICAgICAoZGF0YTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGFbJ2RhdGFzZXRzJ107XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldEZ1bGxEYXRhc2V0SW5mbyhkYXRhc2V0OiBzdHJpbmcpOiBKUXVlcnlQcm9taXNlPERhdGFzZXRJbmZvPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlZEdldEpzb24oXCJkZXNjcmliZVwiLFxuICAgICAgICAgICAgKGRhdGE6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGFzZXRcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0VGVybUxpc3QoZGF0YXNldDogc3RyaW5nLCBmaWVsZDogc3RyaW5nKTogSlF1ZXJ5UHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jYWNoZWRHZXRKc29uKFwiZGVzY3JpYmVGaWVsZFwiLFxuICAgICAgICAgICAgKGRhdGE6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGFzZXQsXG4gICAgICAgICAgICBmaWVsZFxuICAgICAgICApO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRFbGFib3JhdGVhYmxlRmllbGRzKCk6IEpRdWVyeVByb21pc2U8c3RyaW5nW10+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVkR2V0SnNvbihcImdldEVsYWJvcmF0ZWFibGVGaWVsZHNcIixcbiAgICAgICAgICAgIChkYXRhOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgY2xlYXJDYWNoZSgpIHtcbiAgICAgICAgdmFyIGZpbHRlclN0cmluZyA9IExTX1BSRUZJWCsnLiooJytMU19DQUNIRV9TVUZGSVgrJ3wnK0xTX1RJTUVTVEFNUF9TVUZGSVgrJykkJztcbiAgICAgICAgdmFyIGZpbHRlciA9IG5ldyBSZWdFeHAoZmlsdGVyU3RyaW5nKTtcbiAgICAgICAgZm9yICggdmFyIGkgPSAwLCBsZW4gPSBsb2NhbFN0b3JhZ2UubGVuZ3RoOyBpIDwgbGVuOyArK2kgKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0gbG9jYWxTdG9yYWdlLmtleShpKTtcbiAgICAgICAgICAgIGlmKGtleSAmJiBrZXkubWF0Y2goZmlsdGVyKSkge1xuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbn1cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIG1ldGFkYXRhL21ldGFkYXRhY2FjaGUudHNcbiAqKi8iXSwibWFwcGluZ3MiOiJBQUFBOzs7QUFRQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBcUZBO0FBbEZBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7O0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUdBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFJQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFwRkE7Ozs7OzsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 15:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/// <reference path=\"deps.d.ts\" />\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(1), __webpack_require__(16)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, $, backend_1) {\n    \"use strict\";\n    var IQLClient = (function () {\n        function IQLClient() {\n        }\n        Object.defineProperty(IQLClient, \"IQLBackendPath\", {\n            get: function () {\n                return this.backendInstance.url;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        IQLClient.getDatasets = function () {\n            return $.getJSON(this.IQLBackendPath + \"query\", { \"q\": \"show datasets\", 'json': 1, client: this.IQLClientName, username: IQLClient.IQLUserName });\n        };\n        IQLClient.getElaborateableFields = function () {\n            return $.Deferred().resolve([]);\n        };\n        IQLClient.elaborate = function (field, list) {\n            //We use ~ because it's not URLEncoded\n            return $.post(this.IQLBackendPath + \"elaborate\", { field: field, list: list.join(\"~\") }, null, 'json');\n        };\n        IQLClient.query = function (q) {\n            return $.ajax({\n                url: this.IQLBackendPath + \"query\",\n                data: IQLClient.getQueryParams(q, false, false),\n                method: \"POST\"\n            });\n        };\n        IQLClient.queryWithProgress = function (q) {\n            var eventSource = new EventSource(IQLClient.getQueryHref(q, true, false));\n            // make sure the event source never reconnects on error\n            eventSource.addEventListener(\"error\", function () {\n                eventSource.close();\n            });\n            return eventSource;\n        };\n        IQLClient.describe = function (datasetName) {\n            return $.getJSON(this.IQLBackendPath + \"query\", { \"q\": \"desc \" + datasetName, 'json': 1, client: this.IQLClientName, username: IQLClient.IQLUserName });\n        };\n        IQLClient.describeField = function (datasetName, fieldName) {\n            return $.getJSON(this.IQLBackendPath + \"query\", { \"q\": \"desc \" + datasetName + '.' + fieldName, 'json': 1, client: this.IQLClientName, username: IQLClient.IQLUserName });\n        };\n        IQLClient.splitQuery = function (query) {\n            return $.ajax({\n                dataType: \"json\",\n                url: this.IQLBackendPath + \"split\",\n                data: { \"q\": query, \"v\": IQLClient.getV() },\n                method: \"POST\"\n            });\n        };\n        IQLClient.parse = function (query) {\n            return $.ajax({\n                dataType: \"json\",\n                url: this.IQLBackendPath + \"parse\",\n                data: { \"q\": query, \"json\": 1, \"v\": IQLClient.getV() },\n                method: \"POST\"\n            });\n        };\n        IQLClient.tokenize = function (query) {\n            return $.ajax({\n                dataType: \"json\",\n                url: this.IQLBackendPath + \"tokenize\",\n                data: { \"q\": query, json: 1 },\n                method: \"POST\"\n            });\n        };\n        IQLClient.killSession = function (sessionId) {\n            if (IQLClient.IQLLanguageVersion == 2) {\n                // cancellation is currently only supported in IQL1\n                return;\n            }\n            return $.ajax({\n                url: this.IQLBackendPath + \"killsession\",\n                data: { \"session\": sessionId, \"client\": this.IQLClientName, \"username\": IQLClient.IQLUserName }\n            });\n        };\n        IQLClient.getQueryParams = function (query, progress, csv) {\n            var params = {\n                q: query,\n                sync: 'sync',\n                interactive: 1,\n                client: this.IQLClientName,\n                getversion: 1,\n                totals: 1,\n                username: IQLClient.IQLUserName\n            };\n            if (progress) {\n                params.progress = 1;\n            }\n            if (csv) {\n                params.csv = 1;\n            }\n            params.v = IQLClient.getV();\n            return params;\n        };\n        IQLClient.getV = function () {\n            return IQLClient.IQLLanguageVersion > 1 ? IQLClient.IQLLanguageVersion : undefined;\n        };\n        IQLClient.getQueryHref = function (query, progress, csv) {\n            var params = IQLClient.getQueryParams(query, progress, csv);\n            return this.IQLBackendPath + \"query?\" + $.param(params);\n        };\n        return IQLClient;\n    }());\n    IQLClient.backendInstance = backend_1.default.INSTANCES[0];\n    IQLClient.IQLLanguageVersion = 1;\n    IQLClient.IQLClientName = \"iqlwebapp\";\n    IQLClient.IQLUserName = \"iqlwebuser\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = IQLClient;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vaXFsY2xpZW50LnRzP2M2N2EiXSwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cImRlcHMuZC50c1wiIC8+XG5cbmltcG9ydCAkID0gcmVxdWlyZSgnanF1ZXJ5Jyk7XG5pbXBvcnQgQmFja2VuZEluc3RhbmNlIGZyb20gJ2JhY2tlbmQnO1xuaW1wb3J0IERhdGFzZXRJbmZvIGZyb20gJ21ldGFkYXRhL2RhdGFzZXRpbmZvJztcbmltcG9ydCBGaWVsZEluZm8gZnJvbSAnbWV0YWRhdGEvZmllbGRpbmZvJztcbmltcG9ydCBNZXRyaWNJbmZvIGZyb20gJ21ldGFkYXRhL21ldHJpY2luZm8nO1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIElRTENsaWVudCB7XG4gICAgcHVibGljIHN0YXRpYyBiYWNrZW5kSW5zdGFuY2UgPSBCYWNrZW5kSW5zdGFuY2UuSU5TVEFOQ0VTWzBdO1xuICAgIHB1YmxpYyBzdGF0aWMgZ2V0IElRTEJhY2tlbmRQYXRoKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmJhY2tlbmRJbnN0YW5jZS51cmw7XG4gICAgfVxuICAgIHB1YmxpYyBzdGF0aWMgSVFMTGFuZ3VhZ2VWZXJzaW9uID0gMTtcbiAgICBwcml2YXRlIHN0YXRpYyBJUUxDbGllbnROYW1lID0gXCJpcWx3ZWJhcHBcIjtcbiAgICBwcml2YXRlIHN0YXRpYyBJUUxVc2VyTmFtZSA9IFwiaXFsd2VidXNlclwiO1xuXG4gICAgc3RhdGljIGdldERhdGFzZXRzKCkgOiBKUXVlcnlQcm9taXNlPERhdGFzZXRJbmZvW10+IHtcbiAgICAgICAgcmV0dXJuICQuZ2V0SlNPTih0aGlzLklRTEJhY2tlbmRQYXRoICsgXCJxdWVyeVwiLCB7XCJxXCI6XCJzaG93IGRhdGFzZXRzXCIsICdqc29uJzoxLCBjbGllbnQ6IHRoaXMuSVFMQ2xpZW50TmFtZSwgdXNlcm5hbWU6IElRTENsaWVudC5JUUxVc2VyTmFtZX0pO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRFbGFib3JhdGVhYmxlRmllbGRzKCkgOiBKUXVlcnlQcm9taXNlPHN0cmluZ1tdPiB7XG4gICAgICAgIHJldHVybiAkLkRlZmVycmVkKCkucmVzb2x2ZShbXSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGVsYWJvcmF0ZShmaWVsZDogc3RyaW5nLCBsaXN0OiBzdHJpbmdbXSkgOiBKUXVlcnlQcm9taXNlPHN0cmluZ1tdPiB7XG4gICAgICAgIC8vV2UgdXNlIH4gYmVjYXVzZSBpdCdzIG5vdCBVUkxFbmNvZGVkXG4gICAgICAgIHJldHVybiAkLnBvc3QodGhpcy5JUUxCYWNrZW5kUGF0aCArIFwiZWxhYm9yYXRlXCIsIHtmaWVsZDogZmllbGQsIGxpc3Q6IGxpc3Quam9pbihcIn5cIil9LCBudWxsLCAnanNvbicpO1xuICAgIH1cblxuICAgIHN0YXRpYyBxdWVyeShxOiBzdHJpbmcpIDogSlF1ZXJ5WEhSIHtcbiAgICAgICAgcmV0dXJuICQuYWpheCh7XG4gICAgICAgICAgICB1cmw6IHRoaXMuSVFMQmFja2VuZFBhdGggKyBcInF1ZXJ5XCIsXG4gICAgICAgICAgICBkYXRhOiBJUUxDbGllbnQuZ2V0UXVlcnlQYXJhbXMocSwgZmFsc2UsIGZhbHNlKSxcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCJcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3RhdGljIHF1ZXJ5V2l0aFByb2dyZXNzKHE6IHN0cmluZykgOiBFdmVudFNvdXJjZSB7XG4gICAgICAgIHZhciBldmVudFNvdXJjZSA9IG5ldyBFdmVudFNvdXJjZShJUUxDbGllbnQuZ2V0UXVlcnlIcmVmKHEsIHRydWUsIGZhbHNlKSk7XG4gICAgICAgIC8vIG1ha2Ugc3VyZSB0aGUgZXZlbnQgc291cmNlIG5ldmVyIHJlY29ubmVjdHMgb24gZXJyb3JcbiAgICAgICAgZXZlbnRTb3VyY2UuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZXZlbnRTb3VyY2UuY2xvc2UoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBldmVudFNvdXJjZTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZGVzY3JpYmUoZGF0YXNldE5hbWU6IHN0cmluZykgOiBKUXVlcnlQcm9taXNlPHtmaWVsZHM6IEZpZWxkSW5mb1tdOyBtZXRyaWNzOiBNZXRyaWNJbmZvW119PiB7XG4gICAgICAgIHJldHVybiAkLmdldEpTT04odGhpcy5JUUxCYWNrZW5kUGF0aCArIFwicXVlcnlcIiwge1wicVwiOlwiZGVzYyBcIiArIGRhdGFzZXROYW1lLCAnanNvbic6MSwgY2xpZW50OiB0aGlzLklRTENsaWVudE5hbWUsIHVzZXJuYW1lOiBJUUxDbGllbnQuSVFMVXNlck5hbWV9KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZGVzY3JpYmVGaWVsZChkYXRhc2V0TmFtZTogc3RyaW5nLCBmaWVsZE5hbWU6IHN0cmluZykgOiBKUXVlcnlQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gJC5nZXRKU09OKHRoaXMuSVFMQmFja2VuZFBhdGggKyBcInF1ZXJ5XCIsIHtcInFcIjpcImRlc2MgXCIgKyBkYXRhc2V0TmFtZSArICcuJyArIGZpZWxkTmFtZSwgJ2pzb24nOjEsIGNsaWVudDogdGhpcy5JUUxDbGllbnROYW1lLCB1c2VybmFtZTogSVFMQ2xpZW50LklRTFVzZXJOYW1lfSk7XG4gICAgfVxuXG4gICAgc3RhdGljIHNwbGl0UXVlcnkocXVlcnk6IHN0cmluZykgOiBKUXVlcnlYSFIge1xuICAgICAgICByZXR1cm4gJC5hamF4KHtcbiAgICAgICAgICAgICAgICBkYXRhVHlwZTogXCJqc29uXCIsXG4gICAgICAgICAgICAgICAgdXJsOiB0aGlzLklRTEJhY2tlbmRQYXRoICsgXCJzcGxpdFwiLFxuICAgICAgICAgICAgICAgIGRhdGE6IHtcInFcIjpxdWVyeSwgXCJ2XCI6IElRTENsaWVudC5nZXRWKCl9LFxuICAgICAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCJcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIHN0YXRpYyBwYXJzZShxdWVyeTogc3RyaW5nKSA6IEpRdWVyeVhIUiB7XG4gICAgICAgIHJldHVybiAkLmFqYXgoe1xuICAgICAgICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxuICAgICAgICAgICAgdXJsOiB0aGlzLklRTEJhY2tlbmRQYXRoICsgXCJwYXJzZVwiLFxuICAgICAgICAgICAgZGF0YToge1wicVwiOiBxdWVyeSwgXCJqc29uXCI6IDEsIFwidlwiOiBJUUxDbGllbnQuZ2V0VigpfSxcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCJcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3RhdGljIHRva2VuaXplKHF1ZXJ5OiBzdHJpbmcpIDogSlF1ZXJ5WEhSIHtcbiAgICAgICAgcmV0dXJuICQuYWpheCh7XG4gICAgICAgICAgICBkYXRhVHlwZTogXCJqc29uXCIsXG4gICAgICAgICAgICB1cmw6IHRoaXMuSVFMQmFja2VuZFBhdGggKyBcInRva2VuaXplXCIsXG4gICAgICAgICAgICBkYXRhOiB7XCJxXCI6IHF1ZXJ5LCBqc29uOiAxfSxcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCJcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGtpbGxTZXNzaW9uKHNlc3Npb25JZDogc3RyaW5nKSA6IEpRdWVyeVhIUiB7XG4gICAgICAgIGlmKElRTENsaWVudC5JUUxMYW5ndWFnZVZlcnNpb24gPT0gMikge1xuICAgICAgICAgICAgLy8gY2FuY2VsbGF0aW9uIGlzIGN1cnJlbnRseSBvbmx5IHN1cHBvcnRlZCBpbiBJUUwxXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICQuYWpheCh7XG4gICAgICAgICAgICB1cmw6IHRoaXMuSVFMQmFja2VuZFBhdGggKyBcImtpbGxzZXNzaW9uXCIsXG4gICAgICAgICAgICBkYXRhOiB7XCJzZXNzaW9uXCI6IHNlc3Npb25JZCwgXCJjbGllbnRcIjogdGhpcy5JUUxDbGllbnROYW1lLCBcInVzZXJuYW1lXCI6IElRTENsaWVudC5JUUxVc2VyTmFtZX1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgZ2V0UXVlcnlQYXJhbXMocXVlcnk6IHN0cmluZywgcHJvZ3Jlc3M6IGJvb2xlYW4sIGNzdjogYm9vbGVhbikge1xuICAgICAgICB2YXIgcGFyYW1zOiBhbnkgPSB7XG4gICAgICAgICAgICBxOiBxdWVyeSxcbiAgICAgICAgICAgIHN5bmM6ICdzeW5jJyxcbiAgICAgICAgICAgIGludGVyYWN0aXZlOiAxLFxuICAgICAgICAgICAgY2xpZW50OiB0aGlzLklRTENsaWVudE5hbWUsXG4gICAgICAgICAgICBnZXR2ZXJzaW9uOiAxLFxuICAgICAgICAgICAgdG90YWxzOiAxLFxuICAgICAgICAgICAgdXNlcm5hbWU6IElRTENsaWVudC5JUUxVc2VyTmFtZVxuICAgICAgICB9O1xuICAgICAgICBpZihwcm9ncmVzcykge1xuICAgICAgICAgICAgcGFyYW1zLnByb2dyZXNzID0gMTtcbiAgICAgICAgfVxuICAgICAgICBpZihjc3YpIHtcbiAgICAgICAgICAgIHBhcmFtcy5jc3YgPSAxO1xuICAgICAgICB9XG4gICAgICAgIHBhcmFtcy52ID0gSVFMQ2xpZW50LmdldFYoKTtcbiAgICAgICAgcmV0dXJuIHBhcmFtcztcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBnZXRWKCkge1xuICAgICAgICByZXR1cm4gSVFMQ2xpZW50LklRTExhbmd1YWdlVmVyc2lvbiA+IDEgPyBJUUxDbGllbnQuSVFMTGFuZ3VhZ2VWZXJzaW9uIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRRdWVyeUhyZWYocXVlcnk6IHN0cmluZywgcHJvZ3Jlc3M6IGJvb2xlYW4sIGNzdjogYm9vbGVhbik6IHN0cmluZyB7XG4gICAgICAgIHZhciBwYXJhbXMgPSBJUUxDbGllbnQuZ2V0UXVlcnlQYXJhbXMocXVlcnksIHByb2dyZXNzLCBjc3YpO1xuICAgICAgICByZXR1cm4gdGhpcy5JUUxCYWNrZW5kUGF0aCArIFwicXVlcnk/XCIgKyAkLnBhcmFtKHBhcmFtcyk7XG4gICAgfVxufVxuXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBpcWxjbGllbnQudHNcbiAqKi8iXSwibWFwcGluZ3MiOiJBQUFBOzs7QUFTQTtBQUFBO0FBaUhBO0FBL0dBO0FBQUE7QUFDQTtBQUNBOzs7QUFBQTtBQUtBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQWhIQTtBQUlBO0FBQ0E7QUFDQTs7Ozs7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 16:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/// <reference path=\"deps.d.ts\" />\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, _) {\n    \"use strict\";\n    var BackendInstance = (function () {\n        function BackendInstance(id, name, url, version) {\n            this.id = id;\n            this.name = name;\n            this.url = url;\n        }\n        BackendInstance.byId = function (id) {\n            var backendInstance = _.findWhere(this.INSTANCES, { id: id });\n            if (!backendInstance) {\n                backendInstance = new BackendInstance(id, id, id, 1);\n            }\n            return backendInstance;\n        };\n        BackendInstance.byURL = function (url) {\n            return _.findWhere(this.INSTANCES, { url: url });\n        };\n        return BackendInstance;\n    }());\n    BackendInstance.INSTANCES = [\n        new BackendInstance('prod', 'Prod', '/iql/', 1)\n    ];\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = BackendInstance;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vYmFja2VuZC50cz9kZjRhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJkZXBzLmQudHNcIiAvPlxuXG5pbXBvcnQgXyA9IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmFja2VuZEluc3RhbmNlIHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgaWQ6IHN0cmluZywgcHVibGljIG5hbWU6IHN0cmluZywgcHVibGljIHVybDogc3RyaW5nLCB2ZXJzaW9uOiBudW1iZXIpIHtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIElOU1RBTkNFUzogQmFja2VuZEluc3RhbmNlW10gPSBbXG4gICAgICAgIG5ldyBCYWNrZW5kSW5zdGFuY2UoJ3Byb2QnLCAnUHJvZCcsICcvaXFsLycsIDEpXG4gICAgXTtcblxuICAgIHB1YmxpYyBzdGF0aWMgYnlJZChpZDogc3RyaW5nKTogQmFja2VuZEluc3RhbmNlIHtcbiAgICAgICAgdmFyIGJhY2tlbmRJbnN0YW5jZSA9IF8uZmluZFdoZXJlKHRoaXMuSU5TVEFOQ0VTLCB7aWQ6IGlkfSk7XG4gICAgICAgIGlmKCFiYWNrZW5kSW5zdGFuY2UpIHtcbiAgICAgICAgICAgIGJhY2tlbmRJbnN0YW5jZSA9IG5ldyBCYWNrZW5kSW5zdGFuY2UoaWQsIGlkLCBpZCwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJhY2tlbmRJbnN0YW5jZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGJ5VVJMKHVybDogU3RyaW5nKTogQmFja2VuZEluc3RhbmNlIHtcbiAgICAgICAgcmV0dXJuIF8uZmluZFdoZXJlKHRoaXMuSU5TVEFOQ0VTLCB7dXJsOiB1cmx9KTtcbiAgICB9XG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBiYWNrZW5kLnRzXG4gKiovIl0sIm1hcHBpbmdzIjoiQUFBQTs7O0FBSUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBZkE7QUFDQTtBQUNBOzs7OzsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 22:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/// <reference path=\"../deps.d.ts\" />\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(1), __webpack_require__(8), __webpack_require__(2), __webpack_require__(9), __webpack_require__(187), __webpack_require__(23), __webpack_require__(193), __webpack_require__(366), __webpack_require__(368)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, $, Backbone, _, events_1, controls_1, querysetview_1, extremequeryview_1) {\n    \"use strict\";\n    /// <amd-dependency path=\"topui/topui.css\"/>\n    /// <amd-dependency path=\"topui/topui.html\"/>\n    var templateText = __webpack_require__(368);\n    var TopUI = (function (_super) {\n        __extends(TopUI, _super);\n        function TopUI() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.template = _.template(templateText);\n            _this.currentQuerySetView = null;\n            return _this;\n        }\n        TopUI.prototype.initialize = function (options) {\n            this.controlsModel = options.controlsModel;\n            this.listenTo(this.controlsModel, \"change:extremeMode\", this.onExtremeModeChange);\n        };\n        TopUI.prototype.events = function () {\n            return {};\n        };\n        TopUI.prototype.render = function () {\n            this.$el.html(this.template());\n            var controls = new controls_1.default({\n                el: this.$('.controls'),\n                querySet: this.collection,\n                model: this.controlsModel\n            });\n            controls.render();\n            this.renderQuerySet();\n            return this;\n        };\n        TopUI.prototype.renderQuerySet = function () {\n            if (this.currentQuerySetView) {\n                this.currentQuerySetView.remove();\n                // have to restore the container element removed abocve\n                this.$('.queriescontainer').append($('<div/>').addClass('queries'));\n            }\n            if (this.controlsModel.extremeMode) {\n                var extremeQueryView = new extremequeryview_1.default({\n                    el: this.$('.queries'),\n                    collection: this.collection\n                });\n                extremeQueryView.render();\n                extremeQueryView.focusDefaultPart();\n                this.currentQuerySetView = extremeQueryView;\n            }\n            else {\n                var querySetView = new querysetview_1.default({\n                    el: this.$('.queries'),\n                    collection: this.collection\n                });\n                querySetView.render();\n                querySetView.focusDefaultPart();\n                this.currentQuerySetView = querySetView;\n            }\n        };\n        TopUI.prototype.onExtremeModeChange = function () {\n            var _this = this;\n            var queries = this.collection.map(function (model) {\n                var addNewLines = _this.controlsModel.extremeMode;\n                return model.getCompleteQuery(true, true, addNewLines);\n            });\n            if (this.controlsModel.extremeMode) {\n                queries = queries.slice(0, 1); // extreme mode supports only 1 query\n            }\n            this.collection.setNewQueries(queries, this.controlsModel.extremeMode)\n                .then(function () {\n                _this.renderQuerySet();\n                events_1.default.eventBus.trigger(events_1.default.updateMacroModel, false);\n            });\n        };\n        return TopUI;\n    }(Backbone.View));\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = TopUI;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vdG9wdWkvdG9wdWkudHM/NGRhNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vZGVwcy5kLnRzXCIgLz5cblxuLy8vIDxhbWQtZGVwZW5kZW5jeSBwYXRoPVwidG9wdWkvdG9wdWkuY3NzXCIvPlxuLy8vIDxhbWQtZGVwZW5kZW5jeSBwYXRoPVwidG9wdWkvdG9wdWkuaHRtbFwiLz5cbnZhciB0ZW1wbGF0ZVRleHQgOiBzdHJpbmcgPSByZXF1aXJlKCd0b3B1aS90b3B1aS5odG1sJyk7XG5cbmltcG9ydCAkID0gcmVxdWlyZSgnanF1ZXJ5Jyk7XG5pbXBvcnQgQmFja2JvbmUgPSByZXF1aXJlKCdiYWNrYm9uZScpO1xuaW1wb3J0IF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJyk7XG5cbmltcG9ydCBFdmVudHMgZnJvbSAnZXZlbnRzJztcbmltcG9ydCBDb250cm9scyBmcm9tICdjb250cm9scy9jb250cm9scyc7XG5pbXBvcnQgQ29udHJvbHNNb2RlbCBmcm9tICdjb250cm9scy9jb250cm9sc21vZGVsJztcbmltcG9ydCBJUXVlcnlNb2RlbCBmcm9tICd0b3B1aS9pcXVlcnltb2RlbCc7XG5pbXBvcnQgUXVlcnlTZXQgZnJvbSAndG9wdWkvcXVlcnlzZXQvcXVlcnlzZXQnO1xuaW1wb3J0IFF1ZXJ5U2V0VmlldyBmcm9tICd0b3B1aS9xdWVyeXNldC9xdWVyeXNldHZpZXcnO1xuaW1wb3J0IEV4dHJlbWVRdWVyeVZpZXcgZnJvbSAndG9wdWkvZXh0cmVtZS9leHRyZW1lcXVlcnl2aWV3JztcbmltcG9ydCBFeHRyZW1lUXVlcnlNb2RlbCBmcm9tICd0b3B1aS9leHRyZW1lL2V4dHJlbWVxdWVyeW1vZGVsJztcbmltcG9ydCBRdWVyeU1vZGVsIGZyb20gJ3RvcHVpL3F1ZXJ5c2V0L3F1ZXJ5L3F1ZXJ5bW9kZWwnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUb3BVSSBleHRlbmRzIEJhY2tib25lLlZpZXc8SVF1ZXJ5TW9kZWw+IHtcbiAgICBwcml2YXRlIHRlbXBsYXRlIDogKC4uLmRhdGE6IGFueVtdKSA9PiBzdHJpbmcgPSBfLnRlbXBsYXRlKHRlbXBsYXRlVGV4dCk7XG4gICAgcHJpdmF0ZSBjb250cm9sc01vZGVsOiBhbnk7XG4gICAgY29sbGVjdGlvbjogUXVlcnlTZXQ7XG4gICAgcHJpdmF0ZSBjdXJyZW50UXVlcnlTZXRWaWV3OiBCYWNrYm9uZS5WaWV3PGFueT4gPSBudWxsO1xuXG4gICAgaW5pdGlhbGl6ZShvcHRpb25zOiBhbnkpIHtcbiAgICAgICAgdGhpcy5jb250cm9sc01vZGVsID0gb3B0aW9ucy5jb250cm9sc01vZGVsO1xuICAgICAgICB0aGlzLmxpc3RlblRvKHRoaXMuY29udHJvbHNNb2RlbCwgXCJjaGFuZ2U6ZXh0cmVtZU1vZGVcIiwgdGhpcy5vbkV4dHJlbWVNb2RlQ2hhbmdlKTtcbiAgICB9XG5cbiAgICBldmVudHMoKSB7XG4gICAgICAgIHJldHVybiA8YW55PntcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSA6IEJhY2tib25lLlZpZXc8SVF1ZXJ5TW9kZWw+IHtcbiAgICAgICAgdGhpcy4kZWwuaHRtbCh0aGlzLnRlbXBsYXRlKCkpO1xuXG4gICAgICAgIHZhciBjb250cm9scyA9IG5ldyBDb250cm9scyg8QmFja2JvbmUuVmlld09wdGlvbnM8Q29udHJvbHNNb2RlbD4+e1xuICAgICAgICAgICAgZWw6IHRoaXMuJCgnLmNvbnRyb2xzJyksXG4gICAgICAgICAgICBxdWVyeVNldDogdGhpcy5jb2xsZWN0aW9uLFxuICAgICAgICAgICAgbW9kZWw6IHRoaXMuY29udHJvbHNNb2RlbFxuICAgICAgICB9KTtcbiAgICAgICAgY29udHJvbHMucmVuZGVyKCk7XG5cbiAgICAgICAgdGhpcy5yZW5kZXJRdWVyeVNldCgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZW5kZXJRdWVyeVNldCgpIHtcbiAgICAgICAgaWYodGhpcy5jdXJyZW50UXVlcnlTZXRWaWV3KSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRRdWVyeVNldFZpZXcucmVtb3ZlKCk7XG4gICAgICAgICAgICAvLyBoYXZlIHRvIHJlc3RvcmUgdGhlIGNvbnRhaW5lciBlbGVtZW50IHJlbW92ZWQgYWJvY3ZlXG4gICAgICAgICAgICB0aGlzLiQoJy5xdWVyaWVzY29udGFpbmVyJykuYXBwZW5kKCQoJzxkaXYvPicpLmFkZENsYXNzKCdxdWVyaWVzJykpO1xuICAgICAgICB9XG4gICAgICAgIGlmKHRoaXMuY29udHJvbHNNb2RlbC5leHRyZW1lTW9kZSkge1xuICAgICAgICAgICAgdmFyIGV4dHJlbWVRdWVyeVZpZXcgPSBuZXcgRXh0cmVtZVF1ZXJ5Vmlldyh7XG4gICAgICAgICAgICAgICAgZWw6IHRoaXMuJCgnLnF1ZXJpZXMnKSxcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uOiB0aGlzLmNvbGxlY3Rpb25cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZXh0cmVtZVF1ZXJ5Vmlldy5yZW5kZXIoKTtcbiAgICAgICAgICAgIGV4dHJlbWVRdWVyeVZpZXcuZm9jdXNEZWZhdWx0UGFydCgpO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50UXVlcnlTZXRWaWV3ID0gZXh0cmVtZVF1ZXJ5VmlldztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBxdWVyeVNldFZpZXcgPSBuZXcgUXVlcnlTZXRWaWV3KHtcbiAgICAgICAgICAgICAgICBlbDogdGhpcy4kKCcucXVlcmllcycpLFxuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb246IHRoaXMuY29sbGVjdGlvblxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBxdWVyeVNldFZpZXcucmVuZGVyKCk7XG4gICAgICAgICAgICBxdWVyeVNldFZpZXcuZm9jdXNEZWZhdWx0UGFydCgpO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50UXVlcnlTZXRWaWV3ID0gcXVlcnlTZXRWaWV3O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25FeHRyZW1lTW9kZUNoYW5nZSgpIHtcbiAgICAgICAgdmFyIHF1ZXJpZXM6IHN0cmluZ1tdID0gdGhpcy5jb2xsZWN0aW9uLm1hcCgobW9kZWw6IElRdWVyeU1vZGVsKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhZGROZXdMaW5lcyA9IHRoaXMuY29udHJvbHNNb2RlbC5leHRyZW1lTW9kZTtcbiAgICAgICAgICAgIHJldHVybiBtb2RlbC5nZXRDb21wbGV0ZVF1ZXJ5KHRydWUsIHRydWUsIGFkZE5ld0xpbmVzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmKHRoaXMuY29udHJvbHNNb2RlbC5leHRyZW1lTW9kZSkge1xuICAgICAgICAgICAgcXVlcmllcyA9IHF1ZXJpZXMuc2xpY2UoMCwgMSk7ICAvLyBleHRyZW1lIG1vZGUgc3VwcG9ydHMgb25seSAxIHF1ZXJ5XG4gICAgICAgIH1cbiAgICAgICAgKDxRdWVyeVNldD50aGlzLmNvbGxlY3Rpb24pLnNldE5ld1F1ZXJpZXMocXVlcmllcywgdGhpcy5jb250cm9sc01vZGVsLmV4dHJlbWVNb2RlKVxuICAgICAgICAudGhlbigoKT0+e1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJRdWVyeVNldCgpO1xuICAgICAgICAgICAgRXZlbnRzLmV2ZW50QnVzLnRyaWdnZXIoRXZlbnRzLnVwZGF0ZU1hY3JvTW9kZWwsIGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogdG9wdWkvdG9wdWkudHNcbiAqKi8iXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQUVBO0FBQ0E7QUFDQTtBQWdCQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBR0E7O0FBaUVBO0FBL0RBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTs7Ozs7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 23:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function($) {/// <reference path=\"../../deps.d.ts\" />\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(2), __webpack_require__(8), __webpack_require__(24), __webpack_require__(9), __webpack_require__(184), __webpack_require__(186)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, _, Backbone, queryview_1, events_1) {\n    \"use strict\";\n    /// <amd-dependency path=\"topui/queryset/queryset.css\"/>\n    /// <amd-dependency path=\"topui/queryset/querysetheader.html\"/>\n    var headerTemplateText = __webpack_require__(186);\n    var QuerySetView = (function (_super) {\n        __extends(QuerySetView, _super);\n        function QuerySetView() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.subviews = [];\n            _this.headerTemplate = _.template(headerTemplateText);\n            return _this;\n        }\n        QuerySetView.prototype.events = function () {\n            return {\n                \"click .clone-arrow\": this.cloneColumn,\n                \"click .sub-real-dates\": this.onSubstituteDatesClick\n            };\n        };\n        QuerySetView.prototype.initialize = function () {\n            this.collection.on(\"reset\", this.onCollectionReset, this);\n            this.collection.on(\"add\", this.onNewModel, this);\n            this.collection.on(\"remove\", this.onRemovedModel, this);\n            this.listenTo(events_1.default.eventBus, events_1.default.distinctValueClicked, this.onDistinctValueClicked);\n            this.listenTo(events_1.default.eventBus, events_1.default.appBecameVisible, this.focusDefaultPart);\n        };\n        QuerySetView.prototype.render = function () {\n            var _this = this;\n            this.$el.html(this.headerTemplate());\n            _.each(this.collection.models, function (queryModel) {\n                _this.newQueryViewForModel(queryModel);\n            });\n            this.handleSingleRows();\n            if (new Date().getTimezoneOffset() == 360) {\n                // the computer's timezone matches the Standard Imhotep Time of UTC-6 so hide the notice in the UI\n                this.$('.timezone-notice').hide();\n            }\n            return this;\n        };\n        QuerySetView.prototype.remove = function () {\n            this.collection.unbind();\n            this.onCollectionReset();\n            _super.prototype.remove.call(this);\n            return this;\n        };\n        QuerySetView.prototype.focusDefaultPart = function () {\n            this.subviews[0].focusDefaultPart();\n        };\n        QuerySetView.prototype.handleSingleRows = function () {\n            if (this.collection.models.length == 1) {\n                this.$(\".removerowbutton:first\").hide();\n                this.$(\".clone-arrow\").hide();\n            }\n            else {\n                this.$(\".removerowbutton\").show();\n                this.$(\".clone-arrow\").show();\n            }\n        };\n        QuerySetView.prototype.onCollectionReset = function () {\n            this.subviews.forEach(function (subview) { subview.remove(); });\n            this.subviews = [];\n        };\n        QuerySetView.prototype.onNewModel = function (model) {\n            this.newQueryViewForModel(model, this.collection.indexOf(model));\n        };\n        QuerySetView.prototype.onRemovedModel = function (model, collection, options) {\n            var removedIndex = options[\"index\"];\n            this.subviews[removedIndex].remove();\n            this.subviews.splice(removedIndex, 1);\n            this.handleSingleRows();\n        };\n        QuerySetView.prototype.newQueryViewForModel = function (queryModel, index) {\n            var queryElem = $('<div class=\"query\"/>');\n            if (index === undefined) {\n                queryElem.appendTo(this.$el);\n            }\n            else if (index == 0) {\n                queryElem.insertAfter(this.$('.querysetheader'));\n            }\n            else {\n                queryElem.insertAfter(this.subviews[index - 1].$el);\n            }\n            var queryView = new queryview_1.default({ el: queryElem, model: queryModel });\n            if (index === undefined) {\n                this.subviews.push(queryView);\n            }\n            else {\n                this.subviews.splice(index, 0, queryView);\n            }\n            queryView.render();\n            this.listenTo(queryView, queryview_1.default.CLONE_ROW_EVENT, this.cloneRow);\n            this.listenTo(queryView, queryview_1.default.DELETE_ROW_EVENT, this.deleteRow);\n            this.listenTo(queryView, queryview_1.default.FOCUS_SWITCH_EVENT, this.onQueryFocusSwitch);\n            this.handleSingleRows();\n        };\n        QuerySetView.prototype.cloneRow = function (queryView) {\n            var newRowModel = queryView.model.clone();\n            var clonedViewIndex = this.subviews.indexOf(queryView);\n            this.collection.add(newRowModel, { at: clonedViewIndex + 1 });\n        };\n        QuerySetView.prototype.deleteRow = function (queryView) {\n            if (this.collection.models.length > 1) {\n                this.collection.remove(queryView.model);\n            }\n        };\n        QuerySetView.prototype.cloneSpecific = function (prop) {\n            var newValue = this.collection.at(0).get(prop);\n            this.collection.forEach(function (model, index) {\n                if (index != 0) {\n                    model.set(prop, newValue);\n                }\n            });\n        };\n        QuerySetView.prototype.cloneColumn = function (e) {\n            var name = $(e.target).data('clone');\n            switch (name) {\n                case \"timerange\":\n                    this.cloneSpecific(\"start\");\n                    this.cloneSpecific(\"end\");\n                    break;\n                case \"where\":\n                case \"groupBy\":\n                case \"select\":\n                case \"dataset\":\n                    this.cloneSpecific(name);\n                    break;\n                default:\n                    alert(\"Error cloning column\");\n                    break;\n            }\n        };\n        QuerySetView.prototype.onSubstituteDatesClick = function () {\n            events_1.default.eventBus.trigger(events_1.default.makeDatesAbsolute, false);\n        };\n        QuerySetView.prototype.onQueryFocusSwitch = function (queryView, controlIndex, isUp, cursorPosition) {\n            var eventViewIndex = this.subviews.indexOf(queryView);\n            var newViewIndex = isUp ? eventViewIndex - 1 : eventViewIndex + 1;\n            if (newViewIndex < 0 || newViewIndex >= this.subviews.length) {\n                return;\n            }\n            this.subviews[newViewIndex].focusPartByIndex(controlIndex, cursorPosition);\n        };\n        QuerySetView.prototype.onDistinctValueClicked = function (groupBys, rawField, field, processLocally) {\n            if (processLocally) {\n                this.subviews.forEach(function (queryView) {\n                    queryView.onDistinctValueClicked(groupBys, rawField, field);\n                });\n                events_1.default.eventBus.trigger(events_1.default.execute, false);\n            }\n        };\n        return QuerySetView;\n    }(Backbone.View));\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = QuerySetView;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))//# sourceMappingURL=data:application/json;base64,");

/***/ },

/***/ 24:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/// <reference path=\"../../../deps.d.ts\" />\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(8), __webpack_require__(15), __webpack_require__(14), __webpack_require__(9), __webpack_require__(27), __webpack_require__(165), __webpack_require__(166), __webpack_require__(168), __webpack_require__(25), __webpack_require__(181), __webpack_require__(183)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, _, $, Backbone, iqlclient_1, metadatacache_1, events_1, querymodel_1, caret_1, periodparser_1, autocomplete_1) {\n    \"use strict\";\n    /// <amd-dependency path=\"topui/queryset/query/querypart/querypart.css\"/> // TODO: move to querypartview\n    /// <amd-dependency path=\"topui/queryset/query/query.css\"/>\n    /// <amd-dependency path=\"topui/queryset/query/query.html\"/>\n    var templateText = __webpack_require__(183);\n    __webpack_require__(174);\n    __webpack_require__(176);\n    __webpack_require__(173);\n    var datasetElContainerSelector = \".fromdiv .select2-container\";\n    var datasetElInputSelector = \".fromdiv .select2-focusser\";\n    var lastCheckedQuery = null;\n    var syntaxCheckTimeoutId = null;\n    var yearWarningTimeoutId = null;\n    var QueryView = (function (_super) {\n        __extends(QueryView, _super);\n        function QueryView() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.lastBoxWithError = null;\n            return _this;\n        }\n        QueryView.prototype.events = function () {\n            var _this = this;\n            var callUpdateModel = function (e) { _this.updateModelFromHTMLElement(e.target); };\n            var eventMap = {\n                \"click .newrowbutton\": this.cloneRow,\n                \"click .removerowbutton\": this.deleteRow,\n                \"input .starttime\": callUpdateModel,\n                \"keyup .starttime\": callUpdateModel,\n                \"input .endtime\": callUpdateModel,\n                \"keyup .endtime\": callUpdateModel,\n                \"input .wherebox\": callUpdateModel,\n                \"keyup .wherebox\": callUpdateModel,\n                \"input .groupbybox\": callUpdateModel,\n                \"keyup .groupbybox\": callUpdateModel,\n                \"input .selectbox\": callUpdateModel,\n                \"keyup .selectbox\": callUpdateModel\n            };\n            eventMap[\"keydown \" + QueryView.controlClasses] = this.onKeyDown;\n            return eventMap;\n        };\n        QueryView.prototype.updateModelFromHTMLElement = function (el) {\n            var modelProperty = $(el).data(\"modelprop\");\n            var value;\n            if (el instanceof HTMLDivElement) {\n                value = el.textContent.replace(/\\u00a0/g, \" \");\n            }\n            else {\n                value = el.value;\n            }\n            this.model.set(modelProperty, value, { noUIRedraw: true });\n        };\n        QueryView.prototype.initialize = function () {\n            this.listenTo(this.model, \"change\", this.onModelChanged);\n            this.listenTo(this.model, \"change:start\", this.onStartDateChanged);\n            this.listenTo(events_1.default.eventBus, events_1.default.termClicked, this.onTermClicked);\n            this.listenTo(events_1.default.eventBus, events_1.default.execute, this.onQueryExecution);\n            this.listenTo(events_1.default.eventBus, events_1.default.backendChanged, this.updateDatasetList);\n            this.listenTo(events_1.default.eventBus, events_1.default.extractMacroResponse, this.updateFieldsWithMacro);\n            this.listenTo(events_1.default.eventBus, events_1.default.makeDatesAbsolute, this.makeDatesAbsolute);\n        };\n        QueryView.prototype.render = function () {\n            this.$el.html(QueryView.template({ model: this.model }));\n            this.initDatasetSelect2();\n            this.initAutocomplete();\n            this.initDatepickers();\n            return this;\n        };\n        QueryView.prototype.remove = function () {\n            this.$('.dataset').select2('destroy');\n            $(window).off(\"blur.queryview-\" + this.cid);\n            $(window).off(\"focus.queryview-\" + this.cid);\n            var textboxes = this.$(\".wherebox, .groupbybox, .selectbox\");\n            try {\n                textboxes.autocomplete(\"destroy\");\n            }\n            catch (e) { }\n            textboxes.off();\n            _super.prototype.remove.call(this);\n            return this;\n        };\n        QueryView.prototype.onDistinctValueClicked = function (groupBys, rawField, field) {\n            for (var _i = 0, groupBys_1 = groupBys; _i < groupBys_1.length; _i++) {\n                var groupBy = groupBys_1[_i];\n                this.model.appendFilter(groupBy[0], groupBy[1]);\n            }\n            this.model.removeSelect(field);\n            var fieldMetric = rawField.substring(rawField.indexOf(\"(\") + 1, rawField.length - 1);\n            this.model.setGroupBy(fieldMetric + \"[100]\");\n        };\n        QueryView.prototype.onModelChanged = function (model, options) {\n            var completeQuery = this.model.getCompleteQuery();\n            if (this.model instanceof querymodel_1.default) {\n                if (lastCheckedQuery != completeQuery) {\n                    if (syntaxCheckTimeoutId !== null) {\n                        window.clearTimeout(syntaxCheckTimeoutId);\n                    }\n                    syntaxCheckTimeoutId = window.setTimeout(_.bind(this.syntaxCheck, this), 1000);\n                }\n                if (options.noUIRedraw !== true) {\n                    this.render(); // todo: update values that changed rather than re-render. This will allow undo/redo\n                }\n            }\n            else {\n                $('.errormsg').text('').hide();\n            }\n        };\n        QueryView.prototype.updateFieldsWithMacro = function (macroName, exprToExtract) {\n            var exprRegex = new RegExp(exprToExtract.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'), \"g\");\n            if (this.model.where) {\n                this.model.where = this.model.where.replace(exprRegex, \"$\" + macroName);\n            }\n            if (this.model.groupBy) {\n                this.model.groupBy = this.model.groupBy.replace(exprRegex, \"$\" + macroName);\n            }\n            if (this.model.select) {\n                this.model.select = this.model.select.replace(exprRegex, \"$\" + macroName);\n            }\n        };\n        QueryView.prototype.onStartDateChanged = function (model) {\n            var _this = this;\n            var start = model.start;\n            // try to parse as an ISO date\n            var startDateStr = start.substr(0, 10);\n            var startDate = new Date(startDateStr);\n            var daysFromNow = 0;\n            if (!isNaN(startDate.getTime()) && start.length >= 4) {\n                daysFromNow = Math.floor((new Date().getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\n            }\n            else {\n                // try to parse relative dates.\n                var period = periodparser_1.default.parse(start);\n                if (!period) {\n                    // the provided date doesn't parse as either absolute or relative date. keep the warning state from before\n                    return;\n                }\n                daysFromNow = period.totalDays;\n            }\n            var showYearWarning = daysFromNow > 364;\n            this.toggleYearWaning(showYearWarning);\n            if (yearWarningTimeoutId !== null) {\n                window.clearTimeout(yearWarningTimeoutId);\n                yearWarningTimeoutId = null;\n            }\n            if (showYearWarning) {\n                yearWarningTimeoutId = window.setTimeout(function () { _this.toggleYearWaning(false); }, 10000);\n            }\n        };\n        QueryView.prototype.toggleYearWaning = function (show) {\n            this.$('.starttime').toggleClass(\"yearwarning\", show)\n                .attr(\"title\", show ? \"The start date is over a year in the past. Make sure that it is intended.\" : null);\n        };\n        QueryView.prototype.cloneRow = function () {\n            this.trigger(QueryView.CLONE_ROW_EVENT, this);\n        };\n        QueryView.prototype.deleteRow = function () {\n            this.trigger(QueryView.DELETE_ROW_EVENT, this);\n        };\n        QueryView.prototype.handleCopyToClipboard = function (activeElem) {\n            var tempTextbox = $('<input type=\"text\" class=\"temptextbox\" />');\n            var activeCaretPos = null;\n            tempTextbox.val(this.model.getCompleteQuery(true));\n            if (QueryView.isInputBox(activeElem)) {\n                activeCaretPos = caret_1.default.getPosition(activeElem);\n            }\n            this.$el.append(tempTextbox);\n            tempTextbox.select();\n            setTimeout(function () {\n                tempTextbox.remove();\n                activeElem.focus();\n                if (activeCaretPos !== null) {\n                    caret_1.default.setPosition(activeElem, activeCaretPos);\n                }\n            }, 100);\n        };\n        QueryView.prototype.handleCopyFromClipboard = function (activeElem) {\n            var _this = this;\n            var tempTextbox = $('<input type=\"text\" class=\"temptextbox\" />');\n            var activeCaretPos = null;\n            var selection = caret_1.default.getSelection(activeElem);\n            if (QueryView.isInputBox(activeElem)) {\n                activeCaretPos = caret_1.default.getPosition(activeElem);\n            }\n            this.$el.append(tempTextbox);\n            tempTextbox.select();\n            setTimeout(function () {\n                var pastedText = tempTextbox.val();\n                tempTextbox.remove();\n                if (pastedText.trim().toLowerCase().indexOf(\"select \") == 0 ||\n                    pastedText.trim().toLowerCase().indexOf(\"from \") == 0) {\n                    _this.model.setFromFullQuery(pastedText);\n                }\n                else {\n                    // normal text inside the box, not a full query\n                    var pastedTextLength = pastedText.length; // before we expand spaces\n                    if (QueryView.isContentEditableDiv($(activeElem))) {\n                        pastedText = QueryView.replaceSideSpacesWithNbsps(pastedText);\n                    }\n                    var oldText = QueryView.getValue(activeElem);\n                    oldText = oldText.slice(0, selection.start) + oldText.slice(selection.end); // ctrl+v should replace the selection\n                    var newText = oldText.slice(0, activeCaretPos) + pastedText + oldText.slice(activeCaretPos); // append the pasted text\n                    QueryView.setValue(activeElem, newText);\n                    $(activeElem).trigger(\"input\");\n                    activeCaretPos += pastedTextLength;\n                }\n                // TODO: refocusing doesn't work when the whole query was replaced as currently the whole view is re-rendered\n                activeElem.focus();\n                if (activeCaretPos !== null) {\n                    caret_1.default.setPosition(activeElem, activeCaretPos);\n                }\n            }, 100);\n        };\n        // contenteditable divs require the leading and trailing spaces to be represented as &nbsp;\n        QueryView.replaceSideSpacesWithNbsps = function (str) {\n            var nbsp = '\\xA0';\n            for (var i = 0; i < str.length; i++) {\n                if (str[i] === ' ') {\n                    str = str.slice(0, i) + nbsp + str.slice(i + 1, str.length);\n                }\n                else {\n                    break;\n                }\n            }\n            for (i = str.length - 1; i >= 0; i--) {\n                if (str[i] === ' ') {\n                    str = str.slice(0, i) + nbsp + str.slice(i + 1, str.length);\n                }\n                else {\n                    break;\n                }\n            }\n            return str;\n        };\n        QueryView.prototype.focusDefaultPart = function () {\n            this.$(datasetElInputSelector).focus();\n        };\n        QueryView.prototype.focusPartByIndex = function (n, cursorPosition) {\n            var controlChain = this.$(QueryView.controlClasses);\n            var $control = $(controlChain.get(n));\n            if ($control.hasClass(\"select2-container\")) {\n                $control.select2('focus');\n            }\n            else {\n                $control.focus();\n                var newTextLen = QueryView.getValue($control).length;\n                cursorPosition = Math.min(cursorPosition, newTextLen);\n                caret_1.default.setPosition($control[0], cursorPosition);\n            }\n        };\n        QueryView.prototype.getControlIndex = function (control) {\n            var controlChain = this.$(QueryView.controlClasses);\n            if ($(control).hasClass(\"select2-offscreen\")) {\n                return controlChain.index(this.$(datasetElContainerSelector));\n            }\n            else {\n                return controlChain.index(control);\n            }\n        };\n        QueryView.prototype.onKeyDown = function (e) {\n            var target = e.target;\n            var controlChain = this.$(QueryView.controlClasses);\n            var targetControlIndex;\n            var newControl;\n            if (e.keyCode == $.ui.keyCode.RIGHT && !e.metaKey && !e.altKey && !e.shiftKey &&\n                (!QueryView.isInputBox(target) || caret_1.default.getPosition(target) == QueryView.getValue(target).length)) {\n                if (target.selectionStart < target.selectionEnd) {\n                    return;\n                }\n                targetControlIndex = this.getControlIndex(target);\n                if (targetControlIndex < 0 || targetControlIndex >= controlChain.length - 1) {\n                    return;\n                }\n                newControl = controlChain.get(targetControlIndex + 1);\n                newControl.focus();\n                if (QueryView.isInputBox(newControl)) {\n                    caret_1.default.setPosition(newControl, 0);\n                }\n                e.preventDefault();\n            }\n            else if (e.keyCode == $.ui.keyCode.LEFT && !e.metaKey && !e.altKey && !e.shiftKey &&\n                (!QueryView.isInputBox(target) || caret_1.default.getPosition(target) == 0)) {\n                if (target.selectionStart < target.selectionEnd) {\n                    return;\n                }\n                targetControlIndex = this.getControlIndex(target);\n                if (targetControlIndex < 1) {\n                    return;\n                }\n                newControl = controlChain.get(targetControlIndex - 1);\n                newControl.focus();\n                if (QueryView.isInputBox(newControl)) {\n                    caret_1.default.setPosition(newControl, QueryView.getValue(newControl).length);\n                }\n                else if ($(newControl).hasClass(\"select2-container\")) {\n                    $(newControl).select2('focus');\n                }\n                e.preventDefault();\n            }\n            else if ((e.keyCode === $.ui.keyCode.UP || e.keyCode === $.ui.keyCode.DOWN) && e.ctrlKey && !e.metaKey && !e.altKey && !e.shiftKey) {\n                var isUp = e.keyCode === $.ui.keyCode.UP;\n                targetControlIndex = this.getControlIndex(target);\n                var cursorPosition = caret_1.default.getPosition(target);\n                this.trigger(QueryView.FOCUS_SWITCH_EVENT, this, targetControlIndex, isUp, cursorPosition);\n                e.preventDefault();\n                e.stopPropagation();\n            }\n            else if (e.keyCode == 67 && (e.ctrlKey == true || e.metaKey == true)\n                && !e.shiftKey && !e.altKey) {\n                var selection = caret_1.default.getSelection(target);\n                if (selection.start == selection.end) {\n                    this.handleCopyToClipboard(target);\n                }\n            }\n            else if (e.keyCode == 86 && (e.ctrlKey == true || e.metaKey == true) && !e.shiftKey && !e.altKey) {\n                this.handleCopyFromClipboard(target);\n            }\n            else if (e.keyCode == $.ui.keyCode.ENTER && !(e.ctrlKey == true || e.metaKey == true)) {\n                events_1.default.eventBus.trigger(events_1.default.execute);\n                e.preventDefault();\n            }\n            else if (e.keyCode == $.ui.keyCode.SPACE && (e.ctrlKey == true || e.metaKey == true)) {\n                var $target = $(target);\n                if ($target.data('ui-autocomplete') != undefined) {\n                    // explicit shortcut press action overrides the disabled state\n                    $target.autocomplete(\"enable\");\n                    $target.autocomplete(\"search\");\n                }\n            }\n            else if (e.keyCode == $.ui.keyCode.ESCAPE) {\n                var $target = $(target);\n                $target.autocomplete(\"disable\");\n                $target.one(\"blur\", function () {\n                    $target.autocomplete(\"enable\");\n                });\n            }\n            else if (e.keyCode == 88 && e.shiftKey && (e.ctrlKey || e.metaKey) && !e.altKey) {\n                var selection = caret_1.default.getSelection(target);\n                var $target = $(target);\n                if (selection.start != selection.end) {\n                    var highlightedText = $target.text().slice(selection.start, selection.end);\n                    events_1.default.eventBus.trigger(events_1.default.extractMacroRequest, highlightedText);\n                }\n            }\n            // TODO: Handle Home/End buttons in textareas\n            //        if(!e.shiftKey && !e.ctrlKey && !e.metaKey && QueryView.isTextBox(target)) {\n            //            if(e.keyCode == $.ui.keyCode.HOME) {\n            //                Caret.setPosition(target, 0);\n            //                e.preventDefault();\n            //            }  else if(e.keyCode == $.ui.keyCode.END) {\n            //                Caret.setPosition(target, target.value.length);\n            //                e.preventDefault();\n            //            }\n            //        }\n        };\n        QueryView.prototype.updateDatasetList = function () {\n            this.$('.dataset').select2('destroy');\n            this.initDatasetSelect2();\n        };\n        QueryView.prototype.initDatasetSelect2 = function () {\n            var _this = this;\n            metadatacache_1.default.getDatasetList().done(function (datasets) {\n                var datasetNativeBox = _this.$('.dataset');\n                var currentlySelectedDataset = datasetNativeBox.val();\n                if (_.find(datasets, function (dataset) { return dataset[\"name\"] == currentlySelectedDataset; })) {\n                    // we already have this dataset in the list, so remove the duplicate\n                    $('option', datasetNativeBox).remove();\n                }\n                $(datasets).each(function () {\n                    var description = this['description'] ? (this['name'] + ' - ' + this['description']) : this['name'];\n                    datasetNativeBox.append($('<option/>').attr('value', this.name).text(description));\n                });\n                $('option[value=\"' + currentlySelectedDataset + '\"]', datasetNativeBox).prop('selected', true);\n                datasetNativeBox.select2({\n                    openOnEnter: false,\n                    dropdownCssClass: 'dataset-dropdown',\n                    sortResults: function (results, container, query) {\n                        if (query.term) {\n                            // use the built in javascript sort function\n                            return results.sort(function (a, b) {\n                                // prefer prefix match\n                                var aIsPrefixMatch = a.text.indexOf(query.term) == 0;\n                                var bIsPrefixMatch = b.text.indexOf(query.term) == 0;\n                                if (aIsPrefixMatch && !bIsPrefixMatch) {\n                                    return -1;\n                                }\n                                else if (bIsPrefixMatch && !aIsPrefixMatch) {\n                                    return 1;\n                                }\n                                // otherwise compare alphabetically\n                                return a.text.localeCompare(b.text);\n                            });\n                        }\n                        return results;\n                    },\n                    formatSelection: function (state) {\n                        return _.escape(state.id); // the element value\n                    }\n                }).on('change', function () {\n                    _this.model.set(\"dataset\", datasetNativeBox.val(), { noUIRedraw: true });\n                });\n                if (_this.model.dataset == _this.model.defaults().dataset && datasets.length > 0) {\n                    datasetNativeBox.select2('val', datasets[0]['name']);\n                    datasetNativeBox.change();\n                }\n                // have to separately bind enter keypress for select2 or the plugin eats the event\n                _this.$(datasetElInputSelector).on(\"keydown\", function (e) {\n                    if (e.keyCode == $.ui.keyCode.ENTER) {\n                        e.preventDefault();\n                        events_1.default.eventBus.trigger(events_1.default.execute);\n                    }\n                });\n            });\n        };\n        QueryView.prototype.setTextRangeColor = function (el, color, range) {\n            if ($(el).data('ui-autocomplete') != undefined) {\n                // changing the color triggers autocomplete by default so we have to explicitly disable it for a short period\n                $(el).autocomplete(\"disable\");\n                window.setTimeout(function () {\n                    $(el).autocomplete(\"enable\");\n                }, 100);\n            }\n            // actually set the color\n            QueryView.setTextRangeColor(el, color, range);\n        };\n        QueryView.setTextRangeColor = function (el, color, range) {\n            var activeElem = document.activeElement;\n            var activeCaretPos = null;\n            var activeSelection;\n            if (QueryView.isInputBox(activeElem)) {\n                // backup cursor\n                activeCaretPos = caret_1.default.getPosition(activeElem);\n                activeSelection = caret_1.default.getSelection(activeElem);\n            }\n            caret_1.default.setSelection(el, range);\n            document.execCommand(\"foreColor\", false, color);\n            if (!activeElem || activeElem.tagName.toLowerCase() == \"body\") {\n                el.blur();\n                return;\n            }\n            activeElem.focus();\n            // restore cursor\n            if (activeCaretPos) {\n                caret_1.default.setPosition(activeElem, activeCaretPos);\n            }\n            if (activeSelection) {\n                caret_1.default.setSelection(activeElem, activeSelection);\n            }\n        };\n        QueryView.prototype.syntaxCheck = function () {\n            var _this = this;\n            lastCheckedQuery = this.model.getCompleteQuery();\n            iqlclient_1.default.parse(lastCheckedQuery)\n                .done(function (data) {\n                if (_this.lastBoxWithError) {\n                    if (QueryView.isContentEditableDiv(_this.lastBoxWithError)) {\n                        // reset the text color to black on everything\n                        var defaultTextColor = _this.lastBoxWithError.css(\"color\");\n                        _this.setTextRangeColor(_this.lastBoxWithError[0], defaultTextColor, { start: 0, end: _this.lastBoxWithError.text().length });\n                    }\n                    $(_this.lastBoxWithError).removeClass('boxerror');\n                    _this.lastBoxWithError = null;\n                }\n                if (!data['exceptionType']) {\n                    $(QueryView.controlClasses).removeClass('boxerror');\n                    $('.errormsg').text('').hide(); // TODO\n                }\n                else {\n                    var boxWithError = null;\n                    if (data['clause'] == \"select\") {\n                        boxWithError = _this.$(\".selectbox\");\n                    }\n                    else if (data['clause'] == \"from\") {\n                        boxWithError = _this.$(\".starttime, .endtime\");\n                    }\n                    else if (data['clause'] == \"where\") {\n                        boxWithError = _this.$(\".wherebox\");\n                    }\n                    else if (data['clause'] == \"groupBy\") {\n                        boxWithError = _this.$(\".groupbybox\");\n                    }\n                    _this.lastBoxWithError = boxWithError;\n                    var errorMsg = \"Query syntax error: \" + data['message'];\n                    if (data['offsetInClause'] > 0) {\n                        var errorOffset = data['offsetInClause'] - 1;\n                        if (QueryView.isContentEditableDiv(boxWithError) && errorOffset >= 0) {\n                            // highlight the error character\n                            _this.setTextRangeColor(_this.lastBoxWithError[0], \"red\", { start: errorOffset, end: errorOffset + 1 });\n                        }\n                    }\n                    $('.errormsg').text(errorMsg).show(); // TODO\n                    if (boxWithError) {\n                        boxWithError.addClass('boxerror');\n                    }\n                }\n            });\n        };\n        QueryView.updateHtml = function ($element, newHtmlContent) {\n            var selection = null;\n            if ($element.is(\":focus\")) {\n                selection = caret_1.default.getSelection($element[0]);\n            }\n            $element.text(newHtmlContent);\n            if (selection !== null) {\n                caret_1.default.setSelection($element[0], selection);\n            }\n        };\n        // handles updating the current query when a term in the results table is clicked\n        QueryView.prototype.onTermClicked = function (field, term, processLocally, $eventTarget) {\n            if (processLocally) {\n                this.model.appendFilter(field, term);\n            }\n        };\n        QueryView.prototype.initDatepickers = function () {\n            var dateOpts = {\n                showOn: \"none\",\n                dateFormat: \"yy-mm-dd\",\n                constrainInput: false,\n                maxDate: \"+1d\",\n                onSelect: function (dateStr) {\n                    $(this).trigger('input');\n                },\n                beforeShow: function (input, datepickerInstance) {\n                    var dp = $(datepickerInstance.dpDiv);\n                    var offsetX = $(input).outerWidth(false);\n                    var offsetY = -$(input).outerHeight(false);\n                    dp.css('margin-left', offsetX);\n                    dp.css('margin-top', offsetY);\n                    return null;\n                }\n            };\n            var $datetimeboxes = this.$('.datetime');\n            $datetimeboxes.datepicker(dateOpts);\n            $datetimeboxes.click(function () {\n                $(this).datepicker(\"show\");\n            });\n            $datetimeboxes.keydown(function () {\n                $datetimeboxes.datepicker(\"hide\");\n            });\n        };\n        QueryView.prototype.initAutocomplete = function () {\n            autocomplete_1.default.initAutocompleteForTextBox(this.$(\".wherebox\").get(0), \"queryview\", true, true, this.cid, this.model, false);\n            autocomplete_1.default.initAutocompleteForTextBox(this.$(\".groupbybox\").get(0), \"queryview\", true, false, this.cid, this.model, false);\n            autocomplete_1.default.initAutocompleteForTextBox(this.$(\".selectbox\").get(0), \"queryview\", false, true, this.cid, this.model, false);\n        };\n        QueryView.prototype.onQueryExecution = function (initialExec) {\n            if (initialExec) {\n                return;\n            }\n            this.hideAutocomplete();\n        };\n        QueryView.prototype.hideAutocomplete = function () {\n            this.$(\".wherebox, .groupbybox, .selectbox\").autocomplete(\"close\");\n        };\n        QueryView.prototype.makeDatesAbsolute = function () {\n            this.model.makeDatesAbsolute();\n        };\n        QueryView.getValue = function (elem) {\n            var $elem = $(elem);\n            if ($elem.is('input')) {\n                return $elem.val();\n            }\n            else if ($elem.is('div')) {\n                return $elem.text();\n            }\n        };\n        QueryView.setValue = function (elem, newVal) {\n            var $elem = $(elem);\n            if ($elem.is('input')) {\n                $elem.val(newVal);\n            }\n            else if ($elem.is('div')) {\n                QueryView.updateHtml($elem, newVal);\n            }\n        };\n        QueryView.isInputBox = function (elem) {\n            var $elem = $(elem);\n            return $elem.is('input[type=text]') || $elem.is('textarea') ||\n                QueryView.isContentEditableDiv($elem);\n        };\n        QueryView.isContentEditableDiv = function ($elem) {\n            return $elem.is('div') && $elem.prop(\"isContentEditable\");\n        };\n        return QueryView;\n    }(Backbone.View));\n    QueryView.CLONE_ROW_EVENT = \"cloneRow\";\n    QueryView.DELETE_ROW_EVENT = \"deleteRow\";\n    QueryView.FOCUS_SWITCH_EVENT = \"focusSwitch\";\n    QueryView.controlClasses = datasetElContainerSelector + ', .starttime, .endtime, .wherebox, .groupbybox, .selectbox';\n    QueryView.template = _.template(templateText);\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = QueryView;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vdG9wdWkvcXVlcnlzZXQvcXVlcnkvcXVlcnl2aWV3LnRzP2ZjMWQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uL2RlcHMuZC50c1wiIC8+XG5cbi8vLyA8YW1kLWRlcGVuZGVuY3kgcGF0aD1cInRvcHVpL3F1ZXJ5c2V0L3F1ZXJ5L3F1ZXJ5cGFydC9xdWVyeXBhcnQuY3NzXCIvPiAvLyBUT0RPOiBtb3ZlIHRvIHF1ZXJ5cGFydHZpZXdcbi8vLyA8YW1kLWRlcGVuZGVuY3kgcGF0aD1cInRvcHVpL3F1ZXJ5c2V0L3F1ZXJ5L3F1ZXJ5LmNzc1wiLz5cbi8vLyA8YW1kLWRlcGVuZGVuY3kgcGF0aD1cInRvcHVpL3F1ZXJ5c2V0L3F1ZXJ5L3F1ZXJ5Lmh0bWxcIi8+XG52YXIgdGVtcGxhdGVUZXh0IDogc3RyaW5nID0gcmVxdWlyZSgndG9wdWkvcXVlcnlzZXQvcXVlcnkvcXVlcnkuaHRtbCcpO1xuXG5pbXBvcnQgXyA9IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKTtcbmltcG9ydCAkID0gcmVxdWlyZSgnanF1ZXJ5Jyk7XG5pbXBvcnQgQmFja2JvbmUgPSByZXF1aXJlKCdiYWNrYm9uZScpO1xuXG5pbXBvcnQgSVFMQ2xpZW50IGZyb20gJ2lxbGNsaWVudCc7XG5pbXBvcnQgTWV0YWRhdGFDYWNoZSBmcm9tICdtZXRhZGF0YS9tZXRhZGF0YWNhY2hlJztcbmltcG9ydCBFdmVudHMgZnJvbSAnZXZlbnRzJztcbmltcG9ydCBRdWVyeU1vZGVsIGZyb20gJ3RvcHVpL3F1ZXJ5c2V0L3F1ZXJ5L3F1ZXJ5bW9kZWwnO1xuaW1wb3J0IENhcmV0IGZyb20gJ2NhcmV0JztcbmltcG9ydCBVdGlscyBmcm9tICd1dGlscyc7XG5pbXBvcnQgVG9rZW4gZnJvbSAndG9rZW5pemVyL3Rva2VuJztcbmltcG9ydCBUb2tlbml6ZXIgZnJvbSAndG9rZW5pemVyL3Rva2VuaXplcic7XG5pbXBvcnQgUGVyaW9kUGFyc2VyIGZyb20gJ3Rva2VuaXplci9wZXJpb2RwYXJzZXInO1xuaW1wb3J0IEF1dG9jb21wbGV0ZSBmcm9tICdhdXRvY29tcGxldGUnO1xuXG5yZXF1aXJlKFwic2VsZWN0MlwiKTtcbnJlcXVpcmUoXCJzZWxlY3QyL3NlbGVjdDIuY3NzXCIpO1xucmVxdWlyZShcImpxdWVyeXVpXCIpO1xuXG52YXIgZGF0YXNldEVsQ29udGFpbmVyU2VsZWN0b3IgPSBcIi5mcm9tZGl2IC5zZWxlY3QyLWNvbnRhaW5lclwiO1xudmFyIGRhdGFzZXRFbElucHV0U2VsZWN0b3IgPSBcIi5mcm9tZGl2IC5zZWxlY3QyLWZvY3Vzc2VyXCI7XG52YXIgbGFzdENoZWNrZWRRdWVyeTogc3RyaW5nID0gbnVsbDtcbnZhciBzeW50YXhDaGVja1RpbWVvdXRJZDogbnVtYmVyID0gbnVsbDtcbnZhciB5ZWFyV2FybmluZ1RpbWVvdXRJZDogbnVtYmVyID0gbnVsbDtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUXVlcnlWaWV3IGV4dGVuZHMgQmFja2JvbmUuVmlldzxRdWVyeU1vZGVsPiB7XG4gICAgc3RhdGljIENMT05FX1JPV19FVkVOVCA9IFwiY2xvbmVSb3dcIjtcbiAgICBzdGF0aWMgREVMRVRFX1JPV19FVkVOVCA9IFwiZGVsZXRlUm93XCI7XG4gICAgc3RhdGljIEZPQ1VTX1NXSVRDSF9FVkVOVCA9IFwiZm9jdXNTd2l0Y2hcIjtcbiAgICBwcml2YXRlIHN0YXRpYyBjb250cm9sQ2xhc3Nlczogc3RyaW5nID0gZGF0YXNldEVsQ29udGFpbmVyU2VsZWN0b3IgKyAnLCAuc3RhcnR0aW1lLCAuZW5kdGltZSwgLndoZXJlYm94LCAuZ3JvdXBieWJveCwgLnNlbGVjdGJveCc7XG5cbiAgICBwcml2YXRlIHN0YXRpYyB0ZW1wbGF0ZSA6ICguLi5kYXRhOiBhbnlbXSkgPT4gc3RyaW5nID0gXy50ZW1wbGF0ZSh0ZW1wbGF0ZVRleHQpO1xuXG4gICAgZXZlbnRzKCkge1xuICAgICAgICB2YXIgY2FsbFVwZGF0ZU1vZGVsID0gKGU6IEV2ZW50KSA9PiB7dGhpcy51cGRhdGVNb2RlbEZyb21IVE1MRWxlbWVudChlLnRhcmdldCl9O1xuICAgICAgICB2YXIgZXZlbnRNYXA6IGFueSA9IHtcbiAgICAgICAgICAgIFwiY2xpY2sgLm5ld3Jvd2J1dHRvblwiOiB0aGlzLmNsb25lUm93LFxuICAgICAgICAgICAgXCJjbGljayAucmVtb3Zlcm93YnV0dG9uXCI6IHRoaXMuZGVsZXRlUm93LFxuICAgICAgICAgICAgXCJpbnB1dCAuc3RhcnR0aW1lXCI6IGNhbGxVcGRhdGVNb2RlbCxcbiAgICAgICAgICAgIFwia2V5dXAgLnN0YXJ0dGltZVwiOiBjYWxsVXBkYXRlTW9kZWwsXG4gICAgICAgICAgICBcImlucHV0IC5lbmR0aW1lXCI6IGNhbGxVcGRhdGVNb2RlbCxcbiAgICAgICAgICAgIFwia2V5dXAgLmVuZHRpbWVcIjogY2FsbFVwZGF0ZU1vZGVsLFxuICAgICAgICAgICAgXCJpbnB1dCAud2hlcmVib3hcIjogY2FsbFVwZGF0ZU1vZGVsLFxuICAgICAgICAgICAgXCJrZXl1cCAud2hlcmVib3hcIjogY2FsbFVwZGF0ZU1vZGVsLFxuICAgICAgICAgICAgXCJpbnB1dCAuZ3JvdXBieWJveFwiOiBjYWxsVXBkYXRlTW9kZWwsXG4gICAgICAgICAgICBcImtleXVwIC5ncm91cGJ5Ym94XCI6IGNhbGxVcGRhdGVNb2RlbCxcbiAgICAgICAgICAgIFwiaW5wdXQgLnNlbGVjdGJveFwiOiBjYWxsVXBkYXRlTW9kZWwsXG4gICAgICAgICAgICBcImtleXVwIC5zZWxlY3Rib3hcIjogY2FsbFVwZGF0ZU1vZGVsXG4gICAgICAgIH07XG4gICAgICAgIGV2ZW50TWFwW1wia2V5ZG93biBcIiArIFF1ZXJ5Vmlldy5jb250cm9sQ2xhc3Nlc10gPSB0aGlzLm9uS2V5RG93bjtcbiAgICAgICAgcmV0dXJuIGV2ZW50TWFwO1xuICAgIH1cblxuICAgIHByaXZhdGUgdXBkYXRlTW9kZWxGcm9tSFRNTEVsZW1lbnQoZWw6IGFueSkge1xuICAgICAgICB2YXIgbW9kZWxQcm9wZXJ0eSA9ICQoZWwpLmRhdGEoXCJtb2RlbHByb3BcIik7XG4gICAgICAgIHZhciB2YWx1ZTogc3RyaW5nO1xuICAgICAgICBpZihlbCBpbnN0YW5jZW9mIEhUTUxEaXZFbGVtZW50KSB7XG4gICAgICAgICAgICB2YWx1ZSA9ICg8SFRNTERpdkVsZW1lbnQ+ZWwpLnRleHRDb250ZW50LnJlcGxhY2UoL1xcdTAwYTAvZywgXCIgXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsdWUgPSAoPEhUTUxJbnB1dEVsZW1lbnQ+ZWwpLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubW9kZWwuc2V0KG1vZGVsUHJvcGVydHksIHZhbHVlLCA8QmFja2JvbmUuTW9kZWxTZXRPcHRpb25zPntub1VJUmVkcmF3OiB0cnVlfSk7XG4gICAgfVxuXG4gICAgaW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgdGhpcy5saXN0ZW5Ubyh0aGlzLm1vZGVsLCBcImNoYW5nZVwiLCB0aGlzLm9uTW9kZWxDaGFuZ2VkKTtcbiAgICAgICAgdGhpcy5saXN0ZW5Ubyh0aGlzLm1vZGVsLCBcImNoYW5nZTpzdGFydFwiLCB0aGlzLm9uU3RhcnREYXRlQ2hhbmdlZCk7XG4gICAgICAgIHRoaXMubGlzdGVuVG8oRXZlbnRzLmV2ZW50QnVzLCBFdmVudHMudGVybUNsaWNrZWQsIHRoaXMub25UZXJtQ2xpY2tlZCk7XG4gICAgICAgIHRoaXMubGlzdGVuVG8oRXZlbnRzLmV2ZW50QnVzLCBFdmVudHMuZXhlY3V0ZSwgdGhpcy5vblF1ZXJ5RXhlY3V0aW9uKTtcbiAgICAgICAgdGhpcy5saXN0ZW5UbyhFdmVudHMuZXZlbnRCdXMsIEV2ZW50cy5iYWNrZW5kQ2hhbmdlZCwgdGhpcy51cGRhdGVEYXRhc2V0TGlzdCk7XG4gICAgICAgIHRoaXMubGlzdGVuVG8oRXZlbnRzLmV2ZW50QnVzLCBFdmVudHMuZXh0cmFjdE1hY3JvUmVzcG9uc2UsIHRoaXMudXBkYXRlRmllbGRzV2l0aE1hY3JvKTtcbiAgICAgICAgdGhpcy5saXN0ZW5UbyhFdmVudHMuZXZlbnRCdXMsIEV2ZW50cy5tYWtlRGF0ZXNBYnNvbHV0ZSwgdGhpcy5tYWtlRGF0ZXNBYnNvbHV0ZSk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkgOiBRdWVyeVZpZXcge1xuICAgICAgICB0aGlzLiRlbC5odG1sKFF1ZXJ5Vmlldy50ZW1wbGF0ZSh7bW9kZWw6IHRoaXMubW9kZWx9KSk7XG4gICAgICAgIHRoaXMuaW5pdERhdGFzZXRTZWxlY3QyKCk7XG4gICAgICAgIHRoaXMuaW5pdEF1dG9jb21wbGV0ZSgpO1xuICAgICAgICB0aGlzLmluaXREYXRlcGlja2VycygpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZW1vdmUoKTogUXVlcnlWaWV3IHtcbiAgICAgICAgdGhpcy4kKCcuZGF0YXNldCcpLnNlbGVjdDIoJ2Rlc3Ryb3knKTtcbiAgICAgICAgJCh3aW5kb3cpLm9mZihcImJsdXIucXVlcnl2aWV3LVwiK3RoaXMuY2lkKTtcbiAgICAgICAgJCh3aW5kb3cpLm9mZihcImZvY3VzLnF1ZXJ5dmlldy1cIit0aGlzLmNpZCk7XG4gICAgICAgIGxldCB0ZXh0Ym94ZXMgPSB0aGlzLiQoXCIud2hlcmVib3gsIC5ncm91cGJ5Ym94LCAuc2VsZWN0Ym94XCIpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGV4dGJveGVzLmF1dG9jb21wbGV0ZShcImRlc3Ryb3lcIik7XG4gICAgICAgIH0gY2F0Y2goZSkge31cbiAgICAgICAgdGV4dGJveGVzLm9mZigpO1xuICAgICAgICBzdXBlci5yZW1vdmUoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgb25EaXN0aW5jdFZhbHVlQ2xpY2tlZChncm91cEJ5czogc3RyaW5nW11bXSwgcmF3RmllbGQ6IHN0cmluZywgZmllbGQ6IHN0cmluZykge1xuICAgICAgICBmb3IgKHZhciBncm91cEJ5IG9mIGdyb3VwQnlzKXtcbiAgICAgICAgICAgIHRoaXMubW9kZWwuYXBwZW5kRmlsdGVyKGdyb3VwQnlbMF0sIGdyb3VwQnlbMV0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubW9kZWwucmVtb3ZlU2VsZWN0KGZpZWxkKTtcbiAgICAgICAgdmFyIGZpZWxkTWV0cmljID0gcmF3RmllbGQuc3Vic3RyaW5nKHJhd0ZpZWxkLmluZGV4T2YoXCIoXCIpKzEsIHJhd0ZpZWxkLmxlbmd0aC0xKTtcbiAgICAgICAgdGhpcy5tb2RlbC5zZXRHcm91cEJ5KGZpZWxkTWV0cmljK1wiWzEwMF1cIik7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbk1vZGVsQ2hhbmdlZChtb2RlbDogUXVlcnlNb2RlbCwgb3B0aW9uczogYW55KSB7XG4gICAgICAgIHZhciBjb21wbGV0ZVF1ZXJ5OiBzdHJpbmcgPSB0aGlzLm1vZGVsLmdldENvbXBsZXRlUXVlcnkoKTtcbiAgICAgICAgaWYgKHRoaXMubW9kZWwgaW5zdGFuY2VvZiBRdWVyeU1vZGVsKSB7XG4gICAgICAgICAgICBpZiAobGFzdENoZWNrZWRRdWVyeSAhPSBjb21wbGV0ZVF1ZXJ5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHN5bnRheENoZWNrVGltZW91dElkICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQoc3ludGF4Q2hlY2tUaW1lb3V0SWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzeW50YXhDaGVja1RpbWVvdXRJZCA9IHdpbmRvdy5zZXRUaW1lb3V0KF8uYmluZCh0aGlzLnN5bnRheENoZWNrLCB0aGlzKSwgMTAwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5ub1VJUmVkcmF3ICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIoKTsgIC8vIHRvZG86IHVwZGF0ZSB2YWx1ZXMgdGhhdCBjaGFuZ2VkIHJhdGhlciB0aGFuIHJlLXJlbmRlci4gVGhpcyB3aWxsIGFsbG93IHVuZG8vcmVkb1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2V7XG4gICAgICAgICAgICAkKCcuZXJyb3Jtc2cnKS50ZXh0KCcnKS5oaWRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZUZpZWxkc1dpdGhNYWNybyhtYWNyb05hbWUgOiBzdHJpbmcsIGV4cHJUb0V4dHJhY3Q6IHN0cmluZykge1xuICAgICAgICB2YXIgZXhwclJlZ2V4ID0gbmV3IFJlZ0V4cChleHByVG9FeHRyYWN0LnJlcGxhY2UoL1stXFwvXFxcXF4kKis/LigpfFtcXF17fV0vZywgJ1xcXFwkJicpLCBcImdcIik7XG4gICAgICAgIGlmKHRoaXMubW9kZWwud2hlcmUpIHtcbiAgICAgICAgICAgIHRoaXMubW9kZWwud2hlcmUgPSB0aGlzLm1vZGVsLndoZXJlLnJlcGxhY2UoZXhwclJlZ2V4LCBcIiRcIiArIG1hY3JvTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYodGhpcy5tb2RlbC5ncm91cEJ5KSB7XG4gICAgICAgICAgICB0aGlzLm1vZGVsLmdyb3VwQnkgPSB0aGlzLm1vZGVsLmdyb3VwQnkucmVwbGFjZShleHByUmVnZXgsIFwiJFwiICsgbWFjcm9OYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBpZih0aGlzLm1vZGVsLnNlbGVjdCkge1xuICAgICAgICAgICAgdGhpcy5tb2RlbC5zZWxlY3QgPSB0aGlzLm1vZGVsLnNlbGVjdC5yZXBsYWNlKGV4cHJSZWdleCwgXCIkXCIgKyBtYWNyb05hbWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvblN0YXJ0RGF0ZUNoYW5nZWQobW9kZWw6UXVlcnlNb2RlbCkge1xuICAgICAgICB2YXIgc3RhcnQgPSBtb2RlbC5zdGFydDtcbiAgICAgICAgLy8gdHJ5IHRvIHBhcnNlIGFzIGFuIElTTyBkYXRlXG4gICAgICAgIHZhciBzdGFydERhdGVTdHIgPSBzdGFydC5zdWJzdHIoMCwgMTApO1xuICAgICAgICB2YXIgc3RhcnREYXRlID0gbmV3IERhdGUoc3RhcnREYXRlU3RyKTtcblxuICAgICAgICB2YXIgZGF5c0Zyb21Ob3cgPSAwO1xuXG4gICAgICAgIGlmKCFpc05hTihzdGFydERhdGUuZ2V0VGltZSgpKSAmJiBzdGFydC5sZW5ndGggPj0gNCkge1xuICAgICAgICAgICAgZGF5c0Zyb21Ob3cgPSBNYXRoLmZsb29yKChuZXcgRGF0ZSgpLmdldFRpbWUoKS1zdGFydERhdGUuZ2V0VGltZSgpKSAvICgxMDAwKjYwKjYwKjI0KSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyB0cnkgdG8gcGFyc2UgcmVsYXRpdmUgZGF0ZXMuXG4gICAgICAgICAgICB2YXIgcGVyaW9kID0gUGVyaW9kUGFyc2VyLnBhcnNlKHN0YXJ0KTtcbiAgICAgICAgICAgIGlmKCFwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICAvLyB0aGUgcHJvdmlkZWQgZGF0ZSBkb2Vzbid0IHBhcnNlIGFzIGVpdGhlciBhYnNvbHV0ZSBvciByZWxhdGl2ZSBkYXRlLiBrZWVwIHRoZSB3YXJuaW5nIHN0YXRlIGZyb20gYmVmb3JlXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGF5c0Zyb21Ob3cgPSBwZXJpb2QudG90YWxEYXlzO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNob3dZZWFyV2FybmluZyA9IGRheXNGcm9tTm93ID4gMzY0O1xuICAgICAgICB0aGlzLnRvZ2dsZVllYXJXYW5pbmcoc2hvd1llYXJXYXJuaW5nKTtcblxuICAgICAgICBpZih5ZWFyV2FybmluZ1RpbWVvdXRJZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgd2luZG93LmNsZWFyVGltZW91dCh5ZWFyV2FybmluZ1RpbWVvdXRJZCk7XG4gICAgICAgICAgICB5ZWFyV2FybmluZ1RpbWVvdXRJZCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYoc2hvd1llYXJXYXJuaW5nKSB7ICAgLy8gc2NoZWR1bGUgdGhlIHdhcm5pbmcgdG8gZmFkZSBhZnRlciBhIHRpbWVvdXRcbiAgICAgICAgICAgIHllYXJXYXJuaW5nVGltZW91dElkID0gd2luZG93LnNldFRpbWVvdXQoKCk9PiB7dGhpcy50b2dnbGVZZWFyV2FuaW5nKGZhbHNlKX0sIDEwMDAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgdG9nZ2xlWWVhcldhbmluZyhzaG93OiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuJCgnLnN0YXJ0dGltZScpLnRvZ2dsZUNsYXNzKFwieWVhcndhcm5pbmdcIiwgc2hvdylcbiAgICAgICAgICAgIC5hdHRyKFwidGl0bGVcIiwgc2hvdyA/IFwiVGhlIHN0YXJ0IGRhdGUgaXMgb3ZlciBhIHllYXIgaW4gdGhlIHBhc3QuIE1ha2Ugc3VyZSB0aGF0IGl0IGlzIGludGVuZGVkLlwiIDogbnVsbCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjbG9uZVJvdygpIHtcbiAgICAgICAgdGhpcy50cmlnZ2VyKFF1ZXJ5Vmlldy5DTE9ORV9ST1dfRVZFTlQsIHRoaXMpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZGVsZXRlUm93KCkge1xuICAgICAgICB0aGlzLnRyaWdnZXIoUXVlcnlWaWV3LkRFTEVURV9ST1dfRVZFTlQsIHRoaXMpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlQ29weVRvQ2xpcGJvYXJkKGFjdGl2ZUVsZW06IEhUTUxJbnB1dEVsZW1lbnQpIHtcbiAgICAgICAgdmFyIHRlbXBUZXh0Ym94ID0gJCgnPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJ0ZW1wdGV4dGJveFwiIC8+Jyk7XG4gICAgICAgIHZhciBhY3RpdmVDYXJldFBvczogbnVtYmVyID0gbnVsbDtcbiAgICAgICAgdGVtcFRleHRib3gudmFsKHRoaXMubW9kZWwuZ2V0Q29tcGxldGVRdWVyeSh0cnVlKSk7XG4gICAgICAgIGlmIChRdWVyeVZpZXcuaXNJbnB1dEJveChhY3RpdmVFbGVtKSkge1xuICAgICAgICAgICAgYWN0aXZlQ2FyZXRQb3MgPSBDYXJldC5nZXRQb3NpdGlvbihhY3RpdmVFbGVtKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiRlbC5hcHBlbmQodGVtcFRleHRib3gpO1xuICAgICAgICB0ZW1wVGV4dGJveC5zZWxlY3QoKTtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0ZW1wVGV4dGJveC5yZW1vdmUoKTtcbiAgICAgICAgICAgIGFjdGl2ZUVsZW0uZm9jdXMoKTtcbiAgICAgICAgICAgIGlmIChhY3RpdmVDYXJldFBvcyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIENhcmV0LnNldFBvc2l0aW9uKGFjdGl2ZUVsZW0sIGFjdGl2ZUNhcmV0UG9zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgMTAwKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGhhbmRsZUNvcHlGcm9tQ2xpcGJvYXJkKGFjdGl2ZUVsZW06IEhUTUxJbnB1dEVsZW1lbnQpIHtcbiAgICAgICAgdmFyIHRlbXBUZXh0Ym94ID0gJCgnPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJ0ZW1wdGV4dGJveFwiIC8+Jyk7XG4gICAgICAgIHZhciBhY3RpdmVDYXJldFBvczogbnVtYmVyID0gbnVsbDtcbiAgICAgICAgdmFyIHNlbGVjdGlvbiA9IENhcmV0LmdldFNlbGVjdGlvbihhY3RpdmVFbGVtKTtcbiAgICAgICAgaWYgKFF1ZXJ5Vmlldy5pc0lucHV0Qm94KGFjdGl2ZUVsZW0pKSB7XG4gICAgICAgICAgICBhY3RpdmVDYXJldFBvcyA9IENhcmV0LmdldFBvc2l0aW9uKGFjdGl2ZUVsZW0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuJGVsLmFwcGVuZCh0ZW1wVGV4dGJveCk7XG4gICAgICAgIHRlbXBUZXh0Ym94LnNlbGVjdCgpO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHZhciBwYXN0ZWRUZXh0OiBzdHJpbmcgPSB0ZW1wVGV4dGJveC52YWwoKTtcbiAgICAgICAgICAgIHRlbXBUZXh0Ym94LnJlbW92ZSgpO1xuXG4gICAgICAgICAgICBpZiAocGFzdGVkVGV4dC50cmltKCkudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwic2VsZWN0IFwiKSA9PSAwIHx8XG4gICAgICAgICAgICAgICAgcGFzdGVkVGV4dC50cmltKCkudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwiZnJvbSBcIikgPT0gMCkgeyAgIC8vIGFzc3VtZSB1c2VyIHBhc3RlZCBhIHdob2xlIElRTCBxdWVyeSBhbmQgd2FudHMgaXQgc3BsaXQgYmV0d2VlbiBib3hlc1xuXG4gICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5zZXRGcm9tRnVsbFF1ZXJ5KHBhc3RlZFRleHQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBub3JtYWwgdGV4dCBpbnNpZGUgdGhlIGJveCwgbm90IGEgZnVsbCBxdWVyeVxuICAgICAgICAgICAgICAgIHZhciBwYXN0ZWRUZXh0TGVuZ3RoID0gcGFzdGVkVGV4dC5sZW5ndGg7ICAgLy8gYmVmb3JlIHdlIGV4cGFuZCBzcGFjZXNcbiAgICAgICAgICAgICAgICBpZihRdWVyeVZpZXcuaXNDb250ZW50RWRpdGFibGVEaXYoJChhY3RpdmVFbGVtKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFzdGVkVGV4dCA9IFF1ZXJ5Vmlldy5yZXBsYWNlU2lkZVNwYWNlc1dpdGhOYnNwcyhwYXN0ZWRUZXh0KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgb2xkVGV4dCA9IFF1ZXJ5Vmlldy5nZXRWYWx1ZShhY3RpdmVFbGVtKTtcbiAgICAgICAgICAgICAgICBvbGRUZXh0ID0gb2xkVGV4dC5zbGljZSgwLCBzZWxlY3Rpb24uc3RhcnQpICsgb2xkVGV4dC5zbGljZShzZWxlY3Rpb24uZW5kKTsgICAvLyBjdHJsK3Ygc2hvdWxkIHJlcGxhY2UgdGhlIHNlbGVjdGlvblxuICAgICAgICAgICAgICAgIHZhciBuZXdUZXh0ID0gb2xkVGV4dC5zbGljZSgwLCBhY3RpdmVDYXJldFBvcykgKyBwYXN0ZWRUZXh0ICsgb2xkVGV4dC5zbGljZShhY3RpdmVDYXJldFBvcyk7ICAgIC8vIGFwcGVuZCB0aGUgcGFzdGVkIHRleHRcbiAgICAgICAgICAgICAgICBRdWVyeVZpZXcuc2V0VmFsdWUoYWN0aXZlRWxlbSwgbmV3VGV4dCk7XG4gICAgICAgICAgICAgICAgJChhY3RpdmVFbGVtKS50cmlnZ2VyKFwiaW5wdXRcIik7XG4gICAgICAgICAgICAgICAgYWN0aXZlQ2FyZXRQb3MgKz0gcGFzdGVkVGV4dExlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFRPRE86IHJlZm9jdXNpbmcgZG9lc24ndCB3b3JrIHdoZW4gdGhlIHdob2xlIHF1ZXJ5IHdhcyByZXBsYWNlZCBhcyBjdXJyZW50bHkgdGhlIHdob2xlIHZpZXcgaXMgcmUtcmVuZGVyZWRcbiAgICAgICAgICAgIGFjdGl2ZUVsZW0uZm9jdXMoKTtcbiAgICAgICAgICAgIGlmIChhY3RpdmVDYXJldFBvcyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIENhcmV0LnNldFBvc2l0aW9uKGFjdGl2ZUVsZW0sIGFjdGl2ZUNhcmV0UG9zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgMTAwKTtcbiAgICB9XG5cbiAgICAvLyBjb250ZW50ZWRpdGFibGUgZGl2cyByZXF1aXJlIHRoZSBsZWFkaW5nIGFuZCB0cmFpbGluZyBzcGFjZXMgdG8gYmUgcmVwcmVzZW50ZWQgYXMgJm5ic3A7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVwbGFjZVNpZGVTcGFjZXNXaXRoTmJzcHMoc3RyOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgbmJzcCA9ICdcXHhBMCc7XG4gICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmKHN0cltpXSA9PT0gJyAnKSB7XG4gICAgICAgICAgICAgICAgc3RyID0gc3RyLnNsaWNlKDAsIGkpICsgbmJzcCArIHN0ci5zbGljZShpICsgMSwgc3RyLmxlbmd0aCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yKGkgPSBzdHIubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGlmKHN0cltpXSA9PT0gJyAnKSB7XG4gICAgICAgICAgICAgICAgc3RyID0gc3RyLnNsaWNlKDAsIGkpICsgbmJzcCArIHN0ci5zbGljZShpICsgMSwgc3RyLmxlbmd0aCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuXG4gICAgcHVibGljIGZvY3VzRGVmYXVsdFBhcnQoKSB7XG4gICAgICAgIHRoaXMuJChkYXRhc2V0RWxJbnB1dFNlbGVjdG9yKS5mb2N1cygpO1xuICAgIH1cblxuICAgIHB1YmxpYyBmb2N1c1BhcnRCeUluZGV4KG46IG51bWJlciwgY3Vyc29yUG9zaXRpb246IG51bWJlcikge1xuICAgICAgICB2YXIgY29udHJvbENoYWluOiBKUXVlcnkgPSB0aGlzLiQoUXVlcnlWaWV3LmNvbnRyb2xDbGFzc2VzKTtcbiAgICAgICAgdmFyICRjb250cm9sID0gJChjb250cm9sQ2hhaW4uZ2V0KG4pKTtcbiAgICAgICAgaWYoJGNvbnRyb2wuaGFzQ2xhc3MoXCJzZWxlY3QyLWNvbnRhaW5lclwiKSkge1xuICAgICAgICAgICAgJGNvbnRyb2wuc2VsZWN0MignZm9jdXMnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICRjb250cm9sLmZvY3VzKCk7XG4gICAgICAgICAgICB2YXIgbmV3VGV4dExlbiA9IFF1ZXJ5Vmlldy5nZXRWYWx1ZSgkY29udHJvbCkubGVuZ3RoXG4gICAgICAgICAgICBjdXJzb3JQb3NpdGlvbiA9IE1hdGgubWluKGN1cnNvclBvc2l0aW9uLCBuZXdUZXh0TGVuKTtcbiAgICAgICAgICAgIENhcmV0LnNldFBvc2l0aW9uKCRjb250cm9sWzBdLCBjdXJzb3JQb3NpdGlvbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGdldENvbnRyb2xJbmRleChjb250cm9sOiBhbnkpIHtcbiAgICAgICAgdmFyIGNvbnRyb2xDaGFpbiA9IHRoaXMuJChRdWVyeVZpZXcuY29udHJvbENsYXNzZXMpO1xuICAgICAgICBpZigkKGNvbnRyb2wpLmhhc0NsYXNzKFwic2VsZWN0Mi1vZmZzY3JlZW5cIikpIHtcbiAgICAgICAgICAgIHJldHVybiBjb250cm9sQ2hhaW4uaW5kZXgodGhpcy4kKGRhdGFzZXRFbENvbnRhaW5lclNlbGVjdG9yKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gY29udHJvbENoYWluLmluZGV4KGNvbnRyb2wpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbktleURvd24oZTogS2V5Ym9hcmRFdmVudCkge1xuICAgICAgICB2YXIgdGFyZ2V0OiBIVE1MSW5wdXRFbGVtZW50ID0gPEhUTUxJbnB1dEVsZW1lbnQ+ZS50YXJnZXQ7XG4gICAgICAgIHZhciBjb250cm9sQ2hhaW4gPSB0aGlzLiQoUXVlcnlWaWV3LmNvbnRyb2xDbGFzc2VzKTtcblxuICAgICAgICB2YXIgdGFyZ2V0Q29udHJvbEluZGV4OiBudW1iZXI7XG4gICAgICAgIHZhciBuZXdDb250cm9sOiBIVE1MSW5wdXRFbGVtZW50O1xuICAgICAgICBpZihlLmtleUNvZGUgPT0gJC51aS5rZXlDb2RlLlJJR0hUICYmICFlLm1ldGFLZXkgJiYgIWUuYWx0S2V5ICYmICFlLnNoaWZ0S2V5ICYmXG4gICAgICAgICAgICAgICAgKCFRdWVyeVZpZXcuaXNJbnB1dEJveCh0YXJnZXQpIHx8IENhcmV0LmdldFBvc2l0aW9uKHRhcmdldCkgPT0gUXVlcnlWaWV3LmdldFZhbHVlKHRhcmdldCkubGVuZ3RoKSkge1xuXG4gICAgICAgICAgICBpZih0YXJnZXQuc2VsZWN0aW9uU3RhcnQgPCB0YXJnZXQuc2VsZWN0aW9uRW5kKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGFyZ2V0Q29udHJvbEluZGV4ID0gdGhpcy5nZXRDb250cm9sSW5kZXgodGFyZ2V0KTtcbiAgICAgICAgICAgIGlmKHRhcmdldENvbnRyb2xJbmRleCA8IDAgIHx8IHRhcmdldENvbnRyb2xJbmRleCA+PSBjb250cm9sQ2hhaW4ubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5ld0NvbnRyb2wgPSA8SFRNTElucHV0RWxlbWVudD5jb250cm9sQ2hhaW4uZ2V0KHRhcmdldENvbnRyb2xJbmRleCArIDEpO1xuICAgICAgICAgICAgbmV3Q29udHJvbC5mb2N1cygpO1xuICAgICAgICAgICAgaWYoUXVlcnlWaWV3LmlzSW5wdXRCb3gobmV3Q29udHJvbCkpIHtcbiAgICAgICAgICAgICAgICBDYXJldC5zZXRQb3NpdGlvbihuZXdDb250cm9sLCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSBlbHNlIGlmIChlLmtleUNvZGUgPT0gJC51aS5rZXlDb2RlLkxFRlQgJiYgIWUubWV0YUtleSAmJiAhZS5hbHRLZXkgJiYgIWUuc2hpZnRLZXkgJiZcbiAgICAgICAgICAgICAgICAoIVF1ZXJ5Vmlldy5pc0lucHV0Qm94KHRhcmdldCkgfHwgQ2FyZXQuZ2V0UG9zaXRpb24odGFyZ2V0KSA9PSAwKSkge1xuXG4gICAgICAgICAgICBpZiAodGFyZ2V0LnNlbGVjdGlvblN0YXJ0IDwgdGFyZ2V0LnNlbGVjdGlvbkVuZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGFyZ2V0Q29udHJvbEluZGV4ID0gdGhpcy5nZXRDb250cm9sSW5kZXgodGFyZ2V0KTtcbiAgICAgICAgICAgIGlmICh0YXJnZXRDb250cm9sSW5kZXggPCAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV3Q29udHJvbCA9IDxIVE1MSW5wdXRFbGVtZW50PmNvbnRyb2xDaGFpbi5nZXQodGFyZ2V0Q29udHJvbEluZGV4IC0gMSk7XG4gICAgICAgICAgICBuZXdDb250cm9sLmZvY3VzKCk7XG4gICAgICAgICAgICBpZiAoUXVlcnlWaWV3LmlzSW5wdXRCb3gobmV3Q29udHJvbCkpIHtcbiAgICAgICAgICAgICAgICBDYXJldC5zZXRQb3NpdGlvbihuZXdDb250cm9sLCBRdWVyeVZpZXcuZ2V0VmFsdWUobmV3Q29udHJvbCkubGVuZ3RoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoJChuZXdDb250cm9sKS5oYXNDbGFzcyhcInNlbGVjdDItY29udGFpbmVyXCIpKSB7XG4gICAgICAgICAgICAgICAgJChuZXdDb250cm9sKS5zZWxlY3QyKCdmb2N1cycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9IGVsc2UgaWYgKChlLmtleUNvZGUgPT09ICQudWkua2V5Q29kZS5VUCB8fCBlLmtleUNvZGUgPT09ICQudWkua2V5Q29kZS5ET1dOKSAmJiBlLmN0cmxLZXkgJiYgIWUubWV0YUtleSAmJiAhZS5hbHRLZXkgJiYgIWUuc2hpZnRLZXkpIHtcbiAgICAgICAgICAgIHZhciBpc1VwOiBib29sZWFuID0gZS5rZXlDb2RlID09PSAkLnVpLmtleUNvZGUuVVA7XG4gICAgICAgICAgICB0YXJnZXRDb250cm9sSW5kZXggPSB0aGlzLmdldENvbnRyb2xJbmRleCh0YXJnZXQpO1xuICAgICAgICAgICAgdmFyIGN1cnNvclBvc2l0aW9uID0gQ2FyZXQuZ2V0UG9zaXRpb24odGFyZ2V0KTtcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlcihRdWVyeVZpZXcuRk9DVVNfU1dJVENIX0VWRU5ULCB0aGlzLCB0YXJnZXRDb250cm9sSW5kZXgsIGlzVXAsIGN1cnNvclBvc2l0aW9uKTtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH0gZWxzZSBpZihlLmtleUNvZGUgPT0gNjcgJiYgKGUuY3RybEtleSA9PSB0cnVlIHx8IGUubWV0YUtleSA9PSB0cnVlKVxuICAgICAgICAgICAgICAgICYmICFlLnNoaWZ0S2V5ICYmICFlLmFsdEtleSkgey8vIGN0cmwgKyBjXG5cbiAgICAgICAgICAgIHZhciBzZWxlY3Rpb24gPSBDYXJldC5nZXRTZWxlY3Rpb24odGFyZ2V0KTtcbiAgICAgICAgICAgIGlmKHNlbGVjdGlvbi5zdGFydCA9PSBzZWxlY3Rpb24uZW5kKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVDb3B5VG9DbGlwYm9hcmQodGFyZ2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmKGUua2V5Q29kZSA9PSA4NiAmJiAoZS5jdHJsS2V5ID09IHRydWUgfHwgZS5tZXRhS2V5ID09IHRydWUpICYmICFlLnNoaWZ0S2V5ICYmICFlLmFsdEtleSApIHsvLyBjdHJsICsgdlxuICAgICAgICAgICAgdGhpcy5oYW5kbGVDb3B5RnJvbUNsaXBib2FyZCh0YXJnZXQpO1xuICAgICAgICB9IGVsc2UgaWYoZS5rZXlDb2RlID09ICQudWkua2V5Q29kZS5FTlRFUiAmJiAhKGUuY3RybEtleSA9PSB0cnVlIHx8IGUubWV0YUtleSA9PSB0cnVlKSkge1xuICAgICAgICAgICAgRXZlbnRzLmV2ZW50QnVzLnRyaWdnZXIoRXZlbnRzLmV4ZWN1dGUpO1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9IGVsc2UgaWYoZS5rZXlDb2RlID09ICQudWkua2V5Q29kZS5TUEFDRSAmJiAoZS5jdHJsS2V5ID09IHRydWUgfHwgZS5tZXRhS2V5ID09IHRydWUpKSB7XG4gICAgICAgICAgICB2YXIgJHRhcmdldCA9ICQodGFyZ2V0KTtcbiAgICAgICAgICAgIGlmKCR0YXJnZXQuZGF0YSgndWktYXV0b2NvbXBsZXRlJykgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgLy8gZXhwbGljaXQgc2hvcnRjdXQgcHJlc3MgYWN0aW9uIG92ZXJyaWRlcyB0aGUgZGlzYWJsZWQgc3RhdGVcbiAgICAgICAgICAgICAgICAkdGFyZ2V0LmF1dG9jb21wbGV0ZShcImVuYWJsZVwiKTtcbiAgICAgICAgICAgICAgICAkdGFyZ2V0LmF1dG9jb21wbGV0ZShcInNlYXJjaFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmKGUua2V5Q29kZSA9PSAkLnVpLmtleUNvZGUuRVNDQVBFKSB7XG4gICAgICAgICAgICB2YXIgJHRhcmdldCA9ICQodGFyZ2V0KTtcbiAgICAgICAgICAgICR0YXJnZXQuYXV0b2NvbXBsZXRlKFwiZGlzYWJsZVwiKTtcbiAgICAgICAgICAgICR0YXJnZXQub25lKFwiYmx1clwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgJHRhcmdldC5hdXRvY29tcGxldGUoXCJlbmFibGVcIik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmKGUua2V5Q29kZSA9PSA4OCAmJiBlLnNoaWZ0S2V5ICYmIChlLmN0cmxLZXkgfHwgZS5tZXRhS2V5KSAmJiAhZS5hbHRLZXkpIHsgLy8gY3RybCArIHNoaWZ0ICsgeFxuICAgICAgICAgICAgdmFyIHNlbGVjdGlvbiA9IENhcmV0LmdldFNlbGVjdGlvbih0YXJnZXQpO1xuICAgICAgICAgICAgdmFyICR0YXJnZXQgPSAkKHRhcmdldCk7XG4gICAgICAgICAgICBpZihzZWxlY3Rpb24uc3RhcnQgIT0gc2VsZWN0aW9uLmVuZCkge1xuICAgICAgICAgICAgICAgIHZhciBoaWdobGlnaHRlZFRleHQgPSAkdGFyZ2V0LnRleHQoKS5zbGljZShzZWxlY3Rpb24uc3RhcnQsIHNlbGVjdGlvbi5lbmQpO1xuICAgICAgICAgICAgICAgIEV2ZW50cy5ldmVudEJ1cy50cmlnZ2VyKEV2ZW50cy5leHRyYWN0TWFjcm9SZXF1ZXN0LCBoaWdobGlnaHRlZFRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gVE9ETzogSGFuZGxlIEhvbWUvRW5kIGJ1dHRvbnMgaW4gdGV4dGFyZWFzXG4vLyAgICAgICAgaWYoIWUuc2hpZnRLZXkgJiYgIWUuY3RybEtleSAmJiAhZS5tZXRhS2V5ICYmIFF1ZXJ5Vmlldy5pc1RleHRCb3godGFyZ2V0KSkge1xuLy8gICAgICAgICAgICBpZihlLmtleUNvZGUgPT0gJC51aS5rZXlDb2RlLkhPTUUpIHtcbi8vICAgICAgICAgICAgICAgIENhcmV0LnNldFBvc2l0aW9uKHRhcmdldCwgMCk7XG4vLyAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4vLyAgICAgICAgICAgIH0gIGVsc2UgaWYoZS5rZXlDb2RlID09ICQudWkua2V5Q29kZS5FTkQpIHtcbi8vICAgICAgICAgICAgICAgIENhcmV0LnNldFBvc2l0aW9uKHRhcmdldCwgdGFyZ2V0LnZhbHVlLmxlbmd0aCk7XG4vLyAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4vLyAgICAgICAgICAgIH1cbi8vICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVEYXRhc2V0TGlzdCgpIHtcbiAgICAgICAgdGhpcy4kKCcuZGF0YXNldCcpLnNlbGVjdDIoJ2Rlc3Ryb3knKTtcbiAgICAgICAgdGhpcy5pbml0RGF0YXNldFNlbGVjdDIoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGluaXREYXRhc2V0U2VsZWN0MigpIHtcbiAgICAgICAgTWV0YWRhdGFDYWNoZS5nZXREYXRhc2V0TGlzdCgpLmRvbmUoXG4gICAgICAgICAgICAoZGF0YXNldHM6IGFueVtdKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGFzZXROYXRpdmVCb3ggPSB0aGlzLiQoJy5kYXRhc2V0Jyk7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRseVNlbGVjdGVkRGF0YXNldCA9IGRhdGFzZXROYXRpdmVCb3gudmFsKCk7XG4gICAgICAgICAgICAgICAgaWYoXy5maW5kKGRhdGFzZXRzLCBmdW5jdGlvbihkYXRhc2V0OiBhbnkpIHtyZXR1cm4gZGF0YXNldFtcIm5hbWVcIl0gPT0gY3VycmVudGx5U2VsZWN0ZWREYXRhc2V0O30pKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHdlIGFscmVhZHkgaGF2ZSB0aGlzIGRhdGFzZXQgaW4gdGhlIGxpc3QsIHNvIHJlbW92ZSB0aGUgZHVwbGljYXRlXG4gICAgICAgICAgICAgICAgICAgICQoJ29wdGlvbicsIGRhdGFzZXROYXRpdmVCb3gpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAkKGRhdGFzZXRzKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGVzY3JpcHRpb24gPSB0aGlzWydkZXNjcmlwdGlvbiddID8gKHRoaXNbJ25hbWUnXSArICcgLSAnICsgdGhpc1snZGVzY3JpcHRpb24nXSkgOiB0aGlzWyduYW1lJ107XG4gICAgICAgICAgICAgICAgICAgIGRhdGFzZXROYXRpdmVCb3guYXBwZW5kKCQoJzxvcHRpb24vPicpLmF0dHIoJ3ZhbHVlJywgdGhpcy5uYW1lKS50ZXh0KGRlc2NyaXB0aW9uKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgJCgnb3B0aW9uW3ZhbHVlPVwiJyArIGN1cnJlbnRseVNlbGVjdGVkRGF0YXNldCArICdcIl0nLCBkYXRhc2V0TmF0aXZlQm94KS5wcm9wKCdzZWxlY3RlZCcsIHRydWUpO1xuICAgICAgICAgICAgICAgIGRhdGFzZXROYXRpdmVCb3guc2VsZWN0Mig8U2VsZWN0Mk9wdGlvbnM+e1xuICAgICAgICAgICAgICAgICAgICBvcGVuT25FbnRlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duQ3NzQ2xhc3M6ICdkYXRhc2V0LWRyb3Bkb3duJyxcbiAgICAgICAgICAgICAgICAgICAgc29ydFJlc3VsdHM6IGZ1bmN0aW9uKHJlc3VsdHM6IGFueVtdLCBjb250YWluZXI6IGFueSwgcXVlcnk6IGFueSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHF1ZXJ5LnRlcm0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB1c2UgdGhlIGJ1aWx0IGluIGphdmFzY3JpcHQgc29ydCBmdW5jdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRzLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBwcmVmZXIgcHJlZml4IG1hdGNoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhSXNQcmVmaXhNYXRjaCA9IGEudGV4dC5pbmRleE9mKHF1ZXJ5LnRlcm0pID09IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiSXNQcmVmaXhNYXRjaCA9IGIudGV4dC5pbmRleE9mKHF1ZXJ5LnRlcm0pID09IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGFJc1ByZWZpeE1hdGNoICYmICFiSXNQcmVmaXhNYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYoYklzUHJlZml4TWF0Y2ggJiYgIWFJc1ByZWZpeE1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG90aGVyd2lzZSBjb21wYXJlIGFscGhhYmV0aWNhbGx5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhLnRleHQubG9jYWxlQ29tcGFyZShiLnRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdFNlbGVjdGlvbjogZnVuY3Rpb24oc3RhdGU6IGFueSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF8uZXNjYXBlKHN0YXRlLmlkKTsgICAgLy8gdGhlIGVsZW1lbnQgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pLm9uKCdjaGFuZ2UnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW9kZWwuc2V0KFwiZGF0YXNldFwiLCBkYXRhc2V0TmF0aXZlQm94LnZhbCgpLCA8QmFja2JvbmUuTW9kZWxTZXRPcHRpb25zPntub1VJUmVkcmF3OiB0cnVlfSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZih0aGlzLm1vZGVsLmRhdGFzZXQgPT0gdGhpcy5tb2RlbC5kZWZhdWx0cygpLmRhdGFzZXQgJiYgZGF0YXNldHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhc2V0TmF0aXZlQm94LnNlbGVjdDIoJ3ZhbCcsIGRhdGFzZXRzWzBdWyduYW1lJ10pO1xuICAgICAgICAgICAgICAgICAgICBkYXRhc2V0TmF0aXZlQm94LmNoYW5nZSgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGhhdmUgdG8gc2VwYXJhdGVseSBiaW5kIGVudGVyIGtleXByZXNzIGZvciBzZWxlY3QyIG9yIHRoZSBwbHVnaW4gZWF0cyB0aGUgZXZlbnRcbiAgICAgICAgICAgICAgICB0aGlzLiQoZGF0YXNldEVsSW5wdXRTZWxlY3Rvcikub24oXCJrZXlkb3duXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYoZS5rZXlDb2RlID09ICQudWkua2V5Q29kZS5FTlRFUikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgRXZlbnRzLmV2ZW50QnVzLnRyaWdnZXIoRXZlbnRzLmV4ZWN1dGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBsYXN0Qm94V2l0aEVycm9yOiBKUXVlcnkgPSBudWxsO1xuXG4gICAgcHJpdmF0ZSBzZXRUZXh0UmFuZ2VDb2xvcihlbDogSFRNTEVsZW1lbnQsIGNvbG9yOiBzdHJpbmcsIHJhbmdlOiB7c3RhcnQ6IG51bWJlcjsgZW5kOiBudW1iZXJ9KTogdm9pZCB7XG4gICAgICAgIGlmKCQoZWwpLmRhdGEoJ3VpLWF1dG9jb21wbGV0ZScpICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gY2hhbmdpbmcgdGhlIGNvbG9yIHRyaWdnZXJzIGF1dG9jb21wbGV0ZSBieSBkZWZhdWx0IHNvIHdlIGhhdmUgdG8gZXhwbGljaXRseSBkaXNhYmxlIGl0IGZvciBhIHNob3J0IHBlcmlvZFxuICAgICAgICAgICAgJChlbCkuYXV0b2NvbXBsZXRlKFwiZGlzYWJsZVwiKTtcbiAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAkKGVsKS5hdXRvY29tcGxldGUoXCJlbmFibGVcIik7XG4gICAgICAgICAgICB9LCAxMDApO1xuICAgICAgICB9XG4gICAgICAgIC8vIGFjdHVhbGx5IHNldCB0aGUgY29sb3JcbiAgICAgICAgUXVlcnlWaWV3LnNldFRleHRSYW5nZUNvbG9yKGVsLCBjb2xvciwgcmFuZ2UpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIHNldFRleHRSYW5nZUNvbG9yKGVsOiBIVE1MRWxlbWVudCwgY29sb3I6IHN0cmluZywgcmFuZ2U6IHtzdGFydDogbnVtYmVyOyBlbmQ6IG51bWJlcn0pOiB2b2lkIHtcbiAgICAgICAgdmFyIGFjdGl2ZUVsZW06IEhUTUxFbGVtZW50ID0gPEhUTUxFbGVtZW50PmRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gICAgICAgIHZhciBhY3RpdmVDYXJldFBvczogbnVtYmVyID0gbnVsbDtcbiAgICAgICAgdmFyIGFjdGl2ZVNlbGVjdGlvbjoge3N0YXJ0OiBudW1iZXI7IGVuZDogbnVtYmVyfTtcbiAgICAgICAgaWYgKFF1ZXJ5Vmlldy5pc0lucHV0Qm94KGFjdGl2ZUVsZW0pKSB7XG4gICAgICAgICAgICAvLyBiYWNrdXAgY3Vyc29yXG4gICAgICAgICAgICBhY3RpdmVDYXJldFBvcyA9IENhcmV0LmdldFBvc2l0aW9uKGFjdGl2ZUVsZW0pO1xuICAgICAgICAgICAgYWN0aXZlU2VsZWN0aW9uID0gQ2FyZXQuZ2V0U2VsZWN0aW9uKGFjdGl2ZUVsZW0pO1xuICAgICAgICB9XG4gICAgICAgIENhcmV0LnNldFNlbGVjdGlvbihlbCwgcmFuZ2UpO1xuICAgICAgICBkb2N1bWVudC5leGVjQ29tbWFuZChcImZvcmVDb2xvclwiLCBmYWxzZSwgY29sb3IpO1xuICAgICAgICBpZighYWN0aXZlRWxlbSB8fCBhY3RpdmVFbGVtLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PSBcImJvZHlcIikge1xuICAgICAgICAgICAgZWwuYmx1cigpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGFjdGl2ZUVsZW0uZm9jdXMoKTtcbiAgICAgICAgLy8gcmVzdG9yZSBjdXJzb3JcbiAgICAgICAgaWYgKGFjdGl2ZUNhcmV0UG9zKSB7XG4gICAgICAgICAgICBDYXJldC5zZXRQb3NpdGlvbihhY3RpdmVFbGVtLCBhY3RpdmVDYXJldFBvcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYoYWN0aXZlU2VsZWN0aW9uKSB7XG4gICAgICAgICAgICBDYXJldC5zZXRTZWxlY3Rpb24oYWN0aXZlRWxlbSwgYWN0aXZlU2VsZWN0aW9uKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgc3ludGF4Q2hlY2soKSB7XG4gICAgICAgIGxhc3RDaGVja2VkUXVlcnkgPSB0aGlzLm1vZGVsLmdldENvbXBsZXRlUXVlcnkoKTtcbiAgICAgICAgSVFMQ2xpZW50LnBhcnNlKGxhc3RDaGVja2VkUXVlcnkpXG4gICAgICAgICAgICAuZG9uZSgoZGF0YTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYodGhpcy5sYXN0Qm94V2l0aEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmKFF1ZXJ5Vmlldy5pc0NvbnRlbnRFZGl0YWJsZURpdih0aGlzLmxhc3RCb3hXaXRoRXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyByZXNldCB0aGUgdGV4dCBjb2xvciB0byBibGFjayBvbiBldmVyeXRoaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdFRleHRDb2xvciA9IHRoaXMubGFzdEJveFdpdGhFcnJvci5jc3MoXCJjb2xvclwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0VGV4dFJhbmdlQ29sb3IodGhpcy5sYXN0Qm94V2l0aEVycm9yWzBdLCBkZWZhdWx0VGV4dENvbG9yLCB7c3RhcnQ6MCwgZW5kOiB0aGlzLmxhc3RCb3hXaXRoRXJyb3IudGV4dCgpLmxlbmd0aH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICQodGhpcy5sYXN0Qm94V2l0aEVycm9yKS5yZW1vdmVDbGFzcygnYm94ZXJyb3InKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sYXN0Qm94V2l0aEVycm9yID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoIWRhdGFbJ2V4Y2VwdGlvblR5cGUnXSkge1xuICAgICAgICAgICAgICAgICAgICAkKFF1ZXJ5Vmlldy5jb250cm9sQ2xhc3NlcykucmVtb3ZlQ2xhc3MoJ2JveGVycm9yJyk7XG4gICAgICAgICAgICAgICAgICAgICQoJy5lcnJvcm1zZycpLnRleHQoJycpLmhpZGUoKTsgLy8gVE9ET1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBib3hXaXRoRXJyb3I6IEpRdWVyeSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGlmKGRhdGFbJ2NsYXVzZSddID09IFwic2VsZWN0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveFdpdGhFcnJvciA9IHRoaXMuJChcIi5zZWxlY3Rib3hcIik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZihkYXRhWydjbGF1c2UnXSA9PSBcImZyb21cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYm94V2l0aEVycm9yID0gdGhpcy4kKFwiLnN0YXJ0dGltZSwgLmVuZHRpbWVcIik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZihkYXRhWydjbGF1c2UnXSA9PSBcIndoZXJlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveFdpdGhFcnJvciA9IHRoaXMuJChcIi53aGVyZWJveFwiKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKGRhdGFbJ2NsYXVzZSddID09IFwiZ3JvdXBCeVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3hXaXRoRXJyb3IgPSB0aGlzLiQoXCIuZ3JvdXBieWJveFwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxhc3RCb3hXaXRoRXJyb3I9IGJveFdpdGhFcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yTXNnID0gXCJRdWVyeSBzeW50YXggZXJyb3I6IFwiICsgZGF0YVsnbWVzc2FnZSddO1xuICAgICAgICAgICAgICAgICAgICBpZihkYXRhWydvZmZzZXRJbkNsYXVzZSddID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yT2Zmc2V0ID0gZGF0YVsnb2Zmc2V0SW5DbGF1c2UnXSAtIDE7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKFF1ZXJ5Vmlldy5pc0NvbnRlbnRFZGl0YWJsZURpdihib3hXaXRoRXJyb3IpICYmIGVycm9yT2Zmc2V0ID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBoaWdobGlnaHQgdGhlIGVycm9yIGNoYXJhY3RlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0VGV4dFJhbmdlQ29sb3IodGhpcy5sYXN0Qm94V2l0aEVycm9yWzBdLCBcInJlZFwiLCB7c3RhcnQ6IGVycm9yT2Zmc2V0LCBlbmQ6ZXJyb3JPZmZzZXQrMX0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgJCgnLmVycm9ybXNnJykudGV4dChlcnJvck1zZykuc2hvdygpOyAgIC8vIFRPRE9cbiAgICAgICAgICAgICAgICAgICAgaWYoYm94V2l0aEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3hXaXRoRXJyb3IuYWRkQ2xhc3MoJ2JveGVycm9yJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgdXBkYXRlSHRtbCgkZWxlbWVudDogSlF1ZXJ5LCBuZXdIdG1sQ29udGVudDogc3RyaW5nKSB7XG4gICAgICAgIHZhciBzZWxlY3Rpb246IHtzdGFydDogbnVtYmVyOyBlbmQ6IG51bWJlcn0gPSBudWxsO1xuICAgICAgICBpZigkZWxlbWVudC5pcyhcIjpmb2N1c1wiKSkge1xuICAgICAgICAgICAgc2VsZWN0aW9uID0gQ2FyZXQuZ2V0U2VsZWN0aW9uKCRlbGVtZW50WzBdKTtcbiAgICAgICAgfVxuICAgICAgICAkZWxlbWVudC50ZXh0KG5ld0h0bWxDb250ZW50KTtcbiAgICAgICAgaWYoc2VsZWN0aW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICBDYXJldC5zZXRTZWxlY3Rpb24oJGVsZW1lbnRbMF0sIHNlbGVjdGlvbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBoYW5kbGVzIHVwZGF0aW5nIHRoZSBjdXJyZW50IHF1ZXJ5IHdoZW4gYSB0ZXJtIGluIHRoZSByZXN1bHRzIHRhYmxlIGlzIGNsaWNrZWRcbiAgICBwcml2YXRlIG9uVGVybUNsaWNrZWQoZmllbGQ6IHN0cmluZywgdGVybTogc3RyaW5nLCBwcm9jZXNzTG9jYWxseTogYm9vbGVhbiwgJGV2ZW50VGFyZ2V0OiBKUXVlcnkpIHtcbiAgICAgICAgaWYocHJvY2Vzc0xvY2FsbHkpIHtcbiAgICAgICAgICAgIHRoaXMubW9kZWwuYXBwZW5kRmlsdGVyKGZpZWxkLCB0ZXJtKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgaW5pdERhdGVwaWNrZXJzKCkge1xuICAgICAgICB2YXIgZGF0ZU9wdHMgPSB7XG4gICAgICAgICAgICBzaG93T246IFwibm9uZVwiXG4gICAgICAgICwgICBkYXRlRm9ybWF0OiBcInl5LW1tLWRkXCJcbiAgICAgICAgLCAgIGNvbnN0cmFpbklucHV0OiBmYWxzZVxuICAgICAgICAsICAgbWF4RGF0ZTogXCIrMWRcIlxuICAgICAgICAsICAgb25TZWxlY3Q6IGZ1bmN0aW9uKGRhdGVTdHI6IHN0cmluZykge1xuICAgICAgICAgICAgICAgICQodGhpcykudHJpZ2dlcignaW5wdXQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgLCAgIGJlZm9yZVNob3c6IGZ1bmN0aW9uKCBpbnB1dDogSFRNTElucHV0RWxlbWVudCwgZGF0ZXBpY2tlckluc3RhbmNlOiBhbnkgKTogSlF1ZXJ5VUkuRGF0ZXBpY2tlck9wdGlvbnNcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YXIgZHAgPSAkKGRhdGVwaWNrZXJJbnN0YW5jZS5kcERpdik7XG4gICAgICAgICAgICAgICAgdmFyIG9mZnNldFggPSAkKGlucHV0KS5vdXRlcldpZHRoKGZhbHNlKTtcbiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0WSA9IC0kKGlucHV0KS5vdXRlckhlaWdodChmYWxzZSk7XG4gICAgICAgICAgICAgICAgZHAuY3NzKCdtYXJnaW4tbGVmdCcsIG9mZnNldFgpO1xuICAgICAgICAgICAgICAgIGRwLmNzcygnbWFyZ2luLXRvcCcsIG9mZnNldFkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciAkZGF0ZXRpbWVib3hlcyA9IHRoaXMuJCgnLmRhdGV0aW1lJyk7XG5cbiAgICAgICAgJGRhdGV0aW1lYm94ZXMuZGF0ZXBpY2tlcihkYXRlT3B0cyk7XG4gICAgICAgICRkYXRldGltZWJveGVzLmNsaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJCh0aGlzKS5kYXRlcGlja2VyKFwic2hvd1wiKTtcbiAgICAgICAgfSk7XG4gICAgICAgICRkYXRldGltZWJveGVzLmtleWRvd24oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkZGF0ZXRpbWVib3hlcy5kYXRlcGlja2VyKFwiaGlkZVwiKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpbml0QXV0b2NvbXBsZXRlKCkge1xuICAgICAgICBBdXRvY29tcGxldGUuaW5pdEF1dG9jb21wbGV0ZUZvclRleHRCb3goPEhUTUxEaXZFbGVtZW50PnRoaXMuJChcIi53aGVyZWJveFwiKS5nZXQoMCksIFwicXVlcnl2aWV3XCIsIHRydWUsIHRydWUsIHRoaXMuY2lkLCB0aGlzLm1vZGVsLCBmYWxzZSk7XG4gICAgICAgIEF1dG9jb21wbGV0ZS5pbml0QXV0b2NvbXBsZXRlRm9yVGV4dEJveCg8SFRNTERpdkVsZW1lbnQ+dGhpcy4kKFwiLmdyb3VwYnlib3hcIikuZ2V0KDApLCBcInF1ZXJ5dmlld1wiLCB0cnVlLCBmYWxzZSwgdGhpcy5jaWQsIHRoaXMubW9kZWwsIGZhbHNlKTtcbiAgICAgICAgQXV0b2NvbXBsZXRlLmluaXRBdXRvY29tcGxldGVGb3JUZXh0Qm94KDxIVE1MRGl2RWxlbWVudD50aGlzLiQoXCIuc2VsZWN0Ym94XCIpLmdldCgwKSwgXCJxdWVyeXZpZXdcIiwgZmFsc2UsIHRydWUsIHRoaXMuY2lkLCB0aGlzLm1vZGVsLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvblF1ZXJ5RXhlY3V0aW9uKGluaXRpYWxFeGVjOiBib29sZWFuKSB7XG4gICAgICAgIGlmKGluaXRpYWxFeGVjKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5oaWRlQXV0b2NvbXBsZXRlKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoaWRlQXV0b2NvbXBsZXRlKCkge1xuICAgICAgICB0aGlzLiQoXCIud2hlcmVib3gsIC5ncm91cGJ5Ym94LCAuc2VsZWN0Ym94XCIpLmF1dG9jb21wbGV0ZShcImNsb3NlXCIpO1xuICAgIH1cblxuICAgIHByaXZhdGUgbWFrZURhdGVzQWJzb2x1dGUoKSB7XG4gICAgICAgIHRoaXMubW9kZWwubWFrZURhdGVzQWJzb2x1dGUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBnZXRWYWx1ZShlbGVtOiBhbnkpOiBzdHJpbmcge1xuICAgICAgICB2YXIgJGVsZW0gPSAkKGVsZW0pO1xuICAgICAgICBpZigkZWxlbS5pcygnaW5wdXQnKSkge1xuICAgICAgICAgICAgcmV0dXJuICRlbGVtLnZhbCgpO1xuICAgICAgICB9IGVsc2UgaWYoJGVsZW0uaXMoJ2RpdicpKSB7XG4gICAgICAgICAgICByZXR1cm4gJGVsZW0udGV4dCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgc2V0VmFsdWUoZWxlbTogYW55LCBuZXdWYWw6IHN0cmluZykge1xuICAgICAgICB2YXIgJGVsZW0gPSAkKGVsZW0pO1xuICAgICAgICBpZigkZWxlbS5pcygnaW5wdXQnKSkge1xuICAgICAgICAgICAgJGVsZW0udmFsKG5ld1ZhbCk7XG4gICAgICAgIH0gZWxzZSBpZigkZWxlbS5pcygnZGl2JykpIHtcbiAgICAgICAgICAgIFF1ZXJ5Vmlldy51cGRhdGVIdG1sKCRlbGVtLCBuZXdWYWwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgaXNJbnB1dEJveChlbGVtOiBIVE1MRWxlbWVudCkge1xuICAgICAgICB2YXIgJGVsZW0gPSAkKGVsZW0pO1xuICAgICAgICByZXR1cm4gJGVsZW0uaXMoJ2lucHV0W3R5cGU9dGV4dF0nKSB8fCAkZWxlbS5pcygndGV4dGFyZWEnKSB8fFxuICAgICAgICAgICAgUXVlcnlWaWV3LmlzQ29udGVudEVkaXRhYmxlRGl2KCRlbGVtKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBpc0NvbnRlbnRFZGl0YWJsZURpdigkZWxlbTogSlF1ZXJ5KSB7XG4gICAgICAgIHJldHVybiAkZWxlbS5pcygnZGl2JykgJiYgJGVsZW0ucHJvcChcImlzQ29udGVudEVkaXRhYmxlXCIpO1xuICAgIH1cbn1cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHRvcHVpL3F1ZXJ5c2V0L3F1ZXJ5L3F1ZXJ5dmlldy50c1xuICoqLyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFpQkE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUFBO0FBZ2FBOztBQXVMQTtBQS9rQkE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQXRsQkE7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 27:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function($) {/// <reference path=\"../../../deps.d.ts\" />\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(4), __webpack_require__(15), __webpack_require__(12), __webpack_require__(7), __webpack_require__(28), __webpack_require__(29), __webpack_require__(30), __webpack_require__(31)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, Promise, iqlclient_1, utils_1, iquerymodel_1, columntype_1, columninfo_1, macros_1) {\n    \"use strict\";\n    /// <amd-dependency path=\"@indeed/iql2-parser\"/>\n    var IQL1Parser = __webpack_require__(31).IQL1Parser;\n    var QueryModel = (function (_super) {\n        __extends(QueryModel, _super);\n        function QueryModel() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        Object.defineProperty(QueryModel.prototype, \"dataset\", {\n            get: function () { return this.get(\"dataset\"); },\n            set: function (val) { this.set(\"dataset\", val); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(QueryModel.prototype, \"start\", {\n            get: function () { return this.get(\"start\"); },\n            set: function (val) { this.set(\"start\", val); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(QueryModel.prototype, \"end\", {\n            get: function () { return this.get(\"end\"); },\n            set: function (val) { this.set(\"end\", val); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(QueryModel.prototype, \"where\", {\n            get: function () { return this.get(\"where\"); },\n            set: function (val) { this.set(\"where\", val); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(QueryModel.prototype, \"groupBy\", {\n            get: function () { return this.get(\"groupBy\"); },\n            set: function (val) { this.set(\"groupBy\", val); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(QueryModel.prototype, \"select\", {\n            get: function () { return this.get(\"select\"); },\n            set: function (val) { this.set(\"select\", val); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(QueryModel.prototype, \"limit\", {\n            get: function () {\n                if (this.groupBy.match(/^\\s*[^, ]*\\[[^\\]]*[1-9][^\\]]*\\][^,]*$/)) {\n                    return null; // no additional limit; assume that user specified their desired number in the brackets\n                }\n                else {\n                    return iquerymodel_1.default.CURRENT_LIMIT;\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        QueryModel.prototype.defaults = function () {\n            return {\n                dataset: \"\",\n                start: \"yesterday\",\n                end: \"today\",\n                where: \"\",\n                groupBy: \"\",\n                select: \"\",\n                limit: iquerymodel_1.default.DEFAULT_LIMIT\n            };\n        };\n        QueryModel.prototype.getQueryParser = function () {\n            return IQL1Parser;\n        };\n        QueryModel.prototype.setFromFullQuery = function (query) {\n            // local JS parser requires the query to be completely parseable which it may not be\n            // The IQL server splitter is more forgiving to syntax problems and so is used here even with higher latency\n            //const queryParts = IQL1Parser.queryParts(query).assumeSuccess();\n            //this.dataset = queryParts.dataset;\n            //this.start = queryParts.start;\n            //this.end = queryParts.end;\n            //this.where = queryParts.where;\n            //this.groupBy = queryParts.groupBy;\n            //this.select = queryParts.select;\n            //return Promise.resolve(this);\n            var _this = this;\n            var setQueryDeferred = $.Deferred();\n            iqlclient_1.default.splitQuery(query).done(function (data) {\n                if (!data.error) {\n                    if (data['dataset']) {\n                        _this.dataset = data['dataset'];\n                    }\n                    if (data.startRawString) {\n                        _this.start = data['startRawString'];\n                    }\n                    if (data.endRawString) {\n                        _this.end = data['endRawString'];\n                    }\n                    _this.where = data['where'] || \"\";\n                    _this.groupBy = data['groupBy'] || \"\";\n                    _this.select = data['select'] || \"\";\n                    // Limits are centralized now and not set per query so data['limit'] is not used\n                    setQueryDeferred.resolve(_this);\n                }\n                else {\n                    setQueryDeferred.reject();\n                }\n            });\n            return Promise.resolve(setQueryDeferred.promise());\n        };\n        QueryModel.prototype.getCompleteQuery = function (skipLimit, dontApplyMacros, addNewLines) {\n            if (dontApplyMacros === void 0) { dontApplyMacros = false; }\n            if (addNewLines === void 0) { addNewLines = false; }\n            var startTime = this.start;\n            var endTime = this.end;\n            var whereCopy = this.where;\n            var groupByCopy = this.groupBy;\n            var selectCopy = this.select;\n            if (!dontApplyMacros) {\n                whereCopy = macros_1.default.applyMacros(whereCopy, iquerymodel_1.default.MACROS, true);\n                groupByCopy = macros_1.default.applyMacros(groupByCopy, iquerymodel_1.default.MACROS);\n                selectCopy = macros_1.default.applyMacros(selectCopy, iquerymodel_1.default.MACROS);\n                startTime = macros_1.default.applyMacros(startTime, iquerymodel_1.default.MACROS);\n                endTime = macros_1.default.applyMacros(endTime, iquerymodel_1.default.MACROS);\n            }\n            if (startTime.indexOf(' ') != -1) {\n                startTime = '\"' + startTime + '\"';\n            }\n            if (endTime.indexOf(' ') != -1) {\n                endTime = '\"' + endTime + '\"';\n            }\n            var limitStr = String(this.limit || \"\"); // convert null to empty string\n            return 'from ' + this.dataset + ' ' + startTime + ' ' + endTime +\n                this.getPart(' where ', whereCopy, addNewLines) + this.getPart(' group by ', groupByCopy, addNewLines) + this.getPart(' select ', selectCopy, addNewLines) +\n                (skipLimit ? \"\" : this.getPart(' limit ', limitStr, addNewLines));\n        };\n        QueryModel.prototype.appendFilter = function (field, term) {\n            var bucketStart = utils_1.default.getBucketStart(term);\n            var bucketEnd = utils_1.default.getBucketEnd(term);\n            if (bucketStart == null || bucketEnd == null) {\n                this.appendSimpleFilter(field, term);\n                return;\n            }\n            this.appendBucketFilter(field, bucketStart, bucketEnd);\n        };\n        QueryModel.prototype.appendBucketFilter = function (field, bucketStart, bucketEnd) {\n            // we got a bucket click\n            if (bucketStart.indexOf(\":\") != -1) {\n                // time range?\n                this.start = bucketStart;\n                this.end = bucketEnd;\n            }\n            else {\n                this.where += \" \" + field + \" >= \" + bucketStart + \" \" + field + \" < \" + bucketEnd;\n            }\n        };\n        QueryModel.prototype.appendSimpleFilter = function (field, term) {\n            var where = this.where;\n            var quotedTerm = QueryModel.quoteTerm(term);\n            // the real parser is in Java so Regex hackage ahead\n            // if an IN clause exists, append the new term to the end of the list\n            var inFilterRegex = new RegExp('((?:^|.* +)' + field + ' +[iI][nN] *\\\\([^)]*)(\\\\).*)');\n            var match = where.match(inFilterRegex);\n            if (match) {\n                this.where = match[1] + \", \" + quotedTerm + match[2];\n                return;\n            }\n            // if an equality for this field exists, replace it with an IN clause\n            // The term can be escaped by single quotes, double quotes or just space separated\n            var oldTermNoQuotes = '(' +\n                '[^~ ][^ ]*' +\n                ')' +\n                '(?: +|$)'; // end of the term is marked by whitespace or end of string\n            var oldTermSingleQuote = \"('\" +\n                \"[^']+\" +\n                \"')\";\n            var oldTermDoubleQuote = '(\"' +\n                '[^\"]+' +\n                '\")';\n            var termRegexStrings = [oldTermDoubleQuote, oldTermSingleQuote, oldTermNoQuotes];\n            for (var termRegexIndex in termRegexStrings) {\n                var equalityFilterRegex = new RegExp('(' +\n                    '(?:^|.* +)' +\n                    field +\n                    ')' +\n                    ' *[=:] *' +\n                    termRegexStrings[termRegexIndex] +\n                    '(.*)' // group for the remaining suffix of the string to be kept as is\n                );\n                var match = where.match(equalityFilterRegex);\n                if (match) {\n                    this.where = match[1] + \" in (\" + match[2] + \", \" + quotedTerm + \") \" + match[3];\n                    return;\n                }\n            }\n            // it's a new filter for this field, just add a simple equality\n            if (where != \"\") {\n                where += ' ';\n            }\n            where += field + \" = \" + quotedTerm;\n            this.where = where;\n        };\n        QueryModel.quoteTerm = function (term) {\n            var quotedTerm = \"\";\n            var quote = \"'\";\n            if (term.indexOf(quote) >= 0) {\n                quote = '\"';\n            }\n            var needsQuotes = utils_1.default.iqlTokenNeedsQuoting(term); // skips quotes if it's a simple word or number\n            if (needsQuotes) {\n                quotedTerm += quote;\n            }\n            quotedTerm += term;\n            if (needsQuotes) {\n                quotedTerm += quote;\n            }\n            return quotedTerm;\n        };\n        QueryModel.prototype.getColumnInfos = function () {\n            // get rid of multi argument functions to avoid confusing commas\n            //        var groupbyCleaned = queryModel.groupBy.replace(/\\([^),]+,[^)]+\\)/g,\"\");\n            //        var selectCleaned = queryModel.select.replace(/\\([^),]+,[^)]+\\)/g,\"\");\n            var columns = this.groupByColumnInfo();\n            var selectParts = QueryModel.splitClause(this.select); //selectCleaned.split(',');\n            selectParts.forEach(function (selectPart) {\n                var text = selectPart.trim();\n                var rawText = text;\n                var text = QueryModel.applyCommentsToPart(text);\n                if (selectParts.length == 1 && text == \"\") {\n                    text = \"count()\"; // count() is the default metric in Select\n                }\n                var column = new columninfo_1.default(text, columntype_1.default.METRIC, rawText, false);\n                columns.push(column);\n            });\n            return columns;\n        };\n        QueryModel.prototype.removeSelect = function (selectToRemove) {\n            selectToRemove = selectToRemove.toLowerCase();\n            var selectParts = QueryModel.splitClause(this.select); //selectCleaned.split(',');\n            var modifiedSelects = [];\n            selectParts.forEach(function (selectPart) {\n                var text = selectPart.trim().toLowerCase();\n                text = QueryModel.applyCommentsToPart(text);\n                if (text != selectToRemove) {\n                    modifiedSelects.push(selectPart);\n                }\n            });\n            this.select = modifiedSelects.join(\", \");\n        };\n        QueryModel.prototype.makeDatesAbsolute = function () {\n            this.start = this.getAbsoluteDate(this.start, false) || this.start;\n            this.end = this.getAbsoluteDate(this.end, false) || this.end;\n        };\n        QueryModel.prototype.setGroupBy = function (groupByField) {\n            this.groupBy = groupByField;\n        };\n        QueryModel.prototype.groupByColumnInfo = function () {\n            var groupbyParts = QueryModel.splitClause(this.groupBy); //groupbyCleaned.split(',');\n            var columns = [];\n            groupbyParts.forEach(function (groupByPart) {\n                var text = groupByPart.trim();\n                var rawText = text;\n                var text = iquerymodel_1.default.applyCommentsToPart(text);\n                var columnType = text.split(\"(\")[0] == \"time\" ? columntype_1.default.TIME : columntype_1.default.GROUPING;\n                var column = new columninfo_1.default(text, columnType, rawText, false);\n                columns.push(column);\n            });\n            return columns;\n        };\n        QueryModel.prototype.getAbsoluteDate = function (relativeDate, quote) {\n            var dateMomentOption = this.getQueryParser().iqlDateToMomentDate(relativeDate);\n            if (!dateMomentOption.success) {\n                return null;\n            }\n            var dateMoment = dateMomentOption.success;\n            if (dateMoment.seconds() !== 0) {\n                var date = dateMoment.format(\"YYYY-MM-DD hh:mm:ss\");\n                return quote ? '\"' + date + '\"' : date;\n            }\n            else if (dateMoment.minutes() !== 0 || dateMoment.hours() !== 0) {\n                var date = dateMoment.format(\"YYYY-MM-DD hh:mm\");\n                return quote ? '\"' + date + '\"' : date;\n            }\n            else {\n                return dateMoment.format(\"YYYY-MM-DD\");\n            }\n        };\n        QueryModel.splitClause = function (clause) {\n            var inQuote = false;\n            var quoteChar = null;\n            var parenDepth = 0;\n            var extractedUpToIndex = 0;\n            var parts = [];\n            for (var i = 0; i < clause.length; i++) {\n                var char = clause[i];\n                if (inQuote) {\n                    if (char === quoteChar) {\n                        inQuote = false;\n                    }\n                }\n                else if (char === '\"' || char === \"'\") {\n                    inQuote = true;\n                    quoteChar = char;\n                }\n                else if (char === '(') {\n                    parenDepth++;\n                }\n                else if (char === ')' && parenDepth > 0) {\n                    parenDepth--;\n                }\n                else if (char === ',') {\n                    if (parenDepth == 0) {\n                        parts.push(clause.substring(extractedUpToIndex, i));\n                        extractedUpToIndex = i + 1;\n                    }\n                }\n            }\n            parts.push(clause.substring(extractedUpToIndex));\n            return parts;\n        };\n        QueryModel.prototype.getDataset = function () {\n            return this.dataset;\n        };\n        QueryModel.prototype.getQueryId = function () {\n            return 0; // TODO\n        };\n        return QueryModel;\n    }(iquerymodel_1.default));\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = QueryModel;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))//# sourceMappingURL=data:application/json;base64,");

/***/ },

/***/ 28:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports) {\n    \"use strict\";\n    var ColumnType;\n    (function (ColumnType) {\n        ColumnType[ColumnType[\"TIME\"] = 0] = \"TIME\";\n        ColumnType[ColumnType[\"GROUPING\"] = 1] = \"GROUPING\";\n        ColumnType[ColumnType[\"METRIC\"] = 2] = \"METRIC\";\n    })(ColumnType || (ColumnType = {}));\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = ColumnType;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vY29sdW1udHlwZS50cz9jZDE4Il0sInNvdXJjZXNDb250ZW50IjpbImVudW0gQ29sdW1uVHlwZSB7XG4gICAgVElNRSwgICAvLyB0aW1lIGlzIGFsc28gYSBncm91cGluZ1xuICAgIEdST1VQSU5HLFxuICAgIE1FVFJJQ1xufVxuXG5leHBvcnQgZGVmYXVsdCBDb2x1bW5UeXBlO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIGNvbHVtbnR5cGUudHNcbiAqKi8iXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 29:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports) {\n    \"use strict\";\n    var ColumnInfo = (function () {\n        // TODO: add text that is not cleaned of parenthesis content\n        function ColumnInfo(text, type, rawText, // query text before cleanup\n            elaborated) {\n            this.text = text;\n            this.type = type;\n            this.rawText = rawText;\n            this.elaborated = elaborated;\n            this.isBucketColumn = false;\n            this.isDistinctColumn = false;\n            this.columnTotal = null;\n            this.isLocalTotal = false;\n            this.elaborated = !!elaborated;\n            this.isBucketColumn = / *buckets? *\\(.*/.test(this.rawText);\n            this.isDistinctColumn = (this.rawText.split(\"(\")[0] == \"distinct\");\n        }\n        ColumnInfo.prototype.getFieldName = function () {\n            var field = this.text.replace(/[( \\[].*/g, \"\");\n            if (this.isBucketColumn) {\n                var regexResult = /[^(]+\\(([^,]+),.*/.exec(this.text);\n                field = regexResult[1];\n            }\n            return field.trim();\n        };\n        ColumnInfo.prototype.getRawTextWithoutComments = function () {\n            return this.rawText.replace(/([ \\[]|\\/\\*).*/g, \"\");\n        };\n        return ColumnInfo;\n    }());\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = ColumnInfo;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vY29sdW1uaW5mby50cz9jN2VhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb2x1bW5UeXBlIGZyb20gJ2NvbHVtbnR5cGUnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb2x1bW5JbmZvIHtcbiAgICBwdWJsaWMgaXNCdWNrZXRDb2x1bW46IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBwdWJsaWMgaXNEaXN0aW5jdENvbHVtbjogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHB1YmxpYyBjb2x1bW5Ub3RhbDogbnVtYmVyID0gbnVsbDtcbiAgICBwdWJsaWMgaXNMb2NhbFRvdGFsOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAvLyBUT0RPOiBhZGQgdGV4dCB0aGF0IGlzIG5vdCBjbGVhbmVkIG9mIHBhcmVudGhlc2lzIGNvbnRlbnRcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgdGV4dCA6IHN0cmluZyxcbiAgICAgICAgICAgICAgICBwdWJsaWMgdHlwZSA6IENvbHVtblR5cGUsXG4gICAgICAgICAgICAgICAgcHVibGljIHJhd1RleHQ6IHN0cmluZywgLy8gcXVlcnkgdGV4dCBiZWZvcmUgY2xlYW51cFxuICAgICAgICAgICAgICAgIHB1YmxpYyBlbGFib3JhdGVkPzogYm9vbGVhbikge1xuICAgICAgICB0aGlzLmVsYWJvcmF0ZWQgPSAhIWVsYWJvcmF0ZWQ7XG4gICAgICAgIHRoaXMuaXNCdWNrZXRDb2x1bW4gPSAvICpidWNrZXRzPyAqXFwoLiovLnRlc3QodGhpcy5yYXdUZXh0KTtcbiAgICAgICAgdGhpcy5pc0Rpc3RpbmN0Q29sdW1uID0gKHRoaXMucmF3VGV4dC5zcGxpdChcIihcIilbMF0gPT0gXCJkaXN0aW5jdFwiKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0RmllbGROYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIHZhciBmaWVsZCA9IHRoaXMudGV4dC5yZXBsYWNlKC9bKCBcXFtdLiovZyxcIlwiKTtcbiAgICAgICAgaWYodGhpcy5pc0J1Y2tldENvbHVtbikge1xuICAgICAgICAgICAgdmFyIHJlZ2V4UmVzdWx0ID0gL1teKF0rXFwoKFteLF0rKSwuKi8uZXhlYyh0aGlzLnRleHQpO1xuICAgICAgICAgICAgZmllbGQgPSByZWdleFJlc3VsdFsxXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmllbGQudHJpbSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRSYXdUZXh0V2l0aG91dENvbW1lbnRzKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLnJhd1RleHQucmVwbGFjZSgvKFsgXFxbXXxcXC9cXCopLiovZyxcIlwiKTtcbiAgICB9XG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBjb2x1bW5pbmZvLnRzXG4gKiovIl0sIm1hcHBpbmdzIjoiOztBQUVBO0FBTUE7QUFDQTtBQUdBO0FBSEE7QUFDQTtBQUNBO0FBQ0E7QUFUQTtBQUNBO0FBQ0E7QUFDQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7Ozs7OyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 30:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/// <reference path=\"deps.d.ts\" />\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, _) {\n    \"use strict\";\n    var Macros = (function () {\n        function Macros() {\n        }\n        Macros.applyMacros = function (value, macrosStr, addDefaultVar) {\n            if (addDefaultVar === void 0) { addDefaultVar = false; }\n            var macroNamePattern = /\\$([a-zA-Z_]\\w*)\\s*/;\n            var macros = Macros.macrosStrToFuncMap(macrosStr);\n            var defaultMacroName = \"PARENT\";\n            if (addDefaultVar && value.indexOf(\"$\" + defaultMacroName) == -1 && defaultMacroName in macros) {\n                value = \"$\" + defaultMacroName + \" \" + value;\n            }\n            var found;\n            while (found = macroNamePattern.exec(value)) {\n                var name = found[1];\n                var macroFunc = macros[name];\n                if (!macroFunc) {\n                    return value;\n                }\n                var possibleBraceIndex = found.index + found[0].length;\n                // Function macro\n                if (value.charAt(possibleBraceIndex) == \"{\") {\n                    var matchingBraceIndex = Macros.matchingBrace(possibleBraceIndex, value);\n                    if (!matchingBraceIndex) {\n                        //console.log(\"In partially substituted macro string: \" + value + \" there is not a brace which matches the brace at index \" + possibleBraceIndex);\n                        return value;\n                    }\n                    var args = value.substring(possibleBraceIndex + 1, matchingBraceIndex).split(/\\|/);\n                    value = value.slice(0, found.index) + macroFunc(args) + value.slice(matchingBraceIndex + 1);\n                }\n                else {\n                    value = value.slice(0, found.index) + macroFunc([]) + value.slice(found.index + found[1].length + 1);\n                }\n            }\n            return value;\n        };\n        Macros.macrosStrToFuncMap = function (macrosStr) {\n            var macros = {};\n            _.each(macrosStr.split(/\\n|;/), function (macroStr) {\n                var parts = Macros.parseMacroStr(macroStr.trim());\n                if (parts) {\n                    macros[parts.name] = function (actualArgs) {\n                        return Macros.subActualsForFormals(actualArgs, parts.formalArgs, parts.body);\n                    };\n                }\n            });\n            return macros;\n        };\n        Macros.parseMacroStr = function (macroStr) {\n            var macroFuncDefPattern = /^([a-zA-Z_]\\w*)\\s*(?:\\{([^\\}]+)\\})?\\s*=\\s*(.*)$/;\n            var match = macroFuncDefPattern.exec(macroStr);\n            return !match ? null : {\n                name: match[1],\n                formalArgs: match[2] ? match[2].replace(/\\s/g, '').split(/\\|/) : [],\n                body: match[3]\n            };\n        };\n        Macros.subActualsForFormals = function (actualArgs, formalArgs, body) {\n            var len = Math.min(formalArgs.length, actualArgs.length);\n            for (var i = 0; i < len; i++) {\n                body = body.replace(new RegExp(formalArgs[i], \"g\"), actualArgs[i]);\n            }\n            return body;\n        };\n        Macros.matchingBrace = function (index, value) {\n            var open = 1;\n            for (var i = index + 1; i < value.length; i++) {\n                if (value.charAt(i) == '{') {\n                    open++;\n                }\n                else if (value.charAt(i) == '}') {\n                    open--;\n                }\n                if (open == 0) {\n                    return i;\n                }\n            }\n            return null;\n        };\n        Macros.buildMacrosWithExtractedExpr = function (currentMacros, extractedExpr) {\n            currentMacros = currentMacros || \"\";\n            var baseName = \"EXPR\";\n            var idSuffix = 0;\n            var suggestedName = baseName;\n            while (currentMacros.indexOf(suggestedName) != -1) {\n                idSuffix++;\n                suggestedName = baseName + idSuffix;\n            }\n            var enteredName;\n            do {\n                enteredName = prompt(\"Enter a macro name: \", suggestedName);\n            } while (currentMacros.indexOf(enteredName) != -1);\n            if (enteredName != null) {\n                return {\n                    newMacroStr: currentMacros + (currentMacros ? \" ; \" : \"\") + enteredName + \"=\" + extractedExpr,\n                    macroName: enteredName,\n                    exprToExtract: extractedExpr\n                };\n            }\n            return null;\n        };\n        return Macros;\n    }());\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Macros;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vbWFjcm9zLnRzPzg3M2YiXSwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cImRlcHMuZC50c1wiIC8+XG5cbmltcG9ydCBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYWNyb3Mge1xuXG4gICAgcHVibGljIHN0YXRpYyBhcHBseU1hY3Jvcyh2YWx1ZTogc3RyaW5nLCBtYWNyb3NTdHI6IHN0cmluZywgYWRkRGVmYXVsdFZhciA9IGZhbHNlKTogc3RyaW5nIHtcbiAgICAgICAgdmFyIG1hY3JvTmFtZVBhdHRlcm4gPSAgL1xcJChbYS16QS1aX11cXHcqKVxccyovO1xuICAgICAgICB2YXIgbWFjcm9zID0gTWFjcm9zLm1hY3Jvc1N0clRvRnVuY01hcChtYWNyb3NTdHIpO1xuXG4gICAgICAgIHZhciBkZWZhdWx0TWFjcm9OYW1lID0gXCJQQVJFTlRcIjtcbiAgICAgICAgaWYgKGFkZERlZmF1bHRWYXIgJiYgdmFsdWUuaW5kZXhPZihcIiRcIiArIGRlZmF1bHRNYWNyb05hbWUpID09IC0xICYmIGRlZmF1bHRNYWNyb05hbWUgaW4gbWFjcm9zKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IFwiJFwiICsgZGVmYXVsdE1hY3JvTmFtZSArIFwiIFwiICsgdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZm91bmQ6YW55O1xuICAgICAgICB3aGlsZShmb3VuZCA9IG1hY3JvTmFtZVBhdHRlcm4uZXhlYyh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHZhciBuYW1lID0gZm91bmRbMV07XG4gICAgICAgICAgICB2YXIgbWFjcm9GdW5jOmFueSA9IG1hY3Jvc1tuYW1lXTtcbiAgICAgICAgICAgIGlmKCFtYWNyb0Z1bmMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcG9zc2libGVCcmFjZUluZGV4ID0gZm91bmQuaW5kZXggKyBmb3VuZFswXS5sZW5ndGg7XG4gICAgICAgICAgICAvLyBGdW5jdGlvbiBtYWNyb1xuICAgICAgICAgICAgaWYodmFsdWUuY2hhckF0KHBvc3NpYmxlQnJhY2VJbmRleCkgPT0gXCJ7XCIpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWF0Y2hpbmdCcmFjZUluZGV4ID0gTWFjcm9zLm1hdGNoaW5nQnJhY2UocG9zc2libGVCcmFjZUluZGV4LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYoIW1hdGNoaW5nQnJhY2VJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiSW4gcGFydGlhbGx5IHN1YnN0aXR1dGVkIG1hY3JvIHN0cmluZzogXCIgKyB2YWx1ZSArIFwiIHRoZXJlIGlzIG5vdCBhIGJyYWNlIHdoaWNoIG1hdGNoZXMgdGhlIGJyYWNlIGF0IGluZGV4IFwiICsgcG9zc2libGVCcmFjZUluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgYXJncyA9IHZhbHVlLnN1YnN0cmluZyhwb3NzaWJsZUJyYWNlSW5kZXggKyAxLCBtYXRjaGluZ0JyYWNlSW5kZXgpLnNwbGl0KC9cXHwvKTtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDAsIGZvdW5kLmluZGV4KSArIG1hY3JvRnVuYyhhcmdzKSArIHZhbHVlLnNsaWNlKG1hdGNoaW5nQnJhY2VJbmRleCArIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUmVndWxhciBtYWNyb3NcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMCwgZm91bmQuaW5kZXgpICsgbWFjcm9GdW5jKFtdKSArIHZhbHVlLnNsaWNlKGZvdW5kLmluZGV4ICsgZm91bmRbMV0ubGVuZ3RoICsgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIHN0YXRpYyBtYWNyb3NTdHJUb0Z1bmNNYXAobWFjcm9zU3RyOiBzdHJpbmcpIHtcbiAgICAgICAgdmFyIG1hY3Jvczoge1tuYW1lOiBzdHJpbmcgXSA6IGFueX0gPSB7fTtcbiAgICAgICAgXy5lYWNoKG1hY3Jvc1N0ci5zcGxpdCgvXFxufDsvKSwgZnVuY3Rpb24obWFjcm9TdHIpIHtcbiAgICAgICAgICAgIHZhciBwYXJ0cyA9IE1hY3Jvcy5wYXJzZU1hY3JvU3RyKG1hY3JvU3RyLnRyaW0oKSk7XG4gICAgICAgICAgICBpZihwYXJ0cykge1xuICAgICAgICAgICAgICAgIG1hY3Jvc1twYXJ0cy5uYW1lXSA9IGZ1bmN0aW9uKGFjdHVhbEFyZ3M6c3RyaW5nW10pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hY3Jvcy5zdWJBY3R1YWxzRm9yRm9ybWFscyhhY3R1YWxBcmdzLCBwYXJ0cy5mb3JtYWxBcmdzLCBwYXJ0cy5ib2R5KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG1hY3JvcztcbiAgICB9XG5cbiAgICBzdGF0aWMgcGFyc2VNYWNyb1N0cihtYWNyb1N0cjogc3RyaW5nKSB7XG4gICAgICAgIHZhciBtYWNyb0Z1bmNEZWZQYXR0ZXJuID0gL14oW2EtekEtWl9dXFx3KilcXHMqKD86XFx7KFteXFx9XSspXFx9KT9cXHMqPVxccyooLiopJC87XG4gICAgICAgIHZhciBtYXRjaCA9IG1hY3JvRnVuY0RlZlBhdHRlcm4uZXhlYyhtYWNyb1N0cik7XG4gICAgICAgIHJldHVybiAhbWF0Y2ggPyBudWxsIDoge1xuICAgICAgICAgICAgbmFtZSA6IG1hdGNoWzFdLFxuICAgICAgICAgICAgZm9ybWFsQXJncyA6IG1hdGNoWzJdID8gbWF0Y2hbMl0ucmVwbGFjZSgvXFxzL2csICcnKS5zcGxpdCgvXFx8LykgOiBbXSxcbiAgICAgICAgICAgIGJvZHkgOiBtYXRjaFszXVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHN0YXRpYyBzdWJBY3R1YWxzRm9yRm9ybWFscyhhY3R1YWxBcmdzOnN0cmluZ1tdLCBmb3JtYWxBcmdzOnN0cmluZ1tdLCBib2R5OnN0cmluZykge1xuICAgICAgICB2YXIgbGVuID0gTWF0aC5taW4oZm9ybWFsQXJncy5sZW5ndGgsIGFjdHVhbEFyZ3MubGVuZ3RoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgYm9keSA9IGJvZHkucmVwbGFjZShuZXcgUmVnRXhwKGZvcm1hbEFyZ3NbaV0sIFwiZ1wiKSwgYWN0dWFsQXJnc1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJvZHk7XG4gICAgfVxuXG4gICAgc3RhdGljIG1hdGNoaW5nQnJhY2UoaW5kZXg6bnVtYmVyLCB2YWx1ZTpzdHJpbmcpIHtcbiAgICAgICAgdmFyIG9wZW4gPSAxO1xuICAgICAgICBmb3IodmFyIGkgPSBpbmRleCsxOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmKHZhbHVlLmNoYXJBdChpKSA9PSAneycpIHtcbiAgICAgICAgICAgICAgICBvcGVuKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKHZhbHVlLmNoYXJBdChpKSA9PSAnfScpIHtcbiAgICAgICAgICAgICAgICBvcGVuLS07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKG9wZW4gPT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHN0YXRpYyBidWlsZE1hY3Jvc1dpdGhFeHRyYWN0ZWRFeHByKGN1cnJlbnRNYWNyb3M6c3RyaW5nLCBleHRyYWN0ZWRFeHByOiBzdHJpbmcpIHtcbiAgICAgICAgY3VycmVudE1hY3JvcyA9IGN1cnJlbnRNYWNyb3MgfHwgXCJcIjtcbiAgICAgICAgdmFyIGJhc2VOYW1lID0gXCJFWFBSXCI7XG4gICAgICAgIHZhciBpZFN1ZmZpeCA9IDA7XG4gICAgICAgIHZhciBzdWdnZXN0ZWROYW1lID0gYmFzZU5hbWU7XG4gICAgICAgIHdoaWxlKGN1cnJlbnRNYWNyb3MuaW5kZXhPZihzdWdnZXN0ZWROYW1lKSAhPSAtMSkge1xuICAgICAgICAgICAgaWRTdWZmaXgrKztcbiAgICAgICAgICAgIHN1Z2dlc3RlZE5hbWUgPSBiYXNlTmFtZSArIGlkU3VmZml4O1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGVudGVyZWROYW1lOnN0cmluZztcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgZW50ZXJlZE5hbWUgPSBwcm9tcHQoXCJFbnRlciBhIG1hY3JvIG5hbWU6IFwiLCBzdWdnZXN0ZWROYW1lKTtcbiAgICAgICAgfSB3aGlsZShjdXJyZW50TWFjcm9zLmluZGV4T2YoZW50ZXJlZE5hbWUpICE9IC0xKTtcblxuXG4gICAgICAgIGlmKGVudGVyZWROYW1lICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbmV3TWFjcm9TdHI6IGN1cnJlbnRNYWNyb3MgKyAoY3VycmVudE1hY3JvcyA/IFwiIDsgXCIgOiBcIlwiKSArIGVudGVyZWROYW1lICsgXCI9XCIgKyBleHRyYWN0ZWRFeHByLFxuICAgICAgICAgICAgICAgIG1hY3JvTmFtZTogZW50ZXJlZE5hbWUsXG4gICAgICAgICAgICAgICAgZXhwclRvRXh0cmFjdDogZXh0cmFjdGVkRXhwclxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cblxuXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBtYWNyb3MudHNcbiAqKi8iXSwibWFwcGluZ3MiOiJBQUFBOzs7QUFJQTtBQUFBO0FBOEdBO0FBNUdBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTs7Ozs7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 79:
/***/ function(module, exports, __webpack_require__) {

	eval("var map = {\n\t\"./af\": 80,\n\t\"./af.js\": 80,\n\t\"./ar\": 81,\n\t\"./ar-ma\": 82,\n\t\"./ar-ma.js\": 82,\n\t\"./ar-sa\": 83,\n\t\"./ar-sa.js\": 83,\n\t\"./ar-tn\": 84,\n\t\"./ar-tn.js\": 84,\n\t\"./ar.js\": 81,\n\t\"./az\": 85,\n\t\"./az.js\": 85,\n\t\"./be\": 86,\n\t\"./be.js\": 86,\n\t\"./bg\": 87,\n\t\"./bg.js\": 87,\n\t\"./bn\": 88,\n\t\"./bn.js\": 88,\n\t\"./bo\": 89,\n\t\"./bo.js\": 89,\n\t\"./br\": 90,\n\t\"./br.js\": 90,\n\t\"./bs\": 91,\n\t\"./bs.js\": 91,\n\t\"./ca\": 92,\n\t\"./ca.js\": 92,\n\t\"./cs\": 93,\n\t\"./cs.js\": 93,\n\t\"./cv\": 94,\n\t\"./cv.js\": 94,\n\t\"./cy\": 95,\n\t\"./cy.js\": 95,\n\t\"./da\": 96,\n\t\"./da.js\": 96,\n\t\"./de\": 97,\n\t\"./de-at\": 98,\n\t\"./de-at.js\": 98,\n\t\"./de.js\": 97,\n\t\"./el\": 99,\n\t\"./el.js\": 99,\n\t\"./en-au\": 100,\n\t\"./en-au.js\": 100,\n\t\"./en-ca\": 101,\n\t\"./en-ca.js\": 101,\n\t\"./en-gb\": 102,\n\t\"./en-gb.js\": 102,\n\t\"./eo\": 103,\n\t\"./eo.js\": 103,\n\t\"./es\": 104,\n\t\"./es.js\": 104,\n\t\"./et\": 105,\n\t\"./et.js\": 105,\n\t\"./eu\": 106,\n\t\"./eu.js\": 106,\n\t\"./fa\": 107,\n\t\"./fa.js\": 107,\n\t\"./fi\": 108,\n\t\"./fi.js\": 108,\n\t\"./fo\": 109,\n\t\"./fo.js\": 109,\n\t\"./fr\": 110,\n\t\"./fr-ca\": 111,\n\t\"./fr-ca.js\": 111,\n\t\"./fr.js\": 110,\n\t\"./fy\": 112,\n\t\"./fy.js\": 112,\n\t\"./gl\": 113,\n\t\"./gl.js\": 113,\n\t\"./he\": 114,\n\t\"./he.js\": 114,\n\t\"./hi\": 115,\n\t\"./hi.js\": 115,\n\t\"./hr\": 116,\n\t\"./hr.js\": 116,\n\t\"./hu\": 117,\n\t\"./hu.js\": 117,\n\t\"./hy-am\": 118,\n\t\"./hy-am.js\": 118,\n\t\"./id\": 119,\n\t\"./id.js\": 119,\n\t\"./is\": 120,\n\t\"./is.js\": 120,\n\t\"./it\": 121,\n\t\"./it.js\": 121,\n\t\"./ja\": 122,\n\t\"./ja.js\": 122,\n\t\"./jv\": 123,\n\t\"./jv.js\": 123,\n\t\"./ka\": 124,\n\t\"./ka.js\": 124,\n\t\"./km\": 125,\n\t\"./km.js\": 125,\n\t\"./ko\": 126,\n\t\"./ko.js\": 126,\n\t\"./lb\": 127,\n\t\"./lb.js\": 127,\n\t\"./lt\": 128,\n\t\"./lt.js\": 128,\n\t\"./lv\": 129,\n\t\"./lv.js\": 129,\n\t\"./me\": 130,\n\t\"./me.js\": 130,\n\t\"./mk\": 131,\n\t\"./mk.js\": 131,\n\t\"./ml\": 132,\n\t\"./ml.js\": 132,\n\t\"./mr\": 133,\n\t\"./mr.js\": 133,\n\t\"./ms\": 134,\n\t\"./ms-my\": 135,\n\t\"./ms-my.js\": 135,\n\t\"./ms.js\": 134,\n\t\"./my\": 136,\n\t\"./my.js\": 136,\n\t\"./nb\": 137,\n\t\"./nb.js\": 137,\n\t\"./ne\": 138,\n\t\"./ne.js\": 138,\n\t\"./nl\": 139,\n\t\"./nl.js\": 139,\n\t\"./nn\": 140,\n\t\"./nn.js\": 140,\n\t\"./pl\": 141,\n\t\"./pl.js\": 141,\n\t\"./pt\": 142,\n\t\"./pt-br\": 143,\n\t\"./pt-br.js\": 143,\n\t\"./pt.js\": 142,\n\t\"./ro\": 144,\n\t\"./ro.js\": 144,\n\t\"./ru\": 145,\n\t\"./ru.js\": 145,\n\t\"./si\": 146,\n\t\"./si.js\": 146,\n\t\"./sk\": 147,\n\t\"./sk.js\": 147,\n\t\"./sl\": 148,\n\t\"./sl.js\": 148,\n\t\"./sq\": 149,\n\t\"./sq.js\": 149,\n\t\"./sr\": 150,\n\t\"./sr-cyrl\": 151,\n\t\"./sr-cyrl.js\": 151,\n\t\"./sr.js\": 150,\n\t\"./sv\": 152,\n\t\"./sv.js\": 152,\n\t\"./ta\": 153,\n\t\"./ta.js\": 153,\n\t\"./th\": 154,\n\t\"./th.js\": 154,\n\t\"./tl-ph\": 155,\n\t\"./tl-ph.js\": 155,\n\t\"./tr\": 156,\n\t\"./tr.js\": 156,\n\t\"./tzl\": 157,\n\t\"./tzl.js\": 157,\n\t\"./tzm\": 158,\n\t\"./tzm-latn\": 159,\n\t\"./tzm-latn.js\": 159,\n\t\"./tzm.js\": 158,\n\t\"./uk\": 160,\n\t\"./uk.js\": 160,\n\t\"./uz\": 161,\n\t\"./uz.js\": 161,\n\t\"./vi\": 162,\n\t\"./vi.js\": 162,\n\t\"./zh-cn\": 163,\n\t\"./zh-cn.js\": 163,\n\t\"./zh-tw\": 164,\n\t\"./zh-tw.js\": 164\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\treturn map[req] || (function() { throw new Error(\"Cannot find module '\" + req + \"'.\") }());\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 79;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L21vbWVudC9sb2NhbGUgXlxcLlxcLy4qJD9jYmJkIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBtYXAgPSB7XG5cdFwiLi9hZlwiOiA4MCxcblx0XCIuL2FmLmpzXCI6IDgwLFxuXHRcIi4vYXJcIjogODEsXG5cdFwiLi9hci1tYVwiOiA4Mixcblx0XCIuL2FyLW1hLmpzXCI6IDgyLFxuXHRcIi4vYXItc2FcIjogODMsXG5cdFwiLi9hci1zYS5qc1wiOiA4Myxcblx0XCIuL2FyLXRuXCI6IDg0LFxuXHRcIi4vYXItdG4uanNcIjogODQsXG5cdFwiLi9hci5qc1wiOiA4MSxcblx0XCIuL2F6XCI6IDg1LFxuXHRcIi4vYXouanNcIjogODUsXG5cdFwiLi9iZVwiOiA4Nixcblx0XCIuL2JlLmpzXCI6IDg2LFxuXHRcIi4vYmdcIjogODcsXG5cdFwiLi9iZy5qc1wiOiA4Nyxcblx0XCIuL2JuXCI6IDg4LFxuXHRcIi4vYm4uanNcIjogODgsXG5cdFwiLi9ib1wiOiA4OSxcblx0XCIuL2JvLmpzXCI6IDg5LFxuXHRcIi4vYnJcIjogOTAsXG5cdFwiLi9ici5qc1wiOiA5MCxcblx0XCIuL2JzXCI6IDkxLFxuXHRcIi4vYnMuanNcIjogOTEsXG5cdFwiLi9jYVwiOiA5Mixcblx0XCIuL2NhLmpzXCI6IDkyLFxuXHRcIi4vY3NcIjogOTMsXG5cdFwiLi9jcy5qc1wiOiA5Myxcblx0XCIuL2N2XCI6IDk0LFxuXHRcIi4vY3YuanNcIjogOTQsXG5cdFwiLi9jeVwiOiA5NSxcblx0XCIuL2N5LmpzXCI6IDk1LFxuXHRcIi4vZGFcIjogOTYsXG5cdFwiLi9kYS5qc1wiOiA5Nixcblx0XCIuL2RlXCI6IDk3LFxuXHRcIi4vZGUtYXRcIjogOTgsXG5cdFwiLi9kZS1hdC5qc1wiOiA5OCxcblx0XCIuL2RlLmpzXCI6IDk3LFxuXHRcIi4vZWxcIjogOTksXG5cdFwiLi9lbC5qc1wiOiA5OSxcblx0XCIuL2VuLWF1XCI6IDEwMCxcblx0XCIuL2VuLWF1LmpzXCI6IDEwMCxcblx0XCIuL2VuLWNhXCI6IDEwMSxcblx0XCIuL2VuLWNhLmpzXCI6IDEwMSxcblx0XCIuL2VuLWdiXCI6IDEwMixcblx0XCIuL2VuLWdiLmpzXCI6IDEwMixcblx0XCIuL2VvXCI6IDEwMyxcblx0XCIuL2VvLmpzXCI6IDEwMyxcblx0XCIuL2VzXCI6IDEwNCxcblx0XCIuL2VzLmpzXCI6IDEwNCxcblx0XCIuL2V0XCI6IDEwNSxcblx0XCIuL2V0LmpzXCI6IDEwNSxcblx0XCIuL2V1XCI6IDEwNixcblx0XCIuL2V1LmpzXCI6IDEwNixcblx0XCIuL2ZhXCI6IDEwNyxcblx0XCIuL2ZhLmpzXCI6IDEwNyxcblx0XCIuL2ZpXCI6IDEwOCxcblx0XCIuL2ZpLmpzXCI6IDEwOCxcblx0XCIuL2ZvXCI6IDEwOSxcblx0XCIuL2ZvLmpzXCI6IDEwOSxcblx0XCIuL2ZyXCI6IDExMCxcblx0XCIuL2ZyLWNhXCI6IDExMSxcblx0XCIuL2ZyLWNhLmpzXCI6IDExMSxcblx0XCIuL2ZyLmpzXCI6IDExMCxcblx0XCIuL2Z5XCI6IDExMixcblx0XCIuL2Z5LmpzXCI6IDExMixcblx0XCIuL2dsXCI6IDExMyxcblx0XCIuL2dsLmpzXCI6IDExMyxcblx0XCIuL2hlXCI6IDExNCxcblx0XCIuL2hlLmpzXCI6IDExNCxcblx0XCIuL2hpXCI6IDExNSxcblx0XCIuL2hpLmpzXCI6IDExNSxcblx0XCIuL2hyXCI6IDExNixcblx0XCIuL2hyLmpzXCI6IDExNixcblx0XCIuL2h1XCI6IDExNyxcblx0XCIuL2h1LmpzXCI6IDExNyxcblx0XCIuL2h5LWFtXCI6IDExOCxcblx0XCIuL2h5LWFtLmpzXCI6IDExOCxcblx0XCIuL2lkXCI6IDExOSxcblx0XCIuL2lkLmpzXCI6IDExOSxcblx0XCIuL2lzXCI6IDEyMCxcblx0XCIuL2lzLmpzXCI6IDEyMCxcblx0XCIuL2l0XCI6IDEyMSxcblx0XCIuL2l0LmpzXCI6IDEyMSxcblx0XCIuL2phXCI6IDEyMixcblx0XCIuL2phLmpzXCI6IDEyMixcblx0XCIuL2p2XCI6IDEyMyxcblx0XCIuL2p2LmpzXCI6IDEyMyxcblx0XCIuL2thXCI6IDEyNCxcblx0XCIuL2thLmpzXCI6IDEyNCxcblx0XCIuL2ttXCI6IDEyNSxcblx0XCIuL2ttLmpzXCI6IDEyNSxcblx0XCIuL2tvXCI6IDEyNixcblx0XCIuL2tvLmpzXCI6IDEyNixcblx0XCIuL2xiXCI6IDEyNyxcblx0XCIuL2xiLmpzXCI6IDEyNyxcblx0XCIuL2x0XCI6IDEyOCxcblx0XCIuL2x0LmpzXCI6IDEyOCxcblx0XCIuL2x2XCI6IDEyOSxcblx0XCIuL2x2LmpzXCI6IDEyOSxcblx0XCIuL21lXCI6IDEzMCxcblx0XCIuL21lLmpzXCI6IDEzMCxcblx0XCIuL21rXCI6IDEzMSxcblx0XCIuL21rLmpzXCI6IDEzMSxcblx0XCIuL21sXCI6IDEzMixcblx0XCIuL21sLmpzXCI6IDEzMixcblx0XCIuL21yXCI6IDEzMyxcblx0XCIuL21yLmpzXCI6IDEzMyxcblx0XCIuL21zXCI6IDEzNCxcblx0XCIuL21zLW15XCI6IDEzNSxcblx0XCIuL21zLW15LmpzXCI6IDEzNSxcblx0XCIuL21zLmpzXCI6IDEzNCxcblx0XCIuL215XCI6IDEzNixcblx0XCIuL215LmpzXCI6IDEzNixcblx0XCIuL25iXCI6IDEzNyxcblx0XCIuL25iLmpzXCI6IDEzNyxcblx0XCIuL25lXCI6IDEzOCxcblx0XCIuL25lLmpzXCI6IDEzOCxcblx0XCIuL25sXCI6IDEzOSxcblx0XCIuL25sLmpzXCI6IDEzOSxcblx0XCIuL25uXCI6IDE0MCxcblx0XCIuL25uLmpzXCI6IDE0MCxcblx0XCIuL3BsXCI6IDE0MSxcblx0XCIuL3BsLmpzXCI6IDE0MSxcblx0XCIuL3B0XCI6IDE0Mixcblx0XCIuL3B0LWJyXCI6IDE0Myxcblx0XCIuL3B0LWJyLmpzXCI6IDE0Myxcblx0XCIuL3B0LmpzXCI6IDE0Mixcblx0XCIuL3JvXCI6IDE0NCxcblx0XCIuL3JvLmpzXCI6IDE0NCxcblx0XCIuL3J1XCI6IDE0NSxcblx0XCIuL3J1LmpzXCI6IDE0NSxcblx0XCIuL3NpXCI6IDE0Nixcblx0XCIuL3NpLmpzXCI6IDE0Nixcblx0XCIuL3NrXCI6IDE0Nyxcblx0XCIuL3NrLmpzXCI6IDE0Nyxcblx0XCIuL3NsXCI6IDE0OCxcblx0XCIuL3NsLmpzXCI6IDE0OCxcblx0XCIuL3NxXCI6IDE0OSxcblx0XCIuL3NxLmpzXCI6IDE0OSxcblx0XCIuL3NyXCI6IDE1MCxcblx0XCIuL3NyLWN5cmxcIjogMTUxLFxuXHRcIi4vc3ItY3lybC5qc1wiOiAxNTEsXG5cdFwiLi9zci5qc1wiOiAxNTAsXG5cdFwiLi9zdlwiOiAxNTIsXG5cdFwiLi9zdi5qc1wiOiAxNTIsXG5cdFwiLi90YVwiOiAxNTMsXG5cdFwiLi90YS5qc1wiOiAxNTMsXG5cdFwiLi90aFwiOiAxNTQsXG5cdFwiLi90aC5qc1wiOiAxNTQsXG5cdFwiLi90bC1waFwiOiAxNTUsXG5cdFwiLi90bC1waC5qc1wiOiAxNTUsXG5cdFwiLi90clwiOiAxNTYsXG5cdFwiLi90ci5qc1wiOiAxNTYsXG5cdFwiLi90emxcIjogMTU3LFxuXHRcIi4vdHpsLmpzXCI6IDE1Nyxcblx0XCIuL3R6bVwiOiAxNTgsXG5cdFwiLi90em0tbGF0blwiOiAxNTksXG5cdFwiLi90em0tbGF0bi5qc1wiOiAxNTksXG5cdFwiLi90em0uanNcIjogMTU4LFxuXHRcIi4vdWtcIjogMTYwLFxuXHRcIi4vdWsuanNcIjogMTYwLFxuXHRcIi4vdXpcIjogMTYxLFxuXHRcIi4vdXouanNcIjogMTYxLFxuXHRcIi4vdmlcIjogMTYyLFxuXHRcIi4vdmkuanNcIjogMTYyLFxuXHRcIi4vemgtY25cIjogMTYzLFxuXHRcIi4vemgtY24uanNcIjogMTYzLFxuXHRcIi4vemgtdHdcIjogMTY0LFxuXHRcIi4vemgtdHcuanNcIjogMTY0XG59O1xuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpKTtcbn07XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdHJldHVybiBtYXBbcmVxXSB8fCAoZnVuY3Rpb24oKSB7IHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIicuXCIpIH0oKSk7XG59O1xud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IDc5O1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vbW9tZW50L2xvY2FsZSBeXFwuXFwvLiokXG4gKiogbW9kdWxlIGlkID0gNzlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 165:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports) {\n    \"use strict\";\n    var Caret = (function () {\n        function Caret() {\n        }\n        // From http://stackoverflow.com/questions/13949059/persisting-the-changes-of-range-objects-after-selection-in-html/13950376#13950376\n        Caret.getSelectionDiv = function (containerEl) {\n            if (window.getSelection && document.createRange) {\n                if (window.getSelection().rangeCount < 1) {\n                    return { start: 0, end: 0 };\n                }\n                var range = window.getSelection().getRangeAt(0);\n                var preSelectionRange = range.cloneRange();\n                preSelectionRange.selectNodeContents(containerEl);\n                preSelectionRange.setEnd(range.startContainer, range.startOffset);\n                var start = preSelectionRange.toString().length;\n                return {\n                    start: start,\n                    end: start + range.toString().length\n                };\n            }\n            else if (document.selection) {\n                var selectedTextRange = document.selection.createRange();\n                var preSelectionTextRange = document.body.createTextRange();\n                preSelectionTextRange.moveToElementText(containerEl);\n                preSelectionTextRange.setEndPoint(\"EndToStart\", selectedTextRange);\n                var start = preSelectionTextRange.text.length;\n                return {\n                    start: start,\n                    end: start + selectedTextRange.text.length\n                };\n            }\n            else {\n                throw new Error(\"Cursor operations not supported\");\n            }\n        };\n        Caret.getSelectionTextbox = function (containerEl) {\n            return { start: containerEl.selectionStart, end: containerEl.selectionEnd };\n        };\n        Caret.getSelection = function (containerEl) {\n            if (containerEl instanceof HTMLInputElement) {\n                return Caret.getSelectionTextbox(containerEl);\n            }\n            else {\n                return Caret.getSelectionDiv(containerEl);\n            }\n        };\n        Caret.setSelection = function (containerEl, savedSel) {\n            if (window.getSelection && document.createRange) {\n                var charIndex = 0, range = document.createRange();\n                range.setStart(containerEl, 0);\n                range.collapse(true);\n                var nodeStack = [containerEl], node, foundStart = false, stop = false;\n                while (!stop && (node = nodeStack.pop())) {\n                    if (node.nodeType == 3) {\n                        var nextCharIndex = charIndex + node.length;\n                        if (!foundStart && savedSel.start >= charIndex && savedSel.start <= nextCharIndex) {\n                            range.setStart(node, savedSel.start - charIndex);\n                            foundStart = true;\n                        }\n                        if (foundStart && savedSel.end >= charIndex && savedSel.end <= nextCharIndex) {\n                            range.setEnd(node, savedSel.end - charIndex);\n                            stop = true;\n                        }\n                        charIndex = nextCharIndex;\n                    }\n                    else {\n                        var i = node.childNodes.length;\n                        while (i--) {\n                            nodeStack.push(node.childNodes[i]);\n                        }\n                    }\n                }\n                var sel = window.getSelection();\n                sel.removeAllRanges();\n                sel.addRange(range);\n            }\n            else if (document.selection) {\n                var textRange = document.body.createTextRange();\n                textRange.moveToElementText(containerEl);\n                textRange.collapse(true);\n                textRange.moveEnd(\"character\", savedSel.end);\n                textRange.moveStart(\"character\", savedSel.start);\n                textRange.select();\n            }\n            else {\n                throw new Error(\"Cursor operations not supported\");\n            }\n        };\n        Caret.getPosition = function (containerEl) {\n            if (containerEl instanceof HTMLInputElement) {\n                return Caret.getPositionTextbox(containerEl);\n            }\n            else {\n                return Caret.getSelection(containerEl).start;\n            }\n        };\n        Caret.setPosition = function (containerEl, pos) {\n            if (containerEl instanceof HTMLInputElement) {\n                Caret.setPositionTextbox(containerEl, pos);\n            }\n            else {\n                Caret.setSelection(containerEl, { start: pos, end: pos });\n            }\n        };\n        Caret.getPositionTextbox = function (ctrl) {\n            var CaretPos = 0; // IE Support\n            if (document.selection) {\n                ctrl.focus();\n                var Sel = document.selection.createRange();\n                Sel.moveStart('character', -ctrl.value.length);\n                CaretPos = Sel.text.length;\n            }\n            else if (ctrl.selectionStart || ctrl.selectionStart == 0)\n                CaretPos = ctrl.selectionStart;\n            return (CaretPos);\n        };\n        Caret.setPositionTextbox = function (ctrl, pos) {\n            if (ctrl.setSelectionRange) {\n                ctrl.focus();\n                ctrl.setSelectionRange(pos, pos);\n            }\n            else if (ctrl.createTextRange) {\n                var range = ctrl.createTextRange();\n                range.collapse(true);\n                range.moveEnd('character', pos);\n                range.moveStart('character', pos);\n                range.select();\n            }\n        };\n        return Caret;\n    }());\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Caret;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceMappingURL=data:application/json;base64,");

/***/ },

/***/ 166:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(167)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, period_1) {\n    \"use strict\";\n    /**\n     * Returns a Period object representing the provided string period value.\n     * Only first symbol of each field tag is mandatory, the rest of the tag is optional. e.g. 1d = 1 day\n     * Spacing between the numbers and tags is optional. e.g. 1d = 1 d\n     * Having a tag with no number implies quantity of 1. e.g. d = 1d\n     * 'ago' suffix is optional.\n     * Commas can optionally separate the period parts.\n     *\n     * Ported from com.indeed.imhotep.sql.parser.PeriodParser.\n     */\n    var PeriodParser = (function () {\n        function PeriodParser() {\n        }\n        PeriodParser.getValueFromMatch = function (matchList, i) {\n            var fieldMatch = matchList[(i * 2) - 1];\n            if (!fieldMatch) {\n                return 0;\n            }\n            var value = matchList[i * 2];\n            return Number(value) || 1; // if we have a field match then we treat it as 1 by default\n        };\n        PeriodParser.parse = function (periodStr) {\n            var matcher = periodStr.match(PeriodParser.parseRegexp);\n            if (!matcher) {\n                return null;\n            }\n            var years = PeriodParser.getValueFromMatch(matcher, 1);\n            var months = PeriodParser.getValueFromMatch(matcher, 2);\n            var weeks = PeriodParser.getValueFromMatch(matcher, 3);\n            var days = PeriodParser.getValueFromMatch(matcher, 4);\n            var hours = PeriodParser.getValueFromMatch(matcher, 5);\n            var minutes = PeriodParser.getValueFromMatch(matcher, 6);\n            var seconds = PeriodParser.getValueFromMatch(matcher, 7);\n            return new period_1.default(years, months, weeks, days, hours, minutes, seconds);\n        };\n        return PeriodParser;\n    }());\n    PeriodParser.parseRegexp = new RegExp(\"^(\\\\s*(\\\\d+)?\\\\s*y(?:ear)?s?\\\\s*,?\\\\s*)?\" +\n        \"(\\\\s*(\\\\d+)?\\\\s*mo(?:nth)?s?\\\\s*,?\\\\s*)?\" +\n        \"(\\\\s*(\\\\d+)?\\\\s*w(?:eek)?s?\\\\s*,?\\\\s*)?\" +\n        \"(\\\\s*(\\\\d+)?\\\\s*d(?:ay)?s?\\\\s*,?\\\\s*)?\" +\n        \"(\\\\s*(\\\\d+)?\\\\s*h(?:our)?s?\\\\s*,?\\\\s*)?\" +\n        \"(\\\\s*(\\\\d+)?\\\\s*m(?:inute)?s?\\\\s*,?\\\\s*)?\" +\n        \"(\\\\s*(\\\\d+)?\\\\s*s(?:econd)?s?\\\\s*)?\" +\n        \"(?:ago)?\\\\s*$\");\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = PeriodParser;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3Rva2VuaXplci9wZXJpb2RwYXJzZXIudHM/YzY2MiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUGVyaW9kIGZyb20gJ3Rva2VuaXplci9wZXJpb2QnO1xuXG4vKipcbiAqIFJldHVybnMgYSBQZXJpb2Qgb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgcHJvdmlkZWQgc3RyaW5nIHBlcmlvZCB2YWx1ZS5cbiAqIE9ubHkgZmlyc3Qgc3ltYm9sIG9mIGVhY2ggZmllbGQgdGFnIGlzIG1hbmRhdG9yeSwgdGhlIHJlc3Qgb2YgdGhlIHRhZyBpcyBvcHRpb25hbC4gZS5nLiAxZCA9IDEgZGF5XG4gKiBTcGFjaW5nIGJldHdlZW4gdGhlIG51bWJlcnMgYW5kIHRhZ3MgaXMgb3B0aW9uYWwuIGUuZy4gMWQgPSAxIGRcbiAqIEhhdmluZyBhIHRhZyB3aXRoIG5vIG51bWJlciBpbXBsaWVzIHF1YW50aXR5IG9mIDEuIGUuZy4gZCA9IDFkXG4gKiAnYWdvJyBzdWZmaXggaXMgb3B0aW9uYWwuXG4gKiBDb21tYXMgY2FuIG9wdGlvbmFsbHkgc2VwYXJhdGUgdGhlIHBlcmlvZCBwYXJ0cy5cbiAqXG4gKiBQb3J0ZWQgZnJvbSBjb20uaW5kZWVkLmltaG90ZXAuc3FsLnBhcnNlci5QZXJpb2RQYXJzZXIuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBlcmlvZFBhcnNlciB7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcGFyc2VSZWdleHAgPSBuZXcgUmVnRXhwKFwiXihcXFxccyooXFxcXGQrKT9cXFxccyp5KD86ZWFyKT9zP1xcXFxzKiw/XFxcXHMqKT9cIiArXG4gICAgICAgIFwiKFxcXFxzKihcXFxcZCspP1xcXFxzKm1vKD86bnRoKT9zP1xcXFxzKiw/XFxcXHMqKT9cIiArXG4gICAgICAgIFwiKFxcXFxzKihcXFxcZCspP1xcXFxzKncoPzplZWspP3M/XFxcXHMqLD9cXFxccyopP1wiICtcbiAgICAgICAgXCIoXFxcXHMqKFxcXFxkKyk/XFxcXHMqZCg/OmF5KT9zP1xcXFxzKiw/XFxcXHMqKT9cIiArXG4gICAgICAgIFwiKFxcXFxzKihcXFxcZCspP1xcXFxzKmgoPzpvdXIpP3M/XFxcXHMqLD9cXFxccyopP1wiICtcbiAgICAgICAgXCIoXFxcXHMqKFxcXFxkKyk/XFxcXHMqbSg/OmludXRlKT9zP1xcXFxzKiw/XFxcXHMqKT9cIiArXG4gICAgICAgIFwiKFxcXFxzKihcXFxcZCspP1xcXFxzKnMoPzplY29uZCk/cz9cXFxccyopP1wiICtcbiAgICAgICAgXCIoPzphZ28pP1xcXFxzKiRcIik7XG5cbiAgICBwcml2YXRlIHN0YXRpYyBnZXRWYWx1ZUZyb21NYXRjaChtYXRjaExpc3Q6IHN0cmluZ1tdLCBpOiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgICB2YXIgZmllbGRNYXRjaCA9IG1hdGNoTGlzdFsoaSAqIDIpIC0gMV07XG4gICAgICAgIGlmKCFmaWVsZE1hdGNoKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdmFsdWUgPSBtYXRjaExpc3RbaSAqIDJdO1xuICAgICAgICByZXR1cm4gTnVtYmVyKHZhbHVlKSB8fCAxOyAvLyBpZiB3ZSBoYXZlIGEgZmllbGQgbWF0Y2ggdGhlbiB3ZSB0cmVhdCBpdCBhcyAxIGJ5IGRlZmF1bHRcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHBhcnNlKHBlcmlvZFN0cjogc3RyaW5nKTogUGVyaW9kIHtcbiAgICAgICAgdmFyIG1hdGNoZXIgPSBwZXJpb2RTdHIubWF0Y2goUGVyaW9kUGFyc2VyLnBhcnNlUmVnZXhwKTtcbiAgICAgICAgaWYoIW1hdGNoZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHZhciB5ZWFycyA9IFBlcmlvZFBhcnNlci5nZXRWYWx1ZUZyb21NYXRjaChtYXRjaGVyLCAxKTtcbiAgICAgICAgdmFyIG1vbnRocyA9IFBlcmlvZFBhcnNlci5nZXRWYWx1ZUZyb21NYXRjaChtYXRjaGVyLCAyKTtcbiAgICAgICAgdmFyIHdlZWtzID0gUGVyaW9kUGFyc2VyLmdldFZhbHVlRnJvbU1hdGNoKG1hdGNoZXIsIDMpO1xuICAgICAgICB2YXIgZGF5cyA9IFBlcmlvZFBhcnNlci5nZXRWYWx1ZUZyb21NYXRjaChtYXRjaGVyLCA0KTtcbiAgICAgICAgdmFyIGhvdXJzID0gUGVyaW9kUGFyc2VyLmdldFZhbHVlRnJvbU1hdGNoKG1hdGNoZXIsIDUpO1xuICAgICAgICB2YXIgbWludXRlcyA9IFBlcmlvZFBhcnNlci5nZXRWYWx1ZUZyb21NYXRjaChtYXRjaGVyLCA2KTtcbiAgICAgICAgdmFyIHNlY29uZHMgPSBQZXJpb2RQYXJzZXIuZ2V0VmFsdWVGcm9tTWF0Y2gobWF0Y2hlciwgNyk7XG4gICAgICAgIHJldHVybiBuZXcgUGVyaW9kKHllYXJzLCBtb250aHMsIHdlZWtzLCBkYXlzLCBob3VycywgbWludXRlcywgc2Vjb25kcyk7XG4gICAgfVxuXG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiB0b2tlbml6ZXIvcGVyaW9kcGFyc2VyLnRzXG4gKiovIl0sIm1hcHBpbmdzIjoiOztBQUVBOzs7Ozs7Ozs7QUFTQTtBQUNBO0FBQUE7QUFrQ0E7QUF4QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBakNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 167:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports) {\n    \"use strict\";\n    // like a JodaTime Period\n    var Period = (function () {\n        function Period(years, months, weeks, days, hours, minutes, seconds) {\n            this.years = years;\n            this.months = months;\n            this.weeks = weeks;\n            this.days = days;\n            this.hours = hours;\n            this.minutes = minutes;\n            this.seconds = seconds;\n        }\n        Object.defineProperty(Period.prototype, \"totalDays\", {\n            get: function () {\n                return Math.floor(this.years * 365 + this.months * 30 + this.weeks * 7 + this.days +\n                    this.hours / 24 + this.minutes / 24 / 60 + this.seconds / 24 / 60 / 60);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return Period;\n    }());\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Period;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3Rva2VuaXplci9wZXJpb2QudHM/M2E0NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBsaWtlIGEgSm9kYVRpbWUgUGVyaW9kXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQZXJpb2Qge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgeWVhcnM6IG51bWJlcixcbiAgICAgICAgcHVibGljIG1vbnRoczogbnVtYmVyLFxuICAgICAgICBwdWJsaWMgd2Vla3M6IG51bWJlcixcbiAgICAgICAgcHVibGljIGRheXM6IG51bWJlcixcbiAgICAgICAgcHVibGljIGhvdXJzOiBudW1iZXIsXG4gICAgICAgIHB1YmxpYyBtaW51dGVzOiBudW1iZXIsXG4gICAgICAgIHB1YmxpYyBzZWNvbmRzOiBudW1iZXIpIHsgfVxuXG4gICAgZ2V0IHRvdGFsRGF5cygpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcih0aGlzLnllYXJzICogMzY1ICsgdGhpcy5tb250aHMgKiAzMCArIHRoaXMud2Vla3MgKiA3ICsgdGhpcy5kYXlzICtcbiAgICAgICAgICAgIHRoaXMuaG91cnMgLyAyNCArIHRoaXMubWludXRlcyAvIDI0IC8gNjAgKyB0aGlzLnNlY29uZHMgLyAyNCAvIDYwIC8gNjApO1xuICAgIH1cbn1cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHRva2VuaXplci9wZXJpb2QudHNcbiAqKi8iXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBQ0E7QUFBQTs7Ozs7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 168:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(jQuery) {/// <reference path=\"deps.d.ts\" />\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(1), __webpack_require__(2), __webpack_require__(14), __webpack_require__(165), __webpack_require__(12), __webpack_require__(170), __webpack_require__(169), __webpack_require__(172)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, $, _, metadatacache_1, caret_1, utils_1, token_1, tokenizer_1, fieldtype_1) {\n    \"use strict\";\n    __webpack_require__(173);\n    __webpack_require__(174);\n    __webpack_require__(176);\n    // var autocomplete = require('jquery-ui/ui/widgets/autocomplete');\n    var autocompleteSelectedWithMouse = false;\n    var Autocomplete = (function () {\n        function Autocomplete() {\n        }\n        Autocomplete.initAutocompleteForTextBox = function (textbox, viewName, includeFields, includeMetrics, cid, model, macros) {\n            var input = $(textbox);\n            var prevActiveElement;\n            var currentToken = null;\n            var dontActivateOnNextFocus = false;\n            var justDefocusedWithAutocompleteHidden = false;\n            var windowJustFocused = false;\n            $(window).on(\"blur.\" + viewName + \"-\" + cid, function () {\n                if (justDefocusedWithAutocompleteHidden) {\n                    dontActivateOnNextFocus = true;\n                }\n                prevActiveElement = document.activeElement;\n            }).on(\"focus.\" + viewName + \"-\" + cid, function () {\n                windowJustFocused = true;\n                window.setTimeout(function () {\n                    dontActivateOnNextFocus = false;\n                    windowJustFocused = false;\n                }, 200);\n            });\n            input\n                .on(\"keydown\", function (event) {\n                // don't navigate away from the field on tab when selecting an item\n                if ((event.keyCode === $.ui.keyCode.TAB || event.keyCode === $.ui.keyCode.ENTER) &&\n                    $(this).data(\"ui-autocomplete\").menu.active && !autocompleteSelectedWithMouse) {\n                    event.preventDefault();\n                    event.stopPropagation();\n                }\n                else if (event.keyCode === $.ui.keyCode.LEFT || event.keyCode === $.ui.keyCode.RIGHT ||\n                    event.keyCode == $.ui.keyCode.HOME || event.keyCode == $.ui.keyCode.END) {\n                    // TODO: make autocomplete not show up when it is hidden and LEFT/RIGHT is pressed\n                    if (input.data('is_open')) {\n                        // have to do a timeout to get the correct caret position\n                        window.setTimeout(function () {\n                            if (input.is(\":focus\")) {\n                                input.autocomplete(\"search\");\n                            }\n                        }, 1);\n                    }\n                }\n            })\n                .on(\"click\", function () {\n                // have to do a timeout to get the correct caret position\n                if ($(this).data('is_open') && $(this).is(\":focus\")) {\n                    input.autocomplete(\"search\");\n                }\n            })\n                .on(\"focus\", function () {\n                if (dontActivateOnNextFocus) {\n                    dontActivateOnNextFocus = false;\n                    return;\n                }\n                // have to do a timeout to get the correct caret position\n                window.setTimeout(function () {\n                    if (document.activeElement == input[0]) {\n                        input.autocomplete(\"search\");\n                    }\n                }, 1);\n            })\n                .on(\"blur\", function () {\n                if (!input.autocomplete('widget').is(':visible')) {\n                    justDefocusedWithAutocompleteHidden = true;\n                    window.setTimeout(function () {\n                        justDefocusedWithAutocompleteHidden = false;\n                    }, 500);\n                }\n                prevActiveElement = null;\n            })\n                .autocomplete({\n                minLength: 0,\n                delay: 0,\n                source: function (request, response) {\n                    // hack to avoid memory leak in jqueryui autocomplete.\n                    // TODO: delete after https://bugs.jqueryui.com/ticket/10050 is fixed\n                    input.data(\"ui-autocomplete\").menu.bindings = $();\n                    var val = input.text();\n                    tokenizer_1.default.tokenize(val).done(function (tokens) {\n                        var caretPosition = caret_1.default.getPosition(input[0]);\n                        // we want to base what we are autocompleting on the token at the character right before the cursor\n                        var positionForAutocomplete = caretPosition - 1;\n                        var currentTokenIndex = tokens.length;\n                        // We want to find a token to autocomplete that is an Identifier\n                        // If cursor is at a Reserved keyword or between tokens we create an empty token to use\n                        // TODO: maybe clean up the logic\n                        for (var i = 0; i < tokens.length; i++) {\n                            var token = tokens[i];\n                            if (positionForAutocomplete >= token.index &&\n                                positionForAutocomplete < token.index + token.length) {\n                                // we got a token match\n                                if (token.tag == \"RESERVED\") {\n                                    currentToken = new token_1.default(\"\", token.index + token.length, \"IDENTIFIER\");\n                                    currentTokenIndex = i + 1;\n                                }\n                                else {\n                                    currentToken = token;\n                                    currentTokenIndex = i;\n                                }\n                                break;\n                            }\n                            else if (positionForAutocomplete < token.index) {\n                                currentTokenIndex = i;\n                                currentToken = new token_1.default(\"\", caretPosition, \"IDENTIFIER\");\n                                break;\n                            }\n                        }\n                        if (currentTokenIndex == tokens.length) {\n                            currentToken = new token_1.default(\"\", caretPosition, \"IDENTIFIER\");\n                        }\n                        var autocompleteQuery = val.slice(currentToken.index, caretPosition);\n                        var autocompleteType = AutocompleteType.FIELD;\n                        var fieldName;\n                        if (!macros) {\n                            if (currentTokenIndex >= 2) {\n                                var previousToken = tokens[currentTokenIndex - 1];\n                                if ((Autocomplete.isEqualityKeyword(previousToken.text)) && previousToken.tag == \"RESERVED\") {\n                                    var prevPrevToken = tokens[currentTokenIndex - 2];\n                                    if (prevPrevToken.tag == \"IDENTIFIER\") {\n                                        autocompleteType = AutocompleteType.TERM;\n                                        fieldName = prevPrevToken.text;\n                                    }\n                                }\n                            }\n                        }\n                        if (autocompleteType == AutocompleteType.FIELD) {\n                            metadatacache_1.default.getFullDatasetInfo(model.getDataset()).done(function (datasetInfo) {\n                                var valueSorter = function (a, b) {\n                                    return a.value.localeCompare(b.value);\n                                };\n                                var getLabel = function (name, description, unit, markInts) {\n                                    var finalUnit = \"\";\n                                    if (unit) {\n                                        finalUnit = \" (\" + unit + \")\";\n                                    }\n                                    else if (markInts) {\n                                        finalUnit = \" (int)\";\n                                    }\n                                    var finalDescription = name;\n                                    if (description) {\n                                        finalDescription += \" - \" + description;\n                                    }\n                                    if (finalUnit) {\n                                        finalDescription += finalUnit;\n                                    }\n                                    return finalDescription;\n                                };\n                                var termData = [];\n                                var fieldData = datasetInfo.fields.map(function (field) {\n                                    // TODO: avoid the hacky casts when there are string enums in TS\n                                    var isInt = field.type == fieldtype_1.default[fieldtype_1.default.Integer];\n                                    return { value: field.name, label: getLabel(field.name, field.description, null, isInt) };\n                                });\n                                //                        fieldData.sort(valueSorter);\n                                var metricData = datasetInfo.metrics.map(function (field) {\n                                    return { value: field.name, label: getLabel(field.name, field.description, field.unit, includeFields) };\n                                });\n                                //                        metricData.sort(valueSorter);\n                                var autocompleteData;\n                                if (!includeFields) {\n                                    var intFieldData = datasetInfo.fields.filter(function (field) {\n                                        return field.type == fieldtype_1.default[fieldtype_1.default.Integer];\n                                    }).map(function (field) {\n                                        return { value: field.name, label: getLabel(field.name, field.description, null, false) };\n                                    });\n                                    autocompleteData = metricData.concat(intFieldData);\n                                }\n                                else if (!includeMetrics) {\n                                    autocompleteData = fieldData;\n                                }\n                                else {\n                                    autocompleteData = fieldData.concat(metricData);\n                                    if (macros) {\n                                        autocompleteData = autocompleteData.concat(termData);\n                                    }\n                                }\n                                autocompleteData.sort(valueSorter);\n                                autocompleteData = _.uniq(autocompleteData, true, function (item) {\n                                    return item.value;\n                                });\n                                response(Autocomplete.filterAutocomplete(autocompleteData, autocompleteQuery, true));\n                            });\n                        }\n                        else if (autocompleteType == AutocompleteType.TERM) {\n                            metadatacache_1.default.getTermList(model.getDataset(), fieldName).done(function (data) {\n                                var autocompleteData = data.topTerms.map(function (str) {\n                                    var label = str === \"\" ? '\"\"' : str;\n                                    return { value: str, label: label };\n                                });\n                                response(Autocomplete.filterAutocomplete(autocompleteData, autocompleteQuery, false));\n                            });\n                        }\n                    });\n                },\n                focus: function (event) {\n                    autocompleteSelectedWithMouse = typeof event.keyCode === 'undefined' || event.keyCode == 0;\n                    // prevent value inserted on focus\n                    return false;\n                },\n                select: function (event, ui) {\n                    var originalEvent = event.originalEvent.originalEvent;\n                    var mouseClickActivated = originalEvent.type == \"click\";\n                    if (!mouseClickActivated && autocompleteSelectedWithMouse &&\n                        (event.keyCode == $.ui.keyCode.ENTER || event.keyCode == $.ui.keyCode.TAB)) {\n                        // this event got cancelled by JQueryUI so have to re-trigger\n                        input.trigger(jQuery.Event(originalEvent.type, originalEvent));\n                        return false;\n                    }\n                    event.preventDefault();\n                    if (windowJustFocused) {\n                        return false; // prevent accidental selects on window activation\n                    }\n                    var oldTextboxFullValue = input.text();\n                    var replacementStartIndex = currentToken.index;\n                    var replacementEndIndex = currentToken.index + currentToken.length;\n                    var autocompletedValue = ui.item.value;\n                    if (utils_1.default.iqlTokenNeedsQuoting(autocompletedValue) && autocompletedValue != '\"\"') {\n                        autocompletedValue = '\"' + autocompletedValue + '\"';\n                        var lastCharPreInsertion = oldTextboxFullValue[currentToken.index - 1];\n                        if (lastCharPreInsertion === \"'\" || lastCharPreInsertion === '\"') {\n                            replacementStartIndex--; //replace the old quote\n                        }\n                    }\n                    caret_1.default.setSelection(input[0], { start: replacementStartIndex, end: replacementEndIndex });\n                    document.execCommand(\"insertText\", false, autocompletedValue); // this allows undo to work\n                    caret_1.default.setPosition(input[0], replacementStartIndex + autocompletedValue.length);\n                    return false;\n                }\n            });\n            //bind open data to target\n            input.bind('autocompleteopen', function (event) {\n                autocompleteSelectedWithMouse = false;\n                $(this).data('is_open', true);\n            });\n            input.bind('autocompleteclose', function (event) {\n                $(this).data('is_open', false);\n            });\n        };\n        Autocomplete.isEqualityKeyword = function (text) {\n            return text == \"=\" || text == \"!=\" || text == \":\";\n        };\n        Autocomplete.filterAutocomplete = function (items, query, alphabeticSort) {\n            var filtered = $.ui.autocomplete.filter(items, query);\n            var getMatchType = function (item) {\n                var valMatchIndex = item.value.indexOf(query);\n                if (valMatchIndex === 0) {\n                    return 0; // prefix match is the best\n                }\n                else if (valMatchIndex > 0) {\n                    return 1;\n                }\n                else if (item.label.indexOf(query) >= 0) {\n                    return 2;\n                }\n                else {\n                    return 3;\n                }\n            };\n            // use underscore's sort as it's stable unlike Array.sort\n            return _.sortBy(filtered, function (item) {\n                if (alphabeticSort) {\n                    return getMatchType(item) + item.value;\n                }\n                else {\n                    return getMatchType(item);\n                }\n            });\n        };\n        return Autocomplete;\n    }());\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Autocomplete;\n    var AutocompleteItem = (function () {\n        function AutocompleteItem(value, label) {\n            this.value = value;\n            this.label = label;\n        }\n        return AutocompleteItem;\n    }());\n    var AutocompleteType;\n    (function (AutocompleteType) {\n        AutocompleteType[AutocompleteType[\"FIELD\"] = 0] = \"FIELD\";\n        AutocompleteType[AutocompleteType[\"TERM\"] = 1] = \"TERM\";\n    })(AutocompleteType || (AutocompleteType = {}));\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))//# sourceMappingURL=data:application/json;base64,");

/***/ },

/***/ 169:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function($) {/// <reference path=\"../deps.d.ts\" />\n/// <amd-dependency path=\"lex\"/>\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(15), __webpack_require__(170), __webpack_require__(171)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, iqlclient_1, token_1) {\n    \"use strict\";\n    var Lexer = __webpack_require__(171);\n    var Tokenizer = (function () {\n        function Tokenizer() {\n        }\n        // Basic query tokenization using Lex js library to avoid hitting the server\n        Tokenizer.tokenize = function (val) {\n            var deferred = $.Deferred();\n            var lexer = new Lexer;\n            var tokens = [];\n            var offset = 0;\n            lexer\n                .addRule(/(\\+|-|\\*|\\/|%|,|\\(|\\)|\\[|]|<|>|<=|>=|=|!=|:|=~|!=~)/, function (lexeme) {\n                var token = new token_1.default(lexeme, offset, \"RESERVED\");\n                offset += lexeme.length;\n                return token;\n            })\n                .addRule(/[_a-z][_a-z0-9]*/i, function (lexeme) {\n                var token = new token_1.default(lexeme, offset, \"IDENTIFIER\");\n                offset += lexeme.length;\n                return token;\n            })\n                .addRule(/[0-9]+/, function (lexeme) {\n                var token = new token_1.default(lexeme, offset, \"INTEGER\");\n                offset += lexeme.length;\n                return token;\n            })\n                .addRule(/('(('')|[^'])*')|(\"((\\\\.)|[^\"\\\\])*\")/, function (lexeme) {\n                // ignore quotes\n                lexeme = lexeme.substring(1, lexeme.length - 1);\n                offset++;\n                var token = new token_1.default(lexeme, offset, \"STRING\");\n                offset += lexeme.length;\n                offset++;\n                return token;\n            })\n                .addRule(/('(('')|[^'])*)|(\"((\\\\.)|[^\"\\\\])*)/, function (lexeme) {\n                // skip opening quote\n                lexeme = lexeme.substr(1);\n                offset++;\n                var token = new token_1.default(lexeme, offset, \"STRING\");\n                offset += lexeme.length;\n                return token;\n            })\n                .addRule(/ +/, function (lexeme) {\n                // ignore space but update offset\n                offset += lexeme.length;\n            })\n                .addRule(/./, function (lexeme) {\n                // we got something unexpected. ignore\n                offset += lexeme.length;\n            });\n            lexer.setInput(val);\n            var token;\n            while (token = lexer.lex()) {\n                tokens.push(token);\n            }\n            //        console.log(\"Lexer: \" + tokens.join('_'));\n            return deferred.resolve(tokens).promise();\n        };\n        // In-place replacement for the function above that uses proper Java tokenizer\n        // by querying the IQL backend.\n        Tokenizer.tokenizeServer = function (val) {\n            var deferred = $.Deferred();\n            iqlclient_1.default.tokenize(val).done(function (data) {\n                deferred.resolve(data.tokens);\n            });\n            return deferred.promise();\n        };\n        Tokenizer.expressionToString = function (expression, splitOperator) {\n            if (splitOperator === void 0) { splitOperator = \"AND\"; }\n            if (expression.name != undefined) {\n                return expression.name;\n            }\n            if (splitOperator == \"\") {\n            }\n        };\n        return Tokenizer;\n    }());\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Tokenizer;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3Rva2VuaXplci90b2tlbml6ZXIudHM/YTE2MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vZGVwcy5kLnRzXCIgLz5cbi8vLyA8YW1kLWRlcGVuZGVuY3kgcGF0aD1cImxleFwiLz5cblxudmFyIExleGVyIDogYW55ID0gcmVxdWlyZSgnbGV4Jyk7XG5pbXBvcnQgSVFMQ2xpZW50IGZyb20gJ2lxbGNsaWVudCc7XG5pbXBvcnQgVG9rZW4gZnJvbSAndG9rZW5pemVyL3Rva2VuJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVG9rZW5pemVyIHtcbiAgICAvLyBCYXNpYyBxdWVyeSB0b2tlbml6YXRpb24gdXNpbmcgTGV4IGpzIGxpYnJhcnkgdG8gYXZvaWQgaGl0dGluZyB0aGUgc2VydmVyXG4gICAgc3RhdGljIHRva2VuaXplKHZhbDogc3RyaW5nKTogSlF1ZXJ5UHJvbWlzZTxUb2tlbltdPiB7XG4gICAgICAgIHZhciBkZWZlcnJlZCA9ICQuRGVmZXJyZWQoKTtcbiAgICAgICAgdmFyIGxleGVyID0gbmV3IExleGVyO1xuXG4gICAgICAgIHZhciB0b2tlbnM6IFRva2VuW10gPSBbXTtcbiAgICAgICAgdmFyIG9mZnNldCA9IDA7XG4gICAgICAgIGxleGVyXG4gICAgICAgICAgICAuYWRkUnVsZSgvKFxcK3wtfFxcKnxcXC98JXwsfFxcKHxcXCl8XFxbfF18PHw+fDw9fD49fD18IT18Onw9fnwhPX4pLyxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbihsZXhlbWU6IHN0cmluZykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdG9rZW4gPSBuZXcgVG9rZW4obGV4ZW1lLCBvZmZzZXQsIFwiUkVTRVJWRURcIik7XG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSBsZXhlbWUubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLmFkZFJ1bGUoL1tfYS16XVtfYS16MC05XSovaSwgZnVuY3Rpb24gKGxleGVtZTogc3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRva2VuID0gbmV3IFRva2VuKGxleGVtZSwgb2Zmc2V0LCBcIklERU5USUZJRVJcIik7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IGxleGVtZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5hZGRSdWxlKC9bMC05XSsvLCBmdW5jdGlvbiAobGV4ZW1lOiBzdHJpbmcpIHtcbiAgICAgICAgICAgICAgICB2YXIgdG9rZW4gPSBuZXcgVG9rZW4obGV4ZW1lLCBvZmZzZXQsIFwiSU5URUdFUlwiKTtcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gbGV4ZW1lLmxlbmd0aDtcbiAgICAgICAgICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmFkZFJ1bGUoLygnKCgnJyl8W14nXSkqJyl8KFwiKChcXFxcLil8W15cIlxcXFxdKSpcIikvLCBmdW5jdGlvbiAobGV4ZW1lOiBzdHJpbmcpIHtcbiAgICAgICAgICAgICAgICAvLyBpZ25vcmUgcXVvdGVzXG4gICAgICAgICAgICAgICAgbGV4ZW1lID0gbGV4ZW1lLnN1YnN0cmluZygxLCBsZXhlbWUubGVuZ3RoLTEpO1xuICAgICAgICAgICAgICAgIG9mZnNldCsrO1xuICAgICAgICAgICAgICAgIHZhciB0b2tlbiA9IG5ldyBUb2tlbihsZXhlbWUsIG9mZnNldCwgXCJTVFJJTkdcIik7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IGxleGVtZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgb2Zmc2V0Kys7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5hZGRSdWxlKC8oJygoJycpfFteJ10pKil8KFwiKChcXFxcLil8W15cIlxcXFxdKSopLywgZnVuY3Rpb24gKGxleGVtZTogc3RyaW5nKSB7ICAvLyB1bmNsb3NlZCBzdHJpbmdcbiAgICAgICAgICAgICAgICAvLyBza2lwIG9wZW5pbmcgcXVvdGVcbiAgICAgICAgICAgICAgICBsZXhlbWUgPSBsZXhlbWUuc3Vic3RyKDEpO1xuICAgICAgICAgICAgICAgIG9mZnNldCsrO1xuICAgICAgICAgICAgICAgIHZhciB0b2tlbiA9IG5ldyBUb2tlbihsZXhlbWUsIG9mZnNldCwgXCJTVFJJTkdcIik7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IGxleGVtZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5hZGRSdWxlKC8gKy8sIGZ1bmN0aW9uIChsZXhlbWU6IHN0cmluZykge1xuICAgICAgICAgICAgICAgIC8vIGlnbm9yZSBzcGFjZSBidXQgdXBkYXRlIG9mZnNldFxuICAgICAgICAgICAgICAgIG9mZnNldCArPSBsZXhlbWUubGVuZ3RoO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5hZGRSdWxlKC8uLywgZnVuY3Rpb24gKGxleGVtZTogc3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgLy8gd2UgZ290IHNvbWV0aGluZyB1bmV4cGVjdGVkLiBpZ25vcmVcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gbGV4ZW1lLmxlbmd0aDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBsZXhlci5zZXRJbnB1dCh2YWwpO1xuXG4gICAgICAgIHZhciB0b2tlbjogVG9rZW47XG4gICAgICAgIHdoaWxlKHRva2VuID0gbGV4ZXIubGV4KCkpIHtcbiAgICAgICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgfVxuLy8gICAgICAgIGNvbnNvbGUubG9nKFwiTGV4ZXI6IFwiICsgdG9rZW5zLmpvaW4oJ18nKSk7XG4gICAgICAgIHJldHVybiBkZWZlcnJlZC5yZXNvbHZlKHRva2VucykucHJvbWlzZSgpO1xuICAgIH1cblxuICAgIC8vIEluLXBsYWNlIHJlcGxhY2VtZW50IGZvciB0aGUgZnVuY3Rpb24gYWJvdmUgdGhhdCB1c2VzIHByb3BlciBKYXZhIHRva2VuaXplclxuICAgIC8vIGJ5IHF1ZXJ5aW5nIHRoZSBJUUwgYmFja2VuZC5cbiAgICBzdGF0aWMgdG9rZW5pemVTZXJ2ZXIodmFsOiBzdHJpbmcpOiBKUXVlcnlQcm9taXNlPFRva2VuW10+IHtcbiAgICAgICAgdmFyIGRlZmVycmVkID0gJC5EZWZlcnJlZCgpO1xuICAgICAgICBJUUxDbGllbnQudG9rZW5pemUodmFsKS5kb25lKChkYXRhOiBhbnkpPT4ge1xuICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShkYXRhLnRva2Vucyk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZSgpO1xuICAgIH1cblxuICAgIHN0YXRpYyBleHByZXNzaW9uVG9TdHJpbmcoZXhwcmVzc2lvbjogYW55LCBzcGxpdE9wZXJhdG9yOiBzdHJpbmcgPSBcIkFORFwiKSB7XG4gICAgICAgIGlmKGV4cHJlc3Npb24ubmFtZSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBleHByZXNzaW9uLm5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYoc3BsaXRPcGVyYXRvciA9PSBcIlwiKSB7XG5cbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHRva2VuaXplci90b2tlbml6ZXIudHNcbiAqKi8iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7OztBQUVBO0FBSUE7QUFBQTtBQStFQTtBQTlFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBOzs7Ozs7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 170:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports) {\n    \"use strict\";\n    var Token = (function () {\n        function Token(text, index, tag) {\n            this.text = text;\n            this.index = index;\n            this.tag = tag;\n        }\n        Object.defineProperty(Token.prototype, \"length\", {\n            get: function () {\n                return this.text.length;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Token.prototype, \"end\", {\n            get: function () {\n                return this.index + this.text.length;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Token.prototype.toString = function () {\n            return this.text + \"(\" + this.tag + \")@\" + this.index;\n        };\n        return Token;\n    }());\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Token;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3Rva2VuaXplci90b2tlbi50cz9hNTJmIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIFRva2VuIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIHRleHQ6IHN0cmluZyxcbiAgICAgICAgcHVibGljIGluZGV4OiBudW1iZXIsXG4gICAgICAgIHB1YmxpYyB0YWc6IHN0cmluZykgeyB9XG5cbiAgICBnZXQgbGVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50ZXh0Lmxlbmd0aDtcbiAgICB9XG5cbiAgICBnZXQgZW5kKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbmRleCArIHRoaXMudGV4dC5sZW5ndGg7XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRleHQgKyBcIihcIiArIHRoaXMudGFnICsgXCIpQFwiICsgdGhpcy5pbmRleDtcbiAgICB9XG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiB0b2tlbml6ZXIvdG9rZW4udHNcbiAqKi8iXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7OztBQUFBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7OztBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTs7Ozs7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 172:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports) {\n    \"use strict\";\n    var FieldType;\n    (function (FieldType) {\n        FieldType[FieldType[\"Integer\"] = 0] = \"Integer\";\n        FieldType[FieldType[\"String\"] = 1] = \"String\";\n    })(FieldType || (FieldType = {}));\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = FieldType;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL21ldGFkYXRhL2ZpZWxkdHlwZS50cz84ZTg2Il0sInNvdXJjZXNDb250ZW50IjpbImVudW0gRmllbGRUeXBlIHtcbiAgICBJbnRlZ2VyLFxuICAgIFN0cmluZ1xufVxuXG5leHBvcnQgZGVmYXVsdCBGaWVsZFR5cGU7XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogbWV0YWRhdGEvZmllbGR0eXBlLnRzXG4gKiovIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7OzsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 187:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/// <reference path=\"../deps.d.ts\" />\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(1), __webpack_require__(2), __webpack_require__(8), __webpack_require__(188), __webpack_require__(16), __webpack_require__(15), __webpack_require__(14), __webpack_require__(9), __webpack_require__(30), __webpack_require__(168), __webpack_require__(189), __webpack_require__(191)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, $, _, Backbone, gdoc_1, backend_1, iqlclient_1, metadatacache_1, events_1, macros_1, autocomplete_1) {\n    \"use strict\";\n    /// <amd-dependency path=\"controls/controls.css\" />\n    /// <amd-dependency path=\"controls/controls.html\"/>\n    var templateText = __webpack_require__(191);\n    var Controls = (function (_super) {\n        __extends(Controls, _super);\n        function Controls() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.template = _.template(templateText);\n            _this.macroAutocompleteInitialized = false;\n            return _this;\n        }\n        Controls.prototype.events = function () {\n            return {\n                \"click #runbutton\": this.onRunClick,\n                \"click .clearcache\": function () { metadatacache_1.default.clearCache(); },\n                \"click .gdoclink\": this.onGDocClick,\n                \"change .backend\": this.onBackendChanged,\n                \"change .limit\": this.onLimitChange,\n                \"change .extreme-checkbox\": this.onExtremeChange,\n                \"keyup .macrobox\": this.onMacroChanged,\n                \"input .macrobox\": this.onMacroChanged,\n                \"keydown .macrobox\": this.onMacroKeydown,\n            };\n        };\n        Controls.prototype.initialize = function (attributes) {\n            this.querySet = attributes.querySet;\n            this.listenTo(this.model, \"change:backend\", this.onBackendModelChanged);\n            this.listenTo(this.model, \"change:limit\", this.onLimitModelChanged);\n            this.listenTo(this.model, \"change:macro\", this.onMacroModelChanged);\n            this.listenTo(this.model, \"change:extremeMode\", this.onExtremeModelChanged);\n            this.listenTo(events_1.default.eventBus, events_1.default.extractMacroRequest, this.extractExprToMacro);\n            this.listenTo(events_1.default.eventBus, events_1.default.updateMacroModel, this.initMacroAutocomplete);\n            this.listenTo(events_1.default.eventBus, events_1.default.execute, this.onQueryExecution);\n        };\n        Controls.prototype.render = function () {\n            this.$el.html(this.template({ model: this.model, backends: backend_1.default.INSTANCES }));\n            this.initLinks();\n            this.onLimitModelChanged(); // select initial option\n            this.updateActiveBackendDisplay();\n            return this;\n        };\n        Controls.prototype.onRunClick = function () {\n            events_1.default.eventBus.trigger(events_1.default.execute, false);\n        };\n        Controls.prototype._getFirstModel = function () {\n            return this.querySet.getModels()[0];\n        };\n        Controls.prototype.toggleMacroBox = function (e) {\n            this.$(\".macrobox\").toggle();\n            this.initMacroAutocomplete();\n        };\n        Controls.prototype.initMacroAutocomplete = function () {\n            if (this.macroAutocompleteInitialized) {\n                return;\n            }\n            this.macroAutocompleteInitialized = true;\n            autocomplete_1.default.initAutocompleteForTextBox(this.$(\".macrobox\").get(0), \"controls\", true, true, this.cid, this._getFirstModel(), true);\n        };\n        Controls.prototype.onQueryExecution = function (initialExec) {\n            if (initialExec) {\n                return;\n            }\n            this.hideAutocomplete();\n        };\n        Controls.prototype.hideAutocomplete = function () {\n            if (this.macroAutocompleteInitialized) {\n                this.$(\".macrobox\").autocomplete(\"close\");\n            }\n        };\n        Controls.prototype.extractExprToMacro = function (expression) {\n            var extractionResult = macros_1.default.buildMacrosWithExtractedExpr(this.model.macro, expression);\n            // only extract if user hits okay on macro name prompt\n            if (extractionResult) {\n                this.model.macro = extractionResult.newMacroStr;\n                events_1.default.eventBus.trigger(events_1.default.extractMacroResponse, extractionResult.macroName, extractionResult.exprToExtract);\n            }\n        };\n        Controls.prototype.updateCSVLink = function (e) {\n            var query = this._getFirstModel().getCompleteQuery(true);\n            var href = iqlclient_1.default.getQueryHref(query, false, true);\n            var isView = e.which == 2; // open for view on middle click, save on left click\n            if (isView) {\n                href += \"&view=1\";\n            }\n            this.$('.csvlink').attr('href', href);\n        };\n        Controls.prototype.updateTSVLink = function (e) {\n            var query = this._getFirstModel().getCompleteQuery(true);\n            var href = iqlclient_1.default.getQueryHref(query, false, false);\n            var isView = e.which == 2; // open for view on middle click, save on left click\n            if (isView) {\n                href += \"&view=1\";\n            }\n            this.$('.tsvlink').attr('href', href);\n        };\n        Controls.prototype.initLinks = function () {\n            // the link mouseover events have to be bound directly instead of through Backbone to work\n            this.$('.csvlink').click(_.bind(this.updateCSVLink, this)).mouseover(_.bind(this.updateCSVLink, this));\n            this.$('.tsvlink').click(_.bind(this.updateTSVLink, this)).mouseover(_.bind(this.updateTSVLink, this));\n            this.$('.localtsvlink').click(_.bind(this.onLocalTSVLink, this));\n            this.$('.macrolink').click(_.bind(this.toggleMacroBox, this));\n        };\n        Controls.prototype.updateActiveBackendDisplay = function () {\n            var backendInstance = backend_1.default.byId(this.model.backend);\n            $('.alternative-backend-box').toggle(false);\n            this.$('.alternative-backend-name').text(backendInstance.name);\n        };\n        Controls.prototype.onBackendChanged = function (event) {\n            this.model.backend = event.target.value;\n        };\n        Controls.prototype.onBackendModelChanged = function () {\n            this.$('.backend').val(this.model.backend);\n            this.updateActiveBackendDisplay();\n        };\n        Controls.prototype.onLimitModelChanged = function () {\n            var valString = this.model.limit ? String(this.model.limit) : \"\";\n            this.$(\".limit\").val(valString);\n        };\n        Controls.prototype.onMacroModelChanged = function (model, value, options) {\n            if (options.noUIRedraw !== true) {\n                this.$(\".macrobox\").text(this.model.macro);\n                this.updateMacroPlaceholder();\n                if (this.model.macro) {\n                    this.$('.macrobox').show();\n                    this.initMacroAutocomplete();\n                }\n            }\n        };\n        Controls.prototype.onMacroChanged = function (event) {\n            this.model.set(\"macro\", this.$(\".macrobox\").text().replace(/\\u00a0/g, \" \"), { noUIRedraw: true });\n            this.updateMacroPlaceholder();\n        };\n        Controls.prototype.updateMacroPlaceholder = function () {\n            if (this.$(\".macrobox\").text().length > 0) {\n                this.$(\".macrobox\").attr(\"div-placeholder-content\", \"true\");\n            }\n            else {\n                this.$(\".macrobox\").removeAttr(\"div-placeholder-content\");\n            }\n        };\n        Controls.prototype.onMacroKeydown = function (e) {\n            if (e.keyCode == $.ui.keyCode.ENTER && !(e.ctrlKey == true || e.metaKey == true)) {\n                events_1.default.eventBus.trigger(events_1.default.execute);\n                e.preventDefault();\n            }\n        };\n        Controls.prototype.onExtremeChange = function (event) {\n            var value = event.target.checked;\n            // try to match the backend to the mode\n            if (value == true && (this.model.backend == \"prod\" || this.model.backend == \"qa\")) {\n                this.model.backend = \"v2\" + this.model.backend;\n            }\n            else if (value == false && this.model.backend.indexOf(\"v2\") == 0) {\n                // todo: handle the Select2 error that's generated here\n                this.model.backend = this.model.backend.substr(2, this.model.backend.length);\n            }\n            this.model.set(\"extremeMode\", value, { noUIRedraw: true });\n        };\n        Controls.prototype.onExtremeModelChanged = function (model, value, options) {\n            this.$('.xtremelabel').toggleClass('xtremelabelwarning', value);\n            if (options.noUIRedraw !== true) {\n                this.$(\".extreme-checkbox\").prop(\"checked\", this.model.extremeMode);\n            }\n        };\n        Controls.prototype.onLocalTSVLink = function (e) {\n            var _this = this;\n            var resultSet = this.model.presentationModel.resultSet;\n            if (!resultSet) {\n                window.alert(\"Need to load some data before a local copy can be saved\");\n                return;\n            }\n            var isView = e.which == 2; // open for view on middle click, save on left click\n            var fileName = resultSet.title + \".tsv\";\n            this.$('.localtsvlink').attr('download', isView ? null : fileName);\n            var hrefPrefix = \"data:\" + (isView ? \"text/plain\" : \"text/tab-separated-values\") + \";charset=UTF-8,\";\n            // encode using encodeURIComponent() instead of encodeURI()\n            // as Firefox can't deal with # characters even though Chrome is ok\n            var tsvData = encodeURIComponent(resultSet.toTSV(null, false));\n            this.$('.localtsvlink').attr('href', hrefPrefix + tsvData);\n            // prepare to clean up the link in a bit to not have a potentially multi megabyte link text hanging\n            window.setTimeout(function () {\n                _this.$('.localtsvlink').attr('href', '');\n            }, 2000 // run in 2 sec\n            );\n            return true;\n        };\n        Controls.prototype.onGDocClick = function () {\n            this.$('.gdocloading').css('visibility', 'visible');\n            gdoc_1.default.performGoogleAPIAction(_.bind(this.runAndUploadToGDrive, this), _.bind(this.onGDocFailed, this));\n        };\n        Controls.prototype.onGDocFailed = function () {\n            this.gdocCompleted();\n        };\n        Controls.prototype.onLimitChange = function (event) {\n            var newLimit = Number($(\"option:selected\", event.target).val());\n            this.model.limit = newLimit;\n        };\n        Controls.prototype.gdocCompleted = function () {\n            this.$('.gdocloading').css('visibility', 'hidden');\n        };\n        Controls.prototype.runAndUploadToGDrive = function () {\n            var _this = this;\n            var resultSet = this.model.presentationModel.resultSet;\n            if (!resultSet) {\n                window.alert(\"Need to load some data before it can be uploaded to a Google Spreadsheet\");\n                this.gdocCompleted();\n                return;\n            }\n            var columnCount = resultSet.columns.length;\n            var googleCellLimit = 2000000; // 2M\n            var maxRowCount = (googleCellLimit / columnCount) - 1; // account for the header\n            var fileName = resultSet.title + \".tsv\";\n            var tsvData = resultSet.toTSV(maxRowCount, true);\n            var callback = function (file) {\n                console.log(file);\n                _this.gdocCompleted();\n                window.open(file.alternateLink, \"_blank\");\n            };\n            gdoc_1.default.uploadFileToGDrive(tsvData, fileName, \"text/tab-separated-values\", callback);\n        };\n        return Controls;\n    }(Backbone.View));\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Controls;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTg3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2NvbnRyb2xzL2NvbnRyb2xzLnRzPzA5MGQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL2RlcHMuZC50c1wiIC8+XG5cbi8vLyA8YW1kLWRlcGVuZGVuY3kgcGF0aD1cImNvbnRyb2xzL2NvbnRyb2xzLmNzc1wiIC8+XG5cbi8vLyA8YW1kLWRlcGVuZGVuY3kgcGF0aD1cImNvbnRyb2xzL2NvbnRyb2xzLmh0bWxcIi8+XG52YXIgdGVtcGxhdGVUZXh0IDogc3RyaW5nID0gcmVxdWlyZSgnY29udHJvbHMvY29udHJvbHMuaHRtbCcpO1xuXG5pbXBvcnQgJCA9IHJlcXVpcmUoJ2pxdWVyeScpO1xuaW1wb3J0IF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJyk7XG5pbXBvcnQgQmFja2JvbmUgPSByZXF1aXJlKCdiYWNrYm9uZScpO1xuaW1wb3J0IENvbnRyb2xzTW9kZWwgZnJvbSAnY29udHJvbHMvY29udHJvbHNtb2RlbCc7XG5pbXBvcnQgR0RvYyBmcm9tICdjb250cm9scy9nZG9jJztcbmltcG9ydCBCYWNrZW5kSW5zdGFuY2UgZnJvbSAnYmFja2VuZCc7XG5pbXBvcnQgSVF1ZXJ5TW9kZWwgZnJvbSAndG9wdWkvaXF1ZXJ5bW9kZWwnO1xuaW1wb3J0IElRdWVyeUxpc3QgZnJvbSAndG9wdWkvaXF1ZXJ5bGlzdCc7XG5pbXBvcnQgSVFMQ2xpZW50IGZyb20gJ2lxbGNsaWVudCc7XG5pbXBvcnQgTWV0YWRhdGFDYWNoZSBmcm9tICdtZXRhZGF0YS9tZXRhZGF0YWNhY2hlJztcbmltcG9ydCBFdmVudHMgZnJvbSAnZXZlbnRzJztcbmltcG9ydCBQcmVzZW50YXRpb25Nb2RlbCBmcm9tICdyZXN1bHRwcmVzZW50YXRpb24vcHJlc2VudGF0aW9ubW9kZWwnO1xuaW1wb3J0IFJlc3VsdFNldCBmcm9tICdyZXN1bHRzZXQnO1xuaW1wb3J0IE1hY3JvcyBmcm9tIFwibWFjcm9zXCI7XG5pbXBvcnQgQXV0b2NvbXBsZXRlIGZyb20gJ2F1dG9jb21wbGV0ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbnRyb2xzIGV4dGVuZHMgQmFja2JvbmUuVmlldzxDb250cm9sc01vZGVsPiB7XG4gICAgcHJpdmF0ZSB0ZW1wbGF0ZSA6ICguLi5kYXRhOiBhbnlbXSkgPT4gc3RyaW5nID0gXy50ZW1wbGF0ZSh0ZW1wbGF0ZVRleHQpO1xuICAgIHByaXZhdGUgcXVlcnlTZXQ6IElRdWVyeUxpc3Q7XG4gICAgcHJpdmF0ZSBtYWNyb0F1dG9jb21wbGV0ZUluaXRpYWxpemVkID0gZmFsc2U7XG5cbiAgICBldmVudHMoKSB7XG4gICAgICAgIHJldHVybiA8YW55PntcbiAgICAgICAgICAgIFwiY2xpY2sgI3J1bmJ1dHRvblwiOiB0aGlzLm9uUnVuQ2xpY2ssXG4gICAgICAgICAgICBcImNsaWNrIC5jbGVhcmNhY2hlXCI6ICgpID0+IHsgTWV0YWRhdGFDYWNoZS5jbGVhckNhY2hlKCk7IH0sXG4gICAgICAgICAgICBcImNsaWNrIC5nZG9jbGlua1wiOiB0aGlzLm9uR0RvY0NsaWNrLFxuICAgICAgICAgICAgXCJjaGFuZ2UgLmJhY2tlbmRcIjogdGhpcy5vbkJhY2tlbmRDaGFuZ2VkLFxuICAgICAgICAgICAgXCJjaGFuZ2UgLmxpbWl0XCI6IHRoaXMub25MaW1pdENoYW5nZSxcbiAgICAgICAgICAgIFwiY2hhbmdlIC5leHRyZW1lLWNoZWNrYm94XCI6IHRoaXMub25FeHRyZW1lQ2hhbmdlLFxuICAgICAgICAgICAgXCJrZXl1cCAubWFjcm9ib3hcIjogdGhpcy5vbk1hY3JvQ2hhbmdlZCxcbiAgICAgICAgICAgIFwiaW5wdXQgLm1hY3JvYm94XCI6IHRoaXMub25NYWNyb0NoYW5nZWQsXG4gICAgICAgICAgICBcImtleWRvd24gLm1hY3JvYm94XCI6IHRoaXMub25NYWNyb0tleWRvd24sXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpbml0aWFsaXplKGF0dHJpYnV0ZXM/OiBhbnkpIHtcbiAgICAgICAgdGhpcy5xdWVyeVNldCA9IGF0dHJpYnV0ZXMucXVlcnlTZXQ7XG4gICAgICAgIHRoaXMubGlzdGVuVG8odGhpcy5tb2RlbCwgXCJjaGFuZ2U6YmFja2VuZFwiLCB0aGlzLm9uQmFja2VuZE1vZGVsQ2hhbmdlZCk7XG4gICAgICAgIHRoaXMubGlzdGVuVG8odGhpcy5tb2RlbCwgXCJjaGFuZ2U6bGltaXRcIiwgdGhpcy5vbkxpbWl0TW9kZWxDaGFuZ2VkKTtcbiAgICAgICAgdGhpcy5saXN0ZW5Ubyh0aGlzLm1vZGVsLCBcImNoYW5nZTptYWNyb1wiLCB0aGlzLm9uTWFjcm9Nb2RlbENoYW5nZWQpO1xuICAgICAgICB0aGlzLmxpc3RlblRvKHRoaXMubW9kZWwsIFwiY2hhbmdlOmV4dHJlbWVNb2RlXCIsIHRoaXMub25FeHRyZW1lTW9kZWxDaGFuZ2VkKTtcblxuICAgICAgICB0aGlzLmxpc3RlblRvKEV2ZW50cy5ldmVudEJ1cywgRXZlbnRzLmV4dHJhY3RNYWNyb1JlcXVlc3QsIHRoaXMuZXh0cmFjdEV4cHJUb01hY3JvKTtcbiAgICAgICAgdGhpcy5saXN0ZW5UbyhFdmVudHMuZXZlbnRCdXMsIEV2ZW50cy51cGRhdGVNYWNyb01vZGVsLCB0aGlzLmluaXRNYWNyb0F1dG9jb21wbGV0ZSk7XG4gICAgICAgIHRoaXMubGlzdGVuVG8oRXZlbnRzLmV2ZW50QnVzLCBFdmVudHMuZXhlY3V0ZSwgdGhpcy5vblF1ZXJ5RXhlY3V0aW9uKTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSA6IEJhY2tib25lLlZpZXc8Q29udHJvbHNNb2RlbD4ge1xuICAgICAgICB0aGlzLiRlbC5odG1sKHRoaXMudGVtcGxhdGUoe21vZGVsOiB0aGlzLm1vZGVsLCBiYWNrZW5kczogQmFja2VuZEluc3RhbmNlLklOU1RBTkNFU30pKTtcbiAgICAgICAgdGhpcy5pbml0TGlua3MoKTtcbiAgICAgICAgdGhpcy5vbkxpbWl0TW9kZWxDaGFuZ2VkKCk7IC8vIHNlbGVjdCBpbml0aWFsIG9wdGlvblxuICAgICAgICB0aGlzLnVwZGF0ZUFjdGl2ZUJhY2tlbmREaXNwbGF5KCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgb25SdW5DbGljaygpIHtcbiAgICAgICAgRXZlbnRzLmV2ZW50QnVzLnRyaWdnZXIoRXZlbnRzLmV4ZWN1dGUsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBfZ2V0Rmlyc3RNb2RlbCgpOiBJUXVlcnlNb2RlbCB7XG4gICAgICAgIHJldHVybiB0aGlzLnF1ZXJ5U2V0LmdldE1vZGVscygpWzBdO1xuICAgIH1cbiAgICBcbiAgICB0b2dnbGVNYWNyb0JveChlOiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIHRoaXMuJChcIi5tYWNyb2JveFwiKS50b2dnbGUoKTtcbiAgICAgICAgdGhpcy5pbml0TWFjcm9BdXRvY29tcGxldGUoKTtcbiAgICB9XG4gICAgXG4gICAgaW5pdE1hY3JvQXV0b2NvbXBsZXRlKCl7XG4gICAgICAgIGlmICh0aGlzLm1hY3JvQXV0b2NvbXBsZXRlSW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1hY3JvQXV0b2NvbXBsZXRlSW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICBBdXRvY29tcGxldGUuaW5pdEF1dG9jb21wbGV0ZUZvclRleHRCb3goPEhUTUxEaXZFbGVtZW50PnRoaXMuJChcIi5tYWNyb2JveFwiKS5nZXQoMCksIFwiY29udHJvbHNcIiwgdHJ1ZSwgdHJ1ZSwgdGhpcy5jaWQsIHRoaXMuX2dldEZpcnN0TW9kZWwoKSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvblF1ZXJ5RXhlY3V0aW9uKGluaXRpYWxFeGVjOiBib29sZWFuKSB7XG4gICAgICAgIGlmKGluaXRpYWxFeGVjKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5oaWRlQXV0b2NvbXBsZXRlKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoaWRlQXV0b2NvbXBsZXRlKCkge1xuICAgICAgICBpZih0aGlzLm1hY3JvQXV0b2NvbXBsZXRlSW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuJChcIi5tYWNyb2JveFwiKS5hdXRvY29tcGxldGUoXCJjbG9zZVwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGV4dHJhY3RFeHByVG9NYWNybyhleHByZXNzaW9uOnN0cmluZykge1xuICAgICAgICB2YXIgZXh0cmFjdGlvblJlc3VsdCA9IE1hY3Jvcy5idWlsZE1hY3Jvc1dpdGhFeHRyYWN0ZWRFeHByKHRoaXMubW9kZWwubWFjcm8sIGV4cHJlc3Npb24pO1xuICAgICAgICAvLyBvbmx5IGV4dHJhY3QgaWYgdXNlciBoaXRzIG9rYXkgb24gbWFjcm8gbmFtZSBwcm9tcHRcbiAgICAgICAgaWYoZXh0cmFjdGlvblJlc3VsdCkge1xuICAgICAgICAgICAgdGhpcy5tb2RlbC5tYWNybyA9IGV4dHJhY3Rpb25SZXN1bHQubmV3TWFjcm9TdHI7XG4gICAgICAgICAgICBFdmVudHMuZXZlbnRCdXMudHJpZ2dlcihFdmVudHMuZXh0cmFjdE1hY3JvUmVzcG9uc2UsIGV4dHJhY3Rpb25SZXN1bHQubWFjcm9OYW1lLCBleHRyYWN0aW9uUmVzdWx0LmV4cHJUb0V4dHJhY3QpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlQ1NWTGluayhlOiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIHZhciBxdWVyeSA9IHRoaXMuX2dldEZpcnN0TW9kZWwoKS5nZXRDb21wbGV0ZVF1ZXJ5KHRydWUpO1xuICAgICAgICB2YXIgaHJlZiA9IElRTENsaWVudC5nZXRRdWVyeUhyZWYocXVlcnksIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgdmFyIGlzVmlldyA9IGUud2hpY2ggPT0gMjsgIC8vIG9wZW4gZm9yIHZpZXcgb24gbWlkZGxlIGNsaWNrLCBzYXZlIG9uIGxlZnQgY2xpY2tcbiAgICAgICAgaWYoaXNWaWV3KSB7XG4gICAgICAgICAgICBocmVmICs9IFwiJnZpZXc9MVwiO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuJCgnLmNzdmxpbmsnKS5hdHRyKCdocmVmJywgaHJlZik7XG4gICAgfVxuXG4gICAgdXBkYXRlVFNWTGluayhlOiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIHZhciBxdWVyeSA9IHRoaXMuX2dldEZpcnN0TW9kZWwoKS5nZXRDb21wbGV0ZVF1ZXJ5KHRydWUpO1xuICAgICAgICB2YXIgaHJlZiA9IElRTENsaWVudC5nZXRRdWVyeUhyZWYocXVlcnksIGZhbHNlLCBmYWxzZSk7XG4gICAgICAgIHZhciBpc1ZpZXcgPSBlLndoaWNoID09IDI7ICAvLyBvcGVuIGZvciB2aWV3IG9uIG1pZGRsZSBjbGljaywgc2F2ZSBvbiBsZWZ0IGNsaWNrXG4gICAgICAgIGlmKGlzVmlldykge1xuICAgICAgICAgICAgaHJlZiArPSBcIiZ2aWV3PTFcIjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiQoJy50c3ZsaW5rJykuYXR0cignaHJlZicsIGhyZWYpO1xuICAgIH1cblxuICAgIGluaXRMaW5rcygpIHtcbiAgICAgICAgLy8gdGhlIGxpbmsgbW91c2VvdmVyIGV2ZW50cyBoYXZlIHRvIGJlIGJvdW5kIGRpcmVjdGx5IGluc3RlYWQgb2YgdGhyb3VnaCBCYWNrYm9uZSB0byB3b3JrXG4gICAgICAgIHRoaXMuJCgnLmNzdmxpbmsnKS5jbGljayhfLmJpbmQodGhpcy51cGRhdGVDU1ZMaW5rLCB0aGlzKSkubW91c2VvdmVyKF8uYmluZCh0aGlzLnVwZGF0ZUNTVkxpbmssIHRoaXMpKTtcbiAgICAgICAgdGhpcy4kKCcudHN2bGluaycpLmNsaWNrKF8uYmluZCh0aGlzLnVwZGF0ZVRTVkxpbmssIHRoaXMpKS5tb3VzZW92ZXIoXy5iaW5kKHRoaXMudXBkYXRlVFNWTGluaywgdGhpcykpO1xuXG4gICAgICAgIHRoaXMuJCgnLmxvY2FsdHN2bGluaycpLmNsaWNrKF8uYmluZCh0aGlzLm9uTG9jYWxUU1ZMaW5rLCB0aGlzKSk7XG5cbiAgICAgICAgdGhpcy4kKCcubWFjcm9saW5rJykuY2xpY2soXy5iaW5kKHRoaXMudG9nZ2xlTWFjcm9Cb3gsIHRoaXMpKTtcbiAgICB9XG5cbiAgICB1cGRhdGVBY3RpdmVCYWNrZW5kRGlzcGxheSgpIHtcbiAgICAgICAgdmFyIGJhY2tlbmRJbnN0YW5jZSA9IEJhY2tlbmRJbnN0YW5jZS5ieUlkKHRoaXMubW9kZWwuYmFja2VuZCk7XG4gICAgICAgICQoJy5hbHRlcm5hdGl2ZS1iYWNrZW5kLWJveCcpLnRvZ2dsZShmYWxzZSk7XG4gICAgICAgIHRoaXMuJCgnLmFsdGVybmF0aXZlLWJhY2tlbmQtbmFtZScpLnRleHQoYmFja2VuZEluc3RhbmNlLm5hbWUpO1xuICAgIH1cblxuICAgIG9uQmFja2VuZENoYW5nZWQoZXZlbnQ6IEV2ZW50KSB7XG4gICAgICAgIHRoaXMubW9kZWwuYmFja2VuZCA9ICg8SFRNTElucHV0RWxlbWVudD5ldmVudC50YXJnZXQpLnZhbHVlO1xuICAgIH1cblxuICAgIG9uQmFja2VuZE1vZGVsQ2hhbmdlZCgpIHtcbiAgICAgICAgdGhpcy4kKCcuYmFja2VuZCcpLnZhbCh0aGlzLm1vZGVsLmJhY2tlbmQpO1xuICAgICAgICB0aGlzLnVwZGF0ZUFjdGl2ZUJhY2tlbmREaXNwbGF5KCk7XG4gICAgfVxuXG4gICAgb25MaW1pdE1vZGVsQ2hhbmdlZCgpIHtcbiAgICAgICAgdmFyIHZhbFN0cmluZyA9IHRoaXMubW9kZWwubGltaXQgPyBTdHJpbmcodGhpcy5tb2RlbC5saW1pdCkgOiBcIlwiO1xuICAgICAgICB0aGlzLiQoXCIubGltaXRcIikudmFsKHZhbFN0cmluZyk7XG4gICAgfVxuXG4gICAgb25NYWNyb01vZGVsQ2hhbmdlZChtb2RlbDogQ29udHJvbHNNb2RlbCwgdmFsdWU6IHN0cmluZywgb3B0aW9uczogYW55KSB7XG4gICAgICAgIGlmKG9wdGlvbnMubm9VSVJlZHJhdyAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgdGhpcy4kKFwiLm1hY3JvYm94XCIpLnRleHQodGhpcy5tb2RlbC5tYWNybyk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZU1hY3JvUGxhY2Vob2xkZXIoKTtcbiAgICAgICAgICAgIGlmKHRoaXMubW9kZWwubWFjcm8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLiQoJy5tYWNyb2JveCcpLnNob3coKTtcbiAgICAgICAgICAgICAgICB0aGlzLmluaXRNYWNyb0F1dG9jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIG9uTWFjcm9DaGFuZ2VkKGV2ZW50OiBFdmVudCkge1xuICAgICAgICB0aGlzLm1vZGVsLnNldChcIm1hY3JvXCIsIHRoaXMuJChcIi5tYWNyb2JveFwiKS50ZXh0KCkucmVwbGFjZSgvXFx1MDBhMC9nLCBcIiBcIiksIDxCYWNrYm9uZS5Nb2RlbFNldE9wdGlvbnM+e25vVUlSZWRyYXc6IHRydWV9KTtcbiAgICAgICAgdGhpcy51cGRhdGVNYWNyb1BsYWNlaG9sZGVyKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVNYWNyb1BsYWNlaG9sZGVyKCkge1xuICAgICAgICBpZiAodGhpcy4kKFwiLm1hY3JvYm94XCIpLnRleHQoKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLiQoXCIubWFjcm9ib3hcIikuYXR0cihcImRpdi1wbGFjZWhvbGRlci1jb250ZW50XCIsIFwidHJ1ZVwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuJChcIi5tYWNyb2JveFwiKS5yZW1vdmVBdHRyKFwiZGl2LXBsYWNlaG9sZGVyLWNvbnRlbnRcIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbk1hY3JvS2V5ZG93bihlOiBLZXlib2FyZEV2ZW50KSB7XG4gICAgICAgIGlmKGUua2V5Q29kZSA9PSAkLnVpLmtleUNvZGUuRU5URVIgJiYgIShlLmN0cmxLZXkgPT0gdHJ1ZSB8fCBlLm1ldGFLZXkgPT0gdHJ1ZSkpIHtcbiAgICAgICAgICAgIEV2ZW50cy5ldmVudEJ1cy50cmlnZ2VyKEV2ZW50cy5leGVjdXRlKTtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uRXh0cmVtZUNoYW5nZShldmVudDpFdmVudCkge1xuICAgICAgICB2YXIgdmFsdWU6IGJvb2xlYW4gPSAoPEhUTUxJbnB1dEVsZW1lbnQ+ZXZlbnQudGFyZ2V0KS5jaGVja2VkO1xuXG4gICAgICAgIC8vIHRyeSB0byBtYXRjaCB0aGUgYmFja2VuZCB0byB0aGUgbW9kZVxuICAgICAgICBpZih2YWx1ZSA9PSB0cnVlICYmICh0aGlzLm1vZGVsLmJhY2tlbmQgPT0gXCJwcm9kXCIgfHwgdGhpcy5tb2RlbC5iYWNrZW5kID09XCJxYVwiKSkge1xuICAgICAgICAgICAgdGhpcy5tb2RlbC5iYWNrZW5kID0gXCJ2MlwiICsgdGhpcy5tb2RlbC5iYWNrZW5kO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbHVlID09IGZhbHNlICYmIHRoaXMubW9kZWwuYmFja2VuZC5pbmRleE9mKFwidjJcIikgPT0gMCkge1xuICAgICAgICAgICAgLy8gdG9kbzogaGFuZGxlIHRoZSBTZWxlY3QyIGVycm9yIHRoYXQncyBnZW5lcmF0ZWQgaGVyZVxuICAgICAgICAgICAgdGhpcy5tb2RlbC5iYWNrZW5kID0gdGhpcy5tb2RlbC5iYWNrZW5kLnN1YnN0cigyLCB0aGlzLm1vZGVsLmJhY2tlbmQubGVuZ3RoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubW9kZWwuc2V0KFwiZXh0cmVtZU1vZGVcIiwgdmFsdWUsIDxCYWNrYm9uZS5Nb2RlbFNldE9wdGlvbnM+e25vVUlSZWRyYXc6IHRydWV9KTtcbiAgICB9XG5cbiAgICBvbkV4dHJlbWVNb2RlbENoYW5nZWQobW9kZWw6IENvbnRyb2xzTW9kZWwsIHZhbHVlOiBib29sZWFuLCBvcHRpb25zOiBhbnkpIHtcbiAgICAgICAgdGhpcy4kKCcueHRyZW1lbGFiZWwnKS50b2dnbGVDbGFzcygneHRyZW1lbGFiZWx3YXJuaW5nJywgdmFsdWUpO1xuXG4gICAgICAgIGlmKG9wdGlvbnMubm9VSVJlZHJhdyAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgdGhpcy4kKFwiLmV4dHJlbWUtY2hlY2tib3hcIikucHJvcChcImNoZWNrZWRcIiwgdGhpcy5tb2RlbC5leHRyZW1lTW9kZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkxvY2FsVFNWTGluayhlOiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIHZhciByZXN1bHRTZXQ6IFJlc3VsdFNldCA9IHRoaXMubW9kZWwucHJlc2VudGF0aW9uTW9kZWwucmVzdWx0U2V0O1xuICAgICAgICBpZighcmVzdWx0U2V0KSB7XG4gICAgICAgICAgICB3aW5kb3cuYWxlcnQoXCJOZWVkIHRvIGxvYWQgc29tZSBkYXRhIGJlZm9yZSBhIGxvY2FsIGNvcHkgY2FuIGJlIHNhdmVkXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGlzVmlldyA9IGUud2hpY2ggPT0gMjsgIC8vIG9wZW4gZm9yIHZpZXcgb24gbWlkZGxlIGNsaWNrLCBzYXZlIG9uIGxlZnQgY2xpY2tcbiAgICAgICAgdmFyIGZpbGVOYW1lID0gcmVzdWx0U2V0LnRpdGxlICsgXCIudHN2XCI7XG4gICAgICAgIHRoaXMuJCgnLmxvY2FsdHN2bGluaycpLmF0dHIoJ2Rvd25sb2FkJywgaXNWaWV3ID8gbnVsbCA6IGZpbGVOYW1lKTtcbiAgICAgICAgdmFyIGhyZWZQcmVmaXggPSBcImRhdGE6XCIgKyAoaXNWaWV3ID8gXCJ0ZXh0L3BsYWluXCIgOiBcInRleHQvdGFiLXNlcGFyYXRlZC12YWx1ZXNcIikgKyAgXCI7Y2hhcnNldD1VVEYtOCxcIjtcbiAgICAgICAgLy8gZW5jb2RlIHVzaW5nIGVuY29kZVVSSUNvbXBvbmVudCgpIGluc3RlYWQgb2YgZW5jb2RlVVJJKClcbiAgICAgICAgLy8gYXMgRmlyZWZveCBjYW4ndCBkZWFsIHdpdGggIyBjaGFyYWN0ZXJzIGV2ZW4gdGhvdWdoIENocm9tZSBpcyBva1xuICAgICAgICB2YXIgdHN2RGF0YTogc3RyaW5nID0gZW5jb2RlVVJJQ29tcG9uZW50KHJlc3VsdFNldC50b1RTVihudWxsLCBmYWxzZSkpO1xuICAgICAgICB0aGlzLiQoJy5sb2NhbHRzdmxpbmsnKS5hdHRyKCdocmVmJywgIGhyZWZQcmVmaXggKyB0c3ZEYXRhKTtcbiAgICAgICAgLy8gcHJlcGFyZSB0byBjbGVhbiB1cCB0aGUgbGluayBpbiBhIGJpdCB0byBub3QgaGF2ZSBhIHBvdGVudGlhbGx5IG11bHRpIG1lZ2FieXRlIGxpbmsgdGV4dCBoYW5naW5nXG4gICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KFxuICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuJCgnLmxvY2FsdHN2bGluaycpLmF0dHIoJ2hyZWYnLCAnJyk7XG4gICAgICAgICAgICB9LCAyMDAwICAvLyBydW4gaW4gMiBzZWNcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgb25HRG9jQ2xpY2soKSB7XG4gICAgICAgIHRoaXMuJCgnLmdkb2Nsb2FkaW5nJykuY3NzKCd2aXNpYmlsaXR5JywgJ3Zpc2libGUnKTtcbiAgICAgICAgR0RvYy5wZXJmb3JtR29vZ2xlQVBJQWN0aW9uKF8uYmluZCh0aGlzLnJ1bkFuZFVwbG9hZFRvR0RyaXZlLCB0aGlzKSwgXy5iaW5kKHRoaXMub25HRG9jRmFpbGVkLCB0aGlzKSk7XG4gICAgfVxuXG4gICAgb25HRG9jRmFpbGVkKCkge1xuICAgICAgICB0aGlzLmdkb2NDb21wbGV0ZWQoKTtcbiAgICB9XG5cbiAgICBvbkxpbWl0Q2hhbmdlKGV2ZW50OiBFdmVudCkge1xuICAgICAgICB2YXIgbmV3TGltaXQgPSBOdW1iZXIoJChcIm9wdGlvbjpzZWxlY3RlZFwiLCBldmVudC50YXJnZXQpLnZhbCgpKTtcbiAgICAgICAgdGhpcy5tb2RlbC5saW1pdCA9IG5ld0xpbWl0O1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2RvY0NvbXBsZXRlZCgpIHtcbiAgICAgICAgdGhpcy4kKCcuZ2RvY2xvYWRpbmcnKS5jc3MoJ3Zpc2liaWxpdHknLCAnaGlkZGVuJyk7XG4gICAgfVxuXG4gICAgcnVuQW5kVXBsb2FkVG9HRHJpdmUoKSB7XG4gICAgICAgIHZhciByZXN1bHRTZXQ6IFJlc3VsdFNldCA9IHRoaXMubW9kZWwucHJlc2VudGF0aW9uTW9kZWwucmVzdWx0U2V0O1xuICAgICAgICBpZighcmVzdWx0U2V0KSB7XG4gICAgICAgICAgICB3aW5kb3cuYWxlcnQoXCJOZWVkIHRvIGxvYWQgc29tZSBkYXRhIGJlZm9yZSBpdCBjYW4gYmUgdXBsb2FkZWQgdG8gYSBHb29nbGUgU3ByZWFkc2hlZXRcIik7XG4gICAgICAgICAgICB0aGlzLmdkb2NDb21wbGV0ZWQoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjb2x1bW5Db3VudCA9IHJlc3VsdFNldC5jb2x1bW5zLmxlbmd0aDtcbiAgICAgICAgdmFyIGdvb2dsZUNlbGxMaW1pdCA9IDIwMDAwMDA7ICAgLy8gMk1cbiAgICAgICAgdmFyIG1heFJvd0NvdW50ID0gKGdvb2dsZUNlbGxMaW1pdCAvIGNvbHVtbkNvdW50KSAtIDE7ICAvLyBhY2NvdW50IGZvciB0aGUgaGVhZGVyXG4gICAgICAgIHZhciBmaWxlTmFtZSA9IHJlc3VsdFNldC50aXRsZSArIFwiLnRzdlwiO1xuICAgICAgICB2YXIgdHN2RGF0YTogc3RyaW5nID0gcmVzdWx0U2V0LnRvVFNWKG1heFJvd0NvdW50LCB0cnVlKTtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gKGZpbGU6IGFueSkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZmlsZSk7XG4gICAgICAgICAgICB0aGlzLmdkb2NDb21wbGV0ZWQoKTtcbiAgICAgICAgICAgIHdpbmRvdy5vcGVuKGZpbGUuYWx0ZXJuYXRlTGluaywgXCJfYmxhbmtcIik7XG4gICAgICAgIH07XG4gICAgICAgIEdEb2MudXBsb2FkRmlsZVRvR0RyaXZlKHRzdkRhdGEsIGZpbGVOYW1lLCBcInRleHQvdGFiLXNlcGFyYXRlZC12YWx1ZXNcIiwgY2FsbGJhY2spO1xuICAgIH1cbn1cblxuXG5cblxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogY29udHJvbHMvY29udHJvbHMudHNcbiAqKi8iXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQUVBO0FBRUE7QUFDQTtBQWtCQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBRUE7O0FBb1BBO0FBbFBBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBOzs7OzsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 188:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(12)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, utils_1) {\n    \"use strict\";\n    var GDoc = (function () {\n        function GDoc() {\n        }\n        GDoc.performGoogleAPIAction = function (authSuccessCallback, authFailureCallback) {\n            window.setTimeout(function () {\n                GDoc.checkAuth(authSuccessCallback, authFailureCallback);\n            }, 1);\n        };\n        GDoc.checkAuth = function (authSuccessCallback, authFailureCallback) {\n            if (!GDoc.googleClientLoaded) {\n                GDoc.loadGoogleClient(function () {\n                    GDoc.checkAuth(authSuccessCallback, authFailureCallback);\n                });\n                return;\n            }\n            if (GDoc.authenticated) {\n                authSuccessCallback();\n                return;\n            }\n            // TODO: get this from a config/props file. Possibly ajax from the server or using a build step?\n            var clientId = GDoc.clientId;\n            // We require permissions only for Google Drive\n            var scopes = ['https://www.googleapis.com/auth/drive'];\n            // first try with immediate:true to renew the oauth token without opening a window\n            gapi.auth.authorize({ client_id: clientId, scope: scopes, immediate: true }, function (authResult) {\n                if (authResult && !authResult.error) {\n                    GDoc.authenticated = true;\n                    authSuccessCallback(); // user was already authed!\n                }\n                else {\n                    // didn't work, so try with opening a window to ask for user's authorization\n                    var handleAuthResult = function handleAuthResult(authResult) {\n                        if (authResult && !authResult.error) {\n                            GDoc.authenticated = true;\n                            authSuccessCallback();\n                        }\n                        else {\n                            authFailureCallback();\n                        }\n                    };\n                    gapi.auth.authorize({ client_id: clientId, scope: scopes, immediate: false }, handleAuthResult);\n                }\n            });\n        };\n        /**\n         * Uploads a file to Google Drive with auto conversion to Google Doc\n         */\n        GDoc.uploadFileToGDrive = function (fileData, fileName, contentType, callback) {\n            var boundary = '-------314159265358979323846';\n            var delimiter = \"\\r\\n--\" + boundary + \"\\r\\n\";\n            var close_delim = \"\\r\\n--\" + boundary + \"--\";\n            var metadata = {\n                'title': fileName,\n                'mimeType': contentType\n            };\n            var multipartRequestBody = delimiter +\n                'Content-Type: application/json\\r\\n\\r\\n' +\n                JSON.stringify(metadata) +\n                delimiter +\n                'Content-Type: ' + contentType + '\\r\\n' +\n                '\\r\\n' +\n                fileData +\n                close_delim;\n            var request = gapi.client.request({\n                'path': '/upload/drive/v2/files',\n                'method': 'POST',\n                'params': { 'uploadType': 'multipart', 'convert': true },\n                'headers': {\n                    'Content-Type': 'multipart/mixed; boundary=\"' + boundary + '\"'\n                },\n                'body': multipartRequestBody\n            });\n            if (!callback) {\n                callback = function (file) {\n                    //                console.log(file);\n                    window.open(file.alternateLink, \"_blank\");\n                };\n            }\n            request.execute(callback);\n        };\n        GDoc.loadGoogleClient = function (callback) {\n            var GOOGLE_CLIENT_URL = \"https://apis.google.com/js/client.js?onload=handleGoogleClientLoad\";\n            this.googleClientLoaded = true;\n            window.handleGoogleClientLoad = callback;\n            utils_1.default.importScript(GOOGLE_CLIENT_URL);\n        };\n        return GDoc;\n    }());\n    GDoc.clientId = \"INSERT_YOUR_GOOGLE_CLIENT_ID_HERE\";\n    GDoc.googleClientLoaded = false;\n    GDoc.authenticated = false;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = GDoc;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTg4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2NvbnRyb2xzL2dkb2MudHM/ZGJlYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCBVdGlscyBmcm9tICd1dGlscyc7XG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR0RvYyB7XG4gICAgcHVibGljIHN0YXRpYyBjbGllbnRJZCA9IFwiSU5TRVJUX1lPVVJfR09PR0xFX0NMSUVOVF9JRF9IRVJFXCI7XG4gICAgcHJpdmF0ZSBzdGF0aWMgZ29vZ2xlQ2xpZW50TG9hZGVkID0gZmFsc2U7XG4gICAgcHJpdmF0ZSBzdGF0aWMgYXV0aGVudGljYXRlZCA9IGZhbHNlO1xuXG4gICAgcHVibGljIHN0YXRpYyBwZXJmb3JtR29vZ2xlQVBJQWN0aW9uKGF1dGhTdWNjZXNzQ2FsbGJhY2s6IEZ1bmN0aW9uLCBhdXRoRmFpbHVyZUNhbGxiYWNrOiBGdW5jdGlvbikge1xuICAgICAgICB3aW5kb3cuc2V0VGltZW91dChcbiAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICBHRG9jLmNoZWNrQXV0aChhdXRoU3VjY2Vzc0NhbGxiYWNrLCBhdXRoRmFpbHVyZUNhbGxiYWNrKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIDEpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGNoZWNrQXV0aChhdXRoU3VjY2Vzc0NhbGxiYWNrOiBGdW5jdGlvbiwgYXV0aEZhaWx1cmVDYWxsYmFjazogRnVuY3Rpb24pIHtcbiAgICAgICAgaWYoIUdEb2MuZ29vZ2xlQ2xpZW50TG9hZGVkKSB7XG4gICAgICAgICAgICBHRG9jLmxvYWRHb29nbGVDbGllbnQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgR0RvYy5jaGVja0F1dGgoYXV0aFN1Y2Nlc3NDYWxsYmFjaywgYXV0aEZhaWx1cmVDYWxsYmFjayk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKEdEb2MuYXV0aGVudGljYXRlZCkge1xuICAgICAgICAgICAgYXV0aFN1Y2Nlc3NDYWxsYmFjaygpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVE9ETzogZ2V0IHRoaXMgZnJvbSBhIGNvbmZpZy9wcm9wcyBmaWxlLiBQb3NzaWJseSBhamF4IGZyb20gdGhlIHNlcnZlciBvciB1c2luZyBhIGJ1aWxkIHN0ZXA/XG4gICAgICAgIHZhciBjbGllbnRJZCA9IEdEb2MuY2xpZW50SWQ7XG4gICAgICAgIC8vIFdlIHJlcXVpcmUgcGVybWlzc2lvbnMgb25seSBmb3IgR29vZ2xlIERyaXZlXG4gICAgICAgIHZhciBzY29wZXMgPSBbJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvZHJpdmUnXTtcblxuICAgICAgICAvLyBmaXJzdCB0cnkgd2l0aCBpbW1lZGlhdGU6dHJ1ZSB0byByZW5ldyB0aGUgb2F1dGggdG9rZW4gd2l0aG91dCBvcGVuaW5nIGEgd2luZG93XG4gICAgICAgIGdhcGkuYXV0aC5hdXRob3JpemUoe2NsaWVudF9pZDogY2xpZW50SWQsIHNjb3BlOiBzY29wZXMsIGltbWVkaWF0ZTogdHJ1ZX0sIGZ1bmN0aW9uIChhdXRoUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoYXV0aFJlc3VsdCAmJiAhYXV0aFJlc3VsdC5lcnJvcikge1xuICAgICAgICAgICAgICAgIEdEb2MuYXV0aGVudGljYXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgYXV0aFN1Y2Nlc3NDYWxsYmFjaygpOyAgIC8vIHVzZXIgd2FzIGFscmVhZHkgYXV0aGVkIVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBkaWRuJ3Qgd29yaywgc28gdHJ5IHdpdGggb3BlbmluZyBhIHdpbmRvdyB0byBhc2sgZm9yIHVzZXIncyBhdXRob3JpemF0aW9uXG4gICAgICAgICAgICAgICAgdmFyIGhhbmRsZUF1dGhSZXN1bHQgPSBmdW5jdGlvbiBoYW5kbGVBdXRoUmVzdWx0KGF1dGhSZXN1bHQ6IEdvb2dsZUFwaU9BdXRoMlRva2VuT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhdXRoUmVzdWx0ICYmICFhdXRoUmVzdWx0LmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBHRG9jLmF1dGhlbnRpY2F0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXV0aFN1Y2Nlc3NDYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXV0aEZhaWx1cmVDYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBnYXBpLmF1dGguYXV0aG9yaXplKHtjbGllbnRfaWQ6IGNsaWVudElkLCBzY29wZTogc2NvcGVzLCBpbW1lZGlhdGU6IGZhbHNlfSwgaGFuZGxlQXV0aFJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwbG9hZHMgYSBmaWxlIHRvIEdvb2dsZSBEcml2ZSB3aXRoIGF1dG8gY29udmVyc2lvbiB0byBHb29nbGUgRG9jXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyB1cGxvYWRGaWxlVG9HRHJpdmUoZmlsZURhdGE6IHN0cmluZywgZmlsZU5hbWU6IHN0cmluZywgY29udGVudFR5cGU6IHN0cmluZywgIGNhbGxiYWNrOiBGdW5jdGlvbikge1xuICAgICAgICB2YXIgYm91bmRhcnkgPSAnLS0tLS0tLTMxNDE1OTI2NTM1ODk3OTMyMzg0Nic7XG4gICAgICAgIHZhciBkZWxpbWl0ZXIgPSBcIlxcclxcbi0tXCIgKyBib3VuZGFyeSArIFwiXFxyXFxuXCI7XG4gICAgICAgIHZhciBjbG9zZV9kZWxpbSA9IFwiXFxyXFxuLS1cIiArIGJvdW5kYXJ5ICsgXCItLVwiO1xuICAgICAgICB2YXIgbWV0YWRhdGEgPSB7XG4gICAgICAgICAgICAndGl0bGUnOiBmaWxlTmFtZSxcbiAgICAgICAgICAgICdtaW1lVHlwZSc6IGNvbnRlbnRUeXBlXG4gICAgICAgIH07XG4gICAgICAgIHZhciBtdWx0aXBhcnRSZXF1ZXN0Qm9keSA9XG4gICAgICAgICAgICBkZWxpbWl0ZXIgK1xuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxcclxcblxcclxcbicgK1xuICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkobWV0YWRhdGEpICtcbiAgICAgICAgICAgIGRlbGltaXRlciArXG4gICAgICAgICAgICAnQ29udGVudC1UeXBlOiAnICsgY29udGVudFR5cGUgKyAnXFxyXFxuJyArXG4gICAgICAgICAgICAnXFxyXFxuJyArXG4gICAgICAgICAgICBmaWxlRGF0YSArXG4gICAgICAgICAgICBjbG9zZV9kZWxpbTtcblxuICAgICAgICB2YXIgcmVxdWVzdCA9IGdhcGkuY2xpZW50LnJlcXVlc3Qoe1xuICAgICAgICAgICAgJ3BhdGgnOiAnL3VwbG9hZC9kcml2ZS92Mi9maWxlcycsXG4gICAgICAgICAgICAnbWV0aG9kJzogJ1BPU1QnLFxuICAgICAgICAgICAgJ3BhcmFtcyc6IHsndXBsb2FkVHlwZSc6ICdtdWx0aXBhcnQnLCAnY29udmVydCcgOiB0cnVlfSxcbiAgICAgICAgICAgICdoZWFkZXJzJzoge1xuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnbXVsdGlwYXJ0L21peGVkOyBib3VuZGFyeT1cIicgKyBib3VuZGFyeSArICdcIidcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnYm9keSc6IG11bHRpcGFydFJlcXVlc3RCb2R5fSk7XG4gICAgICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gZnVuY3Rpb24oZmlsZTogYW55KSB7XG4vLyAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhmaWxlKTtcbiAgICAgICAgICAgICAgICB3aW5kb3cub3BlbihmaWxlLmFsdGVybmF0ZUxpbmssIFwiX2JsYW5rXCIpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXF1ZXN0LmV4ZWN1dGUoPGFueT5jYWxsYmFjayk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgbG9hZEdvb2dsZUNsaWVudChjYWxsYmFjazogKCkgPT4gYW55KSB7XG4gICAgICAgIHZhciBHT09HTEVfQ0xJRU5UX1VSTCA9IFwiaHR0cHM6Ly9hcGlzLmdvb2dsZS5jb20vanMvY2xpZW50LmpzP29ubG9hZD1oYW5kbGVHb29nbGVDbGllbnRMb2FkXCI7XG4gICAgICAgIHRoaXMuZ29vZ2xlQ2xpZW50TG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgKDxhbnk+d2luZG93KS5oYW5kbGVHb29nbGVDbGllbnRMb2FkID0gY2FsbGJhY2s7XG5cbiAgICAgICAgVXRpbHMuaW1wb3J0U2NyaXB0KEdPT0dMRV9DTElFTlRfVVJMKTtcbiAgICB9XG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBjb250cm9scy9nZG9jLnRzXG4gKiovIl0sIm1hcHBpbmdzIjoiOztBQUlBO0FBQUE7QUFnR0E7QUEzRkE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQS9GQTtBQUNBO0FBQ0E7Ozs7OyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 192:
/***/ function(module, exports, __webpack_require__) {

	eval("module.exports = __webpack_require__.p + \"a51c5608d01acf32df728f299767f82b.gif\";//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vY29udHJvbHMvYWpheC1sb2FkZXIuZ2lmP2ZjYTYiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYTUxYzU2MDhkMDFhY2YzMmRmNzI4ZjI5OTc2N2Y4MmIuZ2lmXCI7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL2NvbnRyb2xzL2FqYXgtbG9hZGVyLmdpZlxuICoqIG1vZHVsZSBpZCA9IDE5MlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 193:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/// <reference path=\"../../deps.d.ts\" />\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(1), __webpack_require__(2), __webpack_require__(8), __webpack_require__(195), __webpack_require__(14), __webpack_require__(350), __webpack_require__(9), __webpack_require__(351), __webpack_require__(194)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, $, _, Backbone, React, metadatacache_1, extremequerymodel_1, events_1) {\n    \"use strict\";\n    /// <amd-dependency path=\"topui/extreme/extremequeryview.css\"/>\n    /// <amd-dependency path=\"topui/extreme/extremequeryview.html\"/>\n    var templateText = __webpack_require__(194);\n    var IQL2Parser = __webpack_require__(31).IQL2Parser;\n    var OneBoxModule = __webpack_require__(353);\n    var templateText = __webpack_require__(194);\n    //var lastCheckedQuery: string = null;\n    //var syntaxCheckTimeoutId: number = null;\n    var datasetsMetadata = {};\n    var datasetDetailedMetadata = {};\n    var fetchingDatasetDetailedMetadata = {};\n    var ExtremeQueryView = (function (_super) {\n        __extends(ExtremeQueryView, _super);\n        function ExtremeQueryView() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        ExtremeQueryView.prototype.events = function () {\n            var eventMap = {\n                \"input .extreme-query\": this.onQueryBoxChanged,\n                \"keyup .extreme-query\": this.onQueryBoxChanged\n            };\n            return eventMap;\n        };\n        ExtremeQueryView.prototype.onQueryBoxChanged = function (event) {\n            var el = event.target;\n            var value;\n            if (el instanceof HTMLDivElement) {\n                var subdivs = $('div', el);\n                if (subdivs.length == 0) {\n                    value = el.textContent.replace(/\\u00a0/g, \" \");\n                }\n                else {\n                    value = subdivs.toArray().map(function (subdiv) {\n                        return subdiv.textContent.replace(/\\u00a0/g, \" \");\n                    }).join(\"\\n\");\n                }\n            }\n            else {\n                value = el.value;\n            }\n            this.collection.models[0].set(\"query\", value, { noUIRedraw: true });\n        };\n        ExtremeQueryView.prototype.initialize = function () {\n            this.initDatasetList();\n            this.listenTo(this.collection.models[0], \"change\", this.onModelChanged);\n            this.listenTo(this.collection, \"add\", this.onModelChanged);\n            this.listenTo(events_1.default.eventBus, events_1.default.distinctValueClicked, this.onDistinctValueClicked);\n            this.listenTo(events_1.default.eventBus, events_1.default.appBecameVisible, this.focusDefaultPart);\n            //this.listenTo(this.model, \"change:start\", this.onStartDateChanged);\n            //this.listenTo(Events.eventBus, Events.termClicked, this.onTermClicked);\n            //this.listenTo(Events.eventBus, Events.execute, this.onQueryExecution);\n            //this.listenTo(Events.eventBus, Events.backendChanged, this.updateDatasetList);\n        };\n        ExtremeQueryView.prototype.remove = function () {\n            this.collection.unbind();\n            _super.prototype.remove.call(this);\n            return this;\n        };\n        ExtremeQueryView.prototype.initDatasetList = function () {\n            metadatacache_1.default.getDatasetList().done(function (datasets) {\n                datasetsMetadata = {};\n                datasets.forEach(function (x) {\n                    datasetsMetadata[x.name] = {\n                        name: x.name,\n                        description: x.description,\n                    };\n                });\n            });\n        };\n        ExtremeQueryView.prototype.onModelChanged = function (model, options) {\n            //var completeQuery:string = model.getCompleteQuery();\n            //if (lastCheckedQuery != completeQuery) {\n            //    if (syntaxCheckTimeoutId !== null) {\n            //        window.clearTimeout(syntaxCheckTimeoutId);\n            //    }\n            //syntaxCheckTimeoutId = window.setTimeout(_.bind(this.syntaxCheck, this), 1000);\n            //}\n            if (options.noUIRedraw !== true && model instanceof extremequerymodel_1.default) {\n                this.render(); // todo: update values that changed rather than re-render. This will allow undo/redo\n            }\n        };\n        ExtremeQueryView.prototype.render = function () {\n            var _this = this;\n            var props = {\n                initialQuery: this.collection.models[0].query,\n                parser: IQL2Parser,\n                getDatasetInfo: function (dataset) {\n                    if (dataset in datasetDetailedMetadata) {\n                        return datasetDetailedMetadata[dataset];\n                    }\n                    else {\n                        if (!(dataset in fetchingDatasetDetailedMetadata)) {\n                            fetchingDatasetDetailedMetadata[dataset] = true;\n                            metadatacache_1.default.getFullDatasetInfo(dataset).done(function (datasetInfo) {\n                                datasetDetailedMetadata[dataset] = datasetInfo;\n                            });\n                        }\n                        return undefined;\n                    }\n                },\n                getAllDatasets: function () {\n                    return datasetsMetadata;\n                },\n                onQueryChange: function (q) {\n                    _this.collection.models[0].set(\"query\", q, { noUIRedraw: true });\n                },\n                onDatasetsChange: function (datasets) {\n                    // TODO: load the dataset metadata for the new datasets\n                }\n            };\n            var reactBox = React.createElement(OneBoxModule, props);\n            window.onebox = reactBox;\n            //this.$el.html(ExtremeQueryView.template({model: this.collection.models[0]}));\n            React.render(reactBox, this.el);\n            return this;\n        };\n        ExtremeQueryView.prototype.onDistinctValueClicked = function (groupBys, rawField, field, processLocally) {\n            if (processLocally) {\n                var model = this.collection.models[0];\n                for (var _i = 0, groupBys_1 = groupBys; _i < groupBys_1.length; _i++) {\n                    var groupBy = groupBys_1[_i];\n                    model.appendFilter(groupBy[0], groupBy[1]);\n                }\n                model.removeSelect(field);\n                var fieldMetric = rawField.substring(rawField.indexOf(\"(\") + 1, rawField.length - 1);\n                model.setGroupBy(fieldMetric + \"[100]\");\n                events_1.default.eventBus.trigger(events_1.default.execute, false);\n            }\n        };\n        ExtremeQueryView.prototype.focusDefaultPart = function () {\n            var _this = this;\n            window.setTimeout(function () {\n                _this.$('textarea').focus();\n            }, 1);\n        };\n        return ExtremeQueryView;\n    }(Backbone.View));\n    ExtremeQueryView.template = _.template(templateText);\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = ExtremeQueryView;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceMappingURL=data:application/json;base64,");

/***/ },

/***/ 350:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/// <reference path=\"../../deps.d.ts\" />\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(4), __webpack_require__(7), __webpack_require__(29), __webpack_require__(28), __webpack_require__(12), __webpack_require__(31)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, Promise, iquerymodel_1, columninfo_1, columntype_1, utils_1) {\n    \"use strict\";\n    /// <amd-dependency path=\"@indeed/iql2-parser\"/>\n    var IQL2Parser = __webpack_require__(31).IQL2Parser;\n    var ExtremeQueryModel = (function (_super) {\n        __extends(ExtremeQueryModel, _super);\n        function ExtremeQueryModel() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.datasets = [];\n            return _this;\n        }\n        Object.defineProperty(ExtremeQueryModel.prototype, \"query\", {\n            get: function () { return this.get(\"query\"); },\n            set: function (val) {\n                this.set(\"query\", val);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        ExtremeQueryModel.prototype.defaults = function () {\n            return {\n                query: \"FROM jobsearch yesterday today\\n GROUP BY country\\n SELECT count()\",\n                datasets: [\"jobsearch\"]\n            };\n        };\n        ExtremeQueryModel.prototype.getQueryParser = function () {\n            return IQL2Parser;\n        };\n        ExtremeQueryModel.prototype.getCompleteQuery = function (skipLimit, dontApplyMacros, addNewLines) {\n            if (dontApplyMacros === void 0) { dontApplyMacros = false; }\n            if (addNewLines === void 0) { addNewLines = false; }\n            var queryPostMacros;\n            if (!dontApplyMacros) {\n                queryPostMacros = iquerymodel_1.default.applyMacros(this.query);\n            }\n            else {\n                queryPostMacros = this.query;\n            }\n            var limitStr = String(iquerymodel_1.default.CURRENT_LIMIT || \"\"); // convert null to empty string\n            return queryPostMacros + (skipLimit ? \"\" : this.getPart(' limit ', limitStr));\n        };\n        ExtremeQueryModel.prototype.appendFilter = function (field, term) {\n            var bucketStart = utils_1.default.getBucketStart(term);\n            var bucketEnd = utils_1.default.getBucketEnd(term);\n            var queryPostMacros = iquerymodel_1.default.applyMacros(this.query);\n            if (bucketStart == null || bucketEnd == null) {\n                var termToAdd = void 0;\n                if (isNaN(Number(term))) {\n                    termToAdd = '\"' + term.replace('\"', '\\\\\"') + '\"';\n                }\n                else {\n                    termToAdd = term;\n                }\n                this.query = IQL2Parser.addSimpleWhereFilter(queryPostMacros, field, termToAdd, true).assumeSuccess();\n                return;\n            }\n            //this.appendBucketFilter(field, bucketStart, bucketEnd);\n        };\n        ExtremeQueryModel.prototype.getColumnInfos = function () {\n            var groupByColumns = this.groupByColumnInfo();\n            var queryPostMacros = iquerymodel_1.default.applyMacros(this.query);\n            var queryParts = IQL2Parser.queryParts(queryPostMacros).assumeSuccess();\n            var selects = IQL2Parser.selectDisplayValues(queryParts.select).assumeSuccess();\n            var rawSelects = IQL2Parser.selectRaws(queryParts.select).assumeSuccess();\n            if (selects.length == 0) {\n                selects[0] = \"\";\n                rawSelects[0] = \"\";\n            }\n            var selectColumns = selects.map(function (columnText, rawSelectIndex) {\n                var text = columnText.trim();\n                var rawText = rawSelects[rawSelectIndex];\n                var text = iquerymodel_1.default.applyCommentsToPart(text); // TODO: preserve comments through parsing?\n                if (selects.length == 1 && text == \"\") {\n                    text = \"count()\"; // count() is the default metric in Select\n                }\n                return new columninfo_1.default(text, columntype_1.default.METRIC, rawText, false);\n            });\n            return groupByColumns.concat(selectColumns);\n        };\n        ExtremeQueryModel.prototype.groupByColumnInfo = function () {\n            var queryPostMacros = iquerymodel_1.default.applyMacros(this.query);\n            var queryParts = IQL2Parser.queryParts(queryPostMacros).assumeSuccess();\n            var groupBys = IQL2Parser.groupByRaws(queryParts.groupBy).assumeSuccess();\n            if (groupBys.length == 0) {\n                groupBys[0] = \"\";\n            }\n            return groupBys.map(function (columnText) {\n                var text = columnText.trim();\n                var rawText = text;\n                var text = iquerymodel_1.default.applyCommentsToPart(text); // TODO: preserve comments through parsing?\n                var columnType = text.split(\"(\")[0] == \"time\" ? columntype_1.default.TIME : columntype_1.default.GROUPING;\n                return new columninfo_1.default(text, columnType, rawText, false);\n            });\n        };\n        ExtremeQueryModel.prototype.getDataset = function () {\n            var queryPostMacros = iquerymodel_1.default.applyMacros(this.query);\n            try {\n                var queryParts = IQL2Parser.queryParts(queryPostMacros).assumeSuccess();\n                this.datasets = IQL2Parser.fromDatasets(queryParts.datasets).assumeSuccess();\n            }\n            finally {\n                return this.datasets[0];\n            }\n        };\n        ;\n        //public getDataset(): string { return this.datasets.length > 0 ? this.datasets[0] : null;};\n        ExtremeQueryModel.prototype.setGroupBy = function (groupBy) {\n            this.query = iquerymodel_1.default.applyMacros(this.query);\n            var groupBys = this.groupByColumnInfo();\n            var numGroupBys = (groupBys.length == 1 && groupBys[0].text.length == 0) ? 0 : groupBys.length;\n            for (var groupIndex = numGroupBys - 1; groupIndex >= 0; groupIndex--) {\n                this.query = IQL2Parser.removeGroupBy(this.query, groupIndex).assumeSuccess();\n            }\n            this.query = IQL2Parser.addGroupBy(this.query, groupBy).assumeSuccess();\n            this.query = this.query.indexOf(\"\\n \\n\") > -1 ? this.query.replace(\"\\n \\n\", \"\") : this.query.replace(\"\\n\\n\", \" \");\n        };\n        ExtremeQueryModel.prototype.removeSelect = function (selectToRemove) {\n            var queryPostMacros = iquerymodel_1.default.applyMacros(this.query);\n            var queryParts = IQL2Parser.queryParts(queryPostMacros).assumeSuccess();\n            var selects = IQL2Parser.selectDisplayValues(queryParts.select).assumeSuccess();\n            var rawSelects = IQL2Parser.selectRaws(queryParts.select).assumeSuccess();\n            var modifiedSelects = [];\n            for (var selectIndex = 0; selectIndex < selects.length; selectIndex++) {\n                if (selectToRemove != selects[selectIndex]) {\n                    modifiedSelects.push(rawSelects[selectIndex]);\n                }\n            }\n            if (modifiedSelects.length == 0) {\n                modifiedSelects.push(\"count()\");\n            }\n            this.query = queryPostMacros.replace(queryParts.select, modifiedSelects.join(\", \"));\n        };\n        ExtremeQueryModel.prototype.setFromFullQuery = function (query) {\n            this.query = query;\n            return Promise.resolve(this);\n        };\n        return ExtremeQueryModel;\n    }(iquerymodel_1.default));\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = ExtremeQueryModel;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceMappingURL=data:application/json;base64,");

/***/ },

/***/ 369:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Promise) {/// <reference path=\"../../deps.d.ts\" />\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(8), __webpack_require__(27), __webpack_require__(350)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, Backbone, querymodel_1, extremequerymodel_1) {\n    \"use strict\";\n    var QuerySet = (function (_super) {\n        __extends(QuerySet, _super);\n        function QuerySet() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        QuerySet.prototype.getQueryStrings = function () {\n            return this.models.map(function (model) {\n                return model.getCompleteQuery(true, true);\n            });\n        };\n        QuerySet.prototype.equals = function (other) {\n            return this.getQueryStrings().toString() === other.getQueryStrings().toString();\n        };\n        QuerySet.prototype.getModels = function () {\n            return this.models;\n        };\n        QuerySet.prototype.getCopy = function () {\n            var copy = new QuerySet();\n            this.models.forEach(function (queryModel) {\n                var queryClone = queryModel.clone();\n                copy.add(queryClone);\n            });\n            return copy;\n        };\n        QuerySet.prototype.setNewQueries = function (queries, extremeMode) {\n            var _this = this;\n            var promises = [];\n            var queryModels = [];\n            queries.forEach(function (query) {\n                var queryModel = extremeMode ? new extremequerymodel_1.default() : new querymodel_1.default();\n                var queryUpdatePromise = queryModel.setFromFullQuery(query);\n                promises.push(queryUpdatePromise);\n                queryModels.push(queryModel);\n            });\n            return Promise.all(promises)\n                .then(function () {\n                _this.reset();\n                _this.add(queryModels);\n            })\n                .catch(function (error) {\n                console.error(\"Failed to split a query\");\n                console.error(error);\n                _this.reset();\n                _this.add(queryModels);\n            });\n        };\n        return QuerySet;\n    }(Backbone.Collection));\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = QuerySet;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzY5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3RvcHVpL3F1ZXJ5c2V0L3F1ZXJ5c2V0LnRzPzI4NmYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2RlcHMuZC50c1wiIC8+XG5cbmltcG9ydCBCYWNrYm9uZSA9IHJlcXVpcmUoJ2JhY2tib25lJyk7XG5pbXBvcnQgUXVlcnlNb2RlbCBmcm9tICd0b3B1aS9xdWVyeXNldC9xdWVyeS9xdWVyeW1vZGVsJztcbmltcG9ydCBFeHRyZW1lUXVlcnlNb2RlbCBmcm9tICd0b3B1aS9leHRyZW1lL2V4dHJlbWVxdWVyeW1vZGVsJztcbmltcG9ydCBJUXVlcnlMaXN0IGZyb20gJ3RvcHVpL2lxdWVyeWxpc3QnO1xuaW1wb3J0IElRdWVyeU1vZGVsIGZyb20gJ3RvcHVpL2lxdWVyeW1vZGVsJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUXVlcnlTZXQgZXh0ZW5kcyBCYWNrYm9uZS5Db2xsZWN0aW9uPElRdWVyeU1vZGVsPiBpbXBsZW1lbnRzIElRdWVyeUxpc3R7XG4gICAgcHVibGljIGdldFF1ZXJ5U3RyaW5ncygpOiBzdHJpbmdbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZGVscy5tYXAoZnVuY3Rpb24obW9kZWw6IElRdWVyeU1vZGVsKSB7XG4gICAgICAgICAgICByZXR1cm4gbW9kZWwuZ2V0Q29tcGxldGVRdWVyeSh0cnVlLCB0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIGVxdWFscyhvdGhlcjogUXVlcnlTZXQpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UXVlcnlTdHJpbmdzKCkudG9TdHJpbmcoKSA9PT0gb3RoZXIuZ2V0UXVlcnlTdHJpbmdzKCkudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0TW9kZWxzKCk6IElRdWVyeU1vZGVsW10ge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbHM7XG4gICAgfVxuXG4gICAgcHVibGljIGdldENvcHkoKTogUXVlcnlTZXQge1xuICAgICAgICB2YXIgY29weSA9IG5ldyBRdWVyeVNldCgpO1xuICAgICAgICB0aGlzLm1vZGVscy5mb3JFYWNoKChxdWVyeU1vZGVsOiBJUXVlcnlNb2RlbCkgPT4ge1xuICAgICAgICAgICAgdmFyIHF1ZXJ5Q2xvbmUgPSA8SVF1ZXJ5TW9kZWw+cXVlcnlNb2RlbC5jbG9uZSgpO1xuICAgICAgICAgICAgY29weS5hZGQocXVlcnlDbG9uZSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY29weTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0TmV3UXVlcmllcyhxdWVyaWVzOiBzdHJpbmdbXSwgZXh0cmVtZU1vZGU6IGJvb2xlYW4pOiBQcm9taXNlPGFueT4ge1xuICAgICAgICB2YXIgcHJvbWlzZXM6UHJvbWlzZTxJUXVlcnlNb2RlbD5bXSA9IFtdO1xuICAgICAgICB2YXIgcXVlcnlNb2RlbHM6SVF1ZXJ5TW9kZWxbXSA9IFtdO1xuICAgICAgICBxdWVyaWVzLmZvckVhY2goKHF1ZXJ5OnN0cmluZykgPT4ge1xuICAgICAgICAgICAgdmFyIHF1ZXJ5TW9kZWw6IElRdWVyeU1vZGVsID0gZXh0cmVtZU1vZGUgPyBuZXcgRXh0cmVtZVF1ZXJ5TW9kZWwoKSA6IG5ldyBRdWVyeU1vZGVsKCk7XG4gICAgICAgICAgICB2YXIgcXVlcnlVcGRhdGVQcm9taXNlOlByb21pc2U8SVF1ZXJ5TW9kZWw+ID0gcXVlcnlNb2RlbC5zZXRGcm9tRnVsbFF1ZXJ5KHF1ZXJ5KTtcbiAgICAgICAgICAgIHByb21pc2VzLnB1c2gocXVlcnlVcGRhdGVQcm9taXNlKTtcbiAgICAgICAgICAgIHF1ZXJ5TW9kZWxzLnB1c2gocXVlcnlNb2RlbCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpXG4gICAgICAgICAgICAudGhlbihcbiAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGQocXVlcnlNb2RlbHMpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gc3BsaXQgYSBxdWVyeVwiKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGQocXVlcnlNb2RlbHMpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxufVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogdG9wdWkvcXVlcnlzZXQvcXVlcnlzZXQudHNcbiAqKi8iXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQVFBO0FBQUE7QUFBQTs7QUE4Q0E7QUE3Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7Ozs7OzsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 370:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/// <reference path=\"../deps.d.ts\" />\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(8), __webpack_require__(16), __webpack_require__(9), __webpack_require__(15), __webpack_require__(7)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, Backbone, backend_1, events_1, iqlclient_1, iquerymodel_1) {\n    \"use strict\";\n    var ControlsModel = (function (_super) {\n        __extends(ControlsModel, _super);\n        function ControlsModel() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        ControlsModel.prototype.initialize = function (attributes) {\n            this.presentationModel = attributes.presentationModel;\n            this.on(\"change:backend\", this.onBackendChanged);\n            this.on(\"change:limit\", this.onLimitChanged);\n            this.on(\"change:macro\", this.onMacroChanged);\n            this.on(\"change:extremeMode\", this.onExtremeChanged);\n        };\n        ControlsModel.prototype.defaults = function () {\n            return {\n                backend: \"prod\",\n                limit: iquerymodel_1.default.CURRENT_LIMIT,\n                extremeMode: false\n            };\n        };\n        Object.defineProperty(ControlsModel.prototype, \"backend\", {\n            get: function () { return this.get(\"backend\"); },\n            set: function (val) { this.set(\"backend\", val); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ControlsModel.prototype, \"limit\", {\n            get: function () { return this.get(\"limit\"); },\n            set: function (val) { this.set(\"limit\", val); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ControlsModel.prototype, \"macro\", {\n            get: function () { return this.get(\"macro\"); },\n            set: function (val) { this.set(\"macro\", val); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ControlsModel.prototype, \"extremeMode\", {\n            get: function () { return this.get(\"extremeMode\"); },\n            set: function (val) { this.set(\"extremeMode\", val); },\n            enumerable: true,\n            configurable: true\n        });\n        ControlsModel.prototype.onBackendChanged = function () {\n            var backendInstance = backend_1.default.byId(this.backend);\n            iqlclient_1.default.backendInstance = backendInstance;\n            // Let other modules know\n            try {\n                events_1.default.eventBus.trigger(events_1.default.backendChanged);\n            }\n            catch (e) {\n                console.error(e);\n            }\n        };\n        ControlsModel.prototype.onLimitChanged = function () {\n            iquerymodel_1.default.CURRENT_LIMIT = this.limit;\n        };\n        ControlsModel.prototype.onMacroChanged = function () {\n            iquerymodel_1.default.MACROS = this.macro;\n        };\n        ControlsModel.prototype.onExtremeChanged = function () {\n            iqlclient_1.default.IQLLanguageVersion = this.extremeMode ? 2 : 1;\n        };\n        return ControlsModel;\n    }(Backbone.Model));\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = ControlsModel;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzcwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2NvbnRyb2xzL2NvbnRyb2xzbW9kZWwudHM/N2U5ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vZGVwcy5kLnRzXCIgLz5cblxuaW1wb3J0IEJhY2tib25lID0gcmVxdWlyZSgnYmFja2JvbmUnKTtcbmltcG9ydCBCYWNrZW5kSW5zdGFuY2UgIGZyb20gJ2JhY2tlbmQnO1xuaW1wb3J0IEV2ZW50cyBmcm9tICdldmVudHMnO1xuaW1wb3J0IElRTENsaWVudCBmcm9tICdpcWxjbGllbnQnO1xuaW1wb3J0IElRdWVyeU1vZGVsIGZyb20gJ3RvcHVpL2lxdWVyeW1vZGVsJztcbmltcG9ydCBQcmVzZW50YXRpb25Nb2RlbCBmcm9tICdyZXN1bHRwcmVzZW50YXRpb24vcHJlc2VudGF0aW9ubW9kZWwnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb250cm9sc01vZGVsIGV4dGVuZHMgQmFja2JvbmUuTW9kZWwge1xuICAgIHByZXNlbnRhdGlvbk1vZGVsOiBQcmVzZW50YXRpb25Nb2RlbDtcblxuICAgIGluaXRpYWxpemUoYXR0cmlidXRlcz86IGFueSkge1xuICAgICAgICB0aGlzLnByZXNlbnRhdGlvbk1vZGVsID0gYXR0cmlidXRlcy5wcmVzZW50YXRpb25Nb2RlbDtcbiAgICAgICAgdGhpcy5vbihcImNoYW5nZTpiYWNrZW5kXCIsIHRoaXMub25CYWNrZW5kQ2hhbmdlZCk7XG4gICAgICAgIHRoaXMub24oXCJjaGFuZ2U6bGltaXRcIiwgdGhpcy5vbkxpbWl0Q2hhbmdlZCk7XG4gICAgICAgIHRoaXMub24oXCJjaGFuZ2U6bWFjcm9cIiwgdGhpcy5vbk1hY3JvQ2hhbmdlZCk7XG4gICAgICAgIHRoaXMub24oXCJjaGFuZ2U6ZXh0cmVtZU1vZGVcIiwgdGhpcy5vbkV4dHJlbWVDaGFuZ2VkKTtcbiAgICB9XG5cbiAgICBkZWZhdWx0cygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGJhY2tlbmQ6IFwicHJvZFwiLFxuICAgICAgICAgICAgbGltaXQ6IElRdWVyeU1vZGVsLkNVUlJFTlRfTElNSVQsXG4gICAgICAgICAgICBleHRyZW1lTW9kZTogZmFsc2VcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBnZXQgYmFja2VuZCgpOiBzdHJpbmcgeyByZXR1cm4gdGhpcy5nZXQoXCJiYWNrZW5kXCIpOyB9XG4gICAgc2V0IGJhY2tlbmQodmFsOiBzdHJpbmcpIHsgdGhpcy5zZXQoXCJiYWNrZW5kXCIsIHZhbCk7IH1cblxuICAgIGdldCBsaW1pdCgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5nZXQoXCJsaW1pdFwiKTsgfVxuICAgIHNldCBsaW1pdCh2YWw6IG51bWJlcikgeyB0aGlzLnNldChcImxpbWl0XCIsIHZhbCk7IH1cblxuICAgIGdldCBtYWNybygpOiBzdHJpbmcgeyByZXR1cm4gdGhpcy5nZXQoXCJtYWNyb1wiKTsgfVxuICAgIHNldCBtYWNybyh2YWw6IHN0cmluZykgeyB0aGlzLnNldChcIm1hY3JvXCIsIHZhbCk7IH1cblxuICAgIGdldCBleHRyZW1lTW9kZSgpOiBib29sZWFuIHsgcmV0dXJuIHRoaXMuZ2V0KFwiZXh0cmVtZU1vZGVcIik7IH1cbiAgICBzZXQgZXh0cmVtZU1vZGUodmFsOiBib29sZWFuKSB7IHRoaXMuc2V0KFwiZXh0cmVtZU1vZGVcIiwgdmFsKTsgfVxuXG4gICAgb25CYWNrZW5kQ2hhbmdlZCgpIHtcbiAgICAgICAgdmFyIGJhY2tlbmRJbnN0YW5jZSA9IEJhY2tlbmRJbnN0YW5jZS5ieUlkKHRoaXMuYmFja2VuZCk7XG4gICAgICAgIElRTENsaWVudC5iYWNrZW5kSW5zdGFuY2UgPSBiYWNrZW5kSW5zdGFuY2U7XG5cbiAgICAgICAgLy8gTGV0IG90aGVyIG1vZHVsZXMga25vd1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgRXZlbnRzLmV2ZW50QnVzLnRyaWdnZXIoRXZlbnRzLmJhY2tlbmRDaGFuZ2VkKTtcbiAgICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25MaW1pdENoYW5nZWQoKSB7XG4gICAgICAgIElRdWVyeU1vZGVsLkNVUlJFTlRfTElNSVQgPSB0aGlzLmxpbWl0O1xuICAgIH1cblxuICAgIG9uTWFjcm9DaGFuZ2VkKCkge1xuICAgICAgICBJUXVlcnlNb2RlbC5NQUNST1MgPSB0aGlzLm1hY3JvO1xuICAgIH1cblxuICAgIG9uRXh0cmVtZUNoYW5nZWQoKSB7XG4gICAgICAgIElRTENsaWVudC5JUUxMYW5ndWFnZVZlcnNpb24gPSB0aGlzLmV4dHJlbWVNb2RlID8gMjogMTtcbiAgICB9XG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBjb250cm9scy9jb250cm9sc21vZGVsLnRzXG4gKiovIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7QUFTQTtBQUFBO0FBQUE7O0FBc0RBO0FBbkRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7OztBQURBO0FBR0E7QUFBQTtBQUNBOzs7QUFEQTtBQUdBO0FBQUE7QUFDQTs7O0FBREE7QUFHQTtBQUFBO0FBQ0E7OztBQURBO0FBR0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7Ozs7OyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 371:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/// <reference path=\"deps.d.ts\" />\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(2), __webpack_require__(372), __webpack_require__(15), __webpack_require__(9), __webpack_require__(12), __webpack_require__(373), __webpack_require__(374), __webpack_require__(375), __webpack_require__(376), __webpack_require__(377)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, _, resultset_1, iqlclient_1, events_1, utils_1, eventsourcewrapper_1, elaboratetransform_1, groupjoiner_1, timeoverlaytransform_1, columntransforms_1) {\n    \"use strict\";\n    \"use strict\";\n    var Executor = (function () {\n        function Executor(querySet, presentationModel) {\n            var _this = this;\n            this.querySet = querySet;\n            this.presentationModel = presentationModel;\n            this.currentQueryCalls = [];\n            this.currentRunId = 0;\n            this.elaborateTransform = new elaboratetransform_1.default();\n            events_1.default.eventBus.on(events_1.default.execute, this.runQueries, this);\n            events_1.default.eventBus.on(events_1.default.cancel, this.cancelQueryCalls, this);\n            window.addEventListener(\"beforeunload\", function (ignored) {\n                _this.cancelQueryCalls();\n            });\n        }\n        Executor.prototype.runQueries = function (initialLoad) {\n            var _this = this;\n            if (initialLoad === void 0) { initialLoad = false; }\n            //TODO: This function is ridiculously complicated - split it apart into smaller functions / classes\n            var thisRunId = this.currentRunId = this.currentRunId + 1;\n            this.presentationModel.isLoading = true;\n            this.presentationModel.resetProgress();\n            this.cancelQueryCalls();\n            var queries = [];\n            var thisQueryCalls = [];\n            this.querySet.getModels().forEach(function (model) {\n                queries.push(model.clone());\n            });\n            // TODO: make sure all queries are parseable by the JS parser?\n            _.each(queries, function (queryModel, index) {\n                var query = queryModel.getCompleteQuery(false);\n                var thisQueryCall = iqlclient_1.default.queryWithProgress(query);\n                var columnNames = [];\n                try {\n                    columnNames = _.pluck(queryModel.groupByColumnInfo(), 'text');\n                }\n                catch (e) {\n                    console.warn(\"failed to parse column names out of the query: \", e);\n                }\n                // TODO: remove any cast once DefinitelyTyped definition for progress() is fixed\n                thisQueryCalls.push(eventsourcewrapper_1.default.create(thisQueryCall).progress((function (eventType, steps, timeStamp) {\n                    switch (eventType) {\n                        case \"start\":\n                            //                        console.log(index, \"The progress bar renders now, it has\", steps, \"segments\");\n                            //                        console.log(index, \"The time is shown to be\", timeStamp);\n                            _this.presentationModel.addProgress(index, steps, columnNames);\n                            break;\n                        case \"update\":\n                            //                        console.log(index, \"The progress bar updates to have\", steps, \"segments filled\");\n                            //                        console.log(index, \"The time is shown to be\", timeStamp);\n                            _this.presentationModel.updateProgress(index);\n                            break;\n                        default:\n                            console.error(index, \"corrupted eventstream\");\n                            break;\n                    }\n                })));\n            });\n            this.currentQueryCalls = thisQueryCalls;\n            utils_1.default.whenAll(this.currentQueryCalls)\n                .done(function (args) {\n                var callResults = _.pluck(args, '0');\n                var headers = _.pluck(args, '1');\n                _this.currentQueryCalls = [];\n                _this.presentationModel.isLoading = false;\n                var resultSets = [];\n                callResults.forEach(function (callResult, index) {\n                    resultSets.push(resultset_1.default.fromTSV(callResult[0], queries[index], headers[index], index));\n                });\n                var transformedResultSet = _this.applyTransforms(resultSets, queries);\n                if (transformedResultSet == null) {\n                    _this.presentationModel.resultSet = null;\n                    _this.presentationModel.errorText = \"Failed to combine the result sets from multiple queries\";\n                }\n                else {\n                    // unique property to trigger presentationModel.resultSet change event even if data is the same\n                    transformedResultSet.extra[\"runId\"] = thisRunId;\n                    _this.presentationModel.errorText = null;\n                    _this.presentationModel.resultSet = transformedResultSet;\n                    var elaborate = _this.elaborateTransform.transform(transformedResultSet);\n                    elaborate.deferred.then(function (elaborations) {\n                        if (elaborate.columns.length == 0) {\n                            return; // no elaborations applied\n                        }\n                        var columnNames = _.pluck(transformedResultSet.columns, 'text');\n                        //noinspection JSMismatchedCollectionQueryUpdate\n                        var columnIndexes = [];\n                        elaborate.columns.forEach(function (columnName) {\n                            var columnIndex = columnNames.indexOf(columnName);\n                            columnIndexes.push(columnIndex);\n                            transformedResultSet.columns[columnIndex].elaborated = true;\n                        });\n                        transformedResultSet.table.forEach(function (row, rowIndex) {\n                            columnIndexes.forEach(function (columnIndex, elaborateIndex) {\n                                row[columnIndex] = elaborations[elaborateIndex][rowIndex] + \" [\" + row[columnIndex] + \"]\";\n                            });\n                        });\n                        _this.presentationModel.resultSet = transformedResultSet;\n                        // force presentation re-render\n                        _this.presentationModel.trigger(\"change:resultSet\");\n                    });\n                }\n            }).fail(function (errors) {\n                if (_this.currentRunId != thisRunId) {\n                    return false;\n                }\n                _this.presentationModel.isLoading = false;\n                _this.cancelQueryCalls();\n                var errorText = \"\";\n                // TODO: get the correct query index\n                errors.forEach(function (error, index) {\n                    errorText += \"Query failed: \\n\" + error + '\\n';\n                });\n                _this.presentationModel.resultSet = null;\n                _this.presentationModel.errorText = errorText;\n            });\n        };\n        Executor.prototype.cancelQueryCalls = function () {\n            this.currentQueryCalls.forEach(function (call) {\n                if (call != null && typeof call.abort == 'function') {\n                    call.abort();\n                }\n            });\n            this.currentQueryCalls = [];\n        };\n        Executor.prototype.applyTransforms = function (resultSets, models) {\n            resultSets = columntransforms_1.default.apply(resultSets);\n            if (resultSets.length === 1) {\n                return resultSets[0];\n            }\n            // Disabled as I'm not sure we want to explicitly mark the dataset in the result as the metrics will be separate anyway\n            //        var datasetMatches = DatasetTransform.getDatasetsFromModels(models).length === 1;\n            //        if(!datasetMatches) {\n            //            resultSets = DatasetTransform.apply(resultSets, models);\n            //        }\n            var nonEmptyResultSets = resultSets.filter(function (resultSet) { return resultSet.table.length > 0; });\n            if (nonEmptyResultSets.length > 0) {\n                resultSets = nonEmptyResultSets; // remove empty result sets\n            }\n            else {\n                return resultSets[0]; // all result sets are empty so just return the first one\n            }\n            var groupByMatches = _.keys(_.groupBy(resultSets, function (resultSet) {\n                return _.pluck(resultSet.getGroupingColumns(), \"text\")\n                    .map(function (columnText) {\n                    return columnText.replace(/\\[[^\\]]*]/g, '');\n                });\n            })).length === 1;\n            if (!groupByMatches) {\n                return null;\n            }\n            resultSets = timeoverlaytransform_1.default.apply(resultSets);\n            return groupjoiner_1.default.apply(resultSets);\n        };\n        return Executor;\n    }());\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Executor;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceMappingURL=data:application/json;base64,");

/***/ },

/***/ 372:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/// <reference path=\"deps.d.ts\" />\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(2), __webpack_require__(28)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, _, columntype_1) {\n    \"use strict\";\n    var ResultSet = (function () {\n        function ResultSet(table, columns, title, extra, queryIndex, queryParser) {\n            if (title === void 0) { title = \"\"; }\n            if (extra === void 0) { extra = {}; }\n            if (queryIndex === void 0) { queryIndex = 0; }\n            this.table = table;\n            this.columns = columns;\n            this.title = title;\n            this.extra = extra;\n            this.queryIndex = queryIndex;\n            this.queryParser = queryParser;\n        }\n        // Move to the QueryModel class?\n        ResultSet.fromTSV = function (data, queryModel, headers, queryIndex) {\n            var extra = headers || {};\n            var table = [];\n            var lines = data.split('\\n');\n            for (var lineIndex = 0, linesLen = lines.length; lineIndex < linesLen; lineIndex++) {\n                var line = lines[lineIndex];\n                if (!line) {\n                    continue;\n                }\n                table.push(line.split(\"\\t\"));\n            }\n            lines = null;\n            var columns = queryModel.getColumnInfos();\n            var title = queryModel.getCompleteQuery(true);\n            var resultSet = new ResultSet(table, columns, title, extra, queryIndex, queryModel.getQueryParser());\n            resultSet.initTotals();\n            return resultSet;\n        };\n        ResultSet.prototype.initTotals = function () {\n            // try to set totals from the headers\n            var trueTotalsJson = this.extra['IQL-Totals'];\n            var trueTotalsAvailable = false;\n            if (trueTotalsJson) {\n                // manually parse the JSON like string since we need to handle NaN which JSON doesn't do\n                var trueTotals = trueTotalsJson.substring(1, trueTotalsJson.length - 1).split(',')\n                    .filter(function (val) { return val !== \"\"; })\n                    .map(function (val) { return parseFloat(val.trim()); });\n                if (trueTotals && trueTotals.length == this.getMetricColumns().length) {\n                    trueTotalsAvailable = true;\n                    var groupingColumnsCount = this.getGroupingColumnsCount();\n                    for (var i = 0; i < trueTotals.length; i++) {\n                        var columnIndex = groupingColumnsCount + i;\n                        if (columnIndex >= this.columns.length) {\n                            break;\n                        }\n                        this.columns[columnIndex].isLocalTotal = false;\n                        this.columns[columnIndex].columnTotal = trueTotals[i];\n                    }\n                }\n            }\n            if (!trueTotalsAvailable) {\n                var totals = [];\n                var groupCount = this.getGroupingColumnsCount();\n                for (var i = groupCount; i < this.columns.length; i++) {\n                    totals[i] = 0;\n                }\n                this.table.forEach(function (row) {\n                    for (var i = groupCount; i < row.length; i++) {\n                        var cellValue = Number(row[i]);\n                        if (!isNaN(cellValue)) {\n                            totals[i] += cellValue;\n                        }\n                    }\n                });\n                for (var i = groupCount; i < this.columns.length; i++) {\n                    this.columns[i].isLocalTotal = true;\n                    this.columns[i].columnTotal = totals[i];\n                }\n            }\n        };\n        ResultSet.prototype.getMetricColumns = function () {\n            return this.columns\n                .filter(function (col) {\n                return col.type == columntype_1.default.METRIC;\n            });\n        };\n        ResultSet.prototype.getMetricColumnsCount = function () {\n            return this.getMetricColumns().length;\n        };\n        ResultSet.prototype.getGroupingColumns = function () {\n            return this.columns\n                .filter(function (col) {\n                return col.type == columntype_1.default.GROUPING || col.type == columntype_1.default.TIME;\n            });\n        };\n        ResultSet.prototype.getGroupingColumnsCount = function () {\n            return this.getGroupingColumns().length;\n        };\n        ResultSet.prototype.toTSV = function (limit, addHeader) {\n            if (!limit) {\n                limit = Number.MAX_VALUE;\n            }\n            var limitedRows = this.table.length > limit ? this.table.slice(0, limit) : this.table;\n            var rowsToSave;\n            if (addHeader) {\n                var headerRow = _.map(this.columns, function (column) {\n                    return column.text;\n                });\n                rowsToSave = [headerRow].concat(limitedRows);\n            }\n            else {\n                rowsToSave = limitedRows;\n            }\n            var lines = _.map(rowsToSave, function (cells) {\n                return cells.join('\\t');\n            });\n            return lines.join('\\n');\n        };\n        ResultSet.prototype.getWarnings = function () {\n            var IQL_WARNING_HEADER = 'IQL-Warning';\n            var warningStr = this.extra[IQL_WARNING_HEADER];\n            if (warningStr) {\n                try {\n                    return JSON.parse(warningStr);\n                }\n                catch (e) {\n                    return [warningStr];\n                }\n            }\n        };\n        return ResultSet;\n    }());\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = ResultSet;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzcyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3Jlc3VsdHNldC50cz9mN2I2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJkZXBzLmQudHNcIiAvPlxuXG5pbXBvcnQgXyA9IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKTtcblxuaW1wb3J0IENvbHVtblR5cGUgZnJvbSAnY29sdW1udHlwZSc7XG5pbXBvcnQgQ29sdW1uSW5mbyBmcm9tICdjb2x1bW5pbmZvJztcbmltcG9ydCBJUXVlcnlNb2RlbCBmcm9tICd0b3B1aS9pcXVlcnltb2RlbCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlc3VsdFNldCB7IFxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0YWJsZTogc3RyaW5nW11bXSxcbiAgICAgICAgICAgICAgICBwdWJsaWMgY29sdW1ucyA6IENvbHVtbkluZm9bXSxcbiAgICAgICAgICAgICAgICBwdWJsaWMgdGl0bGUgOiBzdHJpbmcgPSBcIlwiLFxuICAgICAgICAgICAgICAgIHB1YmxpYyBleHRyYTogYW55ID0ge30sXG4gICAgICAgICAgICAgICAgcHVibGljIHF1ZXJ5SW5kZXggOiBudW1iZXIgPSAwLFxuICAgICAgICAgICAgICAgIHB1YmxpYyBxdWVyeVBhcnNlcjogYW55KSB7XG4gICAgfVxuXG4gICAgLy8gTW92ZSB0byB0aGUgUXVlcnlNb2RlbCBjbGFzcz9cbiAgICBzdGF0aWMgZnJvbVRTVihkYXRhOiBzdHJpbmcsIHF1ZXJ5TW9kZWwgOiBJUXVlcnlNb2RlbCwgaGVhZGVyczogYW55LCBxdWVyeUluZGV4OiBudW1iZXIpIDogUmVzdWx0U2V0IHtcbiAgICAgICAgdmFyIGV4dHJhID0gaGVhZGVycyB8fCB7fTtcblxuICAgICAgICB2YXIgdGFibGU6IHN0cmluZ1tdW10gPSBbXTtcbiAgICAgICAgdmFyIGxpbmVzID0gZGF0YS5zcGxpdCgnXFxuJyk7XG4gICAgICAgIGZvcih2YXIgbGluZUluZGV4ID0gMCwgbGluZXNMZW4gPSBsaW5lcy5sZW5ndGg7IGxpbmVJbmRleCA8IGxpbmVzTGVuOyBsaW5lSW5kZXgrKykge1xuICAgICAgICAgICAgdmFyIGxpbmUgPSBsaW5lc1tsaW5lSW5kZXhdO1xuICAgICAgICAgICAgaWYoIWxpbmUpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRhYmxlLnB1c2gobGluZS5zcGxpdChcIlxcdFwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgbGluZXMgPSBudWxsO1xuXG4gICAgICAgIHZhciBjb2x1bW5zIDogQ29sdW1uSW5mb1tdID0gcXVlcnlNb2RlbC5nZXRDb2x1bW5JbmZvcygpO1xuICAgICAgICB2YXIgdGl0bGU6IHN0cmluZyA9IHF1ZXJ5TW9kZWwuZ2V0Q29tcGxldGVRdWVyeSh0cnVlKTtcbiAgICAgICAgdmFyIHJlc3VsdFNldCA9IG5ldyBSZXN1bHRTZXQodGFibGUsIGNvbHVtbnMsIHRpdGxlLCBleHRyYSwgcXVlcnlJbmRleCwgcXVlcnlNb2RlbC5nZXRRdWVyeVBhcnNlcigpKTtcblxuICAgICAgICByZXN1bHRTZXQuaW5pdFRvdGFscygpO1xuXG4gICAgICAgIHJldHVybiByZXN1bHRTZXQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpbml0VG90YWxzKCkge1xuICAgICAgICAvLyB0cnkgdG8gc2V0IHRvdGFscyBmcm9tIHRoZSBoZWFkZXJzXG4gICAgICAgIHZhciB0cnVlVG90YWxzSnNvbjogYW55ID0gdGhpcy5leHRyYVsnSVFMLVRvdGFscyddO1xuICAgICAgICB2YXIgdHJ1ZVRvdGFsc0F2YWlsYWJsZSA9IGZhbHNlO1xuICAgICAgICBpZih0cnVlVG90YWxzSnNvbikge1xuICAgICAgICAgICAgLy8gbWFudWFsbHkgcGFyc2UgdGhlIEpTT04gbGlrZSBzdHJpbmcgc2luY2Ugd2UgbmVlZCB0byBoYW5kbGUgTmFOIHdoaWNoIEpTT04gZG9lc24ndCBkb1xuICAgICAgICAgICAgdmFyIHRydWVUb3RhbHM6IG51bWJlcltdID0gdHJ1ZVRvdGFsc0pzb24uc3Vic3RyaW5nKDEsIHRydWVUb3RhbHNKc29uLmxlbmd0aC0xKS5zcGxpdCgnLCcpXG4gICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbih2YWw6IHN0cmluZykgeyByZXR1cm4gdmFsICE9PSBcIlwiIH0pXG4gICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbih2YWw6IHN0cmluZyk6IG51bWJlciB7IHJldHVybiBwYXJzZUZsb2F0KHZhbC50cmltKCkpOyB9KTtcbiAgICAgICAgICAgIGlmICh0cnVlVG90YWxzICYmIHRydWVUb3RhbHMubGVuZ3RoID09IHRoaXMuZ2V0TWV0cmljQ29sdW1ucygpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRydWVUb3RhbHNBdmFpbGFibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHZhciBncm91cGluZ0NvbHVtbnNDb3VudCA9IHRoaXMuZ2V0R3JvdXBpbmdDb2x1bW5zQ291bnQoKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRydWVUb3RhbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbHVtbkluZGV4ID0gZ3JvdXBpbmdDb2x1bW5zQ291bnQgKyBpO1xuICAgICAgICAgICAgICAgICAgICBpZihjb2x1bW5JbmRleCA+PSB0aGlzLmNvbHVtbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbHVtbnNbY29sdW1uSW5kZXhdLmlzTG9jYWxUb3RhbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbHVtbnNbY29sdW1uSW5kZXhdLmNvbHVtblRvdGFsID0gdHJ1ZVRvdGFsc1tpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZighdHJ1ZVRvdGFsc0F2YWlsYWJsZSkge1xuICAgICAgICAgICAgdmFyIHRvdGFsczogbnVtYmVyW10gPSBbXTtcbiAgICAgICAgICAgIHZhciBncm91cENvdW50ID0gdGhpcy5nZXRHcm91cGluZ0NvbHVtbnNDb3VudCgpO1xuICAgICAgICAgICAgZm9yKHZhciBpPWdyb3VwQ291bnQ7IGkgPCB0aGlzLmNvbHVtbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0b3RhbHNbaV0gPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy50YWJsZS5mb3JFYWNoKChyb3c6c3RyaW5nW10pID0+IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gZ3JvdXBDb3VudDsgaSA8IHJvdy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2VsbFZhbHVlID0gTnVtYmVyKHJvd1tpXSk7XG4gICAgICAgICAgICAgICAgICAgIGlmKCFpc05hTihjZWxsVmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbHNbaV0gKz0gY2VsbFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gZ3JvdXBDb3VudDsgaSA8IHRoaXMuY29sdW1ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuY29sdW1uc1tpXS5pc0xvY2FsVG90YWwgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuY29sdW1uc1tpXS5jb2x1bW5Ub3RhbCA9IHRvdGFsc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldE1ldHJpY0NvbHVtbnMoKTogQ29sdW1uSW5mb1tdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29sdW1uc1xuICAgICAgICAgICAgLmZpbHRlcigoY29sIDogQ29sdW1uSW5mbykgOiBib29sZWFuID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29sLnR5cGUgPT0gQ29sdW1uVHlwZS5NRVRSSUN9XG4gICAgICAgIClcbiAgICB9XG5cbiAgICBnZXRNZXRyaWNDb2x1bW5zQ291bnQoKSA6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE1ldHJpY0NvbHVtbnMoKS5sZW5ndGg7XG4gICAgfVxuXG4gICAgZ2V0R3JvdXBpbmdDb2x1bW5zKCk6IENvbHVtbkluZm9bXSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbHVtbnNcbiAgICAgICAgICAgIC5maWx0ZXIoKGNvbCA6IENvbHVtbkluZm8pIDogYm9vbGVhbiA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbC50eXBlID09IENvbHVtblR5cGUuR1JPVVBJTkcgfHwgY29sLnR5cGUgPT0gQ29sdW1uVHlwZS5USU1FfVxuICAgICAgICApXG4gICAgfVxuXG4gICAgZ2V0R3JvdXBpbmdDb2x1bW5zQ291bnQoKSA6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEdyb3VwaW5nQ29sdW1ucygpLmxlbmd0aDtcbiAgICB9XG5cbiAgICB0b1RTVihsaW1pdD86IG51bWJlciwgYWRkSGVhZGVyPzogYm9vbGVhbikgOiBzdHJpbmcge1xuICAgICAgICBpZighbGltaXQpIHtcbiAgICAgICAgICAgIGxpbWl0ID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbGltaXRlZFJvd3MgPSB0aGlzLnRhYmxlLmxlbmd0aCA+IGxpbWl0ID8gdGhpcy50YWJsZS5zbGljZSgwLCBsaW1pdCkgOiB0aGlzLnRhYmxlO1xuICAgICAgICB2YXIgcm93c1RvU2F2ZTogc3RyaW5nW11bXTtcbiAgICAgICAgaWYoYWRkSGVhZGVyKSB7XG4gICAgICAgICAgICB2YXIgaGVhZGVyUm93ID0gXy5tYXAodGhpcy5jb2x1bW5zLCBmdW5jdGlvbihjb2x1bW46IENvbHVtbkluZm8pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29sdW1uLnRleHQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJvd3NUb1NhdmUgPSBbaGVhZGVyUm93XS5jb25jYXQobGltaXRlZFJvd3MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcm93c1RvU2F2ZSA9IGxpbWl0ZWRSb3dzO1xuICAgICAgICB9XG4gICAgICAgIHZhciBsaW5lczogc3RyaW5nW10gPSBfLm1hcChyb3dzVG9TYXZlLCBmdW5jdGlvbihjZWxsczogc3RyaW5nW10pIHtcbiAgICAgICAgICAgIHJldHVybiBjZWxscy5qb2luKCdcXHQnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGxpbmVzLmpvaW4oJ1xcbicpO1xuICAgIH1cblxuICAgIGdldFdhcm5pbmdzKCl7XG4gICAgICAgIHZhciBJUUxfV0FSTklOR19IRUFERVIgPSAnSVFMLVdhcm5pbmcnO1xuICAgICAgICB2YXIgd2FybmluZ1N0ciA9IHRoaXMuZXh0cmFbSVFMX1dBUk5JTkdfSEVBREVSXTtcbiAgICAgICAgaWYgKHdhcm5pbmdTdHIpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2Uod2FybmluZ1N0cik7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuW3dhcm5pbmdTdHJdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG59XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogcmVzdWx0c2V0LnRzXG4gKiovIl0sIm1hcHBpbmdzIjoiQUFBQTs7O0FBUUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTs7Ozs7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 373:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(1), __webpack_require__(15)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, $, iqlclient_1) {\n    \"use strict\";\n    \"use strict\";\n    var EventSourceWrapper = (function () {\n        function EventSourceWrapper() {\n        }\n        EventSourceWrapper.create = function (eventSource) {\n            //state variables for each eventSource\n            var def = $.Deferred();\n            var headers = {};\n            var imhotepSessionIds = [];\n            var results = [\"\"];\n            var completedSteps = 0;\n            var totalSteps = 0;\n            var startTime = 0;\n            var gotDataBack = false;\n            var aborted = false;\n            var headerListener, sessionIdListener, startListener, progressListener, resultListener;\n            var closeAndRemoveHandlers = function () {\n                results = [\"\"];\n                eventSource.removeEventListener(\"header\", headerListener);\n                eventSource.removeEventListener(\"totalsteps\", startListener);\n                eventSource.removeEventListener(\"sessionid\", sessionIdListener);\n                eventSource.removeEventListener(\"chunkcomplete\", progressListener);\n                eventSource.removeEventListener(\"resultstream\", resultListener);\n                eventSource.close();\n            };\n            headerListener = function (e) {\n                //handle the headers\n                headers = JSON.parse(e.data);\n                gotDataBack = true;\n            };\n            eventSource.addEventListener(\"header\", headerListener);\n            sessionIdListener = function (e) {\n                if (e.data && e.data[0] == \"[\") {\n                    for (var _i = 0, _a = JSON.parse(e.data); _i < _a.length; _i++) {\n                        var session = _a[_i];\n                        imhotepSessionIds.push(session);\n                    }\n                }\n                else {\n                    imhotepSessionIds.push(e.data);\n                }\n            };\n            eventSource.addEventListener(\"sessionid\", sessionIdListener);\n            startListener = function (e) {\n                // this is the start of the query\n                // reset all of the data\n                gotDataBack = true;\n                totalSteps = parseInt(e.data, 10);\n                completedSteps = 0;\n                startTime = e.timeStamp;\n                def.notify(\"start\", totalSteps, 0); // tell the progress function to start\n            };\n            eventSource.addEventListener(\"totalsteps\", startListener);\n            progressListener = function (e) {\n                // a chunk is complete, update whatever\n                completedSteps++;\n                def.notify(\"update\", parseInt(e.data, 10), e.timeStamp - startTime); // update the progress function\n            };\n            eventSource.addEventListener(\"chunkcomplete\", progressListener);\n            resultListener = function (e) {\n                results = [e.data];\n                //EventSourceWrapper.closeAndRemoveHandlers(eventSource, headerListener, startListener, progressListener, resultListener);\n                //def.resolve([e.data], headers); //resolve with the value\n            };\n            eventSource.addEventListener(\"resultstream\", resultListener);\n            eventSource.addEventListener(\"complete\", function () {\n                var finalResults = results;\n                //remove all of the event listeners, tear down as much as possible\n                closeAndRemoveHandlers();\n                //if we haven't gotten a table yet, there are no results\n                if (def.state() == \"pending\") {\n                    def.resolve(finalResults, headers);\n                }\n            });\n            eventSource.addEventListener(\"error\", function (e) {\n                closeAndRemoveHandlers();\n                //the provided errors are completely useless...\n                if (!gotDataBack) {\n                    def.reject(\"Error connecting to server\");\n                }\n                else {\n                    // we got some data back and then the event source connection was lost\n                    def.reject(\"Looks like the IQL server got overloaded and is restarting. \\n\" +\n                        \"Please take a look at your query and consider if it is too heavy. \\n\" +\n                        \"Wiki: \\n\" +\n                        \"https://wiki.indeed.com/display/INTEL/_Performance+Considerations+for+IQL+usage\");\n                }\n            });\n            eventSource.addEventListener(\"servererror\", function (e) {\n                closeAndRemoveHandlers();\n                def.reject(e.data);\n            });\n            var promise = def.promise();\n            // we need this promise to be abortable from the client\n            promise.abort = function () {\n                var needsSessionKill = def.state() == \"pending\";\n                closeAndRemoveHandlers();\n                if (!aborted && needsSessionKill) {\n                    for (var _i = 0, imhotepSessionIds_1 = imhotepSessionIds; _i < imhotepSessionIds_1.length; _i++) {\n                        var session = imhotepSessionIds_1[_i];\n                        iqlclient_1.default.killSession(session);\n                    }\n                }\n                aborted = true;\n                def.reject(\"Query cancellation was requested. \\n\" +\n                    \"Please note that it may take some time for cancellation to complete on the backend.\");\n            };\n            return promise;\n        };\n        return EventSourceWrapper;\n    }());\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = EventSourceWrapper;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzczLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2V2ZW50c291cmNld3JhcHBlci50cz8wMDU0Il0sInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJkZXBzLmQudHNcIiAvPlxuLy9UT0RPOiByZW5hbWVcbmltcG9ydCAkID0gcmVxdWlyZSgnanF1ZXJ5Jyk7XG5pbXBvcnQgSVFMQ2xpZW50IGZyb20gJ2lxbGNsaWVudCc7XG5cblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFdmVudFNvdXJjZVdyYXBwZXIge1xuICAgIHN0YXRpYyBjcmVhdGUoZXZlbnRTb3VyY2U6IEV2ZW50U291cmNlKTogSlF1ZXJ5UHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgICAgICAvL3N0YXRlIHZhcmlhYmxlcyBmb3IgZWFjaCBldmVudFNvdXJjZVxuICAgICAgICB2YXIgZGVmOiBKUXVlcnlEZWZlcnJlZDxhbnk+ID0gJC5EZWZlcnJlZCgpO1xuICAgICAgICB2YXIgaGVhZGVycyA9IHt9O1xuICAgICAgICB2YXIgaW1ob3RlcFNlc3Npb25JZHM6IHN0cmluZ1tdID0gW107XG4gICAgICAgIHZhciByZXN1bHRzID0gW1wiXCJdO1xuICAgICAgICB2YXIgY29tcGxldGVkU3RlcHMgPSAwO1xuICAgICAgICB2YXIgdG90YWxTdGVwcyA9IDA7XG4gICAgICAgIHZhciBzdGFydFRpbWUgPSAwO1xuICAgICAgICB2YXIgZ290RGF0YUJhY2sgPSBmYWxzZTtcbiAgICAgICAgdmFyIGFib3J0ZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIGhlYWRlckxpc3RlbmVyOiBhbnksIHNlc3Npb25JZExpc3RlbmVyOiBhbnksIHN0YXJ0TGlzdGVuZXI6IGFueSwgcHJvZ3Jlc3NMaXN0ZW5lcjogYW55LCByZXN1bHRMaXN0ZW5lcjogYW55O1xuXG4gICAgICAgIHZhciBjbG9zZUFuZFJlbW92ZUhhbmRsZXJzID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVzdWx0cyA9IFtcIlwiXTtcbiAgICAgICAgICAgIGV2ZW50U291cmNlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJoZWFkZXJcIiwgaGVhZGVyTGlzdGVuZXIpO1xuICAgICAgICAgICAgZXZlbnRTb3VyY2UucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdGFsc3RlcHNcIiwgc3RhcnRMaXN0ZW5lcik7XG4gICAgICAgICAgICBldmVudFNvdXJjZS5yZW1vdmVFdmVudExpc3RlbmVyKFwic2Vzc2lvbmlkXCIsIHNlc3Npb25JZExpc3RlbmVyKTtcbiAgICAgICAgICAgIGV2ZW50U291cmNlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjaHVua2NvbXBsZXRlXCIsIHByb2dyZXNzTGlzdGVuZXIpO1xuICAgICAgICAgICAgZXZlbnRTb3VyY2UucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc3VsdHN0cmVhbVwiLCByZXN1bHRMaXN0ZW5lcik7XG4gICAgICAgICAgICBldmVudFNvdXJjZS5jbG9zZSgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGhlYWRlckxpc3RlbmVyID0gKGU6IE1lc3NhZ2VFdmVudCkgPT4ge1xuICAgICAgICAgICAgLy9oYW5kbGUgdGhlIGhlYWRlcnNcbiAgICAgICAgICAgIGhlYWRlcnMgPSBKU09OLnBhcnNlKGUuZGF0YSk7XG4gICAgICAgICAgICBnb3REYXRhQmFjayA9IHRydWU7XG4gICAgICAgIH07XG4gICAgICAgIGV2ZW50U291cmNlLmFkZEV2ZW50TGlzdGVuZXIoXCJoZWFkZXJcIiwgaGVhZGVyTGlzdGVuZXIpO1xuXG4gICAgICAgIHNlc3Npb25JZExpc3RlbmVyID0gKGU6IE1lc3NhZ2VFdmVudCkgPT4ge1xuICAgICAgICAgICAgaWYoZS5kYXRhICYmIGUuZGF0YVswXSA9PSBcIltcIikge1xuICAgICAgICAgICAgICAgIGZvcih2YXIgc2Vzc2lvbiBvZiBKU09OLnBhcnNlKGUuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaW1ob3RlcFNlc3Npb25JZHMucHVzaChzZXNzaW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGltaG90ZXBTZXNzaW9uSWRzLnB1c2goZS5kYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgZXZlbnRTb3VyY2UuYWRkRXZlbnRMaXN0ZW5lcihcInNlc3Npb25pZFwiLCBzZXNzaW9uSWRMaXN0ZW5lcik7XG5cbiAgICAgICAgc3RhcnRMaXN0ZW5lciA9IChlOiBNZXNzYWdlRXZlbnQpID0+IHtcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgdGhlIHN0YXJ0IG9mIHRoZSBxdWVyeVxuICAgICAgICAgICAgLy8gcmVzZXQgYWxsIG9mIHRoZSBkYXRhXG4gICAgICAgICAgICBnb3REYXRhQmFjayA9IHRydWU7XG4gICAgICAgICAgICB0b3RhbFN0ZXBzID0gcGFyc2VJbnQoZS5kYXRhLCAxMCk7XG4gICAgICAgICAgICBjb21wbGV0ZWRTdGVwcyA9IDA7XG4gICAgICAgICAgICBzdGFydFRpbWUgPSBlLnRpbWVTdGFtcDtcbiAgICAgICAgICAgIGRlZi5ub3RpZnkoXCJzdGFydFwiLCB0b3RhbFN0ZXBzLCAwKTsgLy8gdGVsbCB0aGUgcHJvZ3Jlc3MgZnVuY3Rpb24gdG8gc3RhcnRcbiAgICAgICAgfTtcbiAgICAgICAgZXZlbnRTb3VyY2UuYWRkRXZlbnRMaXN0ZW5lcihcInRvdGFsc3RlcHNcIiwgc3RhcnRMaXN0ZW5lcik7XG5cbiAgICAgICAgcHJvZ3Jlc3NMaXN0ZW5lciA9IChlOiBNZXNzYWdlRXZlbnQpID0+IHtcbiAgICAgICAgICAgIC8vIGEgY2h1bmsgaXMgY29tcGxldGUsIHVwZGF0ZSB3aGF0ZXZlclxuICAgICAgICAgICAgY29tcGxldGVkU3RlcHMrKztcbiAgICAgICAgICAgIGRlZi5ub3RpZnkoXCJ1cGRhdGVcIiwgcGFyc2VJbnQoZS5kYXRhLCAxMCksIGUudGltZVN0YW1wIC0gc3RhcnRUaW1lKTsgLy8gdXBkYXRlIHRoZSBwcm9ncmVzcyBmdW5jdGlvblxuICAgICAgICB9O1xuICAgICAgICBldmVudFNvdXJjZS5hZGRFdmVudExpc3RlbmVyKFwiY2h1bmtjb21wbGV0ZVwiLCBwcm9ncmVzc0xpc3RlbmVyKTtcblxuICAgICAgICByZXN1bHRMaXN0ZW5lciA9IChlOiBNZXNzYWdlRXZlbnQpID0+IHtcbiAgICAgICAgICAgIHJlc3VsdHMgPSBbZS5kYXRhXTtcbiAgICAgICAgICAgIC8vRXZlbnRTb3VyY2VXcmFwcGVyLmNsb3NlQW5kUmVtb3ZlSGFuZGxlcnMoZXZlbnRTb3VyY2UsIGhlYWRlckxpc3RlbmVyLCBzdGFydExpc3RlbmVyLCBwcm9ncmVzc0xpc3RlbmVyLCByZXN1bHRMaXN0ZW5lcik7XG4gICAgICAgICAgICAvL2RlZi5yZXNvbHZlKFtlLmRhdGFdLCBoZWFkZXJzKTsgLy9yZXNvbHZlIHdpdGggdGhlIHZhbHVlXG4gICAgICAgIH07XG4gICAgICAgIGV2ZW50U291cmNlLmFkZEV2ZW50TGlzdGVuZXIoXCJyZXN1bHRzdHJlYW1cIiwgcmVzdWx0TGlzdGVuZXIpO1xuXG4gICAgICAgIGV2ZW50U291cmNlLmFkZEV2ZW50TGlzdGVuZXIoXCJjb21wbGV0ZVwiLCAoKSA9PiB7XG4gICAgICAgICAgICB2YXIgZmluYWxSZXN1bHRzID0gcmVzdWx0cztcbiAgICAgICAgICAgIC8vcmVtb3ZlIGFsbCBvZiB0aGUgZXZlbnQgbGlzdGVuZXJzLCB0ZWFyIGRvd24gYXMgbXVjaCBhcyBwb3NzaWJsZVxuICAgICAgICAgICAgY2xvc2VBbmRSZW1vdmVIYW5kbGVycygpO1xuICAgICAgICAgICAgLy9pZiB3ZSBoYXZlbid0IGdvdHRlbiBhIHRhYmxlIHlldCwgdGhlcmUgYXJlIG5vIHJlc3VsdHNcbiAgICAgICAgICAgIGlmKGRlZi5zdGF0ZSgpID09IFwicGVuZGluZ1wiKSB7XG4gICAgICAgICAgICAgICAgZGVmLnJlc29sdmUoZmluYWxSZXN1bHRzLCBoZWFkZXJzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgZXZlbnRTb3VyY2UuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIGZ1bmN0aW9uKGU6IGFueSkge1xuICAgICAgICAgICAgY2xvc2VBbmRSZW1vdmVIYW5kbGVycygpO1xuICAgICAgICAgICAgLy90aGUgcHJvdmlkZWQgZXJyb3JzIGFyZSBjb21wbGV0ZWx5IHVzZWxlc3MuLi5cbiAgICAgICAgICAgIGlmKCFnb3REYXRhQmFjaykge1xuICAgICAgICAgICAgICAgIGRlZi5yZWplY3QoXCJFcnJvciBjb25uZWN0aW5nIHRvIHNlcnZlclwiKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gd2UgZ290IHNvbWUgZGF0YSBiYWNrIGFuZCB0aGVuIHRoZSBldmVudCBzb3VyY2UgY29ubmVjdGlvbiB3YXMgbG9zdFxuICAgICAgICAgICAgICAgIGRlZi5yZWplY3QoXCJMb29rcyBsaWtlIHRoZSBJUUwgc2VydmVyIGdvdCBvdmVybG9hZGVkIGFuZCBpcyByZXN0YXJ0aW5nLiBcXG5cIiArXG4gICAgICAgICAgICAgICAgICAgIFwiUGxlYXNlIHRha2UgYSBsb29rIGF0IHlvdXIgcXVlcnkgYW5kIGNvbnNpZGVyIGlmIGl0IGlzIHRvbyBoZWF2eS4gXFxuXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIldpa2k6IFxcblwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJodHRwczovL3dpa2kuaW5kZWVkLmNvbS9kaXNwbGF5L0lOVEVML19QZXJmb3JtYW5jZStDb25zaWRlcmF0aW9ucytmb3IrSVFMK3VzYWdlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBldmVudFNvdXJjZS5hZGRFdmVudExpc3RlbmVyKFwic2VydmVyZXJyb3JcIiwgZnVuY3Rpb24oZTogYW55KSB7XG4gICAgICAgICAgICBjbG9zZUFuZFJlbW92ZUhhbmRsZXJzKCk7XG4gICAgICAgICAgICBkZWYucmVqZWN0KGUuZGF0YSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBwcm9taXNlIDogSlF1ZXJ5UHJvbWlzZTxzdHJpbmdbXT4gPSBkZWYucHJvbWlzZSgpO1xuICAgICAgICAvLyB3ZSBuZWVkIHRoaXMgcHJvbWlzZSB0byBiZSBhYm9ydGFibGUgZnJvbSB0aGUgY2xpZW50XG4gICAgICAgICg8YW55PnByb21pc2UpLmFib3J0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgbmVlZHNTZXNzaW9uS2lsbCA9IGRlZi5zdGF0ZSgpID09IFwicGVuZGluZ1wiO1xuICAgICAgICAgICAgY2xvc2VBbmRSZW1vdmVIYW5kbGVycygpO1xuICAgICAgICAgICAgaWYoIWFib3J0ZWQgJiYgbmVlZHNTZXNzaW9uS2lsbCkge1xuICAgICAgICAgICAgICAgIGZvcih2YXIgc2Vzc2lvbiBvZiBpbWhvdGVwU2Vzc2lvbklkcykge1xuICAgICAgICAgICAgICAgICAgICBJUUxDbGllbnQua2lsbFNlc3Npb24oc2Vzc2lvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWJvcnRlZCA9IHRydWU7XG4gICAgICAgICAgICBkZWYucmVqZWN0KFwiUXVlcnkgY2FuY2VsbGF0aW9uIHdhcyByZXF1ZXN0ZWQuIFxcblwiICtcbiAgICAgICAgICAgICAgICBcIlBsZWFzZSBub3RlIHRoYXQgaXQgbWF5IHRha2Ugc29tZSB0aW1lIGZvciBjYW5jZWxsYXRpb24gdG8gY29tcGxldGUgb24gdGhlIGJhY2tlbmQuXCIpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG5cbn1cblxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogZXZlbnRzb3VyY2V3cmFwcGVyLnRzXG4gKiovIl0sIm1hcHBpbmdzIjoiOztBQUtBO0FBRUE7QUFBQTtBQWlIQTtBQWhIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBOzs7OzsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 374:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Promise) {/// <reference path=\"../deps.d.ts\" />\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(15), __webpack_require__(14), __webpack_require__(9)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, iqlclient_1, metadatacache_1, events_1) {\n    \"use strict\";\n    var ElaborateTransform = (function () {\n        function ElaborateTransform() {\n            this.updateElaborateables();\n            events_1.default.eventBus.on(events_1.default.backendChanged, this.updateElaborateables);\n        }\n        ElaborateTransform.prototype.updateElaborateables = function () {\n            metadatacache_1.default.getElaborateableFields().done(function (data) {\n                ElaborateTransform.elaborateables = data;\n            }).fail(function () {\n                //TODO: client side logging?\n                console.error(\"Error updating elaborateable fields\");\n            });\n        };\n        ElaborateTransform.prototype.transform = function (resultSet) {\n            var elaborationPromises = [];\n            var elaborateableColumns = [];\n            resultSet.columns.forEach(function (column, index) {\n                var text = column.text;\n                if (text.indexOf(\"[\") >= 0) {\n                    text = text.substring(0, column.text.indexOf(\"[\"));\n                }\n                text = text.trim().toLowerCase();\n                if (ElaborateTransform.elaborateables.indexOf(text) >= 0) {\n                    elaborateableColumns.push(column.text);\n                    var cur = [];\n                    resultSet.table.forEach(function (row) {\n                        cur.push(row[index]);\n                    });\n                    elaborationPromises.push(iqlclient_1.default.elaborate(text, cur));\n                }\n            });\n            return { columns: elaborateableColumns, deferred: Promise.all(elaborationPromises) };\n        };\n        return ElaborateTransform;\n    }());\n    ElaborateTransform.elaborateables = [];\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = ElaborateTransform;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzc0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3RyYW5zZm9ybXMvZWxhYm9yYXRldHJhbnNmb3JtLnRzPzlhMDUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL2RlcHMuZC50c1wiIC8+XG5cbmltcG9ydCBDb2x1bW5UeXBlIGZyb20gJ2NvbHVtbnR5cGUnO1xuaW1wb3J0IFV0aWxzIGZyb20gJ3V0aWxzJztcbmltcG9ydCBSZXN1bHRTZXQgZnJvbSAncmVzdWx0c2V0JztcbmltcG9ydCBDb2x1bW5JbmZvIGZyb20gJ2NvbHVtbmluZm8nO1xuaW1wb3J0IElRTENsaWVudCBmcm9tICdpcWxjbGllbnQnO1xuaW1wb3J0IE1ldGFkYXRhQ2FjaGUgZnJvbSAnbWV0YWRhdGEvbWV0YWRhdGFjYWNoZSc7XG5pbXBvcnQgRXZlbnRzIGZyb20gJ2V2ZW50cyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVsYWJvcmF0ZVRyYW5zZm9ybSB7XG4gICAgcHJpdmF0ZSBzdGF0aWMgZWxhYm9yYXRlYWJsZXM6IHN0cmluZ1tdID0gW107XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy51cGRhdGVFbGFib3JhdGVhYmxlcygpO1xuICAgICAgICBFdmVudHMuZXZlbnRCdXMub24oRXZlbnRzLmJhY2tlbmRDaGFuZ2VkLCB0aGlzLnVwZGF0ZUVsYWJvcmF0ZWFibGVzKTtcbiAgICB9XG5cbiAgICB1cGRhdGVFbGFib3JhdGVhYmxlcygpIHtcbiAgICAgICAgTWV0YWRhdGFDYWNoZS5nZXRFbGFib3JhdGVhYmxlRmllbGRzKCkuZG9uZSgoZGF0YTogc3RyaW5nW10pID0+IHtcbiAgICAgICAgICAgIEVsYWJvcmF0ZVRyYW5zZm9ybS5lbGFib3JhdGVhYmxlcyA9IGRhdGE7XG4gICAgICAgIH0pLmZhaWwoKCkgPT4ge1xuICAgICAgICAgICAgLy9UT0RPOiBjbGllbnQgc2lkZSBsb2dnaW5nP1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIHVwZGF0aW5nIGVsYWJvcmF0ZWFibGUgZmllbGRzXCIpO1xuICAgICAgICB9KVxuICAgIH1cblxuICAgIHRyYW5zZm9ybShyZXN1bHRTZXQ6IFJlc3VsdFNldCk6IHtjb2x1bW5zOiBzdHJpbmdbXSwgZGVmZXJyZWQ6IFByb21pc2U8c3RyaW5nW11bXT59IHsgLy9oYXMgdG8gcmV0dXJuIHRoZSByZXN1bHQgc2V0LCBidXQgb25seSBkb2VzIGl0IGluIHRoZSBwcm9taXNlXG4gICAgICAgIHZhciBlbGFib3JhdGlvblByb21pc2VzOiBKUXVlcnlQcm9taXNlPGFueT5bXSA9IFtdO1xuICAgICAgICB2YXIgZWxhYm9yYXRlYWJsZUNvbHVtbnM6IHN0cmluZ1tdID0gW107XG4gICAgICAgIHJlc3VsdFNldC5jb2x1bW5zLmZvckVhY2goKGNvbHVtbjogQ29sdW1uSW5mbywgaW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgdmFyIHRleHQ6IHN0cmluZyA9IGNvbHVtbi50ZXh0O1xuICAgICAgICAgICAgaWYgKHRleHQuaW5kZXhPZihcIltcIikgPj0gMCkge1xuICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0LnN1YnN0cmluZygwLCBjb2x1bW4udGV4dC5pbmRleE9mKFwiW1wiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ZXh0ID0gdGV4dC50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIGlmKEVsYWJvcmF0ZVRyYW5zZm9ybS5lbGFib3JhdGVhYmxlcy5pbmRleE9mKHRleHQpID49IDApIHsgLy9lbGFib3JhdGUgb24gdGhlIGRhdGFcbiAgICAgICAgICAgICAgICBlbGFib3JhdGVhYmxlQ29sdW1ucy5wdXNoKGNvbHVtbi50ZXh0KTtcbiAgICAgICAgICAgICAgICB2YXIgY3VyOiBhbnlbXSA9IFtdO1xuICAgICAgICAgICAgICAgIHJlc3VsdFNldC50YWJsZS5mb3JFYWNoKChyb3c6IHN0cmluZ1tdKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGN1ci5wdXNoKHJvd1tpbmRleF0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGVsYWJvcmF0aW9uUHJvbWlzZXMucHVzaChJUUxDbGllbnQuZWxhYm9yYXRlKHRleHQsIGN1cikpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4ge2NvbHVtbnM6IGVsYWJvcmF0ZWFibGVDb2x1bW5zLCBkZWZlcnJlZDogUHJvbWlzZS5hbGwoZWxhYm9yYXRpb25Qcm9taXNlcyl9O1xuICAgIH1cbn1cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHRyYW5zZm9ybXMvZWxhYm9yYXRldHJhbnNmb3JtLnRzXG4gKiovIl0sIm1hcHBpbmdzIjoiQUFBQTs7O0FBVUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQXJDQTs7Ozs7OyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 375:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/// <reference path=\"../deps.d.ts\" />\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(2), __webpack_require__(372), __webpack_require__(12)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, _, resultset_1, utils_1) {\n    \"use strict\";\n    var GroupJoiner = (function () {\n        function GroupJoiner() {\n        }\n        // precondition: groupings between all the result sets match\n        GroupJoiner.apply = function (resultSets) {\n            var groupings = resultSets[0].getGroupingColumns();\n            var groupingColumnsCount = groupings.length;\n            var combinedTitle = _.pluck(resultSets, 'title').join(', ');\n            var combinedWarnings;\n            var numQuery = 1;\n            resultSets.forEach(function (resultSet) {\n                var nextWarning = resultSet.getWarnings();\n                if (nextWarning) {\n                    for (var numWarning = 0; numWarning < nextWarning.length; numWarning++) {\n                        nextWarning[numWarning] = \"Query \" + numQuery + \": \" + nextWarning[numWarning];\n                    }\n                    combinedWarnings = combinedWarnings ? combinedWarnings.concat(nextWarning) : nextWarning;\n                }\n                numQuery++;\n            });\n            var combinedExtra = resultSets[0].extra; // TODO: actually combine metadata from multiple queries\n            if (combinedWarnings) {\n                var totalWarnings = JSON.stringify(combinedWarnings);\n                combinedExtra[\"IQL-Warning\"] = totalWarnings;\n            }\n            var combinedQueryId = 0; // todo\n            var firstQueryParser = resultSets[0].queryParser;\n            var combinedColumnInfo = [];\n            combinedColumnInfo.push.apply(combinedColumnInfo, groupings);\n            var numberOfCombinedSelectColumns = 0;\n            resultSets.forEach(function (resultSet) {\n                resultSet.getMetricColumns().forEach(function (metricColumn) {\n                    var newColumn = _.clone(metricColumn);\n                    newColumn.text = 'q' + (resultSet.queryIndex + 1) + ':' + metricColumn.text;\n                    combinedColumnInfo.push(newColumn);\n                    numberOfCombinedSelectColumns++;\n                });\n            });\n            var numberOfCombinedColumns = combinedColumnInfo.length;\n            var singleBucketColumn = groupingColumnsCount == 1 && combinedColumnInfo[0].isBucketColumn;\n            var resultsTables = _.pluck(resultSets, \"table\");\n            var groupingMap = {};\n            var selectColumnIndex = groupingColumnsCount;\n            resultsTables.forEach(function (resultTable, tableIndex) {\n                var thisSelectColumnCount = resultSets[tableIndex].getMetricColumns().length;\n                resultTable.forEach(function (row) {\n                    var key = row.slice(0, groupingColumnsCount).join('\\t');\n                    if (singleBucketColumn) {\n                        var bucketStart = utils_1.default.getBucketStart(key);\n                        if (bucketStart !== null) {\n                            key = bucketStart;\n                        }\n                    }\n                    var values = groupingMap[key];\n                    if (!values) {\n                        values = new Array(numberOfCombinedColumns);\n                        groupingMap[key] = values;\n                        // copy grouping columns first\n                        for (var i = 0; i < groupingColumnsCount; i++) {\n                            values[i] = row[i];\n                        }\n                        // pre-initialize the rest with 0s to avoid undefineds\n                        for (var i = groupingColumnsCount; i < numberOfCombinedColumns; i++) {\n                            values[i] = 'N/A';\n                        }\n                    }\n                    // add the values from this table\n                    for (var i = 0; i < thisSelectColumnCount; i++) {\n                        values[selectColumnIndex + i] = row[groupingColumnsCount + i];\n                    }\n                });\n                selectColumnIndex += thisSelectColumnCount;\n            });\n            var keys = Object.keys(groupingMap);\n            var isNumeric = false;\n            if (groupingColumnsCount == 1) {\n                // some trickery to sort numeric values properly\n                isNumeric = true;\n                for (var i = 0; i < keys.length; i++) {\n                    var key = keys[i];\n                    // ignore gutter entries\n                    if (singleBucketColumn && key.substr(0, 2) === \">=\" || key.charAt(0) === \"<\") {\n                        continue;\n                    }\n                    if (isNaN(keys[i])) {\n                        isNumeric = false;\n                        break;\n                    }\n                }\n            }\n            if (!isNumeric) {\n                keys.sort();\n            }\n            else {\n                // use custom comparator for numbers\n                keys.sort(function (a, b) {\n                    var num1 = parseFloat(a);\n                    var num2 = parseFloat(b);\n                    // put the non-numbers in the very end\n                    if (isNaN(num1)) {\n                        num1 = Number.MAX_VALUE;\n                    }\n                    if (isNaN(num2)) {\n                        num2 = Number.MAX_VALUE;\n                    }\n                    return num1 - num2;\n                });\n            }\n            var mergedTable = keys.map(function (key) {\n                return groupingMap[key];\n            });\n            return new resultset_1.default(mergedTable, combinedColumnInfo, combinedTitle, combinedExtra, combinedQueryId, firstQueryParser);\n        };\n        return GroupJoiner;\n    }());\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = GroupJoiner;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzc1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3RyYW5zZm9ybXMvZ3JvdXBqb2luZXIudHM/YWY0NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vZGVwcy5kLnRzXCIgLz5cblxuaW1wb3J0IF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJyk7XG5cbmltcG9ydCBDb2x1bW5UeXBlIGZyb20gJ2NvbHVtbnR5cGUnO1xuaW1wb3J0IFF1ZXJ5TW9kZWwgZnJvbSAndG9wdWkvcXVlcnlzZXQvcXVlcnkvcXVlcnltb2RlbCc7XG5pbXBvcnQgUmVzdWx0U2V0IGZyb20gJ3Jlc3VsdHNldCc7XG5pbXBvcnQgQ29sdW1uSW5mbyBmcm9tICdjb2x1bW5pbmZvJztcbmltcG9ydCBVdGlscyBmcm9tICd1dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdyb3VwSm9pbmVyIHtcbiAgICAvLyBwcmVjb25kaXRpb246IGdyb3VwaW5ncyBiZXR3ZWVuIGFsbCB0aGUgcmVzdWx0IHNldHMgbWF0Y2hcbiAgICBzdGF0aWMgYXBwbHkocmVzdWx0U2V0czogUmVzdWx0U2V0W10pIDogUmVzdWx0U2V0IHtcbiAgICAgICAgdmFyIGdyb3VwaW5ncyA9IHJlc3VsdFNldHNbMF0uZ2V0R3JvdXBpbmdDb2x1bW5zKCk7XG4gICAgICAgIHZhciBncm91cGluZ0NvbHVtbnNDb3VudCA9IGdyb3VwaW5ncy5sZW5ndGg7XG5cbiAgICAgICAgdmFyIGNvbWJpbmVkVGl0bGUgPSBfLnBsdWNrKHJlc3VsdFNldHMsICd0aXRsZScpLmpvaW4oJywgJyk7XG4gICAgICAgIHZhciBjb21iaW5lZFdhcm5pbmdzOnN0cmluZ1tdO1xuICAgICAgICB2YXIgbnVtUXVlcnkgPSAxO1xuXG4gICAgICAgIHJlc3VsdFNldHMuZm9yRWFjaChmdW5jdGlvbiAocmVzdWx0U2V0OiBSZXN1bHRTZXQpIHtcbiAgICAgICAgICAgIHZhciBuZXh0V2FybmluZyA9IHJlc3VsdFNldC5nZXRXYXJuaW5ncygpO1xuICAgICAgICAgICAgaWYgKG5leHRXYXJuaW5nKXtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBudW1XYXJuaW5nID0gMDsgbnVtV2FybmluZyA8IG5leHRXYXJuaW5nLmxlbmd0aDsgbnVtV2FybmluZysrKXtcbiAgICAgICAgICAgICAgICAgICAgbmV4dFdhcm5pbmdbbnVtV2FybmluZ10gPSBcIlF1ZXJ5IFwiICsgbnVtUXVlcnkgKyBcIjogXCIgKyBuZXh0V2FybmluZ1tudW1XYXJuaW5nXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29tYmluZWRXYXJuaW5ncyA9IGNvbWJpbmVkV2FybmluZ3MgPyBjb21iaW5lZFdhcm5pbmdzLmNvbmNhdChuZXh0V2FybmluZykgOiBuZXh0V2FybmluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG51bVF1ZXJ5Kys7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBjb21iaW5lZEV4dHJhID0gcmVzdWx0U2V0c1swXS5leHRyYTsgLy8gVE9ETzogYWN0dWFsbHkgY29tYmluZSBtZXRhZGF0YSBmcm9tIG11bHRpcGxlIHF1ZXJpZXNcblxuICAgICAgICBpZiAoY29tYmluZWRXYXJuaW5ncykge1xuICAgICAgICAgICAgdmFyIHRvdGFsV2FybmluZ3MgPSBKU09OLnN0cmluZ2lmeShjb21iaW5lZFdhcm5pbmdzKTtcbiAgICAgICAgICAgIGNvbWJpbmVkRXh0cmFbXCJJUUwtV2FybmluZ1wiXSA9IHRvdGFsV2FybmluZ3M7XG4gICAgICAgIH1cblxuXG4gICAgICAgIHZhciBjb21iaW5lZFF1ZXJ5SWQgPSAwOyAvLyB0b2RvXG4gICAgICAgIHZhciBmaXJzdFF1ZXJ5UGFyc2VyID0gcmVzdWx0U2V0c1swXS5xdWVyeVBhcnNlcjtcbiAgICAgICAgdmFyIGNvbWJpbmVkQ29sdW1uSW5mbzogQ29sdW1uSW5mb1tdID0gW107XG4gICAgICAgIGNvbWJpbmVkQ29sdW1uSW5mby5wdXNoLmFwcGx5KGNvbWJpbmVkQ29sdW1uSW5mbywgZ3JvdXBpbmdzKTtcbiAgICAgICAgdmFyIG51bWJlck9mQ29tYmluZWRTZWxlY3RDb2x1bW5zID0gMDtcbiAgICAgICAgcmVzdWx0U2V0cy5mb3JFYWNoKGZ1bmN0aW9uKHJlc3VsdFNldDogUmVzdWx0U2V0KSB7XG4gICAgICAgICAgICByZXN1bHRTZXQuZ2V0TWV0cmljQ29sdW1ucygpLmZvckVhY2goZnVuY3Rpb24obWV0cmljQ29sdW1uOiBDb2x1bW5JbmZvKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5ld0NvbHVtbiA9IF8uY2xvbmUobWV0cmljQ29sdW1uKTtcbiAgICAgICAgICAgICAgICBuZXdDb2x1bW4udGV4dCA9ICdxJyArIChyZXN1bHRTZXQucXVlcnlJbmRleCsxKSArICc6JyArIG1ldHJpY0NvbHVtbi50ZXh0O1xuICAgICAgICAgICAgICAgIGNvbWJpbmVkQ29sdW1uSW5mby5wdXNoKG5ld0NvbHVtbik7XG4gICAgICAgICAgICAgICAgbnVtYmVyT2ZDb21iaW5lZFNlbGVjdENvbHVtbnMrKztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIG51bWJlck9mQ29tYmluZWRDb2x1bW5zID0gY29tYmluZWRDb2x1bW5JbmZvLmxlbmd0aDtcblxuICAgICAgICB2YXIgc2luZ2xlQnVja2V0Q29sdW1uID0gZ3JvdXBpbmdDb2x1bW5zQ291bnQgPT0gMSAmJiBjb21iaW5lZENvbHVtbkluZm9bMF0uaXNCdWNrZXRDb2x1bW47XG5cbiAgICAgICAgdmFyIHJlc3VsdHNUYWJsZXMgPSBfLnBsdWNrKHJlc3VsdFNldHMsIFwidGFibGVcIik7XG4gICAgICAgIHZhciBncm91cGluZ01hcDoge1tpbmRleDogc3RyaW5nXTogc3RyaW5nW119ID0ge307XG4gICAgICAgIHZhciBzZWxlY3RDb2x1bW5JbmRleCA9IGdyb3VwaW5nQ29sdW1uc0NvdW50O1xuICAgICAgICByZXN1bHRzVGFibGVzLmZvckVhY2goZnVuY3Rpb24ocmVzdWx0VGFibGU6IHN0cmluZ1tdW10sIHRhYmxlSW5kZXg6IG51bWJlcikge1xuICAgICAgICAgICAgdmFyIHRoaXNTZWxlY3RDb2x1bW5Db3VudCA9IHJlc3VsdFNldHNbdGFibGVJbmRleF0uZ2V0TWV0cmljQ29sdW1ucygpLmxlbmd0aDtcbiAgICAgICAgICAgIHJlc3VsdFRhYmxlLmZvckVhY2goZnVuY3Rpb24ocm93OiBzdHJpbmdbXSkge1xuICAgICAgICAgICAgICAgIHZhciBrZXkgPSByb3cuc2xpY2UoMCwgZ3JvdXBpbmdDb2x1bW5zQ291bnQpLmpvaW4oJ1xcdCcpO1xuICAgICAgICAgICAgICAgIGlmKHNpbmdsZUJ1Y2tldENvbHVtbikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYnVja2V0U3RhcnQgPSBVdGlscy5nZXRCdWNrZXRTdGFydChrZXkpO1xuICAgICAgICAgICAgICAgICAgICBpZihidWNrZXRTdGFydCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5ID0gYnVja2V0U3RhcnQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlczogc3RyaW5nW10gPSBncm91cGluZ01hcFtrZXldO1xuICAgICAgICAgICAgICAgIGlmKCF2YWx1ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzID0gbmV3IEFycmF5KG51bWJlck9mQ29tYmluZWRDb2x1bW5zKTtcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXBpbmdNYXBba2V5XSA9IHZhbHVlcztcbiAgICAgICAgICAgICAgICAgICAgLy8gY29weSBncm91cGluZyBjb2x1bW5zIGZpcnN0XG4gICAgICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBncm91cGluZ0NvbHVtbnNDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXNbaV0gPSByb3dbaV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gcHJlLWluaXRpYWxpemUgdGhlIHJlc3Qgd2l0aCAwcyB0byBhdm9pZCB1bmRlZmluZWRzXG4gICAgICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9IGdyb3VwaW5nQ29sdW1uc0NvdW50OyBpIDwgbnVtYmVyT2ZDb21iaW5lZENvbHVtbnM7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzW2ldID0gJ04vQSc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gYWRkIHRoZSB2YWx1ZXMgZnJvbSB0aGlzIHRhYmxlXG5cbiAgICAgICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgdGhpc1NlbGVjdENvbHVtbkNvdW50OyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzW3NlbGVjdENvbHVtbkluZGV4ICsgaV0gPSByb3dbZ3JvdXBpbmdDb2x1bW5zQ291bnQgKyBpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNlbGVjdENvbHVtbkluZGV4ICs9IHRoaXNTZWxlY3RDb2x1bW5Db3VudDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIGtleXM6IHN0cmluZ1tdID0gT2JqZWN0LmtleXMoZ3JvdXBpbmdNYXApO1xuICAgICAgICB2YXIgaXNOdW1lcmljOiBib29sZWFuID0gZmFsc2U7XG4gICAgICAgIGlmKGdyb3VwaW5nQ29sdW1uc0NvdW50ID09IDEpIHsgLy8gVE9ETzogaGFuZGxlIHNvcnRpbmcgZm9yIG51bWJlcnMgaW4gbXVsdGlwbGUgZ3JvdXBpbmcgY29sdW1uc1xuICAgICAgICAgICAgLy8gc29tZSB0cmlja2VyeSB0byBzb3J0IG51bWVyaWMgdmFsdWVzIHByb3Blcmx5XG4gICAgICAgICAgICBpc051bWVyaWMgPSB0cnVlO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgICAgICAgLy8gaWdub3JlIGd1dHRlciBlbnRyaWVzXG4gICAgICAgICAgICAgICAgaWYgKHNpbmdsZUJ1Y2tldENvbHVtbiAmJiBrZXkuc3Vic3RyKDAsIDIpID09PSBcIj49XCIgfHwga2V5LmNoYXJBdCgwKSA9PT0gXCI8XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpc05hTig8YW55PmtleXNbaV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzTnVtZXJpYyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYoIWlzTnVtZXJpYykge1xuICAgICAgICAgICAga2V5cy5zb3J0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyB1c2UgY3VzdG9tIGNvbXBhcmF0b3IgZm9yIG51bWJlcnNcbiAgICAgICAgICAgIGtleXMuc29ydChmdW5jdGlvbihhOiBzdHJpbmcsIGI6IHN0cmluZykge1xuICAgICAgICAgICAgICAgIHZhciBudW0xID0gcGFyc2VGbG9hdChhKTtcbiAgICAgICAgICAgICAgICB2YXIgbnVtMiA9IHBhcnNlRmxvYXQoYik7XG4gICAgICAgICAgICAgICAgLy8gcHV0IHRoZSBub24tbnVtYmVycyBpbiB0aGUgdmVyeSBlbmRcbiAgICAgICAgICAgICAgICBpZihpc05hTihudW0xKSkge1xuICAgICAgICAgICAgICAgICAgICBudW0xID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoaXNOYU4obnVtMikpIHtcbiAgICAgICAgICAgICAgICAgICAgbnVtMiA9IE51bWJlci5NQVhfVkFMVUU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBudW0xIC0gbnVtMjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtZXJnZWRUYWJsZTogc3RyaW5nW11bXSA9IGtleXMubWFwKGZ1bmN0aW9uIChrZXk6IHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIGdyb3VwaW5nTWFwW2tleV07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBuZXcgUmVzdWx0U2V0KG1lcmdlZFRhYmxlLCBjb21iaW5lZENvbHVtbkluZm8sIGNvbWJpbmVkVGl0bGUsIGNvbWJpbmVkRXh0cmEsIGNvbWJpbmVkUXVlcnlJZCwgZmlyc3RRdWVyeVBhcnNlcik7XG4gICAgfVxufVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogdHJhbnNmb3Jtcy9ncm91cGpvaW5lci50c1xuICoqLyJdLCJtYXBwaW5ncyI6IkFBQUE7OztBQVVBO0FBQUE7QUF5SEE7QUF4SEE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7Ozs7OyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 376:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/// <reference path=\"../deps.d.ts\" />\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(2), __webpack_require__(28), __webpack_require__(12)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, _, columntype_1, utils_1) {\n    \"use strict\";\n    var TimeOverlayTransform = (function () {\n        function TimeOverlayTransform() {\n        }\n        // preconditions:\n        // 1) grouping columns match in all the result sets\n        // 2) data is sorted in ascending order\n        TimeOverlayTransform.apply = function (resultSets) {\n            if (resultSets.length == 1) {\n                return resultSets;\n            }\n            var groupingColumns = resultSets[0].getGroupingColumns();\n            if (groupingColumns.length != 1 || groupingColumns[0].type != columntype_1.default.TIME) {\n                return resultSets; // below code can't overlay time when it's not the only grouping column\n            }\n            // Note: Below assumes time column is the only grouping column\n            var dataTables = _.pluck(resultSets, 'table');\n            var bucketsStartsEnds = this.detectBucketsStartsEnds(dataTables);\n            var bucketSizes = bucketsStartsEnds.bucketSizes;\n            var startDates = bucketsStartsEnds.startDates;\n            var endDates = bucketsStartsEnds.endDates;\n            if (_.uniq(startDates, function (date) {\n                return date.getTime();\n            }).length == 1) {\n                return resultSets; // already aligned, no need to do anything\n            }\n            if (_.uniq(bucketSizes).length != 1) {\n                return resultSets; // can't overlay meaningfully when bucket sizes don't match\n            }\n            var bucketSize = bucketSizes[0];\n            var maxLength = 0;\n            var resultWithLongestTimeIndex = 0;\n            for (var i = 0; i < startDates.length; i++) {\n                var length = endDates[i].getTime() - startDates[i].getTime();\n                if (length > maxLength) {\n                    maxLength = length;\n                    resultWithLongestTimeIndex = i;\n                }\n            }\n            var longestTable = dataTables[resultWithLongestTimeIndex];\n            var longestTableTimeColIndex = 0;\n            if (resultWithLongestTimeIndex != 0) {\n                // construct the time bucket values for the result set with the longest time range\n                var date = startDates[0];\n                var nextDate = new Date();\n                nextDate.setTime(date.getTime() + bucketSize);\n                var rows = longestTable.length;\n                for (var i = 0; i < rows; i++) {\n                    longestTable[i][longestTableTimeColIndex] = '[' + date.toISOString().replace('T', ' ').substr(0, 19) + ', ' +\n                        nextDate.toISOString().replace('T', ' ').substr(0, 19) + ')';\n                    var tmp = date;\n                    date = nextDate;\n                    nextDate = tmp;\n                    nextDate.setTime(date.getTime() + bucketSize);\n                }\n            }\n            dataTables.forEach(function (table, resultSetIndex) {\n                if (resultSetIndex == 0 || resultSetIndex == resultWithLongestTimeIndex) {\n                    return; // these are already filled in\n                }\n                var rows = table.length;\n                var timeCol = 0;\n                for (var i = 0; i < rows; i++) {\n                    table[i][timeCol] = longestTable[i][longestTableTimeColIndex];\n                }\n            });\n            return resultSets;\n        };\n        TimeOverlayTransform.detectBucketsStartsEnds = function (tables) {\n            var bucketSizes = [];\n            var startDates = [];\n            var endDates = [];\n            tables.forEach(function (table) {\n                var rows = table.length;\n                var timeCol = 0;\n                var earliestBucket = null;\n                var latestBucket = null;\n                var firstTimeRange = utils_1.default.dateFromRange(table[0][timeCol]);\n                var bucketSize = firstTimeRange[1].getTime() - firstTimeRange[0].getTime();\n                bucketSizes.push(bucketSize);\n                for (var i = 0; i < rows; i++) {\n                    var bucket = table[i][timeCol];\n                    if (earliestBucket == null || bucket < earliestBucket) {\n                        earliestBucket = bucket;\n                    }\n                    if (latestBucket == null || bucket > latestBucket) {\n                        latestBucket = bucket;\n                    }\n                }\n                var start = utils_1.default.dateFromRange(earliestBucket)[0];\n                var end = utils_1.default.dateFromRange(latestBucket)[1];\n                startDates.push(start);\n                endDates.push(end);\n            });\n            return { bucketSizes: bucketSizes, startDates: startDates, endDates: endDates };\n        };\n        return TimeOverlayTransform;\n    }());\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = TimeOverlayTransform;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzc2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3RyYW5zZm9ybXMvdGltZW92ZXJsYXl0cmFuc2Zvcm0udHM/M2RlOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vZGVwcy5kLnRzXCIgLz5cblxuaW1wb3J0IF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJyk7XG5cbmltcG9ydCBDb2x1bW5UeXBlIGZyb20gJ2NvbHVtbnR5cGUnO1xuaW1wb3J0IFF1ZXJ5TW9kZWwgZnJvbSAndG9wdWkvcXVlcnlzZXQvcXVlcnkvcXVlcnltb2RlbCc7XG5pbXBvcnQgUmVzdWx0U2V0IGZyb20gJ3Jlc3VsdHNldCc7XG5pbXBvcnQgQ29sdW1uSW5mbyBmcm9tICdjb2x1bW5pbmZvJztcbmltcG9ydCBVdGlscyBmcm9tICd1dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRpbWVPdmVybGF5VHJhbnNmb3JtIHtcbiAgICAvLyBwcmVjb25kaXRpb25zOlxuICAgIC8vIDEpIGdyb3VwaW5nIGNvbHVtbnMgbWF0Y2ggaW4gYWxsIHRoZSByZXN1bHQgc2V0c1xuICAgIC8vIDIpIGRhdGEgaXMgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlclxuICAgIHN0YXRpYyBhcHBseShyZXN1bHRTZXRzOiBSZXN1bHRTZXRbXSkgOiBSZXN1bHRTZXRbXSB7XG4gICAgICAgIGlmIChyZXN1bHRTZXRzLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0U2V0cztcbiAgICAgICAgfVxuICAgICAgICB2YXIgZ3JvdXBpbmdDb2x1bW5zOiBDb2x1bW5JbmZvW10gPSByZXN1bHRTZXRzWzBdLmdldEdyb3VwaW5nQ29sdW1ucygpO1xuICAgICAgICBpZiAoZ3JvdXBpbmdDb2x1bW5zLmxlbmd0aCAhPSAxIHx8IGdyb3VwaW5nQ29sdW1uc1swXS50eXBlICE9IENvbHVtblR5cGUuVElNRSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdFNldHM7ICAvLyBiZWxvdyBjb2RlIGNhbid0IG92ZXJsYXkgdGltZSB3aGVuIGl0J3Mgbm90IHRoZSBvbmx5IGdyb3VwaW5nIGNvbHVtblxuICAgICAgICB9XG4gICAgICAgIC8vIE5vdGU6IEJlbG93IGFzc3VtZXMgdGltZSBjb2x1bW4gaXMgdGhlIG9ubHkgZ3JvdXBpbmcgY29sdW1uXG5cbiAgICAgICAgdmFyIGRhdGFUYWJsZXM6IHN0cmluZ1tdW11bXSA9IF8ucGx1Y2socmVzdWx0U2V0cywgJ3RhYmxlJyk7XG5cbiAgICAgICAgdmFyIGJ1Y2tldHNTdGFydHNFbmRzID0gdGhpcy5kZXRlY3RCdWNrZXRzU3RhcnRzRW5kcyhkYXRhVGFibGVzKTtcbiAgICAgICAgdmFyIGJ1Y2tldFNpemVzOiBudW1iZXJbXSA9IGJ1Y2tldHNTdGFydHNFbmRzLmJ1Y2tldFNpemVzO1xuICAgICAgICB2YXIgc3RhcnREYXRlczogRGF0ZVtdID0gYnVja2V0c1N0YXJ0c0VuZHMuc3RhcnREYXRlcztcbiAgICAgICAgdmFyIGVuZERhdGVzOiBEYXRlW10gPSBidWNrZXRzU3RhcnRzRW5kcy5lbmREYXRlcztcblxuICAgICAgICBpZiAoXy51bmlxKHN0YXJ0RGF0ZXMsIGZ1bmN0aW9uIChkYXRlOiBEYXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGUuZ2V0VGltZSgpO1xuICAgICAgICAgICAgfSkubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRTZXRzOyAgLy8gYWxyZWFkeSBhbGlnbmVkLCBubyBuZWVkIHRvIGRvIGFueXRoaW5nXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy51bmlxKGJ1Y2tldFNpemVzKS5sZW5ndGggIT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdFNldHM7ICAvLyBjYW4ndCBvdmVybGF5IG1lYW5pbmdmdWxseSB3aGVuIGJ1Y2tldCBzaXplcyBkb24ndCBtYXRjaFxuICAgICAgICB9XG4gICAgICAgIHZhciBidWNrZXRTaXplOiBudW1iZXIgPSBidWNrZXRTaXplc1swXTtcblxuICAgICAgICB2YXIgbWF4TGVuZ3RoID0gMDtcbiAgICAgICAgdmFyIHJlc3VsdFdpdGhMb25nZXN0VGltZUluZGV4ID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGFydERhdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgbGVuZ3RoID0gZW5kRGF0ZXNbaV0uZ2V0VGltZSgpIC0gc3RhcnREYXRlc1tpXS5nZXRUaW1lKCk7XG4gICAgICAgICAgICBpZiAobGVuZ3RoID4gbWF4TGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgbWF4TGVuZ3RoID0gbGVuZ3RoO1xuICAgICAgICAgICAgICAgIHJlc3VsdFdpdGhMb25nZXN0VGltZUluZGV4ID0gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBsb25nZXN0VGFibGUgPSBkYXRhVGFibGVzW3Jlc3VsdFdpdGhMb25nZXN0VGltZUluZGV4XTtcbiAgICAgICAgdmFyIGxvbmdlc3RUYWJsZVRpbWVDb2xJbmRleCA9IDA7XG5cbiAgICAgICAgaWYgKHJlc3VsdFdpdGhMb25nZXN0VGltZUluZGV4ICE9IDApIHtcbiAgICAgICAgICAgIC8vIGNvbnN0cnVjdCB0aGUgdGltZSBidWNrZXQgdmFsdWVzIGZvciB0aGUgcmVzdWx0IHNldCB3aXRoIHRoZSBsb25nZXN0IHRpbWUgcmFuZ2VcbiAgICAgICAgICAgIHZhciBkYXRlID0gc3RhcnREYXRlc1swXTtcbiAgICAgICAgICAgIHZhciBuZXh0RGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICBuZXh0RGF0ZS5zZXRUaW1lKGRhdGUuZ2V0VGltZSgpICsgYnVja2V0U2l6ZSk7XG5cbiAgICAgICAgICAgIHZhciByb3dzID0gbG9uZ2VzdFRhYmxlLmxlbmd0aDtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcm93czsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbG9uZ2VzdFRhYmxlW2ldW2xvbmdlc3RUYWJsZVRpbWVDb2xJbmRleF0gPSAnWycgKyBkYXRlLnRvSVNPU3RyaW5nKCkucmVwbGFjZSgnVCcsICcgJykuc3Vic3RyKDAsIDE5KSArICcsICcgK1xuICAgICAgICAgICAgICAgIG5leHREYXRlLnRvSVNPU3RyaW5nKCkucmVwbGFjZSgnVCcsICcgJykuc3Vic3RyKDAsIDE5KSArICcpJztcbiAgICAgICAgICAgICAgICB2YXIgdG1wID0gZGF0ZTtcbiAgICAgICAgICAgICAgICBkYXRlID0gbmV4dERhdGU7XG4gICAgICAgICAgICAgICAgbmV4dERhdGUgPSB0bXA7XG4gICAgICAgICAgICAgICAgbmV4dERhdGUuc2V0VGltZShkYXRlLmdldFRpbWUoKSArIGJ1Y2tldFNpemUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZGF0YVRhYmxlcy5mb3JFYWNoKGZ1bmN0aW9uICh0YWJsZTogc3RyaW5nW11bXSwgcmVzdWx0U2V0SW5kZXg6bnVtYmVyKSB7XG4gICAgICAgICAgICBpZiAocmVzdWx0U2V0SW5kZXggPT0gMCB8fCByZXN1bHRTZXRJbmRleCA9PSByZXN1bHRXaXRoTG9uZ2VzdFRpbWVJbmRleCkge1xuICAgICAgICAgICAgICAgIHJldHVybjsgLy8gdGhlc2UgYXJlIGFscmVhZHkgZmlsbGVkIGluXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcm93cyA9IHRhYmxlLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciB0aW1lQ29sID0gMDtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcm93czsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGFibGVbaV1bdGltZUNvbF0gPSBsb25nZXN0VGFibGVbaV1bbG9uZ2VzdFRhYmxlVGltZUNvbEluZGV4XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdFNldHM7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgZGV0ZWN0QnVja2V0c1N0YXJ0c0VuZHModGFibGVzOiBzdHJpbmdbXVtdW10pIHtcbiAgICAgICAgdmFyIGJ1Y2tldFNpemVzOm51bWJlcltdID0gW107XG4gICAgICAgIHZhciBzdGFydERhdGVzOkRhdGVbXSA9IFtdO1xuICAgICAgICB2YXIgZW5kRGF0ZXM6RGF0ZVtdID0gW107XG5cbiAgICAgICAgdGFibGVzLmZvckVhY2goZnVuY3Rpb24gKHRhYmxlOiBzdHJpbmdbXVtdKSB7XG4gICAgICAgICAgICB2YXIgcm93cyA9IHRhYmxlLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciB0aW1lQ29sID0gMDtcbiAgICAgICAgICAgIHZhciBlYXJsaWVzdEJ1Y2tldDpzdHJpbmcgPSBudWxsO1xuICAgICAgICAgICAgdmFyIGxhdGVzdEJ1Y2tldDpzdHJpbmcgPSBudWxsO1xuICAgICAgICAgICAgdmFyIGZpcnN0VGltZVJhbmdlID0gVXRpbHMuZGF0ZUZyb21SYW5nZSh0YWJsZVswXVt0aW1lQ29sXSk7XG4gICAgICAgICAgICB2YXIgYnVja2V0U2l6ZSA9IGZpcnN0VGltZVJhbmdlWzFdLmdldFRpbWUoKSAtIGZpcnN0VGltZVJhbmdlWzBdLmdldFRpbWUoKTtcbiAgICAgICAgICAgIGJ1Y2tldFNpemVzLnB1c2goYnVja2V0U2l6ZSk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJvd3M7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBidWNrZXQgPSB0YWJsZVtpXVt0aW1lQ29sXTtcbiAgICAgICAgICAgICAgICBpZiAoZWFybGllc3RCdWNrZXQgPT0gbnVsbCB8fCBidWNrZXQgPCBlYXJsaWVzdEJ1Y2tldCkge1xuICAgICAgICAgICAgICAgICAgICBlYXJsaWVzdEJ1Y2tldCA9IGJ1Y2tldDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGxhdGVzdEJ1Y2tldCA9PSBudWxsIHx8IGJ1Y2tldCA+IGxhdGVzdEJ1Y2tldCkge1xuICAgICAgICAgICAgICAgICAgICBsYXRlc3RCdWNrZXQgPSBidWNrZXQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgc3RhcnQgPSBVdGlscy5kYXRlRnJvbVJhbmdlKGVhcmxpZXN0QnVja2V0KVswXTtcbiAgICAgICAgICAgIHZhciBlbmQgPSBVdGlscy5kYXRlRnJvbVJhbmdlKGxhdGVzdEJ1Y2tldClbMV07XG4gICAgICAgICAgICBzdGFydERhdGVzLnB1c2goc3RhcnQpO1xuICAgICAgICAgICAgZW5kRGF0ZXMucHVzaChlbmQpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHtidWNrZXRTaXplczogYnVja2V0U2l6ZXMsIHN0YXJ0RGF0ZXM6IHN0YXJ0RGF0ZXMsIGVuZERhdGVzOiBlbmREYXRlc307XG4gICAgfVxufVxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHRyYW5zZm9ybXMvdGltZW92ZXJsYXl0cmFuc2Zvcm0udHNcbiAqKi8iXSwibWFwcGluZ3MiOiJBQUFBOzs7QUFVQTtBQUFBO0FBMEdBO0FBekdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBOzs7OzsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 377:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/// <reference path=\"../deps.d.ts\" />\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(28)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, columntype_1) {\n    \"use strict\";\n    var ColumnTransforms = (function () {\n        function ColumnTransforms() {\n        }\n        ColumnTransforms.apply = function (resultSets) {\n            ColumnTransforms.applyPercentageTransform(resultSets);\n            ColumnTransforms.applyMillicentTransform(resultSets);\n            ColumnTransforms.applyURLDecodeTransform(resultSets);\n            return resultSets; // changes in place\n        };\n        ColumnTransforms.applyColumnTransform = function (resultSets, columnTest, transform, applyToTotal) {\n            if (applyToTotal === void 0) { applyToTotal = true; }\n            resultSets.forEach(function (resultSet) {\n                resultSet.columns.forEach(function (column, columnIndex) {\n                    var text = column.text.trim();\n                    if (text.indexOf(\"[\") >= 0) {\n                        text = text.substring(0, column.text.indexOf(\"[\"));\n                    }\n                    if (columnTest(column.type, text)) {\n                        resultSet.table.forEach(function (row) {\n                            row[columnIndex] = transform(row[columnIndex]);\n                        });\n                        if (applyToTotal) {\n                            column.columnTotal = Number(transform(\"\" + column.columnTotal));\n                        }\n                    }\n                });\n            });\n        };\n        ColumnTransforms.applyPercentageTransform = function (resultSets) {\n            var columnTest = function (columnType, text) {\n                return columnType == columntype_1.default.METRIC && text.indexOf(\"%\") == text.length - 1 && text.length > 0;\n            };\n            var afterDotPrecision = 10000000;\n            var transform = function (value) {\n                var percent = 100 * Number(value);\n                var truncated = Math.round(percent * afterDotPrecision) / afterDotPrecision;\n                return \"\" + truncated;\n            };\n            ColumnTransforms.applyColumnTransform(resultSets, columnTest, transform);\n        };\n        ColumnTransforms.applyMillicentTransform = function (resultSets) {\n            var columnTest = function (columnType, text) {\n                return columnType == columntype_1.default.METRIC && (text.indexOf(\"$mc\") != -1 || text.toLowerCase().indexOf(\"mcto$\") != -1);\n            };\n            var afterDotPrecision = 100;\n            var transform = function (value) {\n                // convert from millicents to dollars and cents\n                var scaled = Number(value) / 100000;\n                var truncated = Math.round(scaled * afterDotPrecision) / afterDotPrecision;\n                return \"\" + truncated;\n            };\n            ColumnTransforms.applyColumnTransform(resultSets, columnTest, transform);\n        };\n        ColumnTransforms.applyURLDecodeTransform = function (resultSets) {\n            var columnTest = function (columnType, text) {\n                return columnType == columntype_1.default.GROUPING && text.indexOf(\"urldecode\") != -1;\n            };\n            var transform = function (value) {\n                // Apply URL decoding\n                return decodeURIComponent(value);\n            };\n            ColumnTransforms.applyColumnTransform(resultSets, columnTest, transform, false);\n        };\n        return ColumnTransforms;\n    }());\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = ColumnTransforms;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzc3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3RyYW5zZm9ybXMvY29sdW1udHJhbnNmb3Jtcy50cz82ZmFhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9kZXBzLmQudHNcIiAvPlxuXG5pbXBvcnQgQ29sdW1uVHlwZSBmcm9tICdjb2x1bW50eXBlJztcbmltcG9ydCBSZXN1bHRTZXQgZnJvbSAncmVzdWx0c2V0JztcbmltcG9ydCBDb2x1bW5JbmZvIGZyb20gJ2NvbHVtbmluZm8nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb2x1bW5UcmFuc2Zvcm1zIHtcbiAgICBwdWJsaWMgc3RhdGljIGFwcGx5KHJlc3VsdFNldHM6IFJlc3VsdFNldFtdKSB7XG4gICAgICAgIENvbHVtblRyYW5zZm9ybXMuYXBwbHlQZXJjZW50YWdlVHJhbnNmb3JtKHJlc3VsdFNldHMpO1xuICAgICAgICBDb2x1bW5UcmFuc2Zvcm1zLmFwcGx5TWlsbGljZW50VHJhbnNmb3JtKHJlc3VsdFNldHMpO1xuICAgICAgICBDb2x1bW5UcmFuc2Zvcm1zLmFwcGx5VVJMRGVjb2RlVHJhbnNmb3JtKHJlc3VsdFNldHMpO1xuXG4gICAgICAgIHJldHVybiByZXN1bHRTZXRzOyAvLyBjaGFuZ2VzIGluIHBsYWNlXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgYXBwbHlDb2x1bW5UcmFuc2Zvcm0ocmVzdWx0U2V0czogUmVzdWx0U2V0W10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uVGVzdDogKGNvbHVtblR5cGU6IENvbHVtblR5cGUsIHRleHQ6IHN0cmluZykgPT4gYm9vbGVhbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06ICh2YWx1ZTogc3RyaW5nKSA9PiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwbHlUb1RvdGFsOiBib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICByZXN1bHRTZXRzLmZvckVhY2goZnVuY3Rpb24ocmVzdWx0U2V0OiBSZXN1bHRTZXQpIHtcbiAgICAgICAgICAgIHJlc3VsdFNldC5jb2x1bW5zLmZvckVhY2goZnVuY3Rpb24oY29sdW1uOiBDb2x1bW5JbmZvLCBjb2x1bW5JbmRleDogbnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRleHQ6IHN0cmluZyA9IGNvbHVtbi50ZXh0LnRyaW0oKTtcbiAgICAgICAgICAgICAgICBpZiAodGV4dC5pbmRleE9mKFwiW1wiKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0LnN1YnN0cmluZygwLCBjb2x1bW4udGV4dC5pbmRleE9mKFwiW1wiKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKGNvbHVtblRlc3QoY29sdW1uLnR5cGUsIHRleHQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFNldC50YWJsZS5mb3JFYWNoKChyb3c6c3RyaW5nW10pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd1tjb2x1bW5JbmRleF0gPSB0cmFuc2Zvcm0ocm93W2NvbHVtbkluZGV4XSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZihhcHBseVRvVG90YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbi5jb2x1bW5Ub3RhbCA9IE51bWJlcih0cmFuc2Zvcm0oXCJcIiArIGNvbHVtbi5jb2x1bW5Ub3RhbCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgYXBwbHlQZXJjZW50YWdlVHJhbnNmb3JtKHJlc3VsdFNldHM6IFJlc3VsdFNldFtdKSA6IHZvaWQge1xuICAgICAgICB2YXIgY29sdW1uVGVzdCA9IGZ1bmN0aW9uKGNvbHVtblR5cGU6IENvbHVtblR5cGUsIHRleHQ6IHN0cmluZykgOiBib29sZWFuIHtcbiAgICAgICAgICAgIHJldHVybiBjb2x1bW5UeXBlID09IENvbHVtblR5cGUuTUVUUklDICYmIHRleHQuaW5kZXhPZihcIiVcIikgPT0gdGV4dC5sZW5ndGgtMSAmJiB0ZXh0Lmxlbmd0aCA+IDA7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBhZnRlckRvdFByZWNpc2lvbiA9IDEwMDAwMDAwO1xuICAgICAgICB2YXIgdHJhbnNmb3JtID0gZnVuY3Rpb24odmFsdWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgICAgICB2YXIgcGVyY2VudCA9IDEwMCAqIE51bWJlcih2YWx1ZSk7XG4gICAgICAgICAgICB2YXIgdHJ1bmNhdGVkID0gTWF0aC5yb3VuZChwZXJjZW50ICogYWZ0ZXJEb3RQcmVjaXNpb24pIC8gYWZ0ZXJEb3RQcmVjaXNpb247XG4gICAgICAgICAgICByZXR1cm4gXCJcIit0cnVuY2F0ZWQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgQ29sdW1uVHJhbnNmb3Jtcy5hcHBseUNvbHVtblRyYW5zZm9ybShyZXN1bHRTZXRzLCBjb2x1bW5UZXN0LCB0cmFuc2Zvcm0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgYXBwbHlNaWxsaWNlbnRUcmFuc2Zvcm0ocmVzdWx0U2V0czogUmVzdWx0U2V0W10pIDogdm9pZCB7XG4gICAgICAgIHZhciBjb2x1bW5UZXN0ID0gZnVuY3Rpb24oY29sdW1uVHlwZTogQ29sdW1uVHlwZSwgdGV4dDogc3RyaW5nKSA6IGJvb2xlYW4ge1xuICAgICAgICAgICAgcmV0dXJuIGNvbHVtblR5cGUgPT0gQ29sdW1uVHlwZS5NRVRSSUMgJiYgKHRleHQuaW5kZXhPZihcIiRtY1wiKSAhPSAtMSB8fCB0ZXh0LnRvTG93ZXJDYXNlKCkuaW5kZXhPZihcIm1jdG8kXCIpICE9IC0xIClcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGFmdGVyRG90UHJlY2lzaW9uID0gMTAwO1xuICAgICAgICB2YXIgdHJhbnNmb3JtID0gZnVuY3Rpb24odmFsdWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgICAgICAvLyBjb252ZXJ0IGZyb20gbWlsbGljZW50cyB0byBkb2xsYXJzIGFuZCBjZW50c1xuICAgICAgICAgICAgdmFyIHNjYWxlZCA9IE51bWJlcih2YWx1ZSkgLyAxMDAwMDA7XG4gICAgICAgICAgICB2YXIgdHJ1bmNhdGVkID0gTWF0aC5yb3VuZChzY2FsZWQgKiBhZnRlckRvdFByZWNpc2lvbikgLyBhZnRlckRvdFByZWNpc2lvbjtcbiAgICAgICAgICAgIHJldHVybiBcIlwiICsgdHJ1bmNhdGVkO1xuICAgICAgICB9O1xuXG4gICAgICAgIENvbHVtblRyYW5zZm9ybXMuYXBwbHlDb2x1bW5UcmFuc2Zvcm0ocmVzdWx0U2V0cywgY29sdW1uVGVzdCwgdHJhbnNmb3JtKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGFwcGx5VVJMRGVjb2RlVHJhbnNmb3JtKHJlc3VsdFNldHM6IFJlc3VsdFNldFtdKSA6IHZvaWQge1xuICAgICAgICB2YXIgY29sdW1uVGVzdCA9IGZ1bmN0aW9uKGNvbHVtblR5cGU6IENvbHVtblR5cGUsIHRleHQ6IHN0cmluZykgOiBib29sZWFuIHtcbiAgICAgICAgICAgIHJldHVybiBjb2x1bW5UeXBlID09IENvbHVtblR5cGUuR1JPVVBJTkcgJiYgdGV4dC5pbmRleE9mKFwidXJsZGVjb2RlXCIpICE9IC0xXG4gICAgICAgIH07XG4gICAgICAgIHZhciB0cmFuc2Zvcm0gPSBmdW5jdGlvbih2YWx1ZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgICAgIC8vIEFwcGx5IFVSTCBkZWNvZGluZ1xuICAgICAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgQ29sdW1uVHJhbnNmb3Jtcy5hcHBseUNvbHVtblRyYW5zZm9ybShyZXN1bHRTZXRzLCBjb2x1bW5UZXN0LCB0cmFuc2Zvcm0sIGZhbHNlKTtcbiAgICB9XG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiB0cmFuc2Zvcm1zL2NvbHVtbnRyYW5zZm9ybXMudHNcbiAqKi8iXSwibWFwcGluZ3MiOiJBQUFBOzs7QUFNQTtBQUFBO0FBdUVBO0FBdEVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7Ozs7OyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 378:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/// <reference path=\"../deps.d.ts\" />\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(2), __webpack_require__(8), __webpack_require__(379), __webpack_require__(389), __webpack_require__(398), __webpack_require__(462)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, _, Backbone, tableview_1, graphview_1, plotview_1, pivotview_1) {\n    \"use strict\";\n    var internalChange = false;\n    var PresentationModel = (function (_super) {\n        __extends(PresentationModel, _super);\n        function PresentationModel() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            // This array registers the views that are shown in the tabs and are usable\n            _this.views = [tableview_1.default, pivotview_1.default, graphview_1.default, plotview_1.default];\n            _this.viewToState = {};\n            return _this;\n        }\n        Object.defineProperty(PresentationModel.prototype, \"resultSet\", {\n            get: function () { return this.get(\"resultSet\"); },\n            set: function (val) { this.set(\"resultSet\", val); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PresentationModel.prototype, \"errorText\", {\n            get: function () { return this.get(\"errorText\"); },\n            set: function (val) { this.set(\"errorText\", val); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PresentationModel.prototype, \"selectedView\", {\n            get: function () { return this.get(\"selectedView\"); },\n            set: function (val) { this.set(\"selectedView\", val); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PresentationModel.prototype, \"isLoading\", {\n            get: function () { return this.get(\"isLoading\"); },\n            set: function (val) { this.set(\"isLoading\", val); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PresentationModel.prototype, \"viewSettings\", {\n            get: function () { return this.get(\"viewSettings\"); },\n            set: function (val) { this.set(\"viewSettings\", val); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PresentationModel.prototype, \"progress\", {\n            get: function () { return this.get(\"progress\"); },\n            set: function (val) { this.set(\"progress\", val); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PresentationModel.prototype, \"warningIsOpen\", {\n            get: function () { return this.get(\"warningIsOpen\"); },\n            set: function (val) { this.set(\"warningIsOpen\", val); },\n            enumerable: true,\n            configurable: true\n        });\n        PresentationModel.prototype.initialize = function (attributes) {\n            this.listenTo(this, \"change:viewSettings\", this.onExternalStateChange);\n        };\n        Object.defineProperty(PresentationModel.prototype, \"warnings\", {\n            get: function () {\n                if (this.resultSet && this.resultSet.getWarnings()) {\n                    return this.resultSet.getWarnings();\n                }\n                return [];\n            },\n            enumerable: true,\n            configurable: true\n        });\n        PresentationModel.prototype.addProgress = function (index, total, columnNames) {\n            this.progress[index] = { completed: 0, total: total };\n            this.trigger(\"change:progress:add\", index, columnNames);\n        };\n        PresentationModel.prototype.updateProgress = function (index) {\n            if (this.progress[index]) {\n                this.progress[index].completed += 1;\n                this.trigger(\"change:progress:update\", index);\n            }\n        };\n        PresentationModel.prototype.resetProgress = function () {\n            this.progress = [];\n            this.trigger(\"change:progress:reset\");\n        };\n        PresentationModel.prototype.filterAndSetSettings = function (allSettings) {\n            this.viewSettings = this.filterSettings(allSettings);\n        };\n        PresentationModel.prototype.updateCombinedState = function () {\n            var combinedState = {};\n            for (var viewName in this.viewToState) {\n                var viewState = this.viewToState[viewName];\n                for (var key in viewState) {\n                    combinedState[viewName + '_' + key] = viewState[key];\n                }\n            }\n            internalChange = true;\n            this.viewSettings = combinedState;\n            internalChange = false;\n        };\n        PresentationModel.prototype.onExternalStateChange = function () {\n            if (internalChange) {\n                return;\n            }\n            var newViewToState = {};\n            var viewNames = this.views.map(function (view) {\n                return view.getName().toLowerCase();\n            });\n            var combinedState = this.viewSettings;\n            for (var key in combinedState) {\n                viewNames.forEach(function (viewName) {\n                    if (key.indexOf(viewName) == 0) {\n                        if (!newViewToState[viewName]) {\n                            newViewToState[viewName] = {};\n                        }\n                        newViewToState[viewName][key.substring(viewName.length + 1)] = combinedState[key];\n                    }\n                });\n            }\n            this.viewToState = newViewToState;\n        };\n        // We only want to keep the settings that are related to any of the views we have\n        PresentationModel.prototype.filterSettings = function (allSettings) {\n            var viewNames = this.views.map(function (view) {\n                return view.getName().toLowerCase();\n            });\n            var filteredSettings = _.clone(allSettings);\n            for (var key in allSettings) {\n                if (viewNames.indexOf(key.split(\"_\")[0]) === -1) {\n                    delete filteredSettings[key];\n                }\n            }\n            return filteredSettings;\n        };\n        PresentationModel.prototype.defaults = function () {\n            return {\n                resultSet: null,\n                errorText: null,\n                selectedView: PresentationModel.DEFAULT_VIEW_NAME,\n                isLoading: false,\n                viewSettings: {},\n                progress: [],\n                warningIsOpen: false\n            };\n        };\n        return PresentationModel;\n    }(Backbone.Model));\n    PresentationModel.DEFAULT_VIEW_NAME = \"table\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = PresentationModel;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzc4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3Jlc3VsdHByZXNlbnRhdGlvbi9wcmVzZW50YXRpb25tb2RlbC50cz9lZDUyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9kZXBzLmQudHNcIiAvPlxuXG5pbXBvcnQgXyA9IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKTtcbmltcG9ydCBCYWNrYm9uZSA9IHJlcXVpcmUoJ2JhY2tib25lJyk7XG5pbXBvcnQgUmVzdWx0U2V0IGZyb20gJ3Jlc3VsdHNldCc7XG5pbXBvcnQgVGFibGVWaWV3IGZyb20gJ3RhYmxldmlldy90YWJsZXZpZXcnO1xuaW1wb3J0IEdyYXBoVmlldyBmcm9tICdncmFwaHZpZXcvZ3JhcGh2aWV3JztcbmltcG9ydCBQbG90VmlldyBmcm9tICdwbG90dmlldy9wbG90dmlldyc7XG5pbXBvcnQgUGl2b3RWaWV3IGZyb20gJ3Bpdm90dmlldy9waXZvdHZpZXcnO1xuaW1wb3J0IFZpZXdTdGF0aWNJbnRlcmZhY2UgZnJvbSAndmlld3N0YXRpY2ludGVyZmFjZSc7XG5cbnZhciBpbnRlcm5hbENoYW5nZSA9IGZhbHNlO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQcmVzZW50YXRpb25Nb2RlbCBleHRlbmRzIEJhY2tib25lLk1vZGVsIHtcbiAgICBwdWJsaWMgc3RhdGljIERFRkFVTFRfVklFV19OQU1FID0gXCJ0YWJsZVwiO1xuXG4gICAgLy8gVGhpcyBhcnJheSByZWdpc3RlcnMgdGhlIHZpZXdzIHRoYXQgYXJlIHNob3duIGluIHRoZSB0YWJzIGFuZCBhcmUgdXNhYmxlXG4gICAgdmlld3M6IEFycmF5PFZpZXdTdGF0aWNJbnRlcmZhY2U+ID0gW1RhYmxlVmlldywgUGl2b3RWaWV3LCBHcmFwaFZpZXcsIFBsb3RWaWV3XTtcblxuICAgIGdldCByZXN1bHRTZXQoKTogUmVzdWx0U2V0IHsgcmV0dXJuIHRoaXMuZ2V0KFwicmVzdWx0U2V0XCIpOyB9XG4gICAgc2V0IHJlc3VsdFNldCh2YWw6IFJlc3VsdFNldCkgeyB0aGlzLnNldChcInJlc3VsdFNldFwiLCB2YWwpOyB9XG5cbiAgICBnZXQgZXJyb3JUZXh0KCk6IHN0cmluZyB7IHJldHVybiB0aGlzLmdldChcImVycm9yVGV4dFwiKTsgfVxuICAgIHNldCBlcnJvclRleHQodmFsOiBzdHJpbmcpIHsgdGhpcy5zZXQoXCJlcnJvclRleHRcIiwgdmFsKTsgfVxuXG4gICAgZ2V0IHNlbGVjdGVkVmlldygpOiBzdHJpbmcgeyByZXR1cm4gdGhpcy5nZXQoXCJzZWxlY3RlZFZpZXdcIik7IH1cbiAgICBzZXQgc2VsZWN0ZWRWaWV3KHZhbDogc3RyaW5nKSB7IHRoaXMuc2V0KFwic2VsZWN0ZWRWaWV3XCIsIHZhbCk7IH1cblxuICAgIGdldCBpc0xvYWRpbmcoKTogYm9vbGVhbiB7IHJldHVybiB0aGlzLmdldChcImlzTG9hZGluZ1wiKTsgfVxuICAgIHNldCBpc0xvYWRpbmcodmFsOiBib29sZWFuKSB7IHRoaXMuc2V0KFwiaXNMb2FkaW5nXCIsIHZhbCk7IH1cblxuICAgIGdldCB2aWV3U2V0dGluZ3MoKTogYW55IHsgcmV0dXJuIHRoaXMuZ2V0KFwidmlld1NldHRpbmdzXCIpOyB9XG4gICAgc2V0IHZpZXdTZXR0aW5ncyh2YWw6IGFueSkgeyB0aGlzLnNldChcInZpZXdTZXR0aW5nc1wiLCB2YWwpOyB9XG5cbiAgICBnZXQgcHJvZ3Jlc3MoKToge2NvbXBsZXRlZDogbnVtYmVyOyB0b3RhbDogbnVtYmVyfVtdIHsgcmV0dXJuIHRoaXMuZ2V0KFwicHJvZ3Jlc3NcIik7IH1cbiAgICBzZXQgcHJvZ3Jlc3ModmFsOiB7Y29tcGxldGVkOiBudW1iZXI7IHRvdGFsOiBudW1iZXJ9W10pIHsgdGhpcy5zZXQoXCJwcm9ncmVzc1wiLCB2YWwpOyB9XG5cbiAgICBnZXQgd2FybmluZ0lzT3BlbigpOiBib29sZWFuIHsgcmV0dXJuIHRoaXMuZ2V0KFwid2FybmluZ0lzT3BlblwiKTsgfVxuICAgIHNldCB3YXJuaW5nSXNPcGVuKHZhbDogYm9vbGVhbikgeyB0aGlzLnNldChcIndhcm5pbmdJc09wZW5cIiwgdmFsKTsgfVxuXG4gICAgdmlld1RvU3RhdGU6IHtbdmlld05hbWU6c3RyaW5nXTogYW55IH0gPSB7fTtcblxuICAgIGluaXRpYWxpemUoYXR0cmlidXRlcz86IGFueSk6IHZvaWQge1xuICAgICAgICB0aGlzLmxpc3RlblRvKHRoaXMsIFwiY2hhbmdlOnZpZXdTZXR0aW5nc1wiLCB0aGlzLm9uRXh0ZXJuYWxTdGF0ZUNoYW5nZSk7XG4gICAgfVxuXG4gICAgZ2V0IHdhcm5pbmdzKCkge1xuICAgICAgICBpZih0aGlzLnJlc3VsdFNldCAmJiB0aGlzLnJlc3VsdFNldC5nZXRXYXJuaW5ncygpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXN1bHRTZXQuZ2V0V2FybmluZ3MoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gPFtzdHJpbmddPltdO1xuICAgIH1cblxuICAgIHB1YmxpYyBhZGRQcm9ncmVzcyhpbmRleDogbnVtYmVyLCB0b3RhbDogbnVtYmVyLCBjb2x1bW5OYW1lczogc3RyaW5nW10pOiB2b2lkIHtcbiAgICAgICAgdGhpcy5wcm9ncmVzc1tpbmRleF0gPSB7Y29tcGxldGVkOiAwLCB0b3RhbDogdG90YWx9O1xuICAgICAgICB0aGlzLnRyaWdnZXIoXCJjaGFuZ2U6cHJvZ3Jlc3M6YWRkXCIsIGluZGV4LCBjb2x1bW5OYW1lcyk7XG4gICAgfVxuXG4gICAgcHVibGljIHVwZGF0ZVByb2dyZXNzKGluZGV4OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgaWYodGhpcy5wcm9ncmVzc1tpbmRleF0pIHtcbiAgICAgICAgICAgIHRoaXMucHJvZ3Jlc3NbaW5kZXhdLmNvbXBsZXRlZCArPSAxO1xuICAgICAgICAgICAgdGhpcy50cmlnZ2VyKFwiY2hhbmdlOnByb2dyZXNzOnVwZGF0ZVwiLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgcmVzZXRQcm9ncmVzcygpIHtcbiAgICAgICAgdGhpcy5wcm9ncmVzcyA9IFtdO1xuICAgICAgICB0aGlzLnRyaWdnZXIoXCJjaGFuZ2U6cHJvZ3Jlc3M6cmVzZXRcIik7XG4gICAgfVxuXG4gICAgcHVibGljIGZpbHRlckFuZFNldFNldHRpbmdzKGFsbFNldHRpbmdzOiBhbnkpIHtcbiAgICAgICAgdGhpcy52aWV3U2V0dGluZ3MgPSB0aGlzLmZpbHRlclNldHRpbmdzKGFsbFNldHRpbmdzKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdXBkYXRlQ29tYmluZWRTdGF0ZSgpIHtcbiAgICAgICAgdmFyIGNvbWJpbmVkU3RhdGU6IGFueSA9IHt9O1xuICAgICAgICBmb3IodmFyIHZpZXdOYW1lIGluIHRoaXMudmlld1RvU3RhdGUpIHtcbiAgICAgICAgICAgIHZhciB2aWV3U3RhdGU6IGFueSA9IHRoaXMudmlld1RvU3RhdGVbdmlld05hbWVdO1xuICAgICAgICAgICAgZm9yKHZhciBrZXkgaW4gdmlld1N0YXRlKSB7XG4gICAgICAgICAgICAgICAgY29tYmluZWRTdGF0ZVt2aWV3TmFtZSArICdfJyArIGtleV0gPSB2aWV3U3RhdGVba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGludGVybmFsQ2hhbmdlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy52aWV3U2V0dGluZ3MgPSBjb21iaW5lZFN0YXRlO1xuICAgICAgICBpbnRlcm5hbENoYW5nZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIHByaXZhdGUgb25FeHRlcm5hbFN0YXRlQ2hhbmdlKCkge1xuICAgICAgICBpZihpbnRlcm5hbENoYW5nZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBuZXdWaWV3VG9TdGF0ZToge1t2aWV3TmFtZTpzdHJpbmddOiBhbnkgfSA9IHt9O1xuICAgICAgICB2YXIgdmlld05hbWVzOiBzdHJpbmdbXSA9IHRoaXMudmlld3MubWFwKGZ1bmN0aW9uKHZpZXc6IFZpZXdTdGF0aWNJbnRlcmZhY2UpOiBzdHJpbmcge1xuICAgICAgICAgICAgcmV0dXJuIHZpZXcuZ2V0TmFtZSgpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBjb21iaW5lZFN0YXRlID0gdGhpcy52aWV3U2V0dGluZ3M7XG4gICAgICAgIGZvcih2YXIga2V5IGluIGNvbWJpbmVkU3RhdGUpIHtcbiAgICAgICAgICAgIHZpZXdOYW1lcy5mb3JFYWNoKCh2aWV3TmFtZTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYoa2V5LmluZGV4T2Yodmlld05hbWUpID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYoIW5ld1ZpZXdUb1N0YXRlW3ZpZXdOYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3Vmlld1RvU3RhdGVbdmlld05hbWVdID0ge307XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbmV3Vmlld1RvU3RhdGVbdmlld05hbWVdW2tleS5zdWJzdHJpbmcodmlld05hbWUubGVuZ3RoKzEpXSA9IGNvbWJpbmVkU3RhdGVba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudmlld1RvU3RhdGUgPSBuZXdWaWV3VG9TdGF0ZTtcbiAgICB9XG5cbiAgICAvLyBXZSBvbmx5IHdhbnQgdG8ga2VlcCB0aGUgc2V0dGluZ3MgdGhhdCBhcmUgcmVsYXRlZCB0byBhbnkgb2YgdGhlIHZpZXdzIHdlIGhhdmVcbiAgICBwcml2YXRlIGZpbHRlclNldHRpbmdzKGFsbFNldHRpbmdzOiB7W2luZGV4OiBzdHJpbmddOiBhbnl9KTogYW55IHtcbiAgICAgICAgdmFyIHZpZXdOYW1lczogc3RyaW5nW10gPSB0aGlzLnZpZXdzLm1hcChmdW5jdGlvbih2aWV3OiBWaWV3U3RhdGljSW50ZXJmYWNlKTogc3RyaW5nIHtcbiAgICAgICAgICAgIHJldHVybiB2aWV3LmdldE5hbWUoKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgZmlsdGVyZWRTZXR0aW5ncyA9IF8uY2xvbmUoYWxsU2V0dGluZ3MpO1xuICAgICAgICBmb3IodmFyIGtleSBpbiBhbGxTZXR0aW5ncykge1xuICAgICAgICAgICAgaWYodmlld05hbWVzLmluZGV4T2Yoa2V5LnNwbGl0KFwiX1wiKVswXSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGZpbHRlcmVkU2V0dGluZ3Nba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmaWx0ZXJlZFNldHRpbmdzO1xuICAgIH1cblxuICAgIGRlZmF1bHRzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdWx0U2V0OiA8UmVzdWx0U2V0Pm51bGwsXG4gICAgICAgICAgICBlcnJvclRleHQ6IDxzdHJpbmc+bnVsbCxcbiAgICAgICAgICAgIHNlbGVjdGVkVmlldzogUHJlc2VudGF0aW9uTW9kZWwuREVGQVVMVF9WSUVXX05BTUUsXG4gICAgICAgICAgICBpc0xvYWRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgdmlld1NldHRpbmdzOiB7fSxcbiAgICAgICAgICAgIHByb2dyZXNzOiA8e2NvbXBsZXRlZDogbnVtYmVyOyB0aXRsZTogbnVtYmVyfVtdPltdLFxuICAgICAgICAgICAgd2FybmluZ0lzT3BlbjogZmFsc2VcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogcmVzdWx0cHJlc2VudGF0aW9uL3ByZXNlbnRhdGlvbm1vZGVsLnRzXG4gKiovIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7QUFXQTtBQUVBO0FBQUE7QUFBQTtBQUFBO0FBR0E7QUFDQTtBQXVCQTs7QUFtR0E7QUF4SEE7QUFBQTtBQUNBOzs7QUFEQTtBQUdBO0FBQUE7QUFDQTs7O0FBREE7QUFHQTtBQUFBO0FBQ0E7OztBQURBO0FBR0E7QUFBQTtBQUNBOzs7QUFEQTtBQUdBO0FBQUE7QUFDQTs7O0FBREE7QUFHQTtBQUFBO0FBQ0E7OztBQURBO0FBR0E7QUFBQTtBQUNBOzs7QUFEQTtBQUtBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBN0hBOzs7OzsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 379:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/// <reference path=\"../deps.d.ts\" />\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(1), __webpack_require__(2), __webpack_require__(8), __webpack_require__(9), __webpack_require__(28), __webpack_require__(165), __webpack_require__(12), __webpack_require__(380), __webpack_require__(383), __webpack_require__(385), __webpack_require__(386), __webpack_require__(387), __webpack_require__(388)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, $, _, Backbone, events_1, columntype_1, caret_1, utils_1) {\n    \"use strict\";\n    /// <amd-dependency path=\"tableview/tableview.css\" />\n    /// <amd-dependency path=\"tableview/dataTables.jqueryui.css\" />\n    /// <amd-dependency path=\"datatables\" />\n    /// <amd-dependency path=\"datatables-colresize\" />\n    /// <amd-dependency path=\"tableview/dataTables.jqueryui\" />\n    /// <amd-dependency path=\"tableview/tableview.html\"/>\n    var templateText = __webpack_require__(388);\n    \"use strict\";\n    var pageRowCount = 1000;\n    var ELABORATION_REGEX = /^(.*\\[)(.*)(\\].*)$/;\n    var TableView = (function (_super) {\n        __extends(TableView, _super);\n        function TableView() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.template = _.template(templateText);\n            _this.showRowNumberColumn = true; // TODO: make configurable as it slows down rendering of large tables\n            // State/hash handling\n            _this.state = {};\n            return _this;\n        }\n        TableView.prototype.initialize = function (options) {\n            this.resultSet = options.resultSet;\n            this.$el.addClass(\"tableresultdiv\");\n        };\n        TableView.appliesTo = function (resultSet) {\n            return true;\n        };\n        TableView.getName = function () {\n            return \"Table\";\n        };\n        TableView.getViewId = function () {\n            return \"table\";\n        };\n        TableView.prototype.events = function () {\n            return {\n                \"click .query-metadata-toggle\": this.toggleQueryInfo\n            };\n        };\n        TableView.prototype.render = function () {\n            var self = this;\n            var resultSet = this.resultSet;\n            var lineNum = resultSet.table.length;\n            var summaryMsg = lineNum + ' lines';\n            // TODO\n            //            if(lineNum == resultSet.queryModel.limit) {\n            //                summaryMsg += \". Results in the table may be truncated to not overload the browser. Increase the 'Row limit' under 'Settings' if you want to see more rows or download TSV/CSV for complete data.\"\n            //            }\n            var templateModel = { extra: resultSet.extra, summaryMsg: summaryMsg };\n            this.$el.html(this.template(templateModel));\n            var table = this.$('.tableresult');\n            var tableData = this.getData();\n            $(table).DataTable({\n                \"data\": tableData,\n                \"order\": [],\n                \"columns\": this.getColumns(resultSet.columns),\n                \"orderClasses\": false,\n                \"info\": false,\n                \"processing\": true,\n                \"paging\": (lineNum > pageRowCount),\n                \"pagingType\": \"full_numbers\",\n                \"pageLength\": pageRowCount,\n                \"dom\": 'Z<\"H\"fpr>t<\"F\"ip>',\n                \"stateSave\": true,\n                \"stateSaveCallback\": _.bind(this.saveTableState, this),\n                \"stateSaveParams\": _.bind(this.saveTableStateFilterParams, this),\n                \"stateLoadCallback\": _.bind(this.loadTableState, this),\n                \"stateLoadParams\": _.bind(this.loadTableStateFilterParams, this),\n                \"fnDrawCallback\": this.showRowNumberColumn ? TableView.rowNumbersDrawCallback : undefined\n            });\n            // initialize fixed header\n            !function () {\n                var thead = $(table).find('thead').first();\n                var placeholder = thead.clone().css('visibility', 'hidden').insertBefore(thead);\n                thead.css('position', 'absolute');\n                var scrollbox = thead.closest('.presentationgridbox');\n                function refreshTheadPos() {\n                    var scrollOffset = scrollbox.offset().top - placeholder.offset().top + placeholder.position().top;\n                    var placeholderOffset = placeholder.position().top;\n                    // set vertical position\n                    thead.css('top', Math.max(scrollOffset, placeholderOffset) + 'px');\n                    // resize columns to match those in the placeholder\n                    var fromCells = placeholder.find('th');\n                    var toCells = thead.find('th');\n                    fromCells.each(function (i, cell) {\n                        // Have to use getBoundingClientRect() instead of jquery width() to avoid weird sizing issues after zooming.\n                        // box-sizing: border-box is required\n                        var width = $(cell).get(0).getBoundingClientRect().width;\n                        $(toCells.get(i)).css('width', width + \"px\");\n                    });\n                    var headerHeight = thead.find(\"> tr\")[0].getBoundingClientRect().height;\n                    placeholder.find(\"> tr\").css('height', headerHeight + \"px\");\n                }\n                var lastWindowWidth = null;\n                function setTableAutoSize() {\n                    var newWidth = $(window).width();\n                    if (newWidth == lastWindowWidth) {\n                        return; // ignore height resize events\n                    }\n                    lastWindowWidth = newWidth;\n                    // dataTable sets the widths to fixed values but we want them to be auto so that browser figures it out\n                    table.css(\"width\", \"auto\");\n                    var tableHeadCols = table.find(\"> thead > tr > th\");\n                    tableHeadCols.css(\"width\", \"auto\");\n                    // ensure time column has sufficient space\n                    var firstHeadCol = tableHeadCols.filter(\":first\");\n                    if (firstHeadCol.text().split(\"(\")[0] == \"time\") {\n                        firstHeadCol.css(\"min-width\", \"13em\");\n                    }\n                }\n                function onTableResized() {\n                    setTableAutoSize();\n                    refreshTheadPos();\n                }\n                setTimeout(onTableResized, 0);\n                $(window).on('resize.tableview-' + self.cid, onTableResized);\n                scrollbox.on('scroll.tableview-' + self.cid, refreshTheadPos);\n                table.on('draw.dt', refreshTheadPos);\n            }();\n            table.on('click', 'td.f a', _.bind(this.onTermClick, this));\n            table.on('mousedown', 'td.f a', _.bind(this.onTermClick, this)); // click event is not triggered for middle click, but mousedown is\n            table.on('mouseover', 'td.f a', _.bind(this.onTermClick, this)); // to show the link on mouse over\n            $('.remove-column-link', table).click(this.removeColumn);\n            table.on('click', 'td.d a', _.bind(this.onDistinctValueClick, this));\n            table.on('mousedown', 'td.d a', _.bind(this.onDistinctValueClick, this));\n            table.on('mouseover', 'td.d a', _.bind(this.onDistinctValueClick, this));\n            return this;\n        };\n        TableView.prototype.toggleQueryInfo = function () {\n            this.$('.query-metadata-details').toggle();\n        };\n        TableView.rowNumbersDrawCallback = function (settings) {\n            /* Need to redo the counters if filtered or sorted */\n            if (settings.bSorted || settings.bFiltered) {\n                for (var i = 0, iLen = settings.aiDisplay.length; i < iLen; i++) {\n                    settings.aoData[settings.aiDisplay[i]].nTr.children[0].textContent = String(i + 1);\n                }\n            }\n        };\n        TableView.prototype.getData = function () {\n            var resultSetTable = this.resultSet.table;\n            if (!this.showRowNumberColumn) {\n                return resultSetTable;\n            }\n            var table = [];\n            for (var i = 0; i < resultSetTable.length; i++) {\n                // TODO: optimize?\n                table.push([(i + 1).toString()].concat(resultSetTable[i]));\n            }\n            return table;\n        };\n        TableView.prototype.onTermClick = function (event) {\n            var $eventTarget = $(event.target);\n            var tableCellElem = $eventTarget.parents('td');\n            var selectionRange = caret_1.default.getSelectionDiv(event.target);\n            // don't trigger click when user is clicking an embedded extra link or selecting text\n            if ($eventTarget.is('a') && $eventTarget.hasClass('extra')) {\n                return;\n            }\n            if (selectionRange.start != selectionRange.end) {\n                event.preventDefault();\n                return false;\n            }\n            var clickColumn = tableCellElem.index();\n            var columnInfoIndex = clickColumn;\n            var firstGroupingColumn = 0;\n            var lastGroupingColumn = this.resultSet.getGroupingColumnsCount() - 1;\n            if (this.showRowNumberColumn) {\n                // account for first column\n                firstGroupingColumn++;\n                lastGroupingColumn++;\n                columnInfoIndex--;\n            }\n            if (clickColumn < firstGroupingColumn || clickColumn > lastGroupingColumn) {\n                return; // clicked on a select part cell\n            }\n            // get field name\n            var clickedColumnInfo = this.resultSet.columns[columnInfoIndex];\n            var clickedField = clickedColumnInfo.getFieldName();\n            var clickedTextElem = tableCellElem.find(\"*\").filter(function () {\n                return $(this).children().length === 0; // we only want leaf elements\n            }).not('.extra');\n            var clickedTerm = clickedTextElem.html().trim() == \"&nbsp;\" ? \"\" : clickedTextElem.text();\n            var processLocally = event.type == 'click' && event.which == 1 && (!event.shiftKey && !event.ctrlKey && !event.metaKey);\n            if (processLocally) {\n                event.preventDefault();\n            }\n            events_1.default.eventBus.trigger(events_1.default.termClicked, clickedField, clickedTerm, processLocally, $eventTarget);\n        };\n        TableView.prototype.onDistinctValueClick = function (event) {\n            var $eventTarget = $(event.target);\n            var tableCellElem = $eventTarget.parents('td');\n            var selectionRange = caret_1.default.getSelectionDiv(event.target);\n            if ($eventTarget.is('a') && $eventTarget.hasClass('extra')) {\n                return;\n            }\n            if (selectionRange.start != selectionRange.end) {\n                event.preventDefault();\n                return false;\n            }\n            var columnInfoIndex = tableCellElem.index();\n            var firstGroupingColumn = 0;\n            var lastGroupingColumn = this.resultSet.getGroupingColumnsCount() - 1;\n            if (this.showRowNumberColumn) {\n                firstGroupingColumn++;\n                lastGroupingColumn++;\n                columnInfoIndex--;\n            }\n            // get all groupings for clicked metric\n            var groupValues = [];\n            for (var groupColumnIndex = firstGroupingColumn - 1; groupColumnIndex < lastGroupingColumn; groupColumnIndex++) {\n                var groupColumnField = this.resultSet.columns[groupColumnIndex].getFieldName();\n                var groupColumnCell = $eventTarget.closest('tr').find('td:eq(' + (groupColumnIndex + 1) + ')');\n                var clickedTextElem = groupColumnCell.find(\"*\").filter(function () {\n                    return $(this).children().length === 0; // we only want leaf elements\n                }).not('.extra');\n                var groupColumnTerm = clickedTextElem.html().trim() == \"&nbsp;\" ? \"\" : clickedTextElem.text();\n                if (groupColumnField.length > 0) {\n                    groupValues.push([groupColumnField, groupColumnTerm]);\n                }\n            }\n            var clickedColumnInfo = this.resultSet.columns[columnInfoIndex];\n            var clickedField = clickedColumnInfo.text;\n            clickedField = clickedField.indexOf(\":\") != -1 ? clickedField.split(\":\")[1] : clickedField;\n            var rawClickedField = clickedColumnInfo.getRawTextWithoutComments();\n            var processLocally = event.type == 'click' && event.which == 1 && (!event.shiftKey && !event.ctrlKey && !event.metaKey);\n            if (processLocally) {\n                event.preventDefault();\n            }\n            events_1.default.eventBus.trigger(events_1.default.distinctValueClicked, groupValues, rawClickedField, clickedField, processLocally, $eventTarget);\n        };\n        // Move to an event\n        TableView.prototype.removeColumn = function (e) {\n            e.preventDefault();\n            e.stopPropagation();\n            var tableCellElem = $(e.target).parents('th');\n            var column = tableCellElem.index();\n            // TODO: refactor\n            var isGrouping = column < this.resultSet.getGroupingColumnsCount(); // true = grouping, false = select part\n            var partToRemove = this.resultSet.columns[column].text;\n            //isGrouping ? lastQueryGroupings[column] : lastQuerySelects[column - lastQueryGroupings.length];\n            partToRemove = partToRemove.trim();\n            // TODO: remove jquery call\n            var textboxBeingModified = isGrouping ? $('.groupbybox:first') : $('.selectbox:first');\n            var parts = textboxBeingModified.val().split(',').map(function (elem) { return elem.trim(); });\n            for (var i = 0; i < parts.length; i++) {\n                var part = parts[i];\n                if (part.trim() === partToRemove.trim()) {\n                    parts.splice(i, 1); // remove this grouping\n                    var nextFullText = parts.join(', ');\n                    textboxBeingModified.val(nextFullText);\n                    break; // successfully removed\n                }\n            }\n        };\n        TableView.prototype.getRemoveColumnHTML = function () {\n            return '<a href=\"javascript:void(0)\" class=\"remove-column-link\" title=\"Remove this column from the query\" />';\n        };\n        TableView.prototype.getTrueTotals = function () {\n            var trueTotalsJson = this.resultSet.extra['IQL-Totals'];\n            if (trueTotalsJson) {\n                var trueTotals = JSON.parse(trueTotalsJson);\n                if (trueTotals && trueTotals.length == this.resultSet.getMetricColumns().length) {\n                    return _.times(this.resultSet.getGroupingColumnsCount(), function () {\n                        return 0;\n                    }).concat(trueTotals);\n                }\n            }\n            return null;\n        };\n        TableView.prototype.getLocalTotals = function () {\n            // true totals not available. compute local totals\n            var totals = [];\n            var groupCount = this.resultSet.getGroupingColumnsCount();\n            for (var i = groupCount; i < this.resultSet.columns.length; i++) {\n                totals[i] = 0;\n            }\n            this.resultSet.table.forEach(function (row) {\n                for (var i = groupCount; i < row.length; i++) {\n                    var cellValue = Number(row[i]);\n                    if (!isNaN(cellValue)) {\n                        totals[i] += cellValue;\n                    }\n                }\n            });\n            return totals;\n        };\n        TableView.standardRender = function (data, type) {\n            if (data !== \"\") {\n                return \"<a>\" + utils_1.default.htmlEncode(data) + \"</a>\";\n            }\n            else {\n                return \"<a>&nbsp;</a>\";\n            }\n        };\n        TableView.getSelectColumnRenderer = function (columnInfo) {\n            var isDistinctColumn = columnInfo.isDistinctColumn;\n            return function metricRender(data, type) {\n                if (type === 'display') {\n                    // TODO: optimize\n                    var valueWithCommas = TableView.addCommas(data);\n                    if (isDistinctColumn) {\n                        return \"<a>\" + valueWithCommas + \"</a>\";\n                    }\n                    else {\n                        return valueWithCommas;\n                    }\n                }\n                else {\n                    var numeric = parseFloat(data);\n                    if (isFinite(numeric))\n                        return numeric;\n                    return String(Number.MIN_VALUE); // We want NaNs to be negative infinity\n                }\n            };\n        };\n        TableView.bucketRenderer = function (data, type) {\n            if (type === \"display\") {\n                return TableView.standardRender(data);\n            }\n            var bucketStr = utils_1.default.getBucketStart(data);\n            var numeric = parseFloat(bucketStr);\n            if (isFinite(numeric)) {\n                return numeric;\n            }\n            return Number.MAX_VALUE; // We want NaNs to be infinity\n        };\n        TableView.elaboratedRenderer = function (data) {\n            return \"<a>\" + TableView.handleElaborationClick(utils_1.default.htmlEncode(data)) + \"</a>\";\n        };\n        TableView.linkRenderer = function (clickFunctions) {\n            return function (data) {\n                var possiblyElaboratedId = utils_1.default.htmlEncode(data);\n                var id;\n                if (possiblyElaboratedId.indexOf(\"[\") >= 0) {\n                    // the job id is elaborated with some extra information\n                    // the form is xXx_Title - Company_xXx [jobid]\n                    var start = possiblyElaboratedId.lastIndexOf(\"[\") + 1;\n                    var end = possiblyElaboratedId.lastIndexOf(\"]\");\n                    id = possiblyElaboratedId.substring(start, end);\n                }\n                else {\n                    id = possiblyElaboratedId;\n                }\n                var outHTML = \"<a>\" + TableView.handleElaborationClick(possiblyElaboratedId) + \"</a> \";\n                return outHTML + (clickFunctions.map(function (fn) {\n                    return fn(id);\n                }).join(\" \"));\n            };\n        };\n        TableView.getGroupByColumnRenderer = function (columnInfo) {\n            var renderer = TableView.standardRender;\n            return renderer;\n        };\n        TableView.handleElaborationClick = function (elaboratable) {\n            if (elaboratable.indexOf(\"[\") < 0) {\n                return elaboratable;\n            }\n            var execArray = ELABORATION_REGEX.exec(elaboratable);\n            if (execArray == null || execArray.length < 4) {\n                return elaboratable;\n            }\n            return \"<span class='extra'>\" + execArray[1] + \"</span><span>\" + execArray[2] + \"</span><span class='extra'>\" + execArray[3] + \"</span>\";\n        };\n        TableView.prototype.getColumns = function (columnsInfo) {\n            var _this = this;\n            var columns = [];\n            // TODO: delete column removal code?\n            var canRemoveGroups = false; //this.resultSet.getGroupingColumnsCount() > 1 || this.resultSet.columns[0].text !== \"\";\n            var canRemoveSelects = false; //this.resultSet.getMetricColumns().length > 1;\n            var showTotals = this.resultSet.table.length > 1;\n            if (this.showRowNumberColumn) {\n                columns.push({ title: \"#\", \"sortable\": false });\n            }\n            columnsInfo.forEach(function (columnInfo) {\n                var headerText = _.escape(columnInfo.text);\n                if (columnInfo.type == columntype_1.default.GROUPING || columnInfo.type == columntype_1.default.TIME) {\n                    headerText = '<div class=\"groupby-col-header\" title=\"' + headerText + '\">' + headerText + '</div>';\n                    columns.push({\n                        \"title\": headerText + (canRemoveGroups ? _this.getRemoveColumnHTML() : \"\"),\n                        \"orderSequence\": [\"asc\", \"desc\"],\n                        \"className\": \"f\",\n                        \"render\": TableView.getGroupByColumnRenderer(columnInfo)\n                    });\n                }\n                else {\n                    headerText = '<div class=\"select-col-header\" title=\"' + headerText + '\">' + headerText + '</div>';\n                    columns.push({\n                        \"title\": headerText + (canRemoveSelects ? _this.getRemoveColumnHTML() : \"\") +\n                            (showTotals ? TableView.getTotalsHTML(columnInfo) : \"\"),\n                        \"orderSequence\": [\"desc\", \"asc\"],\n                        \"type\": \"numeric\",\n                        \"className\": columnInfo.isDistinctColumn ? \"d\" : \"m\",\n                        \"render\": TableView.getSelectColumnRenderer(columnInfo)\n                    });\n                }\n            });\n            return columns;\n        };\n        TableView.getTotalsHTML = function (columnInfo) {\n            var html = '<br/>';\n            html += '<div class=\"column-totals\" ' + (columnInfo.isLocalTotal ?\n                'title=\"Sum of the column values in the table. True total value of metric unknown.\"' : '') +\n                '>';\n            if (columnInfo.isLocalTotal) {\n                html += '&#x2B51;';\n            }\n            var total = columnInfo.columnTotal;\n            var afterDotPrecision = 10000000;\n            total = Math.round(total * afterDotPrecision) / afterDotPrecision;\n            html += TableView.formatNumber(total);\n            if (columnInfo.isLocalTotal) {\n                html += \"</div>\";\n            }\n            return html;\n        };\n        TableView.formatNumber = function (value) {\n            return TableView.addCommas(value.toString());\n        };\n        TableView.addCommas = function (nStr) {\n            nStr += '';\n            var x = nStr.split('.');\n            var x1 = x[0];\n            var x2 = x.length > 1 ? '.' + x[1] : '';\n            var rgx = /(\\d+)(\\d{3})/;\n            while (rgx.test(x1)) {\n                x1 = x1.replace(rgx, '$1' + ',' + '$2');\n            }\n            return x1 + x2;\n        };\n        TableView.prototype.remove = function () {\n            // clean up fixed headers\n            $(window).off('resize.tableview-' + this.cid);\n            $('.presentationgridbox').off('scroll.tableview-' + this.cid);\n            this.$('.tableresult').off('draw.dt');\n            // we have to clean up data tables plugin to avoid a memory leak\n            TableView.destroyDataTables();\n            // in case the view leaks, reduce the retained memory size\n            this.resultSet = null;\n            _super.prototype.remove.call(this);\n            return this;\n        };\n        // Only contains necessary cleanup steps from DataTable api destroy().\n        // The original method has a bug that causes a stack overflow when the table data is large.\n        // Note: this nukes all the datatables instances on the page\n        TableView.destroyDataTables = function () {\n            $.fn.dataTable.settings.forEach(function (dtSettings) {\n                var table = dtSettings.nTable;\n                var tbody = dtSettings.nTBody;\n                var jqTable = $(table);\n                var jqWrapper = $(dtSettings.nTableWrapper);\n                jqWrapper.unbind('.DT').find(':not(tbody *)').unbind('.DT');\n                $(window).unbind('.DT-' + dtSettings.sInstance);\n                // has to be remove() rather than detach() like in the original to avoid event memory leaks\n                jqTable.remove();\n                jqWrapper.remove();\n            });\n            // wipe out all the settings\n            $.fn.dataTable.settings.splice(0, $.fn.dataTable.settings.length);\n        };\n        TableView.prototype.getState = function () {\n            return this.state;\n        };\n        TableView.prototype.setState = function (state) {\n            this.state = state;\n        };\n        TableView.prototype.saveTableState = function (settings, data) {\n            for (var tableSettingKey in data) {\n                if (!data.hasOwnProperty(tableSettingKey)) {\n                    continue;\n                }\n                var settingValue = data[tableSettingKey];\n                if (settingValue === \"\" || settingValue === null || settingValue === undefined || settingValue.length === 0) {\n                    // don't store this value and clear any previously existing value\n                    delete this.state[tableSettingKey];\n                }\n                else {\n                    this.state[tableSettingKey] = settingValue;\n                }\n            }\n            this.trigger(\"statechange\");\n        };\n        TableView.prototype.loadTableState = function (settings) {\n            return _.extend({ time: +new Date() }, this.state); // time field has to be set or DataTables rejects the state\n        };\n        TableView.prototype.saveTableStateFilterParams = function (settings, data) {\n            // remove unnecessary options to keep URL cleaner\n            // null values won't be serialized and previous values will be cleared\n            data.time = null;\n            data.columns = null;\n            if (data.search.search.trim() !== \"\") {\n                data.search = data.search.search;\n            }\n            else {\n                data.search = null;\n            }\n            data.length = null;\n            data.end = null;\n            data.start = (data.start === 0) ? null : data.start;\n            // rename to shorten\n            if (data.order) {\n                data.sort = data.order;\n            }\n            else {\n                data.sort = null;\n            }\n            data.order = null;\n        };\n        TableView.prototype.loadTableStateFilterParams = function (settings, data) {\n            // restore defaults that we don't store in the URL\n            data.order = data.sort;\n            if (!data.order) {\n                data.order = [];\n            }\n            if (!data.start) {\n                data.start = 0;\n            }\n            data.length = pageRowCount;\n            data.end = data.start + pageRowCount;\n            if (!data.columns) {\n                data.columns = [];\n                var columnCount = this.resultSet.columns.length + (this.showRowNumberColumn ? 1 : 0);\n                _.times(columnCount, function () {\n                    data.columns.push({ search: {}, visible: true });\n                });\n            }\n            data.search = { \"search\": data.search };\n        };\n        return TableView;\n    }(Backbone.View));\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = TableView;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzc5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3RhYmxldmlldy90YWJsZXZpZXcudHM/ZTYyNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vZGVwcy5kLnRzXCIgLz5cblxuLy8vIDxhbWQtZGVwZW5kZW5jeSBwYXRoPVwidGFibGV2aWV3L3RhYmxldmlldy5jc3NcIiAvPlxuLy8vIDxhbWQtZGVwZW5kZW5jeSBwYXRoPVwidGFibGV2aWV3L2RhdGFUYWJsZXMuanF1ZXJ5dWkuY3NzXCIgLz5cblxuLy8vIDxhbWQtZGVwZW5kZW5jeSBwYXRoPVwiZGF0YXRhYmxlc1wiIC8+XG4vLy8gPGFtZC1kZXBlbmRlbmN5IHBhdGg9XCJkYXRhdGFibGVzLWNvbHJlc2l6ZVwiIC8+XG4vLy8gPGFtZC1kZXBlbmRlbmN5IHBhdGg9XCJ0YWJsZXZpZXcvZGF0YVRhYmxlcy5qcXVlcnl1aVwiIC8+XG5cbi8vLyA8YW1kLWRlcGVuZGVuY3kgcGF0aD1cInRhYmxldmlldy90YWJsZXZpZXcuaHRtbFwiLz5cbnZhciB0ZW1wbGF0ZVRleHQgOiBzdHJpbmcgPSByZXF1aXJlKCd0YWJsZXZpZXcvdGFibGV2aWV3Lmh0bWwnKTtcblxuaW1wb3J0ICQgPSByZXF1aXJlKCdqcXVlcnknKTtcbmltcG9ydCBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpO1xuaW1wb3J0IEJhY2tib25lID0gcmVxdWlyZSgnYmFja2JvbmUnKTtcblxuaW1wb3J0IEV2ZW50cyBmcm9tICdldmVudHMnO1xuaW1wb3J0IFJlc3VsdFNldCBmcm9tICdyZXN1bHRzZXQnO1xuaW1wb3J0IENvbHVtbkluZm8gZnJvbSAnY29sdW1uaW5mbyc7XG5pbXBvcnQgQ29sdW1uVHlwZSBmcm9tICdjb2x1bW50eXBlJztcbmltcG9ydCBWaWV3SW50ZXJmYWNlIGZyb20gJ3ZpZXdpbnRlcmZhY2UnO1xuaW1wb3J0IENhcmV0IGZyb20gJ2NhcmV0JztcbmltcG9ydCBVdGlscyBmcm9tICd1dGlscyc7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgcGFnZVJvd0NvdW50ID0gMTAwMDtcbnZhciBFTEFCT1JBVElPTl9SRUdFWDogUmVnRXhwID0gL14oLipcXFspKC4qKShcXF0uKikkLztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGFibGVWaWV3IGV4dGVuZHMgQmFja2JvbmUuVmlldzxhbnk+IGltcGxlbWVudHMgVmlld0ludGVyZmFjZSB7XG4gICAgcHJpdmF0ZSB0ZW1wbGF0ZSA6ICguLi5kYXRhOiBhbnlbXSkgPT4gc3RyaW5nID0gXy50ZW1wbGF0ZSh0ZW1wbGF0ZVRleHQpO1xuXG4gICAgcmVzdWx0U2V0IDogUmVzdWx0U2V0O1xuICAgIHNob3dSb3dOdW1iZXJDb2x1bW4gPSB0cnVlOyAvLyBUT0RPOiBtYWtlIGNvbmZpZ3VyYWJsZSBhcyBpdCBzbG93cyBkb3duIHJlbmRlcmluZyBvZiBsYXJnZSB0YWJsZXNcblxuICAgIGluaXRpYWxpemUob3B0aW9uczogYW55KSB7XG4gICAgICAgIHRoaXMucmVzdWx0U2V0ID0gb3B0aW9ucy5yZXN1bHRTZXQ7XG4gICAgICAgIHRoaXMuJGVsLmFkZENsYXNzKFwidGFibGVyZXN1bHRkaXZcIik7XG4gICAgfVxuXG4gICAgc3RhdGljIGFwcGxpZXNUbyhyZXN1bHRTZXQ6IFJlc3VsdFNldCkgOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldE5hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIFwiVGFibGVcIjtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0Vmlld0lkKCkgOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gXCJ0YWJsZVwiO1xuICAgIH1cblxuICAgIHB1YmxpYyBldmVudHMoKSB7XG4gICAgICAgIHJldHVybiA8YW55PntcbiAgICAgICAgICAgIFwiY2xpY2sgLnF1ZXJ5LW1ldGFkYXRhLXRvZ2dsZVwiOiB0aGlzLnRvZ2dsZVF1ZXJ5SW5mb1xuICAgICAgICB9O1xuICAgIH1cblxuXG4gICAgcmVuZGVyKCk6IEJhY2tib25lLlZpZXc8YW55PiB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdmFyIHJlc3VsdFNldCA9IHRoaXMucmVzdWx0U2V0O1xuICAgICAgICB2YXIgbGluZU51bSA9IHJlc3VsdFNldC50YWJsZS5sZW5ndGg7XG4gICAgICAgIHZhciBzdW1tYXJ5TXNnID0gbGluZU51bSArICcgbGluZXMnO1xuICAgICAgICAvLyBUT0RPXG4vLyAgICAgICAgICAgIGlmKGxpbmVOdW0gPT0gcmVzdWx0U2V0LnF1ZXJ5TW9kZWwubGltaXQpIHtcbi8vICAgICAgICAgICAgICAgIHN1bW1hcnlNc2cgKz0gXCIuIFJlc3VsdHMgaW4gdGhlIHRhYmxlIG1heSBiZSB0cnVuY2F0ZWQgdG8gbm90IG92ZXJsb2FkIHRoZSBicm93c2VyLiBJbmNyZWFzZSB0aGUgJ1JvdyBsaW1pdCcgdW5kZXIgJ1NldHRpbmdzJyBpZiB5b3Ugd2FudCB0byBzZWUgbW9yZSByb3dzIG9yIGRvd25sb2FkIFRTVi9DU1YgZm9yIGNvbXBsZXRlIGRhdGEuXCJcbi8vICAgICAgICAgICAgfVxuICAgICAgICB2YXIgdGVtcGxhdGVNb2RlbDogYW55ID0ge2V4dHJhOiByZXN1bHRTZXQuZXh0cmEsIHN1bW1hcnlNc2c6IHN1bW1hcnlNc2d9O1xuICAgICAgICB0aGlzLiRlbC5odG1sKHRoaXMudGVtcGxhdGUodGVtcGxhdGVNb2RlbCkpO1xuICAgICAgICB2YXIgdGFibGUgPSB0aGlzLiQoJy50YWJsZXJlc3VsdCcpO1xuXG4gICAgICAgIHZhciB0YWJsZURhdGEgPSB0aGlzLmdldERhdGEoKTtcbiAgICAgICAgKDxhbnk+JCh0YWJsZSkpLkRhdGFUYWJsZSgge1xuICAgICAgICAgICAgXCJkYXRhXCI6IHRhYmxlRGF0YSxcbiAgICAgICAgICAgIFwib3JkZXJcIjogW10sXG4gICAgICAgICAgICBcImNvbHVtbnNcIjogdGhpcy5nZXRDb2x1bW5zKHJlc3VsdFNldC5jb2x1bW5zKSxcbiAgICAgICAgICAgIFwib3JkZXJDbGFzc2VzXCI6ZmFsc2UsXG4gICAgICAgICAgICBcImluZm9cIjogZmFsc2UsXG4gICAgICAgICAgICBcInByb2Nlc3NpbmdcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwicGFnaW5nXCI6IChsaW5lTnVtID4gcGFnZVJvd0NvdW50KSwgLy8gb25seSBwYWdpbmF0ZSBpZiBkYXRhIGlzIGxhcmdlciB0aGFuIHBhZ2Ugc2l6ZVxuICAgICAgICAgICAgXCJwYWdpbmdUeXBlXCI6IFwiZnVsbF9udW1iZXJzXCIsXG4gICAgICAgICAgICBcInBhZ2VMZW5ndGhcIjogcGFnZVJvd0NvdW50LCAgICAvLyBwZXIgcGFnZVxuICAgICAgICAgICAgXCJkb21cIjonWjxcIkhcImZwcj50PFwiRlwiaXA+JywgICAvLyBhbHNvIHBsYWNlIHBhZ2luYXRpb24gb24gdGhlIHRvcFxuICAgICAgICAgICAgXCJzdGF0ZVNhdmVcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwic3RhdGVTYXZlQ2FsbGJhY2tcIjogXy5iaW5kKHRoaXMuc2F2ZVRhYmxlU3RhdGUsIHRoaXMpLFxuICAgICAgICAgICAgXCJzdGF0ZVNhdmVQYXJhbXNcIjogXy5iaW5kKHRoaXMuc2F2ZVRhYmxlU3RhdGVGaWx0ZXJQYXJhbXMsIHRoaXMpLFxuICAgICAgICAgICAgXCJzdGF0ZUxvYWRDYWxsYmFja1wiOiBfLmJpbmQodGhpcy5sb2FkVGFibGVTdGF0ZSwgdGhpcyksXG4gICAgICAgICAgICBcInN0YXRlTG9hZFBhcmFtc1wiOiBfLmJpbmQodGhpcy5sb2FkVGFibGVTdGF0ZUZpbHRlclBhcmFtcywgdGhpcyksXG4gICAgICAgICAgICBcImZuRHJhd0NhbGxiYWNrXCI6IHRoaXMuc2hvd1Jvd051bWJlckNvbHVtbiA/IFRhYmxlVmlldy5yb3dOdW1iZXJzRHJhd0NhbGxiYWNrIDogdW5kZWZpbmVkXG4gICAgICAgIH0gKTtcblxuICAgICAgICAvLyBpbml0aWFsaXplIGZpeGVkIGhlYWRlclxuICAgICAgICAhZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdGhlYWQgPSAkKHRhYmxlKS5maW5kKCd0aGVhZCcpLmZpcnN0KCk7XG4gICAgICAgICAgICB2YXIgcGxhY2Vob2xkZXIgPSB0aGVhZC5jbG9uZSgpLmNzcygndmlzaWJpbGl0eScsJ2hpZGRlbicpLmluc2VydEJlZm9yZSh0aGVhZCk7XG4gICAgICAgICAgICB0aGVhZC5jc3MoJ3Bvc2l0aW9uJywnYWJzb2x1dGUnKTtcblxuICAgICAgICAgICAgdmFyIHNjcm9sbGJveCA9IHRoZWFkLmNsb3Nlc3QoJy5wcmVzZW50YXRpb25ncmlkYm94Jyk7XG4gICAgICAgICAgICBmdW5jdGlvbiByZWZyZXNoVGhlYWRQb3MoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNjcm9sbE9mZnNldCA9IHNjcm9sbGJveC5vZmZzZXQoKS50b3AgLSBwbGFjZWhvbGRlci5vZmZzZXQoKS50b3AgKyBwbGFjZWhvbGRlci5wb3NpdGlvbigpLnRvcDtcbiAgICAgICAgICAgICAgICB2YXIgcGxhY2Vob2xkZXJPZmZzZXQgPSBwbGFjZWhvbGRlci5wb3NpdGlvbigpLnRvcDtcblxuICAgICAgICAgICAgICAgIC8vIHNldCB2ZXJ0aWNhbCBwb3NpdGlvblxuICAgICAgICAgICAgICAgIHRoZWFkLmNzcygndG9wJywgTWF0aC5tYXgoc2Nyb2xsT2Zmc2V0LCBwbGFjZWhvbGRlck9mZnNldCkrJ3B4Jyk7XG5cbiAgICAgICAgICAgICAgICAvLyByZXNpemUgY29sdW1ucyB0byBtYXRjaCB0aG9zZSBpbiB0aGUgcGxhY2Vob2xkZXJcbiAgICAgICAgICAgICAgICB2YXIgZnJvbUNlbGxzID0gcGxhY2Vob2xkZXIuZmluZCgndGgnKTtcbiAgICAgICAgICAgICAgICB2YXIgdG9DZWxscyA9IHRoZWFkLmZpbmQoJ3RoJyk7XG4gICAgICAgICAgICAgICAgZnJvbUNlbGxzLmVhY2goZnVuY3Rpb24oaSxjZWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEhhdmUgdG8gdXNlIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIGluc3RlYWQgb2YganF1ZXJ5IHdpZHRoKCkgdG8gYXZvaWQgd2VpcmQgc2l6aW5nIGlzc3VlcyBhZnRlciB6b29taW5nLlxuICAgICAgICAgICAgICAgICAgICAvLyBib3gtc2l6aW5nOiBib3JkZXItYm94IGlzIHJlcXVpcmVkXG4gICAgICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9ICQoY2VsbCkuZ2V0KDApLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAkKHRvQ2VsbHMuZ2V0KGkpKS5jc3MoJ3dpZHRoJywgd2lkdGggKyBcInB4XCIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHZhciBoZWFkZXJIZWlnaHQgPSB0aGVhZC5maW5kKFwiPiB0clwiKVswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXIuZmluZChcIj4gdHJcIikuY3NzKCdoZWlnaHQnLCBoZWFkZXJIZWlnaHQgKyBcInB4XCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgbGFzdFdpbmRvd1dpZHRoOiBudW1iZXIgPSBudWxsO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBzZXRUYWJsZUF1dG9TaXplKCkge1xuICAgICAgICAgICAgICAgIHZhciBuZXdXaWR0aCA9ICQod2luZG93KS53aWR0aCgpO1xuICAgICAgICAgICAgICAgIGlmKG5ld1dpZHRoID09IGxhc3RXaW5kb3dXaWR0aCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47IC8vIGlnbm9yZSBoZWlnaHQgcmVzaXplIGV2ZW50c1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsYXN0V2luZG93V2lkdGggPSBuZXdXaWR0aDtcblxuICAgICAgICAgICAgICAgIC8vIGRhdGFUYWJsZSBzZXRzIHRoZSB3aWR0aHMgdG8gZml4ZWQgdmFsdWVzIGJ1dCB3ZSB3YW50IHRoZW0gdG8gYmUgYXV0byBzbyB0aGF0IGJyb3dzZXIgZmlndXJlcyBpdCBvdXRcbiAgICAgICAgICAgICAgICB0YWJsZS5jc3MoXCJ3aWR0aFwiLCBcImF1dG9cIik7XG4gICAgICAgICAgICAgICAgdmFyIHRhYmxlSGVhZENvbHMgPSB0YWJsZS5maW5kKFwiPiB0aGVhZCA+IHRyID4gdGhcIik7XG4gICAgICAgICAgICAgICAgdGFibGVIZWFkQ29scy5jc3MoXCJ3aWR0aFwiLCBcImF1dG9cIik7XG5cbiAgICAgICAgICAgICAgICAvLyBlbnN1cmUgdGltZSBjb2x1bW4gaGFzIHN1ZmZpY2llbnQgc3BhY2VcbiAgICAgICAgICAgICAgICB2YXIgZmlyc3RIZWFkQ29sID0gdGFibGVIZWFkQ29scy5maWx0ZXIoXCI6Zmlyc3RcIik7XG4gICAgICAgICAgICAgICAgaWYoZmlyc3RIZWFkQ29sLnRleHQoKS5zcGxpdChcIihcIilbMF0gPT0gXCJ0aW1lXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlyc3RIZWFkQ29sLmNzcyhcIm1pbi13aWR0aFwiLCBcIjEzZW1cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBvblRhYmxlUmVzaXplZCgpIHtcbiAgICAgICAgICAgICAgICBzZXRUYWJsZUF1dG9TaXplKCk7XG4gICAgICAgICAgICAgICAgcmVmcmVzaFRoZWFkUG9zKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNldFRpbWVvdXQob25UYWJsZVJlc2l6ZWQsIDApO1xuXG4gICAgICAgICAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZS50YWJsZXZpZXctJytzZWxmLmNpZCwgb25UYWJsZVJlc2l6ZWQpO1xuICAgICAgICAgICAgc2Nyb2xsYm94Lm9uKCdzY3JvbGwudGFibGV2aWV3LScrc2VsZi5jaWQsIHJlZnJlc2hUaGVhZFBvcyk7XG4gICAgICAgICAgICB0YWJsZS5vbignZHJhdy5kdCcsIHJlZnJlc2hUaGVhZFBvcyk7XG4gICAgICAgIH0oKTtcblxuICAgICAgICB0YWJsZS5vbignY2xpY2snLCAndGQuZiBhJywgXy5iaW5kKHRoaXMub25UZXJtQ2xpY2ssIHRoaXMpKTtcbiAgICAgICAgdGFibGUub24oJ21vdXNlZG93bicsICd0ZC5mIGEnLCBfLmJpbmQodGhpcy5vblRlcm1DbGljaywgdGhpcykpOyAgICAvLyBjbGljayBldmVudCBpcyBub3QgdHJpZ2dlcmVkIGZvciBtaWRkbGUgY2xpY2ssIGJ1dCBtb3VzZWRvd24gaXNcbiAgICAgICAgdGFibGUub24oJ21vdXNlb3ZlcicsICd0ZC5mIGEnLCBfLmJpbmQodGhpcy5vblRlcm1DbGljaywgdGhpcykpOyAgICAvLyB0byBzaG93IHRoZSBsaW5rIG9uIG1vdXNlIG92ZXJcbiAgICAgICAgJCgnLnJlbW92ZS1jb2x1bW4tbGluaycsIHRhYmxlKS5jbGljayh0aGlzLnJlbW92ZUNvbHVtbik7XG5cbiAgICAgICAgdGFibGUub24oJ2NsaWNrJywgJ3RkLmQgYScsIF8uYmluZCh0aGlzLm9uRGlzdGluY3RWYWx1ZUNsaWNrLCB0aGlzKSk7XG4gICAgICAgIHRhYmxlLm9uKCdtb3VzZWRvd24nLCAndGQuZCBhJywgXy5iaW5kKHRoaXMub25EaXN0aW5jdFZhbHVlQ2xpY2ssIHRoaXMpKTtcbiAgICAgICAgdGFibGUub24oJ21vdXNlb3ZlcicsICd0ZC5kIGEnLCBfLmJpbmQodGhpcy5vbkRpc3RpbmN0VmFsdWVDbGljaywgdGhpcykpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHB1YmxpYyB0b2dnbGVRdWVyeUluZm8oKSB7XG4gICAgICAgIHRoaXMuJCgnLnF1ZXJ5LW1ldGFkYXRhLWRldGFpbHMnKS50b2dnbGUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyByb3dOdW1iZXJzRHJhd0NhbGxiYWNrKHNldHRpbmdzOiBhbnkpIHtcbiAgICAgICAgLyogTmVlZCB0byByZWRvIHRoZSBjb3VudGVycyBpZiBmaWx0ZXJlZCBvciBzb3J0ZWQgKi9cbiAgICAgICAgaWYgKCBzZXR0aW5ncy5iU29ydGVkIHx8IHNldHRpbmdzLmJGaWx0ZXJlZCApXG4gICAgICAgIHtcbiAgICAgICAgICAgIGZvciAoIHZhciBpPTAsIGlMZW49c2V0dGluZ3MuYWlEaXNwbGF5Lmxlbmd0aCA7IGk8aUxlbiA7IGkrKyApXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2V0dGluZ3MuYW9EYXRhWyBzZXR0aW5ncy5haURpc3BsYXlbaV0gXS5uVHIuY2hpbGRyZW5bMF0udGV4dENvbnRlbnQgPSBTdHJpbmcoaSsxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0RGF0YSgpOiBzdHJpbmdbXVtdIHtcbiAgICAgICAgdmFyIHJlc3VsdFNldFRhYmxlID0gdGhpcy5yZXN1bHRTZXQudGFibGU7XG4gICAgICAgIGlmKCF0aGlzLnNob3dSb3dOdW1iZXJDb2x1bW4pIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRTZXRUYWJsZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGFibGU6IHN0cmluZ1tdW10gPSBbXTtcbiAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IHJlc3VsdFNldFRhYmxlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBvcHRpbWl6ZT9cbiAgICAgICAgICAgIHRhYmxlLnB1c2goWyhpKzEpLnRvU3RyaW5nKCldLmNvbmNhdChyZXN1bHRTZXRUYWJsZVtpXSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YWJsZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uVGVybUNsaWNrKGV2ZW50OiBKUXVlcnlFdmVudE9iamVjdCkge1xuICAgICAgICB2YXIgJGV2ZW50VGFyZ2V0ID0gJChldmVudC50YXJnZXQpO1xuICAgICAgICB2YXIgdGFibGVDZWxsRWxlbSA9ICRldmVudFRhcmdldC5wYXJlbnRzKCd0ZCcpO1xuICAgICAgICB2YXIgc2VsZWN0aW9uUmFuZ2UgPSBDYXJldC5nZXRTZWxlY3Rpb25EaXYoPEhUTUxFbGVtZW50PmV2ZW50LnRhcmdldCk7XG4gICAgICAgIC8vIGRvbid0IHRyaWdnZXIgY2xpY2sgd2hlbiB1c2VyIGlzIGNsaWNraW5nIGFuIGVtYmVkZGVkIGV4dHJhIGxpbmsgb3Igc2VsZWN0aW5nIHRleHRcbiAgICAgICAgaWYoJGV2ZW50VGFyZ2V0LmlzKCdhJykgJiYgJGV2ZW50VGFyZ2V0Lmhhc0NsYXNzKCdleHRyYScpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYoc2VsZWN0aW9uUmFuZ2Uuc3RhcnQgIT0gc2VsZWN0aW9uUmFuZ2UuZW5kKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjbGlja0NvbHVtbiA9IHRhYmxlQ2VsbEVsZW0uaW5kZXgoKTtcbiAgICAgICAgdmFyIGNvbHVtbkluZm9JbmRleCA9IGNsaWNrQ29sdW1uO1xuICAgICAgICB2YXIgZmlyc3RHcm91cGluZ0NvbHVtbiA9IDA7XG4gICAgICAgIHZhciBsYXN0R3JvdXBpbmdDb2x1bW4gPSB0aGlzLnJlc3VsdFNldC5nZXRHcm91cGluZ0NvbHVtbnNDb3VudCgpIC0gMTtcbiAgICAgICAgaWYodGhpcy5zaG93Um93TnVtYmVyQ29sdW1uKSB7XG4gICAgICAgICAgICAvLyBhY2NvdW50IGZvciBmaXJzdCBjb2x1bW5cbiAgICAgICAgICAgIGZpcnN0R3JvdXBpbmdDb2x1bW4rKztcbiAgICAgICAgICAgIGxhc3RHcm91cGluZ0NvbHVtbisrO1xuICAgICAgICAgICAgY29sdW1uSW5mb0luZGV4LS07XG4gICAgICAgIH1cbiAgICAgICAgaWYoY2xpY2tDb2x1bW4gPCBmaXJzdEdyb3VwaW5nQ29sdW1uIHx8IGNsaWNrQ29sdW1uID4gbGFzdEdyb3VwaW5nQ29sdW1uKSB7XG4gICAgICAgICAgICByZXR1cm47IC8vIGNsaWNrZWQgb24gYSBzZWxlY3QgcGFydCBjZWxsXG4gICAgICAgIH1cblxuICAgICAgICAvLyBnZXQgZmllbGQgbmFtZVxuICAgICAgICB2YXIgY2xpY2tlZENvbHVtbkluZm8gPSB0aGlzLnJlc3VsdFNldC5jb2x1bW5zW2NvbHVtbkluZm9JbmRleF07XG4gICAgICAgIHZhciBjbGlja2VkRmllbGQgPSBjbGlja2VkQ29sdW1uSW5mby5nZXRGaWVsZE5hbWUoKTtcbiAgICAgICAgdmFyIGNsaWNrZWRUZXh0RWxlbSA9IHRhYmxlQ2VsbEVsZW0uZmluZChcIipcIikuZmlsdGVyKGZ1bmN0aW9uKCkgOmJvb2xlYW4ge1xuICAgICAgICAgICAgcmV0dXJuICQodGhpcykuY2hpbGRyZW4oKS5sZW5ndGggPT09IDA7IC8vIHdlIG9ubHkgd2FudCBsZWFmIGVsZW1lbnRzXG4gICAgICAgIH0pLm5vdCgnLmV4dHJhJyk7XG4gICAgICAgIHZhciBjbGlja2VkVGVybSA9IGNsaWNrZWRUZXh0RWxlbS5odG1sKCkudHJpbSgpID09IFwiJm5ic3A7XCIgPyBcIlwiIDogY2xpY2tlZFRleHRFbGVtLnRleHQoKTtcbiAgICAgICAgdmFyIHByb2Nlc3NMb2NhbGx5ID0gZXZlbnQudHlwZSA9PSAnY2xpY2snICYmIGV2ZW50LndoaWNoID09IDEgJiYgKCFldmVudC5zaGlmdEtleSAmJiAhZXZlbnQuY3RybEtleSAmJiAhZXZlbnQubWV0YUtleSk7XG4gICAgICAgIGlmKHByb2Nlc3NMb2NhbGx5KSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICAgIEV2ZW50cy5ldmVudEJ1cy50cmlnZ2VyKEV2ZW50cy50ZXJtQ2xpY2tlZCwgY2xpY2tlZEZpZWxkLCBjbGlja2VkVGVybSwgcHJvY2Vzc0xvY2FsbHksICRldmVudFRhcmdldCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbkRpc3RpbmN0VmFsdWVDbGljayhldmVudDogSlF1ZXJ5RXZlbnRPYmplY3QpIHtcbiAgICAgICAgdmFyICRldmVudFRhcmdldCA9ICQoZXZlbnQudGFyZ2V0KTtcbiAgICAgICAgdmFyIHRhYmxlQ2VsbEVsZW0gPSAkZXZlbnRUYXJnZXQucGFyZW50cygndGQnKTtcbiAgICAgICAgdmFyIHNlbGVjdGlvblJhbmdlID0gQ2FyZXQuZ2V0U2VsZWN0aW9uRGl2KDxIVE1MRWxlbWVudD5ldmVudC50YXJnZXQpO1xuXG4gICAgICAgIGlmKCRldmVudFRhcmdldC5pcygnYScpICYmICRldmVudFRhcmdldC5oYXNDbGFzcygnZXh0cmEnKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmKHNlbGVjdGlvblJhbmdlLnN0YXJ0ICE9IHNlbGVjdGlvblJhbmdlLmVuZCkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjb2x1bW5JbmZvSW5kZXggPSB0YWJsZUNlbGxFbGVtLmluZGV4KCk7XG4gICAgICAgIHZhciBmaXJzdEdyb3VwaW5nQ29sdW1uID0gMDtcbiAgICAgICAgdmFyIGxhc3RHcm91cGluZ0NvbHVtbiA9IHRoaXMucmVzdWx0U2V0LmdldEdyb3VwaW5nQ29sdW1uc0NvdW50KCkgLSAxO1xuXG4gICAgICAgIGlmKHRoaXMuc2hvd1Jvd051bWJlckNvbHVtbikge1xuICAgICAgICAgICAgZmlyc3RHcm91cGluZ0NvbHVtbisrO1xuICAgICAgICAgICAgbGFzdEdyb3VwaW5nQ29sdW1uKys7XG4gICAgICAgICAgICBjb2x1bW5JbmZvSW5kZXgtLTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGdldCBhbGwgZ3JvdXBpbmdzIGZvciBjbGlja2VkIG1ldHJpY1xuICAgICAgICB2YXIgZ3JvdXBWYWx1ZXM6YW55ID0gW107XG4gICAgICAgIGZvciAodmFyIGdyb3VwQ29sdW1uSW5kZXggPSBmaXJzdEdyb3VwaW5nQ29sdW1uLTE7IGdyb3VwQ29sdW1uSW5kZXggPCBsYXN0R3JvdXBpbmdDb2x1bW47IGdyb3VwQ29sdW1uSW5kZXgrKyl7XG4gICAgICAgICAgICB2YXIgZ3JvdXBDb2x1bW5GaWVsZCA9IHRoaXMucmVzdWx0U2V0LmNvbHVtbnNbZ3JvdXBDb2x1bW5JbmRleF0uZ2V0RmllbGROYW1lKCk7XG4gICAgICAgICAgICB2YXIgZ3JvdXBDb2x1bW5DZWxsID0gJGV2ZW50VGFyZ2V0LmNsb3Nlc3QoJ3RyJykuZmluZCgndGQ6ZXEoJysoZ3JvdXBDb2x1bW5JbmRleCsxKSsnKScpO1xuXG4gICAgICAgICAgICB2YXIgY2xpY2tlZFRleHRFbGVtID0gZ3JvdXBDb2x1bW5DZWxsLmZpbmQoXCIqXCIpLmZpbHRlcihmdW5jdGlvbigpIDpib29sZWFuIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJCh0aGlzKS5jaGlsZHJlbigpLmxlbmd0aCA9PT0gMDsgLy8gd2Ugb25seSB3YW50IGxlYWYgZWxlbWVudHNcbiAgICAgICAgICAgIH0pLm5vdCgnLmV4dHJhJyk7XG4gICAgICAgICAgICB2YXIgZ3JvdXBDb2x1bW5UZXJtID0gY2xpY2tlZFRleHRFbGVtLmh0bWwoKS50cmltKCkgPT0gXCImbmJzcDtcIiA/IFwiXCIgOiBjbGlja2VkVGV4dEVsZW0udGV4dCgpO1xuICAgICAgICAgICAgaWYgKGdyb3VwQ29sdW1uRmllbGQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGdyb3VwVmFsdWVzLnB1c2goW2dyb3VwQ29sdW1uRmllbGQsIGdyb3VwQ29sdW1uVGVybV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNsaWNrZWRDb2x1bW5JbmZvID0gdGhpcy5yZXN1bHRTZXQuY29sdW1uc1tjb2x1bW5JbmZvSW5kZXhdO1xuICAgICAgICB2YXIgY2xpY2tlZEZpZWxkOiBzdHJpbmcgPSBjbGlja2VkQ29sdW1uSW5mby50ZXh0O1xuICAgICAgICBjbGlja2VkRmllbGQgPSBjbGlja2VkRmllbGQuaW5kZXhPZihcIjpcIikgIT0gLTEgPyBjbGlja2VkRmllbGQuc3BsaXQoXCI6XCIpWzFdIDogY2xpY2tlZEZpZWxkO1xuICAgICAgICB2YXIgcmF3Q2xpY2tlZEZpZWxkID0gY2xpY2tlZENvbHVtbkluZm8uZ2V0UmF3VGV4dFdpdGhvdXRDb21tZW50cygpO1xuXG4gICAgICAgIHZhciBwcm9jZXNzTG9jYWxseSA9IGV2ZW50LnR5cGUgPT0gJ2NsaWNrJyAmJiBldmVudC53aGljaCA9PSAxICYmICghZXZlbnQuc2hpZnRLZXkgJiYgIWV2ZW50LmN0cmxLZXkgJiYgIWV2ZW50Lm1ldGFLZXkpO1xuICAgICAgICBpZihwcm9jZXNzTG9jYWxseSkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgICAgICBFdmVudHMuZXZlbnRCdXMudHJpZ2dlcihFdmVudHMuZGlzdGluY3RWYWx1ZUNsaWNrZWQsIGdyb3VwVmFsdWVzLCByYXdDbGlja2VkRmllbGQsIGNsaWNrZWRGaWVsZCwgcHJvY2Vzc0xvY2FsbHksICRldmVudFRhcmdldCk7XG4gICAgfVxuXG4gICAgLy8gTW92ZSB0byBhbiBldmVudFxuICAgIHByaXZhdGUgcmVtb3ZlQ29sdW1uKGU6IE1vdXNlRXZlbnQpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgIHZhciB0YWJsZUNlbGxFbGVtID0gJChlLnRhcmdldCkucGFyZW50cygndGgnKTtcbiAgICAgICAgdmFyIGNvbHVtbiA9IHRhYmxlQ2VsbEVsZW0uaW5kZXgoKTtcblxuICAgICAgICAvLyBUT0RPOiByZWZhY3RvclxuICAgICAgICB2YXIgaXNHcm91cGluZyA9IGNvbHVtbiA8IHRoaXMucmVzdWx0U2V0LmdldEdyb3VwaW5nQ29sdW1uc0NvdW50KCk7ICAgIC8vIHRydWUgPSBncm91cGluZywgZmFsc2UgPSBzZWxlY3QgcGFydFxuXG4gICAgICAgIHZhciBwYXJ0VG9SZW1vdmUgPSB0aGlzLnJlc3VsdFNldC5jb2x1bW5zW2NvbHVtbl0udGV4dDtcbiAgICAgICAgLy9pc0dyb3VwaW5nID8gbGFzdFF1ZXJ5R3JvdXBpbmdzW2NvbHVtbl0gOiBsYXN0UXVlcnlTZWxlY3RzW2NvbHVtbiAtIGxhc3RRdWVyeUdyb3VwaW5ncy5sZW5ndGhdO1xuICAgICAgICBwYXJ0VG9SZW1vdmUgPSBwYXJ0VG9SZW1vdmUudHJpbSgpO1xuXG4gICAgICAgIC8vIFRPRE86IHJlbW92ZSBqcXVlcnkgY2FsbFxuICAgICAgICB2YXIgdGV4dGJveEJlaW5nTW9kaWZpZWQgPSBpc0dyb3VwaW5nID8gJCgnLmdyb3VwYnlib3g6Zmlyc3QnKSA6ICQoJy5zZWxlY3Rib3g6Zmlyc3QnKTtcbiAgICAgICAgdmFyIHBhcnRzID0gdGV4dGJveEJlaW5nTW9kaWZpZWQudmFsKCkuc3BsaXQoJywnKS5tYXAoZnVuY3Rpb24oZWxlbTogc3RyaW5nKSB7IHJldHVybiBlbGVtLnRyaW0oKTsgfSk7XG4gICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHBhcnQgPSBwYXJ0c1tpXTtcbiAgICAgICAgICAgIGlmKHBhcnQudHJpbSgpID09PSBwYXJ0VG9SZW1vdmUudHJpbSgpKSB7XG4gICAgICAgICAgICAgICAgcGFydHMuc3BsaWNlKGksIDEpOyAgICAvLyByZW1vdmUgdGhpcyBncm91cGluZ1xuICAgICAgICAgICAgICAgIHZhciBuZXh0RnVsbFRleHQgPSBwYXJ0cy5qb2luKCcsICcpO1xuICAgICAgICAgICAgICAgIHRleHRib3hCZWluZ01vZGlmaWVkLnZhbChuZXh0RnVsbFRleHQpO1xuICAgICAgICAgICAgICAgIGJyZWFrOyAgLy8gc3VjY2Vzc2Z1bGx5IHJlbW92ZWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0UmVtb3ZlQ29sdW1uSFRNTCgpIHtcbiAgICAgICAgcmV0dXJuICc8YSBocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApXCIgY2xhc3M9XCJyZW1vdmUtY29sdW1uLWxpbmtcIiB0aXRsZT1cIlJlbW92ZSB0aGlzIGNvbHVtbiBmcm9tIHRoZSBxdWVyeVwiIC8+J1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0VHJ1ZVRvdGFscygpIHtcbiAgICAgICAgdmFyIHRydWVUb3RhbHNKc29uOiBhbnkgPSB0aGlzLnJlc3VsdFNldC5leHRyYVsnSVFMLVRvdGFscyddO1xuICAgICAgICBpZih0cnVlVG90YWxzSnNvbikge1xuICAgICAgICAgICAgdmFyIHRydWVUb3RhbHMgPSBKU09OLnBhcnNlKHRydWVUb3RhbHNKc29uKTtcbiAgICAgICAgICAgIGlmICh0cnVlVG90YWxzICYmIHRydWVUb3RhbHMubGVuZ3RoID09IHRoaXMucmVzdWx0U2V0LmdldE1ldHJpY0NvbHVtbnMoKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXy50aW1lcyh0aGlzLnJlc3VsdFNldC5nZXRHcm91cGluZ0NvbHVtbnNDb3VudCgpLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIH0pLmNvbmNhdCh0cnVlVG90YWxzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldExvY2FsVG90YWxzKCk6IG51bWJlcltdIHtcbiAgICAgICAgLy8gdHJ1ZSB0b3RhbHMgbm90IGF2YWlsYWJsZS4gY29tcHV0ZSBsb2NhbCB0b3RhbHNcbiAgICAgICAgdmFyIHRvdGFsczogbnVtYmVyW10gPSBbXTtcbiAgICAgICAgdmFyIGdyb3VwQ291bnQgPSB0aGlzLnJlc3VsdFNldC5nZXRHcm91cGluZ0NvbHVtbnNDb3VudCgpO1xuICAgICAgICBmb3IodmFyIGk9Z3JvdXBDb3VudDsgaSA8IHRoaXMucmVzdWx0U2V0LmNvbHVtbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRvdGFsc1tpXSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXN1bHRTZXQudGFibGUuZm9yRWFjaCgocm93OnN0cmluZ1tdKSA9PiB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gZ3JvdXBDb3VudDsgaSA8IHJvdy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBjZWxsVmFsdWUgPSBOdW1iZXIocm93W2ldKTtcbiAgICAgICAgICAgICAgICBpZighaXNOYU4oY2VsbFZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICB0b3RhbHNbaV0gKz0gY2VsbFZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0b3RhbHM7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgc3RhbmRhcmRSZW5kZXIoZGF0YTogc3RyaW5nLCB0eXBlPzogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgaWYoZGF0YSAhPT0gXCJcIikge1xuICAgICAgICAgICAgcmV0dXJuIFwiPGE+XCIgKyBVdGlscy5odG1sRW5jb2RlKGRhdGEpICsgXCI8L2E+XCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gXCI8YT4mbmJzcDs8L2E+XCI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBnZXRTZWxlY3RDb2x1bW5SZW5kZXJlcihjb2x1bW5JbmZvOiBDb2x1bW5JbmZvKSB7XG4gICAgICAgIHZhciBpc0Rpc3RpbmN0Q29sdW1uOiBib29sZWFuID0gY29sdW1uSW5mby5pc0Rpc3RpbmN0Q29sdW1uO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gbWV0cmljUmVuZGVyKGRhdGE6IHN0cmluZywgdHlwZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAnZGlzcGxheScpIHtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBvcHRpbWl6ZVxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZVdpdGhDb21tYXMgPSBUYWJsZVZpZXcuYWRkQ29tbWFzKGRhdGEpO1xuICAgICAgICAgICAgICAgIGlmIChpc0Rpc3RpbmN0Q29sdW1uKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIjxhPlwiICsgdmFsdWVXaXRoQ29tbWFzICsgXCI8L2E+XCI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlV2l0aENvbW1hcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBudW1lcmljID0gcGFyc2VGbG9hdChkYXRhKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNGaW5pdGUobnVtZXJpYykpIHJldHVybiA8YW55Pm51bWVyaWM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFN0cmluZyhOdW1iZXIuTUlOX1ZBTFVFKTsgLy8gV2Ugd2FudCBOYU5zIHRvIGJlIG5lZ2F0aXZlIGluZmluaXR5XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBidWNrZXRSZW5kZXJlcihkYXRhOiBzdHJpbmcsIHR5cGU/OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBpZih0eXBlID09PSBcImRpc3BsYXlcIikge1xuICAgICAgICAgICAgcmV0dXJuIFRhYmxlVmlldy5zdGFuZGFyZFJlbmRlcihkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYnVja2V0U3RyID0gVXRpbHMuZ2V0QnVja2V0U3RhcnQoZGF0YSk7XG4gICAgICAgIHZhciBudW1lcmljID0gcGFyc2VGbG9hdChidWNrZXRTdHIpO1xuICAgICAgICBpZihpc0Zpbml0ZShudW1lcmljKSkge1xuICAgICAgICAgICAgcmV0dXJuIDxhbnk+bnVtZXJpYztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gPGFueT5OdW1iZXIuTUFYX1ZBTFVFOyAvLyBXZSB3YW50IE5hTnMgdG8gYmUgaW5maW5pdHlcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBlbGFib3JhdGVkUmVuZGVyZXIoZGF0YTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIFwiPGE+XCIgKyBUYWJsZVZpZXcuaGFuZGxlRWxhYm9yYXRpb25DbGljayhVdGlscy5odG1sRW5jb2RlKGRhdGEpKSArIFwiPC9hPlwiO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGxpbmtSZW5kZXJlcihjbGlja0Z1bmN0aW9uczogeyAoczogc3RyaW5nKTogc3RyaW5nOyB9W10pIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGRhdGE6IHN0cmluZykge1xuICAgICAgICAgICAgdmFyIHBvc3NpYmx5RWxhYm9yYXRlZElkOiBzdHJpbmcgPSBVdGlscy5odG1sRW5jb2RlKGRhdGEpO1xuICAgICAgICAgICAgdmFyIGlkOiBzdHJpbmc7XG4gICAgICAgICAgICBpZihwb3NzaWJseUVsYWJvcmF0ZWRJZC5pbmRleE9mKFwiW1wiKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgLy8gdGhlIGpvYiBpZCBpcyBlbGFib3JhdGVkIHdpdGggc29tZSBleHRyYSBpbmZvcm1hdGlvblxuICAgICAgICAgICAgICAgIC8vIHRoZSBmb3JtIGlzIHhYeF9UaXRsZSAtIENvbXBhbnlfeFh4IFtqb2JpZF1cbiAgICAgICAgICAgICAgICB2YXIgc3RhcnQgPSBwb3NzaWJseUVsYWJvcmF0ZWRJZC5sYXN0SW5kZXhPZihcIltcIikgKyAxO1xuICAgICAgICAgICAgICAgIHZhciBlbmQgPSBwb3NzaWJseUVsYWJvcmF0ZWRJZC5sYXN0SW5kZXhPZihcIl1cIik7XG4gICAgICAgICAgICAgICAgaWQgPSBwb3NzaWJseUVsYWJvcmF0ZWRJZC5zdWJzdHJpbmcoc3RhcnQsIGVuZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlkID0gcG9zc2libHlFbGFib3JhdGVkSWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgb3V0SFRNTCA9IFwiPGE+XCIgKyBUYWJsZVZpZXcuaGFuZGxlRWxhYm9yYXRpb25DbGljayhwb3NzaWJseUVsYWJvcmF0ZWRJZCkgKyBcIjwvYT4gXCI7XG4gICAgICAgICAgICByZXR1cm4gb3V0SFRNTCArIChjbGlja0Z1bmN0aW9ucy5tYXAoKGZuKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZuKGlkKTtcbiAgICAgICAgICAgIH0pLmpvaW4oXCIgXCIpKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBnZXRHcm91cEJ5Q29sdW1uUmVuZGVyZXIoY29sdW1uSW5mbzogQ29sdW1uSW5mbykge1xuICAgICAgICB2YXIgcmVuZGVyZXIgPSBUYWJsZVZpZXcuc3RhbmRhcmRSZW5kZXI7XG4gICAgICAgIHJldHVybiByZW5kZXJlcjtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBoYW5kbGVFbGFib3JhdGlvbkNsaWNrKGVsYWJvcmF0YWJsZTogc3RyaW5nKSA6c3RyaW5nIHtcbiAgICAgICAgaWYoZWxhYm9yYXRhYmxlLmluZGV4T2YoXCJbXCIpIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIGVsYWJvcmF0YWJsZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZXhlY0FycmF5OiBSZWdFeHBFeGVjQXJyYXkgPSBFTEFCT1JBVElPTl9SRUdFWC5leGVjKGVsYWJvcmF0YWJsZSk7XG4gICAgICAgIGlmKGV4ZWNBcnJheSA9PSBudWxsIHx8IGV4ZWNBcnJheS5sZW5ndGggPCA0KSB7XG4gICAgICAgICAgICByZXR1cm4gZWxhYm9yYXRhYmxlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFwiPHNwYW4gY2xhc3M9J2V4dHJhJz5cIiArIGV4ZWNBcnJheVsxXSArIFwiPC9zcGFuPjxzcGFuPlwiICsgZXhlY0FycmF5WzJdICsgXCI8L3NwYW4+PHNwYW4gY2xhc3M9J2V4dHJhJz5cIiArIGV4ZWNBcnJheVszXSArIFwiPC9zcGFuPlwiO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0Q29sdW1ucyhjb2x1bW5zSW5mbzogQ29sdW1uSW5mb1tdKSB7XG4gICAgICAgIHZhciBjb2x1bW5zOiB7fVtdID0gW107XG5cbiAgICAgICAgLy8gVE9ETzogZGVsZXRlIGNvbHVtbiByZW1vdmFsIGNvZGU/XG4gICAgICAgIHZhciBjYW5SZW1vdmVHcm91cHMgPSBmYWxzZTsvL3RoaXMucmVzdWx0U2V0LmdldEdyb3VwaW5nQ29sdW1uc0NvdW50KCkgPiAxIHx8IHRoaXMucmVzdWx0U2V0LmNvbHVtbnNbMF0udGV4dCAhPT0gXCJcIjtcbiAgICAgICAgdmFyIGNhblJlbW92ZVNlbGVjdHMgPSBmYWxzZTsvL3RoaXMucmVzdWx0U2V0LmdldE1ldHJpY0NvbHVtbnMoKS5sZW5ndGggPiAxO1xuXG4gICAgICAgIHZhciBzaG93VG90YWxzOiBib29sZWFuID0gdGhpcy5yZXN1bHRTZXQudGFibGUubGVuZ3RoID4gMTtcblxuICAgICAgICBpZih0aGlzLnNob3dSb3dOdW1iZXJDb2x1bW4pIHtcbiAgICAgICAgICAgIGNvbHVtbnMucHVzaCh7IHRpdGxlOiBcIiNcIiwgXCJzb3J0YWJsZVwiOiBmYWxzZSB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbHVtbnNJbmZvLmZvckVhY2goKGNvbHVtbkluZm8pID0+IHtcbiAgICAgICAgICAgIHZhciBoZWFkZXJUZXh0OiBzdHJpbmcgPSBfLmVzY2FwZShjb2x1bW5JbmZvLnRleHQpO1xuICAgICAgICAgICAgaWYoY29sdW1uSW5mby50eXBlID09IENvbHVtblR5cGUuR1JPVVBJTkcgfHwgY29sdW1uSW5mby50eXBlID09IENvbHVtblR5cGUuVElNRSkge1xuICAgICAgICAgICAgICAgIGhlYWRlclRleHQgPSAnPGRpdiBjbGFzcz1cImdyb3VwYnktY29sLWhlYWRlclwiIHRpdGxlPVwiJytoZWFkZXJUZXh0KydcIj4nICsgaGVhZGVyVGV4dCArICc8L2Rpdj4nO1xuICAgICAgICAgICAgICAgIGNvbHVtbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIFwidGl0bGVcIiA6IGhlYWRlclRleHQgKyAoY2FuUmVtb3ZlR3JvdXBzID8gdGhpcy5nZXRSZW1vdmVDb2x1bW5IVE1MKCkgOiBcIlwiKSxcbiAgICAgICAgICAgICAgICAgICAgXCJvcmRlclNlcXVlbmNlXCI6IFsgXCJhc2NcIiwgXCJkZXNjXCIgXSxcbiAgICAgICAgICAgICAgICAgICAgXCJjbGFzc05hbWVcIjogXCJmXCIsXG4gICAgICAgICAgICAgICAgICAgIFwicmVuZGVyXCI6IFRhYmxlVmlldy5nZXRHcm91cEJ5Q29sdW1uUmVuZGVyZXIoY29sdW1uSW5mbylcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaGVhZGVyVGV4dCA9ICc8ZGl2IGNsYXNzPVwic2VsZWN0LWNvbC1oZWFkZXJcIiB0aXRsZT1cIicraGVhZGVyVGV4dCsnXCI+JyArIGhlYWRlclRleHQgKyAnPC9kaXY+JztcbiAgICAgICAgICAgICAgICBjb2x1bW5zLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBcInRpdGxlXCIgOiBoZWFkZXJUZXh0ICsgKGNhblJlbW92ZVNlbGVjdHMgPyB0aGlzLmdldFJlbW92ZUNvbHVtbkhUTUwoKSA6IFwiXCIpICtcbiAgICAgICAgICAgICAgICAgICAgICAgIChzaG93VG90YWxzID8gVGFibGVWaWV3LmdldFRvdGFsc0hUTUwoY29sdW1uSW5mbykgOiBcIlwiKSxcbiAgICAgICAgICAgICAgICAgICAgXCJvcmRlclNlcXVlbmNlXCI6IFsgXCJkZXNjXCIsIFwiYXNjXCIgXSxcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwibnVtZXJpY1wiLFxuICAgICAgICAgICAgICAgICAgICBcImNsYXNzTmFtZVwiOiBjb2x1bW5JbmZvLmlzRGlzdGluY3RDb2x1bW4gPyBcImRcIiA6IFwibVwiLFxuICAgICAgICAgICAgICAgICAgICBcInJlbmRlclwiOiAgVGFibGVWaWV3LmdldFNlbGVjdENvbHVtblJlbmRlcmVyKGNvbHVtbkluZm8pXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBjb2x1bW5zO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGdldFRvdGFsc0hUTUwoY29sdW1uSW5mbzogQ29sdW1uSW5mbykge1xuICAgICAgICB2YXIgaHRtbCA9ICc8YnIvPic7XG4gICAgICAgIGh0bWwgKz0gJzxkaXYgY2xhc3M9XCJjb2x1bW4tdG90YWxzXCIgJyArIChjb2x1bW5JbmZvLmlzTG9jYWxUb3RhbCA/XG4gICAgICAgICAgICAndGl0bGU9XCJTdW0gb2YgdGhlIGNvbHVtbiB2YWx1ZXMgaW4gdGhlIHRhYmxlLiBUcnVlIHRvdGFsIHZhbHVlIG9mIG1ldHJpYyB1bmtub3duLlwiJyA6ICcnKSArXG4gICAgICAgICAgICAnPic7XG4gICAgICAgIGlmKGNvbHVtbkluZm8uaXNMb2NhbFRvdGFsKSB7XG4gICAgICAgICAgICBodG1sKz0nJiN4MkI1MTsnO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0b3RhbCA9IGNvbHVtbkluZm8uY29sdW1uVG90YWw7XG4gICAgICAgIHZhciBhZnRlckRvdFByZWNpc2lvbiA9IDEwMDAwMDAwO1xuICAgICAgICB0b3RhbCA9IE1hdGgucm91bmQodG90YWwgKiBhZnRlckRvdFByZWNpc2lvbikgLyBhZnRlckRvdFByZWNpc2lvbjtcbiAgICAgICAgaHRtbCArPSBUYWJsZVZpZXcuZm9ybWF0TnVtYmVyKHRvdGFsKTtcbiAgICAgICAgaWYoY29sdW1uSW5mby5pc0xvY2FsVG90YWwpIHtcbiAgICAgICAgICAgIGh0bWwgKz1cIjwvZGl2PlwiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBodG1sO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGZvcm1hdE51bWJlcih2YWx1ZTogbnVtYmVyKSA6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBUYWJsZVZpZXcuYWRkQ29tbWFzKHZhbHVlLnRvU3RyaW5nKCkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGFkZENvbW1hcyhuU3RyOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBuU3RyICs9ICcnO1xuICAgICAgICB2YXIgeCA9IG5TdHIuc3BsaXQoJy4nKTtcbiAgICAgICAgdmFyIHgxID0geFswXTtcbiAgICAgICAgdmFyIHgyID0geC5sZW5ndGggPiAxID8gJy4nICsgeFsxXSA6ICcnO1xuICAgICAgICB2YXIgcmd4ID0gLyhcXGQrKShcXGR7M30pLztcbiAgICAgICAgd2hpbGUgKHJneC50ZXN0KHgxKSkge1xuICAgICAgICAgICAgeDEgPSB4MS5yZXBsYWNlKHJneCwgJyQxJyArICcsJyArICckMicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB4MSArIHgyO1xuICAgIH1cblxuICAgIHJlbW92ZSgpOiBCYWNrYm9uZS5WaWV3PGFueT4ge1xuICAgICAgICAvLyBjbGVhbiB1cCBmaXhlZCBoZWFkZXJzXG4gICAgICAgICQod2luZG93KS5vZmYoJ3Jlc2l6ZS50YWJsZXZpZXctJyt0aGlzLmNpZCk7XG4gICAgICAgICQoJy5wcmVzZW50YXRpb25ncmlkYm94Jykub2ZmKCdzY3JvbGwudGFibGV2aWV3LScrdGhpcy5jaWQpO1xuICAgICAgICB0aGlzLiQoJy50YWJsZXJlc3VsdCcpLm9mZignZHJhdy5kdCcpO1xuXG4gICAgICAgIC8vIHdlIGhhdmUgdG8gY2xlYW4gdXAgZGF0YSB0YWJsZXMgcGx1Z2luIHRvIGF2b2lkIGEgbWVtb3J5IGxlYWtcbiAgICAgICAgVGFibGVWaWV3LmRlc3Ryb3lEYXRhVGFibGVzKCk7XG5cbiAgICAgICAgLy8gaW4gY2FzZSB0aGUgdmlldyBsZWFrcywgcmVkdWNlIHRoZSByZXRhaW5lZCBtZW1vcnkgc2l6ZVxuICAgICAgICB0aGlzLnJlc3VsdFNldCA9IG51bGw7XG5cbiAgICAgICAgc3VwZXIucmVtb3ZlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIE9ubHkgY29udGFpbnMgbmVjZXNzYXJ5IGNsZWFudXAgc3RlcHMgZnJvbSBEYXRhVGFibGUgYXBpIGRlc3Ryb3koKS5cbiAgICAvLyBUaGUgb3JpZ2luYWwgbWV0aG9kIGhhcyBhIGJ1ZyB0aGF0IGNhdXNlcyBhIHN0YWNrIG92ZXJmbG93IHdoZW4gdGhlIHRhYmxlIGRhdGEgaXMgbGFyZ2UuXG4gICAgLy8gTm90ZTogdGhpcyBudWtlcyBhbGwgdGhlIGRhdGF0YWJsZXMgaW5zdGFuY2VzIG9uIHRoZSBwYWdlXG4gICAgcHJpdmF0ZSBzdGF0aWMgZGVzdHJveURhdGFUYWJsZXMoKSB7XG4gICAgICAgICQuZm4uZGF0YVRhYmxlLnNldHRpbmdzLmZvckVhY2goZnVuY3Rpb24gKGR0U2V0dGluZ3M6IGFueSkge1xuICAgICAgICAgICAgdmFyIHRhYmxlID0gZHRTZXR0aW5ncy5uVGFibGU7XG4gICAgICAgICAgICB2YXIgdGJvZHkgPSBkdFNldHRpbmdzLm5UQm9keTtcbiAgICAgICAgICAgIHZhciBqcVRhYmxlID0gJCh0YWJsZSk7XG4gICAgICAgICAgICB2YXIganFXcmFwcGVyID0gJChkdFNldHRpbmdzLm5UYWJsZVdyYXBwZXIpO1xuICAgICAgICAgICAganFXcmFwcGVyLnVuYmluZCgnLkRUJykuZmluZCgnOm5vdCh0Ym9keSAqKScpLnVuYmluZCgnLkRUJyk7XG4gICAgICAgICAgICAkKHdpbmRvdykudW5iaW5kKCcuRFQtJyArIGR0U2V0dGluZ3Muc0luc3RhbmNlKTtcblxuICAgICAgICAgICAgLy8gaGFzIHRvIGJlIHJlbW92ZSgpIHJhdGhlciB0aGFuIGRldGFjaCgpIGxpa2UgaW4gdGhlIG9yaWdpbmFsIHRvIGF2b2lkIGV2ZW50IG1lbW9yeSBsZWFrc1xuICAgICAgICAgICAganFUYWJsZS5yZW1vdmUoKTtcbiAgICAgICAgICAgIGpxV3JhcHBlci5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gd2lwZSBvdXQgYWxsIHRoZSBzZXR0aW5nc1xuICAgICAgICAkLmZuLmRhdGFUYWJsZS5zZXR0aW5ncy5zcGxpY2UoMCwgJC5mbi5kYXRhVGFibGUuc2V0dGluZ3MubGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvLyBTdGF0ZS9oYXNoIGhhbmRsaW5nXG4gICAgcHJpdmF0ZSBzdGF0ZTogYW55ID0ge307XG5cbiAgICBwdWJsaWMgZ2V0U3RhdGUoKTogYW55IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGU7XG4gICAgfVxuXG4gICAgcHVibGljIHNldFN0YXRlKHN0YXRlOiBhbnkpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgIH1cblxuXG4gICAgcHJpdmF0ZSBzYXZlVGFibGVTdGF0ZShzZXR0aW5nczogYW55LCBkYXRhOiB7W2luZGV4OnN0cmluZ106IHN0cmluZ30pIHtcbiAgICAgICAgZm9yICh2YXIgdGFibGVTZXR0aW5nS2V5IGluIGRhdGEpIHtcbiAgICAgICAgICAgIGlmKCFkYXRhLmhhc093blByb3BlcnR5KHRhYmxlU2V0dGluZ0tleSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBzZXR0aW5nVmFsdWUgPSBkYXRhW3RhYmxlU2V0dGluZ0tleV07XG4gICAgICAgICAgICBpZihzZXR0aW5nVmFsdWUgPT09IFwiXCIgfHwgc2V0dGluZ1ZhbHVlID09PSBudWxsIHx8IHNldHRpbmdWYWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHNldHRpbmdWYWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAvLyBkb24ndCBzdG9yZSB0aGlzIHZhbHVlIGFuZCBjbGVhciBhbnkgcHJldmlvdXNseSBleGlzdGluZyB2YWx1ZVxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnN0YXRlW3RhYmxlU2V0dGluZ0tleV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVbdGFibGVTZXR0aW5nS2V5XSA9IHNldHRpbmdWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRyaWdnZXIoXCJzdGF0ZWNoYW5nZVwiKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGxvYWRUYWJsZVN0YXRlKHNldHRpbmdzOiBhbnkpIHtcbiAgICAgICAgcmV0dXJuIF8uZXh0ZW5kKHt0aW1lOiArbmV3IERhdGUoKX0sIHRoaXMuc3RhdGUpOyAvLyB0aW1lIGZpZWxkIGhhcyB0byBiZSBzZXQgb3IgRGF0YVRhYmxlcyByZWplY3RzIHRoZSBzdGF0ZVxuICAgIH1cblxuICAgIHByaXZhdGUgc2F2ZVRhYmxlU3RhdGVGaWx0ZXJQYXJhbXMoc2V0dGluZ3M6IGFueSwgZGF0YTogYW55KSB7XG4gICAgICAgIC8vIHJlbW92ZSB1bm5lY2Vzc2FyeSBvcHRpb25zIHRvIGtlZXAgVVJMIGNsZWFuZXJcbiAgICAgICAgLy8gbnVsbCB2YWx1ZXMgd29uJ3QgYmUgc2VyaWFsaXplZCBhbmQgcHJldmlvdXMgdmFsdWVzIHdpbGwgYmUgY2xlYXJlZFxuICAgICAgICBkYXRhLnRpbWUgPSBudWxsO1xuICAgICAgICBkYXRhLmNvbHVtbnMgPSBudWxsO1xuICAgICAgICBpZihkYXRhLnNlYXJjaC5zZWFyY2gudHJpbSgpICE9PSBcIlwiKSB7XG4gICAgICAgICAgICBkYXRhLnNlYXJjaCA9IGRhdGEuc2VhcmNoLnNlYXJjaDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRhdGEuc2VhcmNoID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGRhdGEubGVuZ3RoID0gbnVsbDtcbiAgICAgICAgZGF0YS5lbmQgPSBudWxsO1xuICAgICAgICBkYXRhLnN0YXJ0ID0gKGRhdGEuc3RhcnQgPT09IDApID8gbnVsbCA6IGRhdGEuc3RhcnQ7XG5cbiAgICAgICAgLy8gcmVuYW1lIHRvIHNob3J0ZW5cbiAgICAgICAgaWYoZGF0YS5vcmRlcikge1xuICAgICAgICAgICAgZGF0YS5zb3J0ID0gZGF0YS5vcmRlcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRhdGEuc29ydCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZGF0YS5vcmRlciA9IG51bGw7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBsb2FkVGFibGVTdGF0ZUZpbHRlclBhcmFtcyhzZXR0aW5nczogYW55LCBkYXRhOiBhbnkpIHtcbiAgICAgICAgLy8gcmVzdG9yZSBkZWZhdWx0cyB0aGF0IHdlIGRvbid0IHN0b3JlIGluIHRoZSBVUkxcbiAgICAgICAgZGF0YS5vcmRlciA9IGRhdGEuc29ydDtcbiAgICAgICAgaWYoIWRhdGEub3JkZXIpIHtcbiAgICAgICAgICAgIGRhdGEub3JkZXIgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBpZighZGF0YS5zdGFydCkge1xuICAgICAgICAgICAgZGF0YS5zdGFydCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgZGF0YS5sZW5ndGggPSBwYWdlUm93Q291bnQ7XG4gICAgICAgIGRhdGEuZW5kID0gZGF0YS5zdGFydCArIHBhZ2VSb3dDb3VudDtcblxuICAgICAgICBpZighZGF0YS5jb2x1bW5zKSB7XG4gICAgICAgICAgICBkYXRhLmNvbHVtbnMgPSBbXTtcbiAgICAgICAgICAgIHZhciBjb2x1bW5Db3VudCA9IHRoaXMucmVzdWx0U2V0LmNvbHVtbnMubGVuZ3RoICsgKHRoaXMuc2hvd1Jvd051bWJlckNvbHVtbiA/IDEgOiAwKTtcbiAgICAgICAgICAgIF8udGltZXMoY29sdW1uQ291bnQsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGRhdGEuY29sdW1ucy5wdXNoKHtzZWFyY2g6IHt9LCB2aXNpYmxlOiB0cnVlfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRhdGEuc2VhcmNoID0ge1wic2VhcmNoXCI6IGRhdGEuc2VhcmNofTtcbiAgICB9XG59XG5cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHRhYmxldmlldy90YWJsZXZpZXcudHNcbiAqKi8iXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBY0E7QUFFQTtBQUNBO0FBRUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUdBO0FBdWZBO0FBQ0E7O0FBNkVBO0FBbmtCQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBOzs7OzsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 387:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! DataTables jQuery UI integration\n * ©2011-2014 SpryMedia Ltd - datatables.net/license\n */\n\n/**\n * DataTables integration for jQuery UI. This requires jQuery UI and\n * DataTables 1.10 or newer.\n *\n * This file sets the defaults and adds options to DataTables to style its\n * controls using Bootstrap. See http://datatables.net/manual/styling/jqueryui\n * for further information.\n */\n(function(window, document, undefined){\n\nvar factory = function( $, DataTable ) {\n\"use strict\";\n\n\nvar sort_prefix = 'css_right ui-icon ui-icon-';\nvar toolbar_prefix = 'fg-toolbar ui-toolbar ui-widget-header ui-helper-clearfix ui-corner-';\n\n/* Set the defaults for DataTables initialisation */\n$.extend( true, DataTable.defaults, {\n\tdom:\n\t\t'<\"'+toolbar_prefix+'tl ui-corner-tr\"lfr>'+\n\t\t't'+\n\t\t'<\"'+toolbar_prefix+'bl ui-corner-br\"ip>',\n\trenderer: 'jqueryui'\n} );\n\n\n$.extend( DataTable.ext.classes, {\n\t\"sWrapper\":            \"dataTables_wrapper dt-jqueryui\",\n\n\t/* Full numbers paging buttons */\n\t\"sPageButton\":         \"fg-button ui-button ui-state-default\",\n\t\"sPageButtonActive\":   \"ui-state-disabled\",\n\t\"sPageButtonDisabled\": \"ui-state-disabled\",\n\n\t/* Features */\n\t\"sPaging\": \"dataTables_paginate fg-buttonset ui-buttonset fg-buttonset-multi \"+\n\t\t\"ui-buttonset-multi paging_\", /* Note that the type is postfixed */\n\n\t/* Sorting */\n\t\"sSortAsc\":            \"ui-state-default sorting_asc\",\n\t\"sSortDesc\":           \"ui-state-default sorting_desc\",\n\t\"sSortable\":           \"ui-state-default sorting\",\n\t\"sSortableAsc\":        \"ui-state-default sorting_asc_disabled\",\n\t\"sSortableDesc\":       \"ui-state-default sorting_desc_disabled\",\n\t\"sSortableNone\":       \"ui-state-default sorting_disabled\",\n\t\"sSortIcon\":           \"DataTables_sort_icon\",\n\n\t/* Scrolling */\n\t\"sScrollHead\": \"dataTables_scrollHead \"+\"ui-state-default\",\n\t\"sScrollFoot\": \"dataTables_scrollFoot \"+\"ui-state-default\",\n\n\t/* Misc */\n\t\"sHeaderTH\":  \"ui-state-default\",\n\t\"sFooterTH\":  \"ui-state-default\"\n} );\n\n\nDataTable.ext.renderer.header.jqueryui = function ( settings, cell, column, classes ) {\n\t// Calculate what the unsorted class should be\n\tvar noSortAppliedClass = sort_prefix+'carat-2-n-s';\n\tvar asc = $.inArray('asc', column.asSorting) !== -1;\n\tvar desc = $.inArray('desc', column.asSorting) !== -1;\n\n\tif ( !column.bSortable || (!asc && !desc) ) {\n\t\tnoSortAppliedClass = '';\n\t}\n\telse if ( asc && !desc ) {\n\t\tnoSortAppliedClass = sort_prefix+'carat-1-n';\n\t}\n\telse if ( !asc && desc ) {\n\t\tnoSortAppliedClass = sort_prefix+'carat-1-s';\n\t}\n\n\t// Setup the DOM structure\n\t$('<div/>')\n\t\t.addClass( 'DataTables_sort_wrapper' )\n\t\t.append( cell.contents() )\n\t\t.append( $('<span/>')\n\t\t\t.addClass( classes.sSortIcon+' '+noSortAppliedClass )\n\t\t)\n\t\t.appendTo( cell );\n\n\t// Attach a sort listener to update on sort\n\t$(settings.nTable).on( 'order.dt', function ( e, settings, sorting, columns ) {\n\t\tvar colIdx = column.idx;\n\n\t\tcell\n\t\t\t.removeClass( classes.sSortAsc +\" \"+classes.sSortDesc )\n\t\t\t.addClass( columns[ colIdx ] == 'asc' ?\n\t\t\t\tclasses.sSortAsc : columns[ colIdx ] == 'desc' ?\n\t\t\t\t\tclasses.sSortDesc :\n\t\t\t\t\tcolumn.sSortingClass\n\t\t\t);\n\n\t\tcell\n\t\t\t.find( 'span.'+classes.sSortIcon )\n\t\t\t.removeClass(\n\t\t\t\tsort_prefix+'triangle-1-n' +\" \"+\n\t\t\t\tsort_prefix+'triangle-1-s' +\" \"+\n\t\t\t\tsort_prefix+'carat-2-n-s' +\" \"+\n\t\t\t\tsort_prefix+'carat-1-n' +\" \"+\n\t\t\t\tsort_prefix+'carat-1-s'\n\t\t\t)\n\t\t\t.addClass( columns[ colIdx ] == 'asc' ?\n\t\t\t\tsort_prefix+'triangle-1-n' : columns[ colIdx ] == 'desc' ?\n\t\t\t\t\tsort_prefix+'triangle-1-s' :\n\t\t\t\t\tnoSortAppliedClass\n\t\t\t);\n\t} );\n};\n\n\n/*\n * TableTools jQuery UI compatibility\n * Required TableTools 2.1+\n */\nif ( DataTable.TableTools ) {\n\t$.extend( true, DataTable.TableTools.classes, {\n\t\t\"container\": \"DTTT_container ui-buttonset ui-buttonset-multi\",\n\t\t\"buttons\": {\n\t\t\t\"normal\": \"DTTT_button ui-button ui-state-default\"\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"container\": \"DTTT_collection ui-buttonset ui-buttonset-multi\"\n\t\t}\n\t} );\n}\n\n}; // /factory\n\n\n// Define as an AMD module if possible\nif ( true ) {\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(385)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n}\nelse if ( typeof exports === 'object' ) {\n    // Node/CommonJS\n    factory( require('jquery'), require('datatables') );\n}\nelse if ( jQuery ) {\n\t// Otherwise simply initialise as normal, stopping multiple evaluation\n\tfactory( jQuery, jQuery.fn.dataTable );\n}\n\n\n})(window, document);\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzg3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vdGFibGV2aWV3L2RhdGFUYWJsZXMuanF1ZXJ5dWkuanM/NDE0NiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgRGF0YVRhYmxlcyBqUXVlcnkgVUkgaW50ZWdyYXRpb25cbiAqIMKpMjAxMS0yMDE0IFNwcnlNZWRpYSBMdGQgLSBkYXRhdGFibGVzLm5ldC9saWNlbnNlXG4gKi9cblxuLyoqXG4gKiBEYXRhVGFibGVzIGludGVncmF0aW9uIGZvciBqUXVlcnkgVUkuIFRoaXMgcmVxdWlyZXMgalF1ZXJ5IFVJIGFuZFxuICogRGF0YVRhYmxlcyAxLjEwIG9yIG5ld2VyLlxuICpcbiAqIFRoaXMgZmlsZSBzZXRzIHRoZSBkZWZhdWx0cyBhbmQgYWRkcyBvcHRpb25zIHRvIERhdGFUYWJsZXMgdG8gc3R5bGUgaXRzXG4gKiBjb250cm9scyB1c2luZyBCb290c3RyYXAuIFNlZSBodHRwOi8vZGF0YXRhYmxlcy5uZXQvbWFudWFsL3N0eWxpbmcvanF1ZXJ5dWlcbiAqIGZvciBmdXJ0aGVyIGluZm9ybWF0aW9uLlxuICovXG4oZnVuY3Rpb24od2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKXtcblxudmFyIGZhY3RvcnkgPSBmdW5jdGlvbiggJCwgRGF0YVRhYmxlICkge1xuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIHNvcnRfcHJlZml4ID0gJ2Nzc19yaWdodCB1aS1pY29uIHVpLWljb24tJztcbnZhciB0b29sYmFyX3ByZWZpeCA9ICdmZy10b29sYmFyIHVpLXRvb2xiYXIgdWktd2lkZ2V0LWhlYWRlciB1aS1oZWxwZXItY2xlYXJmaXggdWktY29ybmVyLSc7XG5cbi8qIFNldCB0aGUgZGVmYXVsdHMgZm9yIERhdGFUYWJsZXMgaW5pdGlhbGlzYXRpb24gKi9cbiQuZXh0ZW5kKCB0cnVlLCBEYXRhVGFibGUuZGVmYXVsdHMsIHtcblx0ZG9tOlxuXHRcdCc8XCInK3Rvb2xiYXJfcHJlZml4Kyd0bCB1aS1jb3JuZXItdHJcImxmcj4nK1xuXHRcdCd0Jytcblx0XHQnPFwiJyt0b29sYmFyX3ByZWZpeCsnYmwgdWktY29ybmVyLWJyXCJpcD4nLFxuXHRyZW5kZXJlcjogJ2pxdWVyeXVpJ1xufSApO1xuXG5cbiQuZXh0ZW5kKCBEYXRhVGFibGUuZXh0LmNsYXNzZXMsIHtcblx0XCJzV3JhcHBlclwiOiAgICAgICAgICAgIFwiZGF0YVRhYmxlc193cmFwcGVyIGR0LWpxdWVyeXVpXCIsXG5cblx0LyogRnVsbCBudW1iZXJzIHBhZ2luZyBidXR0b25zICovXG5cdFwic1BhZ2VCdXR0b25cIjogICAgICAgICBcImZnLWJ1dHRvbiB1aS1idXR0b24gdWktc3RhdGUtZGVmYXVsdFwiLFxuXHRcInNQYWdlQnV0dG9uQWN0aXZlXCI6ICAgXCJ1aS1zdGF0ZS1kaXNhYmxlZFwiLFxuXHRcInNQYWdlQnV0dG9uRGlzYWJsZWRcIjogXCJ1aS1zdGF0ZS1kaXNhYmxlZFwiLFxuXG5cdC8qIEZlYXR1cmVzICovXG5cdFwic1BhZ2luZ1wiOiBcImRhdGFUYWJsZXNfcGFnaW5hdGUgZmctYnV0dG9uc2V0IHVpLWJ1dHRvbnNldCBmZy1idXR0b25zZXQtbXVsdGkgXCIrXG5cdFx0XCJ1aS1idXR0b25zZXQtbXVsdGkgcGFnaW5nX1wiLCAvKiBOb3RlIHRoYXQgdGhlIHR5cGUgaXMgcG9zdGZpeGVkICovXG5cblx0LyogU29ydGluZyAqL1xuXHRcInNTb3J0QXNjXCI6ICAgICAgICAgICAgXCJ1aS1zdGF0ZS1kZWZhdWx0IHNvcnRpbmdfYXNjXCIsXG5cdFwic1NvcnREZXNjXCI6ICAgICAgICAgICBcInVpLXN0YXRlLWRlZmF1bHQgc29ydGluZ19kZXNjXCIsXG5cdFwic1NvcnRhYmxlXCI6ICAgICAgICAgICBcInVpLXN0YXRlLWRlZmF1bHQgc29ydGluZ1wiLFxuXHRcInNTb3J0YWJsZUFzY1wiOiAgICAgICAgXCJ1aS1zdGF0ZS1kZWZhdWx0IHNvcnRpbmdfYXNjX2Rpc2FibGVkXCIsXG5cdFwic1NvcnRhYmxlRGVzY1wiOiAgICAgICBcInVpLXN0YXRlLWRlZmF1bHQgc29ydGluZ19kZXNjX2Rpc2FibGVkXCIsXG5cdFwic1NvcnRhYmxlTm9uZVwiOiAgICAgICBcInVpLXN0YXRlLWRlZmF1bHQgc29ydGluZ19kaXNhYmxlZFwiLFxuXHRcInNTb3J0SWNvblwiOiAgICAgICAgICAgXCJEYXRhVGFibGVzX3NvcnRfaWNvblwiLFxuXG5cdC8qIFNjcm9sbGluZyAqL1xuXHRcInNTY3JvbGxIZWFkXCI6IFwiZGF0YVRhYmxlc19zY3JvbGxIZWFkIFwiK1widWktc3RhdGUtZGVmYXVsdFwiLFxuXHRcInNTY3JvbGxGb290XCI6IFwiZGF0YVRhYmxlc19zY3JvbGxGb290IFwiK1widWktc3RhdGUtZGVmYXVsdFwiLFxuXG5cdC8qIE1pc2MgKi9cblx0XCJzSGVhZGVyVEhcIjogIFwidWktc3RhdGUtZGVmYXVsdFwiLFxuXHRcInNGb290ZXJUSFwiOiAgXCJ1aS1zdGF0ZS1kZWZhdWx0XCJcbn0gKTtcblxuXG5EYXRhVGFibGUuZXh0LnJlbmRlcmVyLmhlYWRlci5qcXVlcnl1aSA9IGZ1bmN0aW9uICggc2V0dGluZ3MsIGNlbGwsIGNvbHVtbiwgY2xhc3NlcyApIHtcblx0Ly8gQ2FsY3VsYXRlIHdoYXQgdGhlIHVuc29ydGVkIGNsYXNzIHNob3VsZCBiZVxuXHR2YXIgbm9Tb3J0QXBwbGllZENsYXNzID0gc29ydF9wcmVmaXgrJ2NhcmF0LTItbi1zJztcblx0dmFyIGFzYyA9ICQuaW5BcnJheSgnYXNjJywgY29sdW1uLmFzU29ydGluZykgIT09IC0xO1xuXHR2YXIgZGVzYyA9ICQuaW5BcnJheSgnZGVzYycsIGNvbHVtbi5hc1NvcnRpbmcpICE9PSAtMTtcblxuXHRpZiAoICFjb2x1bW4uYlNvcnRhYmxlIHx8ICghYXNjICYmICFkZXNjKSApIHtcblx0XHRub1NvcnRBcHBsaWVkQ2xhc3MgPSAnJztcblx0fVxuXHRlbHNlIGlmICggYXNjICYmICFkZXNjICkge1xuXHRcdG5vU29ydEFwcGxpZWRDbGFzcyA9IHNvcnRfcHJlZml4KydjYXJhdC0xLW4nO1xuXHR9XG5cdGVsc2UgaWYgKCAhYXNjICYmIGRlc2MgKSB7XG5cdFx0bm9Tb3J0QXBwbGllZENsYXNzID0gc29ydF9wcmVmaXgrJ2NhcmF0LTEtcyc7XG5cdH1cblxuXHQvLyBTZXR1cCB0aGUgRE9NIHN0cnVjdHVyZVxuXHQkKCc8ZGl2Lz4nKVxuXHRcdC5hZGRDbGFzcyggJ0RhdGFUYWJsZXNfc29ydF93cmFwcGVyJyApXG5cdFx0LmFwcGVuZCggY2VsbC5jb250ZW50cygpIClcblx0XHQuYXBwZW5kKCAkKCc8c3Bhbi8+Jylcblx0XHRcdC5hZGRDbGFzcyggY2xhc3Nlcy5zU29ydEljb24rJyAnK25vU29ydEFwcGxpZWRDbGFzcyApXG5cdFx0KVxuXHRcdC5hcHBlbmRUbyggY2VsbCApO1xuXG5cdC8vIEF0dGFjaCBhIHNvcnQgbGlzdGVuZXIgdG8gdXBkYXRlIG9uIHNvcnRcblx0JChzZXR0aW5ncy5uVGFibGUpLm9uKCAnb3JkZXIuZHQnLCBmdW5jdGlvbiAoIGUsIHNldHRpbmdzLCBzb3J0aW5nLCBjb2x1bW5zICkge1xuXHRcdHZhciBjb2xJZHggPSBjb2x1bW4uaWR4O1xuXG5cdFx0Y2VsbFxuXHRcdFx0LnJlbW92ZUNsYXNzKCBjbGFzc2VzLnNTb3J0QXNjICtcIiBcIitjbGFzc2VzLnNTb3J0RGVzYyApXG5cdFx0XHQuYWRkQ2xhc3MoIGNvbHVtbnNbIGNvbElkeCBdID09ICdhc2MnID9cblx0XHRcdFx0Y2xhc3Nlcy5zU29ydEFzYyA6IGNvbHVtbnNbIGNvbElkeCBdID09ICdkZXNjJyA/XG5cdFx0XHRcdFx0Y2xhc3Nlcy5zU29ydERlc2MgOlxuXHRcdFx0XHRcdGNvbHVtbi5zU29ydGluZ0NsYXNzXG5cdFx0XHQpO1xuXG5cdFx0Y2VsbFxuXHRcdFx0LmZpbmQoICdzcGFuLicrY2xhc3Nlcy5zU29ydEljb24gKVxuXHRcdFx0LnJlbW92ZUNsYXNzKFxuXHRcdFx0XHRzb3J0X3ByZWZpeCsndHJpYW5nbGUtMS1uJyArXCIgXCIrXG5cdFx0XHRcdHNvcnRfcHJlZml4Kyd0cmlhbmdsZS0xLXMnICtcIiBcIitcblx0XHRcdFx0c29ydF9wcmVmaXgrJ2NhcmF0LTItbi1zJyArXCIgXCIrXG5cdFx0XHRcdHNvcnRfcHJlZml4KydjYXJhdC0xLW4nICtcIiBcIitcblx0XHRcdFx0c29ydF9wcmVmaXgrJ2NhcmF0LTEtcydcblx0XHRcdClcblx0XHRcdC5hZGRDbGFzcyggY29sdW1uc1sgY29sSWR4IF0gPT0gJ2FzYycgP1xuXHRcdFx0XHRzb3J0X3ByZWZpeCsndHJpYW5nbGUtMS1uJyA6IGNvbHVtbnNbIGNvbElkeCBdID09ICdkZXNjJyA/XG5cdFx0XHRcdFx0c29ydF9wcmVmaXgrJ3RyaWFuZ2xlLTEtcycgOlxuXHRcdFx0XHRcdG5vU29ydEFwcGxpZWRDbGFzc1xuXHRcdFx0KTtcblx0fSApO1xufTtcblxuXG4vKlxuICogVGFibGVUb29scyBqUXVlcnkgVUkgY29tcGF0aWJpbGl0eVxuICogUmVxdWlyZWQgVGFibGVUb29scyAyLjErXG4gKi9cbmlmICggRGF0YVRhYmxlLlRhYmxlVG9vbHMgKSB7XG5cdCQuZXh0ZW5kKCB0cnVlLCBEYXRhVGFibGUuVGFibGVUb29scy5jbGFzc2VzLCB7XG5cdFx0XCJjb250YWluZXJcIjogXCJEVFRUX2NvbnRhaW5lciB1aS1idXR0b25zZXQgdWktYnV0dG9uc2V0LW11bHRpXCIsXG5cdFx0XCJidXR0b25zXCI6IHtcblx0XHRcdFwibm9ybWFsXCI6IFwiRFRUVF9idXR0b24gdWktYnV0dG9uIHVpLXN0YXRlLWRlZmF1bHRcIlxuXHRcdH0sXG5cdFx0XCJjb2xsZWN0aW9uXCI6IHtcblx0XHRcdFwiY29udGFpbmVyXCI6IFwiRFRUVF9jb2xsZWN0aW9uIHVpLWJ1dHRvbnNldCB1aS1idXR0b25zZXQtbXVsdGlcIlxuXHRcdH1cblx0fSApO1xufVxuXG59OyAvLyAvZmFjdG9yeVxuXG5cbi8vIERlZmluZSBhcyBhbiBBTUQgbW9kdWxlIGlmIHBvc3NpYmxlXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcblx0ZGVmaW5lKCBbJ2pxdWVyeScsICdkYXRhdGFibGVzJ10sIGZhY3RvcnkgKTtcbn1cbmVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgKSB7XG4gICAgLy8gTm9kZS9Db21tb25KU1xuICAgIGZhY3RvcnkoIHJlcXVpcmUoJ2pxdWVyeScpLCByZXF1aXJlKCdkYXRhdGFibGVzJykgKTtcbn1cbmVsc2UgaWYgKCBqUXVlcnkgKSB7XG5cdC8vIE90aGVyd2lzZSBzaW1wbHkgaW5pdGlhbGlzZSBhcyBub3JtYWwsIHN0b3BwaW5nIG11bHRpcGxlIGV2YWx1YXRpb25cblx0ZmFjdG9yeSggalF1ZXJ5LCBqUXVlcnkuZm4uZGF0YVRhYmxlICk7XG59XG5cblxufSkod2luZG93LCBkb2N1bWVudCk7XG5cblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi90YWJsZXZpZXcvZGF0YVRhYmxlcy5qcXVlcnl1aS5qc1xuICoqIG1vZHVsZSBpZCA9IDM4N1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 389:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/// <reference path=\"../deps.d.ts\" />\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(1), __webpack_require__(2), __webpack_require__(8), __webpack_require__(391), __webpack_require__(12), __webpack_require__(28), __webpack_require__(390), __webpack_require__(392), __webpack_require__(394), __webpack_require__(395), __webpack_require__(397)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, $, _, Backbone, BackboneStickitForm, utils_1, columntype_1, graphviewutils_1, graphmodel_1) {\n    \"use strict\";\n    /// <amd-dependency path=\"backbone-stickit\" />\n    /// <amd-dependency path=\"graphview/graphview.css\" />\n    /// <amd-dependency path=\"graphview/graphview.html\"/>\n    var templateText = __webpack_require__(397);\n    \"use strict\";\n    var GraphView = (function (_super) {\n        __extends(GraphView, _super);\n        function GraphView() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.template = _.template(templateText);\n            _this.rendered = false;\n            _this.bindings = BackboneStickitForm.getBindings({\n                attributes: ['cumulative', 'stacked', 'percentOfAllMetricsSumForX',\n                    'percentOfEachMetricSum', 'logScale', 'movingAvg', 'minY', 'maxY'],\n                defaults: {\n                    events: ['change'] // don't trigger on keyup\n                }\n            });\n            return _this;\n        }\n        GraphView.prototype.initialize = function (options) {\n            this.$el.addClass(\"graphresultdiv\");\n            this.model = new graphmodel_1.default();\n            this.listenTo(this.model, \"change\", this.onModelChanged);\n            this.resultSet = options.resultSet;\n            this.autoChartSize = true;\n            $(window).on('resize.graphview-' + this.cid, _.bind(this.onWindowResize, this));\n        };\n        GraphView.prototype.onModelChanged = function () {\n            if (this.rendered) {\n                this.drawGChartWrapper();\n                this.trigger(\"statechange\");\n            }\n        };\n        GraphView.prototype.events = function () {\n            return {\n                \"click #graph_option_zoom\": this.onZoomChecked\n            };\n        };\n        GraphView.prototype.onZoomChecked = function (e) {\n            localStorage.setItem(\"iqlEnableZoom\", this.$(e.target).is(\":checked\") ? '1' : '0');\n            if (this.rendered) {\n                this.drawGChartWrapper();\n            }\n        };\n        GraphView.prototype.remove = function () {\n            $(window).off('resize.graphview-' + this.cid);\n            _super.prototype.remove.call(this);\n            return this;\n        };\n        GraphView.prototype.render = function () {\n            this.$el.html(this.template({ model: this.model }));\n            this.stickit(); // mixin from backbone-stickit module\n            this.$('#graph_option_zoom').prop(\"checked\", localStorage.getItem(\"iqlEnableZoom\") === '1');\n            this.$('input[type=\"checkbox\"]').button();\n            if (window.googleChartLoadPromise == null) {\n                window.googleChartLoadPromise = $.Deferred();\n                var gchartsCallback = function () {\n                    window.googleChartLoadPromise.resolve();\n                };\n                var packages = this.model.useMaterialCharts ? [\"bar\", \"line\"] : [\"corechart\"];\n                google.load(\"visualization\", \"1.0\", { \"packages\": packages, \"callback\": gchartsCallback });\n            }\n            window.googleChartLoadPromise.done(_.bind(this.drawGChartWrapper, this));\n            return this;\n        };\n        GraphView.appliesTo = function (resultSet) {\n            // TODO: support for multiple groupings\n            return resultSet.getGroupingColumnsCount() == 1; // &&\n            //            (resultSet.columns[0].type == ColumnType.TIME || resultSet.columns[0].text == \"bucket\" || resultSet.table.length < 1000);\n        };\n        GraphView.getName = function () {\n            return \"Graph\";\n        };\n        GraphView.getViewId = function () {\n            return \"graph\";\n        };\n        GraphView.prototype.drawGChartWrapper = function () {\n            this.rendered = true;\n            this.onWindowResize(true);\n            this.drawGoogleChart(this.model.graphType, this.model.cumulative, this.model.stacked, this.model.percentOfAllMetricsSumForX, this.model.percentOfEachMetricSum, this.model.logScale, this.model.movingAvg, this.model.useMaterialCharts);\n        };\n        /**\n         * Renders the data using Google Charts library\n         * @param graphType\n         * @param cumulative\n         * @param stacked\n         * @param percentOfAllMetricsSumForX If true, Y values are converted to percentages of total Y value of all metrics for each X.\n         * @param percentOfEachMetricSum If true, Y values are converted to percentages of the sum of Y for each metric independently.\n         * @param logScale\n         * @param movingavg\n         * @param useMaterialCharts\n         */\n        GraphView.prototype.drawGoogleChart = function (graphType, cumulative, stacked, percentOfAllMetricsSumForX, percentOfEachMetricSum, logScale, movingavg, useMaterialCharts) {\n            var _this = this;\n            if (cumulative === void 0) { cumulative = false; }\n            if (stacked === void 0) { stacked = false; }\n            if (percentOfAllMetricsSumForX === void 0) { percentOfAllMetricsSumForX = false; }\n            if (percentOfEachMetricSum === void 0) { percentOfEachMetricSum = false; }\n            if (logScale === void 0) { logScale = false; }\n            if (movingavg === void 0) { movingavg = \"\"; }\n            if (useMaterialCharts === void 0) { useMaterialCharts = false; }\n            if (!GraphView.appliesTo(this.resultSet)) {\n                this.getGChartDiv().text(\"Graphing this data is not supported yet\");\n                return;\n            }\n            var dataTable = this.resultSet.table;\n            if (dataTable.length < 1) {\n                this.getGChartDiv().text(\"Result set is empty\");\n                return;\n            }\n            var yaxis = this.resultSet.columns[1].text;\n            var xColumn = this.resultSet.columns[0];\n            var xaxis = xColumn.text;\n            var rowCount = dataTable.length;\n            var dataColumnCount = this.resultSet.columns.length - 1;\n            var usingDateColumn = xaxis == 'time' || xaxis == 'time (ms)' || this.resultSet.columns[0].type == columntype_1.default.TIME;\n            var isBuckets = xColumn.isBucketColumn;\n            var usingTimeofdayColumn = / *buckets? *\\( *timeofday *,.*/.test(xaxis);\n            var columnGraph = rowCount <= 2 || (!usingDateColumn && !isBuckets && !usingTimeofdayColumn && rowCount < 1000);\n            var lineGraph = !columnGraph;\n            //        var lineGraph = graphType == GraphType.Line; //rowCount > 2; // TODO check\n            //        var columnGraph = graphType == GraphType.Column;\n            movingavg = (movingavg == null || movingavg == \"\") ? \"0\" : movingavg;\n            var chartData = new google.visualization.DataTable();\n            var hideValues = localStorage.getItem(\"ramsesHideValues\") === \"1\";\n            // Set up columns\n            if (usingTimeofdayColumn && lineGraph) {\n                chartData.addColumn('timeofday', xaxis);\n            }\n            else if (usingDateColumn && lineGraph) {\n                chartData.addColumn('datetime', xaxis);\n            }\n            else if (lineGraph && isBuckets) {\n                chartData.addColumn('number', xaxis);\n            }\n            else {\n                chartData.addColumn('string', xaxis); // non-continuous string X axis for bar charts\n            }\n            // we'll show percent difference when the same metric is compared between multiple queries\n            var showPercentChange = this.resultSet.getMetricColumnsCount() > 1;\n            var commonMetric = null;\n            this.resultSet.getMetricColumns().forEach(function (column) {\n                var regexMatch = /[^:]+:(.+)/.exec(column.text); // extract the metric from an expression like \"q1: metric\"\n                if (regexMatch == null || regexMatch.length < 2) {\n                    showPercentChange = false;\n                    return;\n                }\n                var metric = regexMatch[1];\n                if (commonMetric == null) {\n                    commonMetric = metric;\n                }\n                else if (metric != commonMetric) {\n                    showPercentChange = false;\n                }\n            });\n            // Set up rows and sums\n            var sums = [0];\n            for (var i = 1; i < this.resultSet.columns.length; i++) {\n                chartData.addColumn('number', this.resultSet.columns[i].text.substring(0, 100));\n                sums.push(0);\n            }\n            var extractTime = function (value) {\n                return value.slice(1, 20).replace(\" \", \"T\");\n            };\n            var extractBucketValue = utils_1.default.getBucketStart;\n            if (usingDateColumn) {\n                var firstTimeRange = dataTable[0][0];\n                var firstBucketStart = extractTime(firstTimeRange);\n                var firstBucketEnd = firstTimeRange.slice(22, 41).replace(\" \", \"T\");\n                var xStartDate = new Date(firstBucketStart);\n                var x1Date = new Date(firstBucketEnd);\n                var xStartUnixtime = xStartDate.getTime() / 1000;\n                var xFirstBucketEndUnixtime = x1Date.getTime() / 1000;\n                var bucketSize = xFirstBucketEndUnixtime - xStartUnixtime;\n                var dayPrecision = (bucketSize % (24 * 60 * 60) == 0) && (xStartUnixtime % (24 * 60 * 60) == 0);\n                var minutePrecision = !dayPrecision && (bucketSize % 60 == 0) && (xStartUnixtime % 60 == 0);\n            }\n            var minYInData = Number.POSITIVE_INFINITY;\n            var maxYInData = Number.NEGATIVE_INFINITY;\n            for (var rowCount = 0; rowCount < dataTable.length; rowCount++) {\n                var row = [];\n                var rowValues = dataTable[rowCount];\n                // process X value (column 0)\n                var xRawVal = rowValues[0];\n                if (usingDateColumn) {\n                    xRawVal = extractTime(xRawVal);\n                    var xDate = stringToDateNegateTimezone(xRawVal);\n                }\n                if (isBuckets) {\n                    xRawVal = extractBucketValue(xRawVal);\n                    if (xRawVal == null) {\n                        // skip out of range buckets\n                        // TODO: can we show them somewhere?\n                        continue;\n                    }\n                }\n                if (usingTimeofdayColumn) {\n                    var x = Number(xRawVal);\n                    var hours = Math.floor(x / 3600);\n                    var minutes = Math.floor((x - hours * 3600) / 60);\n                    var seconds = x % 60;\n                    if (lineGraph) {\n                        row.push([hours, minutes, seconds, 0]);\n                    }\n                    else {\n                        row.push(graphviewutils_1.default.padStr(hours) + \":\" + graphviewutils_1.default.padStr(minutes) + \":\" + graphviewutils_1.default.padStr(seconds));\n                    }\n                }\n                else if (lineGraph && isBuckets) {\n                    row.push(Number(xRawVal));\n                }\n                else if (lineGraph) {\n                    if (usingDateColumn) {\n                        row.push(xDate);\n                    }\n                    else {\n                        row.push(xRawVal);\n                    }\n                }\n                else {\n                    if (usingDateColumn) {\n                        var xDateStr = graphviewutils_1.default.getDateAsString(xDate, dayPrecision, minutePrecision);\n                        row.push(xDateStr);\n                    }\n                    else {\n                        row.push(xRawVal);\n                    }\n                }\n                // process values: columns 1:N\n                var yValues = rowValues;\n                var sum = 0;\n                for (var i = 1; i < yValues.length; i++) {\n                    var val = Number(yValues[i]);\n                    row.push(val);\n                    if (!isNaN(val)) {\n                        sum += val;\n                        sums[i] += val;\n                    }\n                }\n                if (percentOfAllMetricsSumForX) {\n                    for (var i = 1; i < row.length; i++) {\n                        row[i] = 100 * row[i] / sum;\n                        row[i] = GraphView.fixEpsilonError(row[i]);\n                    }\n                }\n                else if (cumulative) {\n                    for (var i = 1; i < row.length; i++) {\n                        row[i] = sums[i];\n                    }\n                }\n                for (var i = 1; i < row.length; i++) {\n                    if (row[i] > maxYInData) {\n                        maxYInData = row[i];\n                    }\n                    if (row[i] < minYInData) {\n                        minYInData = row[i];\n                    }\n                }\n                chartData.addRow(row);\n            }\n            if (percentOfEachMetricSum) {\n                for (var column = 1; column < chartData.getNumberOfColumns(); column++) {\n                    for (var rowNumber = 0; rowNumber < chartData.getNumberOfRows(); rowNumber++) {\n                        chartData.setValue(rowNumber, column, 100 * chartData.getValue(rowNumber, column) / sums[column]);\n                    }\n                }\n            }\n            if (lineGraph) {\n                graphviewutils_1.default.applyMovingAvg(movingavg, chartData);\n            }\n            if (showPercentChange) {\n                for (var rowNumber = 0; rowNumber < chartData.getNumberOfRows(); rowNumber++) {\n                    var baseVal = chartData.getValue(rowNumber, 1);\n                    if (baseVal <= 0) {\n                        continue;\n                    }\n                    for (var column = 2; column < chartData.getNumberOfColumns(); column++) {\n                        var curVal = chartData.getValue(rowNumber, column);\n                        chartData.setFormattedValue(rowNumber, column, graphviewutils_1.default.addCommas(curVal) + \" \" + graphviewutils_1.default.computePercentChange(baseVal, curVal) + \"%\");\n                    }\n                }\n            }\n            var ylabel = yaxis;\n            if (percentOfEachMetricSum) {\n                ylabel = \"Normalized \" + ylabel;\n            }\n            else if (percentOfAllMetricsSumForX) {\n                ylabel = \"Percent of total \" + ylabel + \" at particular \" + xaxis;\n            }\n            if (cumulative && !percentOfAllMetricsSumForX) {\n                ylabel = \"Cumulative \" + ylabel;\n            }\n            var chartType = lineGraph ? (stacked ? 'area' : 'line') : 'column';\n            var xMin = chartData.getValue(0, 0);\n            var xMax = chartData.getValue(chartData.getNumberOfRows() - 1, 0);\n            var ymin = this.model.minY === \"\" ? null : Number(this.model.minY);\n            var ymax = this.model.maxY === \"\" ? null : Number(this.model.maxY);\n            // use 0 as default Y minimum for column charts only\n            if (ymin == null && chartType == 'column') {\n                if (minYInData > 0) {\n                    ymin = 0;\n                }\n            }\n            if (ymax == null && chartType == 'column') {\n                if (maxYInData < 0) {\n                    ymax = 0;\n                }\n            }\n            if (ymax == null && (percentOfEachMetricSum && cumulative)) {\n                ymax = 100;\n            }\n            var hasTitle = columnGraph; // || vars.pq ? true : false;\n            var bottomHeight = 70, topHeight = hasTitle ? 27 : 7;\n            if (columnGraph) {\n                topHeight += 20; // trying to leave extra space for value text on top of columns\n            }\n            var chartAreaHeight = this.height - bottomHeight - topHeight;\n            var digitsY = Math.max(GraphView.getNumberOfDigitsShownForNumber(maxYInData), GraphView.getNumberOfDigitsShownForNumber(minYInData));\n            var digitWidth = 9;\n            var commaWidth = 4;\n            var leftWidth = hideValues ? 0 : (digitsY * digitWidth + Math.floor((digitsY - 1) / 3) * commaWidth + 16), rightWidth = 7;\n            var chartAreaWidth = this.width - leftWidth - rightWidth;\n            // make lines thinner when we have a lot of data points (at least 1 for every 2 horizontal pixels)\n            var pointsPerPixel = chartData.getNumberOfRows() / chartAreaWidth;\n            var lineWidth = pointsPerPixel >= 0.5 ? 1 : 2;\n            var showColumnValues = (chartData.getNumberOfRows() * dataColumnCount) <= 20;\n            var enableZoom = lineGraph && localStorage.getItem(\"iqlEnableZoom\") === \"1\";\n            var drawChartAreaBorder = lineGraph;\n            var options = {\n                // TODO: improve the title\n                title: yaxis + (xaxis ? (\" by \" + xaxis) : \"\"),\n                isStacked: stacked,\n                vAxis: { title: ylabel, viewWindow: { min: ymin, max: ymax }, textStyle: { fontSize: 12 }, textPosition: 'out', gridlines: { count: -1 }, logScale: logScale },\n                hAxis: { title: xaxis, textPosition: 'out', viewWindowMode: 'maximized', minValue: xMin, maxValue: xMax, gridlines: { count: -1 } },\n                chartArea: { left: leftWidth, top: topHeight, width: chartAreaWidth, height: chartAreaHeight,\n                    backgroundColor: drawChartAreaBorder ? { stroke: 'black', strokeWidth: 0.1 } : undefined\n                },\n                width: this.width,\n                height: this.height,\n                focusTarget: (dataColumnCount < 2 ? 'datum' : 'category'),\n                tooltip: hideValues ? { trigger: 'none' } : undefined,\n                lineWidth: lineWidth,\n                legend: { position: 'bottom' },\n                colors: ['#ff5555', '#5555ff', '#55ff55', 'black', '#ff55ff', '#55ffff', '#ffff55', '#ffafaf', '#808080', '#c00000',\n                    '#0000c0', '#00c000', '#c0c000'],\n                explorer: enableZoom ? { keepInBounds: true } : undefined,\n                fontSize: 14 //,\n            };\n            var googleDiv = this.getGChartDiv()[0];\n            var chart;\n            switch (chartType) {\n                case 'area':\n                    chart = new google.visualization.AreaChart(googleDiv);\n                    break;\n                case 'line':\n                    if (!useMaterialCharts) {\n                        chart = new google.visualization.LineChart(googleDiv);\n                    }\n                    else {\n                        options = google.charts.Line.convertOptions(options);\n                        chart = new google.charts.Line(googleDiv);\n                    }\n                    break;\n                case 'column':\n                    if (!useMaterialCharts) {\n                        chart = new google.visualization.ColumnChart(googleDiv);\n                    }\n                    else {\n                        options = google.charts.Line.convertOptions(options);\n                        chart = new google.charts.Bar(googleDiv);\n                    }\n                    //                if (showColumnValues) {\n                    //                    options.tooltip = {trigger: 'none'};\n                    //                }\n                    break;\n            }\n            var gOffset = hasTitle ? 1 : 0; // having a title shifts the G elements\n            // Add custom things to the graph after it has been rendered (on ready event).\n            // This is necessary in Firefox but Chrome has it ready immediately after draw() is finished\n            google.visualization.events.addListener(chart, 'ready', function () {\n                if (useMaterialCharts) {\n                    return; // not supported for material charts yet\n                }\n                if (columnGraph && showColumnValues) {\n                    try {\n                        _this.drawColumnValues(gOffset, chartData, showPercentChange, percentOfAllMetricsSumForX, hideValues);\n                    }\n                    catch (e) {\n                        console.error(\"Failed to draw the column chart values\\n\" + e.stack);\n                    }\n                }\n                try {\n                    _this.fixYAxisBug(gOffset);\n                }\n                catch (e) {\n                    console.error(\"Failed to apply the GCharts Y axis bug fix\\n\" + e.stack);\n                }\n            });\n            chart.draw(chartData, options);\n            // TODO: resizing\n            //        this.$el.resizable('destroy');\n            //        this.$el.resizable({\n            //            start: onGraphResizeStart,\n            //            resize: onGraphResizing,\n            //            stop: onGraphResized,\n            //            handles: 'se'\n            //        });\n        };\n        GraphView.prototype.drawColumnValues = function (gOffset, chartData, showPercentChange, percentOfAllMetricsSumForX, hideValues) {\n            var svg = this.getGChartSVG();\n            var gIndex = 1 + gOffset;\n            var textGroup = $(\"> g:eq(\" + gIndex + \") > g:eq(2)\", svg);\n            var rects = $(\"> g:eq(\" + gIndex + \") > g:eq(0) > g:eq(1) > rect\", svg);\n            var renderPercentChange = showPercentChange && chartData.getNumberOfRows() < 5;\n            var rectIndex = 0;\n            for (var j = 1; j < chartData.getNumberOfColumns(); j++) {\n                for (var i = 0; i < chartData.getNumberOfRows(); i++) {\n                    var rect = $(rects[rectIndex]);\n                    var x = Number(rect.attr(\"x\")) + Number(rect.attr(\"width\")) / 2;\n                    var y = Math.max(Number(rect.attr(\"y\")) - 10, 16);\n                    var value = chartData.getValue(i, j);\n                    if (isNaN(value)) {\n                        continue; // there is no column/rect for NaNs so we should skip the label too\n                    }\n                    else {\n                        rectIndex++;\n                    }\n                    if (value >= 1 || value <= -1) {\n                        if (Math.round(value) != value) {\n                            value = Math.round(value * 1000) / 1000;\n                        }\n                        value = graphviewutils_1.default.addCommas(value);\n                    }\n                    else {\n                        value = String(value).substring(0, graphviewutils_1.default.firstNonZeroDigitIndex(value) + 3);\n                    }\n                    if (hideValues) {\n                        value = \"\";\n                    }\n                    if (renderPercentChange && j > 1) {\n                        var baseVal = chartData.getValue(i, 1);\n                        if (baseVal > 0) {\n                            var numValue = chartData.getValue(i, j);\n                            value += \" (\" + graphviewutils_1.default.computePercentChange(baseVal, numValue) + \"%)\";\n                        }\n                    }\n                    var textElem = graphviewutils_1.default.createSVGElem(\"text\", { \"text-anchor\": \"middle\", x: x, y: y, \"font-family\": \"Arial\", \"font-size\": 16, stroke: \"none\", \"stroke-width\": 0, fill: \"#000000\" }, String(value));\n                    $(textElem).appendTo($(graphviewutils_1.default.createSVGElem(\"g\")).appendTo(textGroup));\n                }\n            }\n        };\n        // Having a value that is precise right up to the EPSILON makes Google Charts crash Chrome. Round it as a fix.\n        GraphView.fixEpsilonError = function (val) {\n            var rounded = Math.round(val);\n            if (val < 1 && val > -1) {\n                return val;\n            }\n            // Our Epsilon is a bit above the true value\n            if (Math.abs((val - rounded) / rounded) < 3e-16) {\n                return rounded;\n            }\n            return val;\n        };\n        // workaround for https://code.google.com/p/google-visualization-api-issues/issues/detail?id=1602\n        GraphView.prototype.fixYAxisBug = function (gOffset) {\n            var svg = this.getGChartSVG();\n            var gIndex = 1 + gOffset;\n            var axisLabelGs = $('> g:eq(' + gIndex + ') > g:last > g', svg);\n            axisLabelGs.each(function (index, axisLabelG) {\n                var label = $(\"text\", axisLabelG);\n                var labelText = label.text();\n                if (labelText.lastIndexOf('...') == labelText.length - 3) {\n                    var labelNumber = Number(labelText.substr(0, labelText.length - 3).replace(/,/g, ''));\n                    labelNumber = labelNumber > 0 ? Math.floor(labelNumber) : Math.ceil(labelNumber);\n                    var changed = false;\n                    if (labelNumber >= 100000000 && (labelNumber) % 1000 == 999) {\n                        labelNumber += 1;\n                        changed = true;\n                    }\n                    if (labelNumber <= -100000000 && (labelNumber) % 1000 == -999) {\n                        labelNumber -= 1;\n                        changed = true;\n                    }\n                    if (changed) {\n                        labelText = graphviewutils_1.default.addCommas(String(labelNumber));\n                        label.text(labelText);\n                    }\n                }\n            });\n        };\n        GraphView.getNumberOfDigitsShownForNumber = function (num) {\n            //noinspection JSSuspiciousNameCombination\n            var rounded = Math.round(num);\n            var digits;\n            if (rounded != num) {\n                if (rounded != 0 || num > 0.01) {\n                    // cut to 3 digits after dot if not an integer and not a very small value\n                    num = Math.round(num * 1000) / 1000;\n                }\n                else {\n                    digits = graphviewutils_1.default.firstNonZeroDigitIndex(num) + 2; // assume formatting will keep all leading 0s and 3 next digits\n                }\n            }\n            if (digits === undefined) {\n                digits = graphviewutils_1.default.digits(num);\n            }\n            if (num < 10) {\n                digits = Math.max(digits, 5); // gcharts generates long values for this case for some reason\n            }\n            else if (num < 100) {\n                digits = Math.max(digits, 3);\n            }\n            return digits;\n        };\n        GraphView.prototype.getGChartDiv = function () {\n            return this.$('.googlegraph');\n        };\n        GraphView.prototype.getGChartSVG = function () {\n            return $(\"> div > div > div > svg\", this.getGChartDiv());\n        };\n        GraphView.prototype.onWindowResize = function (init) {\n            if (!this.autoChartSize) {\n                return;\n            }\n            var screenWidth = this.$('.googlegraph').width();\n            // hacks to get possible max height\n            var maxHeight = window.innerHeight - this.$el.offset().top - 40;\n            if (screenWidth == 0) {\n                return;\n            }\n            var graphWidth = screenWidth - 15;\n            var ratio = 2.5;\n            // fix aspect ratio and ensure large enough to render\n            var graphHeight = Math.min(maxHeight, Math.round(graphWidth / ratio));\n            graphWidth = graphHeight * ratio;\n            if (this.width != graphWidth || this.height != graphHeight) {\n                this.width = graphWidth;\n                this.height = graphHeight;\n                if (init !== true) {\n                    this.drawGChartWrapper(); // redraw\n                }\n            }\n        };\n        GraphView.prototype.getState = function () {\n            var _this = this;\n            var state = {};\n            Object.keys(this.model.attributes).forEach(function (propName) {\n                var prop = _this.model.attributes[propName];\n                if (typeof prop === 'boolean' && prop === false || typeof prop === \"string\" && prop === \"\" ||\n                    typeof prop === 'number' && (prop === 0 || prop === null)) {\n                    return;\n                }\n                state[propName] = prop;\n            });\n            return state;\n        };\n        GraphView.prototype.setState = function (state) {\n            var _this = this;\n            // TODO: set a default when value missing\n            Object.keys(state).forEach(function (propName) {\n                var prop = state[propName];\n                var targetType = typeof _this.model.attributes[propName];\n                if (targetType === 'boolean') {\n                    prop = Boolean(prop);\n                }\n                else if (targetType === 'number') {\n                    prop = Number(prop);\n                }\n                _this.model.set(propName, prop);\n            });\n        };\n        return GraphView;\n    }(Backbone.View));\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = GraphView;\n    var TimeZoneOffset = (function () {\n        function TimeZoneOffset(date) {\n            this.setDate(date);\n        }\n        TimeZoneOffset.prototype.setDate = function (date) {\n            this.minutes = date.getTimezoneOffset();\n            this.ms = this.minutes * 60 * 1000;\n            this.hours = this.minutes / 60 | 0; // yay JS, truncating the possible fractional part with '| 0' bitwise op\n            var minutesWithinHour = Math.abs(this.minutes % 60);\n            this.iso = (this.hours > 0 ? '-' : '+') +\n                ((this.hours < 10 && this.hours > -10) ? '0' : '') +\n                Math.abs(this.hours) +\n                ((minutesWithinHour < 10 ? '0' : '') + minutesWithinHour);\n        };\n        return TimeZoneOffset;\n    }());\n    var lastUsedTimeZone = new TimeZoneOffset(new Date());\n    /**\n     * Returns the date object shifted by the number of hours in the timezone used by this browser.\n     * This allows us to counteract Google Charts timezone application when is it generating labels.\n     */\n    function stringToDateNegateTimezone(dateStr) {\n        // asssume the timezone is the same as for the last call\n        var date = new Date(dateStr + lastUsedTimeZone.iso);\n        if (date.getTimezoneOffset() != lastUsedTimeZone.minutes) {\n            // time zone changed\n            lastUsedTimeZone.setDate(date);\n            date = new Date(dateStr + lastUsedTimeZone.iso);\n        }\n        return date;\n    }\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceMappingURL=data:application/json;base64,");

/***/ },

/***/ 390:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports) {\n    \"use strict\";\n    /// <reference path=\"../deps.d.ts\" />\n    var GraphViewUtils = (function () {\n        function GraphViewUtils() {\n        }\n        GraphViewUtils.padStr = function (i) {\n            return (i < 10) ? \"0\" + i : \"\" + i;\n        };\n        GraphViewUtils.getDateAsString = function (date, dayPrecision, minutePrecision) {\n            if (dayPrecision) {\n                return date.getFullYear() + '-' +\n                    GraphViewUtils.padStr(1 + date.getMonth()) + '-' +\n                    GraphViewUtils.padStr(date.getDate());\n            }\n            else if (minutePrecision) {\n                return date.getFullYear() + '-' +\n                    GraphViewUtils.padStr(1 + date.getMonth()) + '-' +\n                    GraphViewUtils.padStr(date.getDate()) + ' ' +\n                    GraphViewUtils.padStr(date.getHours()) + ':' +\n                    GraphViewUtils.padStr(date.getMinutes());\n            }\n            else {\n                return date.getFullYear() + '-' +\n                    GraphViewUtils.padStr(1 + date.getMonth()) + '-' +\n                    GraphViewUtils.padStr(date.getDate()) + ' ' +\n                    GraphViewUtils.padStr(date.getHours()) + ':' +\n                    GraphViewUtils.padStr(date.getMinutes()) + ':' +\n                    GraphViewUtils.padStr(date.getSeconds());\n            }\n        };\n        GraphViewUtils.applyMovingAvg = function (movingavg, chartData) {\n            var numRows = chartData.getNumberOfRows();\n            var numCols = chartData.getNumberOfColumns();\n            var ar = movingavg.split(/[|\\/,]/);\n            var past = 0;\n            var future = 0;\n            if (ar.length == 1) {\n                var buckets = parseInt(ar[0]);\n                if (buckets >= 0) {\n                    future = buckets;\n                }\n                else {\n                    past = buckets;\n                }\n            }\n            else if (ar.length == 2) {\n                past = parseInt(ar[0]);\n                future = parseInt(ar[1]);\n                if (past > 0) {\n                    past = -past;\n                }\n            }\n            if (isNaN(past)) {\n                past = 0;\n            }\n            if (isNaN(future)) {\n                future = 0;\n            }\n            future = Math.max(Math.min(future, numRows - 1), 0);\n            // past is negative\n            past = Math.min(Math.max(past, -numRows + 1 + future), 0);\n            var size = future - past + 1;\n            if (size != 1) {\n                for (var c = 1; c < numCols; c++) {\n                    var newColumn = [];\n                    for (var r = -past; r < numRows - future; r++) {\n                        var newVal = 0;\n                        for (var j = r + past; j <= r + future; j++) {\n                            newVal += chartData.getValue(j, c);\n                        }\n                        newVal /= size;\n                        newColumn.push(newVal);\n                    }\n                    for (var r = 0; r < newColumn.length; r++) {\n                        chartData.setValue(r - past, c, newColumn[r]);\n                    }\n                }\n            }\n            // Set values to null in the rows that cannot get the full number of data points for the specified moving average.\n            for (var row = 0; row < -past; row++) {\n                for (var column = 1; column < numCols; column++) {\n                    chartData.setValue(row, column, null);\n                }\n            }\n            for (var row = numRows - future; row < numRows; row++) {\n                for (var column = 1; column < numCols; column++) {\n                    chartData.setValue(row, column, null);\n                }\n            }\n        };\n        /**\n         * @return {String} Percentage change between 2 values as a string with 2 digits after dot\n         */\n        GraphViewUtils.computePercentChange = function (baseVal, numVal) {\n            var percentChange = (numVal - baseVal) / baseVal * 100;\n            percentChange = Math.round(percentChange * 100) / 100; // limit to 2 digits after dot\n            if (percentChange > 0) {\n                return \"+\" + percentChange; // force show positive sign\n            }\n            return String(percentChange);\n        };\n        GraphViewUtils.digits = function (n) {\n            return String(n).length;\n        };\n        GraphViewUtils.firstNonZeroDigitIndex = function (n) {\n            return String(n).search('[^0.-]');\n        };\n        GraphViewUtils.createSVGElem = function (elemName, attrs, text, ns) {\n            ns = ns || \"http://www.w3.org/2000/svg\";\n            var elem = document.createElementNS(ns, elemName);\n            if (text !== undefined) {\n                elem.textContent = text;\n            }\n            if (attrs) {\n                for (var attr in attrs) {\n                    //noinspection JSUnfilteredForInLoop\n                    elem.setAttribute(attr, attrs[attr]);\n                }\n            }\n            return elem;\n        };\n        GraphViewUtils.addCommas = function (nStr) {\n            nStr += '';\n            var x = nStr.split('.');\n            var x1 = x[0];\n            var x2 = x.length > 1 ? '.' + x[1] : '';\n            var rgx = /(\\d+)(\\d{3})/;\n            while (rgx.test(x1)) {\n                x1 = x1.replace(rgx, '$1' + ',' + '$2');\n            }\n            return x1 + x2;\n        };\n        return GraphViewUtils;\n    }());\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = GraphViewUtils;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzkwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2dyYXBodmlldy9ncmFwaHZpZXd1dGlscy50cz85MzU4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9kZXBzLmQudHNcIiAvPlxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR3JhcGhWaWV3VXRpbHMge1xuICAgIHN0YXRpYyBwYWRTdHIoaTogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiAoaSA8IDEwKSA/IFwiMFwiICsgaSA6IFwiXCIgKyBpO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXREYXRlQXNTdHJpbmcoZGF0ZTogRGF0ZSwgZGF5UHJlY2lzaW9uOiBib29sZWFuLCBtaW51dGVQcmVjaXNpb246IGJvb2xlYW4pIHtcbiAgICAgICAgaWYgKGRheVByZWNpc2lvbikge1xuICAgICAgICAgICAgcmV0dXJuIGRhdGUuZ2V0RnVsbFllYXIoKSArICctJyArXG4gICAgICAgICAgICAgICAgR3JhcGhWaWV3VXRpbHMucGFkU3RyKDEgKyBkYXRlLmdldE1vbnRoKCkpICsgJy0nICtcbiAgICAgICAgICAgICAgICBHcmFwaFZpZXdVdGlscy5wYWRTdHIoZGF0ZS5nZXREYXRlKCkpO1xuICAgICAgICB9IGVsc2UgaWYgKG1pbnV0ZVByZWNpc2lvbikge1xuICAgICAgICAgICAgcmV0dXJuIGRhdGUuZ2V0RnVsbFllYXIoKSArICctJyArXG4gICAgICAgICAgICAgICAgR3JhcGhWaWV3VXRpbHMucGFkU3RyKDEgKyBkYXRlLmdldE1vbnRoKCkpICsgJy0nICtcbiAgICAgICAgICAgICAgICBHcmFwaFZpZXdVdGlscy5wYWRTdHIoZGF0ZS5nZXREYXRlKCkpICsgJyAnICtcbiAgICAgICAgICAgICAgICBHcmFwaFZpZXdVdGlscy5wYWRTdHIoZGF0ZS5nZXRIb3VycygpKSArICc6JyArXG4gICAgICAgICAgICAgICAgR3JhcGhWaWV3VXRpbHMucGFkU3RyKGRhdGUuZ2V0TWludXRlcygpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRlLmdldEZ1bGxZZWFyKCkgKyAnLScgK1xuICAgICAgICAgICAgICAgIEdyYXBoVmlld1V0aWxzLnBhZFN0cigxICsgZGF0ZS5nZXRNb250aCgpKSArICctJyArXG4gICAgICAgICAgICAgICAgR3JhcGhWaWV3VXRpbHMucGFkU3RyKGRhdGUuZ2V0RGF0ZSgpKSArICcgJyArXG4gICAgICAgICAgICAgICAgR3JhcGhWaWV3VXRpbHMucGFkU3RyKGRhdGUuZ2V0SG91cnMoKSkgKyAnOicgK1xuICAgICAgICAgICAgICAgIEdyYXBoVmlld1V0aWxzLnBhZFN0cihkYXRlLmdldE1pbnV0ZXMoKSkgKyAnOicgK1xuICAgICAgICAgICAgICAgIEdyYXBoVmlld1V0aWxzLnBhZFN0cihkYXRlLmdldFNlY29uZHMoKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgYXBwbHlNb3ZpbmdBdmcobW92aW5nYXZnOiBzdHJpbmcsIGNoYXJ0RGF0YTogZ29vZ2xlLnZpc3VhbGl6YXRpb24uRGF0YVRhYmxlKSB7XG4gICAgICAgIHZhciBudW1Sb3dzID0gY2hhcnREYXRhLmdldE51bWJlck9mUm93cygpO1xuICAgICAgICB2YXIgbnVtQ29scyA9IGNoYXJ0RGF0YS5nZXROdW1iZXJPZkNvbHVtbnMoKVxuICAgICAgICB2YXIgYXIgPSBtb3Zpbmdhdmcuc3BsaXQoL1t8XFwvLF0vKTtcbiAgICAgICAgdmFyIHBhc3QgPSAwO1xuICAgICAgICB2YXIgZnV0dXJlID0gMDtcbiAgICAgICAgaWYoYXIubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICAgIHZhciBidWNrZXRzID0gcGFyc2VJbnQoYXJbMF0pO1xuICAgICAgICAgICAgaWYoYnVja2V0cyA+PSAwKSB7XG4gICAgICAgICAgICAgICAgZnV0dXJlID0gYnVja2V0cztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFzdCA9IGJ1Y2tldHM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZihhci5sZW5ndGggPT0gMikge1xuICAgICAgICAgICAgcGFzdCA9IHBhcnNlSW50KGFyWzBdKTtcbiAgICAgICAgICAgIGZ1dHVyZSA9IHBhcnNlSW50KGFyWzFdKTtcbiAgICAgICAgICAgIGlmKHBhc3QgPiAwKSB7XG4gICAgICAgICAgICAgICAgcGFzdCA9IC1wYXN0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChpc05hTihwYXN0KSkge1xuICAgICAgICAgICAgcGFzdCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTmFOKGZ1dHVyZSkpIHtcbiAgICAgICAgICAgIGZ1dHVyZSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBmdXR1cmUgPSBNYXRoLm1heChNYXRoLm1pbihmdXR1cmUsIG51bVJvd3MgLSAxKSwgMCk7XG4gICAgICAgIC8vIHBhc3QgaXMgbmVnYXRpdmVcbiAgICAgICAgcGFzdCA9IE1hdGgubWluKE1hdGgubWF4KHBhc3QsIC1udW1Sb3dzICsgMSArIGZ1dHVyZSksIDApO1xuICAgICAgICB2YXIgc2l6ZSA9IGZ1dHVyZSAtIHBhc3QgKyAxO1xuICAgICAgICBpZiAoc2l6ZSAhPSAxKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBjID0gMTsgYyA8IG51bUNvbHM7IGMrKykge1xuICAgICAgICAgICAgICAgIHZhciBuZXdDb2x1bW46IG51bWJlcltdID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgciA9IC1wYXN0OyByIDwgbnVtUm93cyAtIGZ1dHVyZTsgcisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdWYWwgPSAwO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gciArIHBhc3Q7IGogPD0gciArIGZ1dHVyZTsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdWYWwgKz0gY2hhcnREYXRhLmdldFZhbHVlKGosIGMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbCAvPSBzaXplO1xuICAgICAgICAgICAgICAgICAgICBuZXdDb2x1bW4ucHVzaChuZXdWYWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKHZhciByID0gMDsgciA8IG5ld0NvbHVtbi5sZW5ndGg7IHIrKykge1xuICAgICAgICAgICAgICAgICAgICBjaGFydERhdGEuc2V0VmFsdWUociAtIHBhc3QsIGMsIG5ld0NvbHVtbltyXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0IHZhbHVlcyB0byBudWxsIGluIHRoZSByb3dzIHRoYXQgY2Fubm90IGdldCB0aGUgZnVsbCBudW1iZXIgb2YgZGF0YSBwb2ludHMgZm9yIHRoZSBzcGVjaWZpZWQgbW92aW5nIGF2ZXJhZ2UuXG4gICAgICAgIGZvciAodmFyIHJvdyA9IDA7IHJvdyA8IC1wYXN0OyByb3crKykge1xuICAgICAgICAgICAgZm9yICh2YXIgY29sdW1uID0gMTsgY29sdW1uIDwgbnVtQ29sczsgY29sdW1uKyspIHtcbiAgICAgICAgICAgICAgICBjaGFydERhdGEuc2V0VmFsdWUocm93LCBjb2x1bW4sIG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgcm93ID0gbnVtUm93cyAtIGZ1dHVyZTsgcm93IDwgbnVtUm93czsgcm93KyspIHtcbiAgICAgICAgICAgIGZvciAodmFyIGNvbHVtbiA9IDE7IGNvbHVtbiA8IG51bUNvbHM7IGNvbHVtbisrKSB7XG4gICAgICAgICAgICAgICAgY2hhcnREYXRhLnNldFZhbHVlKHJvdywgY29sdW1uLCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gUGVyY2VudGFnZSBjaGFuZ2UgYmV0d2VlbiAyIHZhbHVlcyBhcyBhIHN0cmluZyB3aXRoIDIgZGlnaXRzIGFmdGVyIGRvdFxuICAgICAqL1xuICAgIHN0YXRpYyBjb21wdXRlUGVyY2VudENoYW5nZShiYXNlVmFsOiBudW1iZXIsIG51bVZhbDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICAgICAgdmFyIHBlcmNlbnRDaGFuZ2UgPSAobnVtVmFsIC0gYmFzZVZhbCkgLyBiYXNlVmFsICogMTAwO1xuICAgICAgICBwZXJjZW50Q2hhbmdlID0gTWF0aC5yb3VuZChwZXJjZW50Q2hhbmdlICogMTAwKSAvIDEwMDsgLy8gbGltaXQgdG8gMiBkaWdpdHMgYWZ0ZXIgZG90XG4gICAgICAgIGlmIChwZXJjZW50Q2hhbmdlID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIFwiK1wiICsgcGVyY2VudENoYW5nZTsgICAgLy8gZm9yY2Ugc2hvdyBwb3NpdGl2ZSBzaWduXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFN0cmluZyhwZXJjZW50Q2hhbmdlKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZGlnaXRzKG46IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgIHJldHVybiBTdHJpbmcobikubGVuZ3RoO1xuICAgIH1cblxuICAgIHN0YXRpYyBmaXJzdE5vblplcm9EaWdpdEluZGV4KG46IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgIHJldHVybiBTdHJpbmcobikuc2VhcmNoKCdbXjAuLV0nKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgY3JlYXRlU1ZHRWxlbShlbGVtTmFtZTogc3RyaW5nLCBhdHRycz86IGFueSwgdGV4dD86IHN0cmluZywgbnM/OiBzdHJpbmcpOiBFbGVtZW50IHtcbiAgICAgICAgbnMgPSBucyB8fCBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7XG4gICAgICAgIHZhciBlbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5zLCBlbGVtTmFtZSk7XG4gICAgICAgIGlmICh0ZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGVsZW0udGV4dENvbnRlbnQgPSB0ZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGF0dHJzKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBhdHRyIGluIGF0dHJzKSB7XG4gICAgICAgICAgICAgICAgLy9ub2luc3BlY3Rpb24gSlNVbmZpbHRlcmVkRm9ySW5Mb29wXG4gICAgICAgICAgICAgICAgZWxlbS5zZXRBdHRyaWJ1dGUoYXR0ciwgYXR0cnNbYXR0cl0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbGVtO1xuICAgIH1cblxuICAgIHN0YXRpYyBhZGRDb21tYXMoblN0cjogc3RyaW5nKSB7XG4gICAgICAgIG5TdHIgKz0gJyc7XG4gICAgICAgIHZhciB4ID0gblN0ci5zcGxpdCgnLicpO1xuICAgICAgICB2YXIgeDEgPSB4WzBdO1xuICAgICAgICB2YXIgeDIgPSB4Lmxlbmd0aCA+IDEgPyAnLicgKyB4WzFdIDogJyc7XG4gICAgICAgIHZhciByZ3ggPSAvKFxcZCspKFxcZHszfSkvO1xuICAgICAgICB3aGlsZSAocmd4LnRlc3QoeDEpKSB7XG4gICAgICAgICAgICB4MSA9IHgxLnJlcGxhY2Uocmd4LCAnJDEnICsgJywnICsgJyQyJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHgxICsgeDI7XG4gICAgfVxufVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogZ3JhcGh2aWV3L2dyYXBodmlld3V0aWxzLnRzXG4gKiovIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFBQTtBQXVJQTtBQXRJQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTs7Ozs7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 392:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/// <reference path=\"../deps.d.ts\" />\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(8), __webpack_require__(393)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, Backbone, graphtype_1) {\n    \"use strict\";\n    var GraphModel = (function (_super) {\n        __extends(GraphModel, _super);\n        function GraphModel() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        Object.defineProperty(GraphModel.prototype, \"graphType\", {\n            get: function () { return this.get(\"graphType\"); },\n            set: function (val) { this.set(\"graphType\", val); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(GraphModel.prototype, \"cumulative\", {\n            get: function () { return this.get(\"cumulative\"); },\n            set: function (val) { this.set(\"cumulative\", val); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(GraphModel.prototype, \"percentOfAllMetricsSumForX\", {\n            get: function () { return this.get(\"percentOfAllMetricsSumForX\"); },\n            set: function (val) { this.set(\"percentOfAllMetricsSumForX\", val); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(GraphModel.prototype, \"stacked\", {\n            get: function () { return this.get(\"stacked\"); },\n            set: function (val) { this.set(\"stacked\", val); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(GraphModel.prototype, \"percentOfEachMetricSum\", {\n            get: function () { return this.get(\"percentOfEachMetricSum\"); },\n            set: function (val) { this.set(\"percentOfEachMetricSum\", val); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(GraphModel.prototype, \"logScale\", {\n            get: function () { return this.get(\"logScale\"); },\n            set: function (val) { this.set(\"logScale\", val); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(GraphModel.prototype, \"movingAvg\", {\n            get: function () { return this.get(\"movingAvg\"); },\n            set: function (val) { this.set(\"movingAvg\", val); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(GraphModel.prototype, \"minY\", {\n            get: function () { return this.get(\"minY\"); },\n            set: function (val) { this.set(\"minY\", val); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(GraphModel.prototype, \"maxY\", {\n            get: function () { return this.get(\"maxY\"); },\n            set: function (val) { this.set(\"maxY\", val); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(GraphModel.prototype, \"useMaterialCharts\", {\n            get: function () { return this.get(\"useMaterialCharts\"); },\n            set: function (val) { this.set(\"useMaterialCharts\", val); },\n            enumerable: true,\n            configurable: true\n        });\n        GraphModel.prototype.initialize = function (attributes) {\n        };\n        GraphModel.prototype.defaults = function () {\n            return {\n                graphType: graphtype_1.default.Line,\n                cumulative: false,\n                percentOfAllMetricsSumForX: false,\n                stacked: false,\n                percentOfEachMetricSum: false,\n                logScale: false,\n                movingAvg: \"\",\n                minY: \"\",\n                maxY: \"\"\n            };\n        };\n        return GraphModel;\n    }(Backbone.Model));\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = GraphModel;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzkyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2dyYXBodmlldy9ncmFwaG1vZGVsLnRzP2YwODkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL2RlcHMuZC50c1wiIC8+XG5cbmltcG9ydCBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpO1xuaW1wb3J0IEJhY2tib25lID0gcmVxdWlyZSgnYmFja2JvbmUnKTtcblxuaW1wb3J0IEdyYXBoVHlwZSBmcm9tICdncmFwaHZpZXcvZ3JhcGh0eXBlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR3JhcGhNb2RlbCBleHRlbmRzIEJhY2tib25lLk1vZGVsIHtcblxuICAgIGdldCBncmFwaFR5cGUoKTogR3JhcGhUeXBlIHsgcmV0dXJuIHRoaXMuZ2V0KFwiZ3JhcGhUeXBlXCIpOyB9XG4gICAgc2V0IGdyYXBoVHlwZSh2YWw6IEdyYXBoVHlwZSkgeyB0aGlzLnNldChcImdyYXBoVHlwZVwiLCB2YWwpOyB9XG5cbiAgICBnZXQgY3VtdWxhdGl2ZSgpOiBib29sZWFuIHsgcmV0dXJuIHRoaXMuZ2V0KFwiY3VtdWxhdGl2ZVwiKTsgfVxuICAgIHNldCBjdW11bGF0aXZlKHZhbDogYm9vbGVhbikgeyB0aGlzLnNldChcImN1bXVsYXRpdmVcIiwgdmFsKTsgfVxuXG4gICAgZ2V0IHBlcmNlbnRPZkFsbE1ldHJpY3NTdW1Gb3JYKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5nZXQoXCJwZXJjZW50T2ZBbGxNZXRyaWNzU3VtRm9yWFwiKTsgfVxuICAgIHNldCBwZXJjZW50T2ZBbGxNZXRyaWNzU3VtRm9yWCh2YWw6IGJvb2xlYW4pIHsgdGhpcy5zZXQoXCJwZXJjZW50T2ZBbGxNZXRyaWNzU3VtRm9yWFwiLCB2YWwpOyB9XG5cbiAgICBnZXQgc3RhY2tlZCgpOiBib29sZWFuIHsgcmV0dXJuIHRoaXMuZ2V0KFwic3RhY2tlZFwiKTsgfVxuICAgIHNldCBzdGFja2VkKHZhbDogYm9vbGVhbikgeyB0aGlzLnNldChcInN0YWNrZWRcIiwgdmFsKTsgfVxuXG4gICAgZ2V0IHBlcmNlbnRPZkVhY2hNZXRyaWNTdW0oKTogYm9vbGVhbiB7IHJldHVybiB0aGlzLmdldChcInBlcmNlbnRPZkVhY2hNZXRyaWNTdW1cIik7IH1cbiAgICBzZXQgcGVyY2VudE9mRWFjaE1ldHJpY1N1bSh2YWw6IGJvb2xlYW4pIHsgdGhpcy5zZXQoXCJwZXJjZW50T2ZFYWNoTWV0cmljU3VtXCIsIHZhbCk7IH1cblxuICAgIGdldCBsb2dTY2FsZSgpOiBib29sZWFuIHsgcmV0dXJuIHRoaXMuZ2V0KFwibG9nU2NhbGVcIik7IH1cbiAgICBzZXQgbG9nU2NhbGUodmFsOiBib29sZWFuKSB7IHRoaXMuc2V0KFwibG9nU2NhbGVcIiwgdmFsKTsgfVxuXG4gICAgZ2V0IG1vdmluZ0F2ZygpOiBzdHJpbmcgeyByZXR1cm4gdGhpcy5nZXQoXCJtb3ZpbmdBdmdcIik7IH1cbiAgICBzZXQgbW92aW5nQXZnKHZhbDogc3RyaW5nKSB7IHRoaXMuc2V0KFwibW92aW5nQXZnXCIsIHZhbCk7IH1cblxuICAgIGdldCBtaW5ZKCk6IHN0cmluZyB7IHJldHVybiB0aGlzLmdldChcIm1pbllcIik7IH1cbiAgICBzZXQgbWluWSh2YWw6IHN0cmluZykgeyB0aGlzLnNldChcIm1pbllcIiwgdmFsKTsgfVxuXG4gICAgZ2V0IG1heFkoKTogc3RyaW5nIHsgcmV0dXJuIHRoaXMuZ2V0KFwibWF4WVwiKTsgfVxuICAgIHNldCBtYXhZKHZhbDogc3RyaW5nKSB7IHRoaXMuc2V0KFwibWF4WVwiLCB2YWwpOyB9XG4gICAgZ2V0IHVzZU1hdGVyaWFsQ2hhcnRzKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5nZXQoXCJ1c2VNYXRlcmlhbENoYXJ0c1wiKTsgfVxuICAgIHNldCB1c2VNYXRlcmlhbENoYXJ0cyh2YWw6IGJvb2xlYW4pIHsgdGhpcy5zZXQoXCJ1c2VNYXRlcmlhbENoYXJ0c1wiLCB2YWwpOyB9XG5cbiAgICBpbml0aWFsaXplKGF0dHJpYnV0ZXM/OiBhbnkpOiB2b2lkIHtcblxuICAgIH1cblxuICAgIGRlZmF1bHRzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZ3JhcGhUeXBlOiBHcmFwaFR5cGUuTGluZSxcbiAgICAgICAgICAgIGN1bXVsYXRpdmU6IGZhbHNlLFxuICAgICAgICAgICAgcGVyY2VudE9mQWxsTWV0cmljc1N1bUZvclg6IGZhbHNlLFxuICAgICAgICAgICAgc3RhY2tlZDogZmFsc2UsXG4gICAgICAgICAgICBwZXJjZW50T2ZFYWNoTWV0cmljU3VtOiBmYWxzZSxcbiAgICAgICAgICAgIGxvZ1NjYWxlOiBmYWxzZSxcbiAgICAgICAgICAgIG1vdmluZ0F2ZzogXCJcIixcbiAgICAgICAgICAgIG1pblk6IFwiXCIsXG4gICAgICAgICAgICBtYXhZOiBcIlwiXG4gICAgICAgIH1cbiAgICB9XG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBncmFwaHZpZXcvZ3JhcGhtb2RlbC50c1xuICoqLyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0FBT0E7QUFBQTtBQUFBOztBQWdEQTtBQTlDQTtBQUFBO0FBQ0E7OztBQURBO0FBR0E7QUFBQTtBQUNBOzs7QUFEQTtBQUdBO0FBQUE7QUFDQTs7O0FBREE7QUFHQTtBQUFBO0FBQ0E7OztBQURBO0FBR0E7QUFBQTtBQUNBOzs7QUFEQTtBQUdBO0FBQUE7QUFDQTs7O0FBREE7QUFHQTtBQUFBO0FBQ0E7OztBQURBO0FBR0E7QUFBQTtBQUNBOzs7QUFEQTtBQUdBO0FBQUE7QUFDQTs7O0FBREE7QUFFQTtBQUFBO0FBQ0E7OztBQURBO0FBR0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTs7Ozs7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 393:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports) {\n    \"use strict\";\n    var GraphType;\n    (function (GraphType) {\n        GraphType[GraphType[\"Line\"] = 0] = \"Line\";\n        GraphType[GraphType[\"Column\"] = 1] = \"Column\";\n    })(GraphType || (GraphType = {}));\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = GraphType;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzkzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2dyYXBodmlldy9ncmFwaHR5cGUudHM/ZDdlNCJdLCJzb3VyY2VzQ29udGVudCI6WyJlbnVtIEdyYXBoVHlwZSB7XG4gICAgTGluZSxcbiAgICBDb2x1bW5cbn1cblxuZXhwb3J0IGRlZmF1bHQgR3JhcGhUeXBlO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIGdyYXBodmlldy9ncmFwaHR5cGUudHNcbiAqKi8iXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7OyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 398:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/// <reference path=\"../deps.d.ts\" />\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(1), __webpack_require__(2), __webpack_require__(8), __webpack_require__(195), __webpack_require__(399)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, $, _, Backbone, React) {\n    \"use strict\";\n    /// <amd-dependency path=\"plotview/plotview.css\" />\n    var MegaPlot = __webpack_require__(401);\n    \"use strict\";\n    var PlotView = (function (_super) {\n        __extends(PlotView, _super);\n        function PlotView() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.rendered = false;\n            return _this;\n        }\n        PlotView.prototype.initialize = function (options) {\n            this.$el.addClass(\"plotresultdiv\");\n            this.resultSet = options.resultSet;\n            //this.autoChartSize = true;\n            //$(window).on('resize.graphview-'+this.cid, _.bind(this.onWindowResize, this));\n        };\n        PlotView.prototype.remove = function () {\n            //$(window).off('resize.graphview-'+this.cid);\n            _super.prototype.remove.call(this);\n            return this;\n        };\n        PlotView.prototype.render = function () {\n            if (window.googleChartLoadPromise == null) {\n                window.googleChartLoadPromise = $.Deferred();\n                var gchartsCallback = function () {\n                    window.googleChartLoadPromise.resolve();\n                };\n                var packages = [\"corechart\"];\n                google.load(\"visualization\", \"1.0\", { \"packages\": packages, \"callback\": gchartsCallback });\n            }\n            window.googleChartLoadPromise.done(_.bind(this.drawGChartWrapper, this));\n            return this;\n        };\n        PlotView.appliesTo = function (resultSet) {\n            return true;\n        };\n        PlotView.getName = function () {\n            return \"Plot\";\n        };\n        PlotView.getViewId = function () {\n            return \"plot\";\n        };\n        PlotView.prototype.drawGChartWrapper = function () {\n            var _this = this;\n            this.rendered = true;\n            this.onWindowResize(true);\n            var dataTable = this.resultSet.table;\n            if (dataTable.length < 1) {\n                this.$el.text(\"Result set is empty\");\n                return;\n            }\n            var data = [];\n            for (var rowCount = 0; rowCount < dataTable.length; rowCount++) {\n                var row = [];\n                var rsRowValues = dataTable[rowCount];\n                for (var i = 0; i < rsRowValues.length; i++) {\n                    var asNum = Number(rsRowValues[i]);\n                    if (isFinite(asNum)) {\n                        row[i] = asNum;\n                    }\n                    else {\n                        row[i] = rsRowValues[i];\n                    }\n                }\n                data.push(row);\n            }\n            var headers = _.pluck(this.resultSet.columns, \"text\");\n            var groupBys = _.pluck(this.resultSet.getGroupingColumns(), \"text\");\n            var selects = _.pluck(this.resultSet.getMetricColumns(), \"text\");\n            var queryParser = this.resultSet.queryParser;\n            var plotProps = {\n                data: data,\n                headers: headers,\n                groupBys: groupBys,\n                selects: selects,\n                isTimeRegroup: queryParser.isTimeRegroup,\n                isInterval: function (param) { return queryParser ? queryParser.isInterval(param) : false; },\n                getBucketedMinMaxInterval: function (param) { return queryParser ? queryParser.getBucketedMinMaxInterval(param) : null; },\n                onSettingsChange: function (settings) {\n                    var cloned = _.clone(settings);\n                    if (cloned['manual'] === false) {\n                        delete cloned['manual'];\n                    }\n                    _this.state = cloned;\n                    _this.trigger(\"statechange\");\n                }\n            };\n            if (this.state && Object.keys(this.state).length > 0) {\n                plotProps.initialState = this.state;\n            }\n            var plot = React.createElement(MegaPlot, plotProps);\n            React.render(plot, this.el);\n        };\n        PlotView.prototype.onWindowResize = function (init) {\n            if (!this.autoChartSize) {\n                return;\n            }\n            //var screenWidth = this.$('.googlegraph').width();\n            //// hacks to get possible max height\n            //var maxHeight = window.innerHeight - this.$el.offset().top - 40;\n            //\n            //if (screenWidth == 0) {\n            //    return;\n            //}\n            //var graphWidth = screenWidth - 15;\n            //var ratio = 2.5;\n            //// fix aspect ratio and ensure large enough to render\n            //var graphHeight = Math.min(maxHeight, Math.round(graphWidth / ratio));\n            //graphWidth = graphHeight * ratio;\n            //if (this.width != graphWidth || this.height != graphHeight) {\n            //    this.width = graphWidth;\n            //    this.height = graphHeight;\n            //    if (init !== true) {\n            //        this.drawGChartWrapper(); // redraw\n            //    }\n            //}\n        };\n        PlotView.prototype.getState = function () {\n            return this.state;\n        };\n        PlotView.prototype.setState = function (state) {\n            if (!state['manual']) {\n                state['manual'] = false;\n            }\n            this.state = state;\n        };\n        return PlotView;\n    }(Backbone.View));\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = PlotView;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceMappingURL=data:application/json;base64,");

/***/ },

/***/ 462:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/// <reference path=\"../deps.d.ts\" />\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(1), __webpack_require__(2), __webpack_require__(8), __webpack_require__(12), __webpack_require__(28), __webpack_require__(463)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, $, _, Backbone, utils_1, columntype_1, d3_heatmap_canvas_1) {\n    \"use strict\";\n    __webpack_require__(465);\n    __webpack_require__(466);\n    __webpack_require__(468);\n    __webpack_require__(469);\n    __webpack_require__(470);\n    \"use strict\";\n    var PivotView = (function (_super) {\n        __extends(PivotView, _super);\n        function PivotView() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.pivotUIOptions = {};\n            _this.initialSettingsSet = false;\n            return _this;\n        }\n        PivotView.prototype.initialize = function (options) {\n            this.resultSet = options.resultSet;\n            this.$el.addClass(\"pivotresultdiv\");\n        };\n        PivotView.prototype.render = function () {\n            if (window.googleChartLoadPromise == null) {\n                window.googleChartLoadPromise = $.Deferred();\n                google.load(\"visualization\", \"1\", { \"packages\": [\"corechart\"], \"callback\": function () {\n                        window.googleChartLoadPromise.resolve();\n                    }\n                });\n            }\n            window.googleChartLoadPromise.done(_.bind(this.renderPivotTable, this));\n            return this;\n        };\n        PivotView.appliesTo = function (resultSet) {\n            return true;\n        };\n        PivotView.getName = function () {\n            return \"Pivot\";\n        };\n        PivotView.getViewId = function () {\n            return \"pivot\";\n        };\n        PivotView.prototype.getTableToRender = function () {\n            var resultSetTable = this.resultSet.table;\n            var columns = this.resultSet.columns;\n            var table = [];\n            var header = _.pluck(this.resultSet.columns, 'text');\n            table.push(header);\n            var timeColumnIndex = _.findIndex(columns, function (col) { return col.type == columntype_1.default.TIME; });\n            var extractTime = function (value) {\n                return value.slice(1, 20).replace(\" \", \"T\");\n            };\n            //        if(processTime) {\n            //            var minutesTimezoneOffset = new Date().getTimezoneOffset();\n            //            var msTimezoneOffset = minutesTimezoneOffset * 60 * 1000;\n            //            var hoursTimezoneOffset = minutesTimezoneOffset / 60;\n            //            var isoTimezoneOffset = (hoursTimezoneOffset > 0 ? '-' : '+') +\n            //                (hoursTimezoneOffset < 10 ? '0' : '') +\n            //                hoursTimezoneOffset +\n            //                \"00\";\n            //        }\n            var convertBucketColumns = [];\n            var numberColumns = [];\n            for (var columnNumber = 0; columnNumber < columns.length; columnNumber++) {\n                if (columns[columnNumber].isBucketColumn) {\n                    convertBucketColumns.push(columnNumber);\n                    numberColumns.push(columnNumber);\n                }\n                if (columns[columnNumber].type == columntype_1.default.METRIC) {\n                    numberColumns.push(columnNumber);\n                }\n            }\n            var convertBuckets = convertBucketColumns.length > 0;\n            var extractBucketValue = utils_1.default.getBucketStart;\n            for (var i = 0; i < resultSetTable.length; i++) {\n                var row = resultSetTable[i].slice();\n                if (timeColumnIndex >= 0) {\n                    row[timeColumnIndex] = row[timeColumnIndex].slice(1, 20);\n                }\n                if (convertBuckets) {\n                    for (var _i = 0, convertBucketColumns_1 = convertBucketColumns; _i < convertBucketColumns_1.length; _i++) {\n                        var bucketColumn = convertBucketColumns_1[_i];\n                        row[bucketColumn] = extractBucketValue(row[bucketColumn]);\n                    }\n                }\n                for (var _a = 0, numberColumns_1 = numberColumns; _a < numberColumns_1.length; _a++) {\n                    var bucketColumn = numberColumns_1[_a];\n                    row[bucketColumn] = Number(row[bucketColumn]);\n                }\n                table.push(row);\n            }\n            return table;\n        };\n        PivotView.prototype.renderPivotTable = function () {\n            var modifiedTable = this.getTableToRender();\n            //MODIFIES THE LIST OF AGGREGATORS /////////////\n            var allowedAggregators = _.extend({}, $.pivotUtilities.aggregators);\n            // disable not useful\n            delete allowedAggregators[\"Count\"];\n            delete allowedAggregators[\"Count Unique Values\"];\n            delete allowedAggregators[\"List Unique Values\"];\n            //delete allowedAggregators[\"Sum over Sum\"];\n            delete allowedAggregators[\"80% Upper Bound\"];\n            delete allowedAggregators[\"80% Lower Bound\"];\n            delete allowedAggregators[\"Count as Fraction of Total\"];\n            delete allowedAggregators[\"Count as Fraction of Rows\"];\n            delete allowedAggregators[\"Count as Fraction of Columns\"];\n            var numberFormat = $.pivotUtilities.numberFormat;\n            var joinSum = function (arg) {\n                return function (data, rowKey, colKey) {\n                    return {\n                        sum: 0,\n                        push: function (record) {\n                            for (var attr = 0; attr < arg.length; attr++) {\n                                if (!isNaN(parseFloat(record[arg[attr]]))) {\n                                    this.sum += parseFloat(record[arg[attr]]);\n                                }\n                            }\n                            return this.sum;\n                        },\n                        value: function () {\n                            return this.sum;\n                        },\n                        format: numberFormat(),\n                        label: \"Join Sum\",\n                        numInputs: 3\n                    };\n                };\n            };\n            var subtraction = function (arg) {\n                return function (data, rowKey, colKey) {\n                    return {\n                        total: 0,\n                        push: function (record) {\n                            if (!isNaN(parseFloat(record[arg[0]]))) {\n                                this.total += parseFloat(record[arg[0]]);\n                            }\n                            if (!isNaN(parseFloat(record[arg[1]]))) {\n                                this.total -= parseFloat(record[arg[1]]);\n                            }\n                            return this.total;\n                        },\n                        value: function () {\n                            return this.total;\n                        },\n                        format: numberFormat(),\n                        label: \"Subtraction\",\n                        numInputs: 3\n                    };\n                };\n            };\n            allowedAggregators[\"Join Sum\"] = joinSum;\n            allowedAggregators[\"Subtraction\"] = subtraction;\n            //////////////////\n            var rows = _.pluck(this.resultSet.getGroupingColumns(), 'text');\n            var vals = [this.resultSet.columns[this.resultSet.getGroupingColumnsCount()].text];\n            var cols = [];\n            //If there is more than one field being searched, add the last field to the columns.\n            if (rows.length > 1) {\n                cols = [rows.pop()];\n            }\n            var standardRenderers = $.pivotUtilities.renderers;\n            standardRenderers['Table Heatmap'] = standardRenderers['Heatmap'];\n            standardRenderers['Table Col Heatmap'] = standardRenderers['Col Heatmap'];\n            standardRenderers['Table Row Heatmap'] = standardRenderers['Row Heatmap'];\n            delete standardRenderers['Heatmap'];\n            delete standardRenderers['Col Heatmap'];\n            delete standardRenderers['Row Heatmap'];\n            var defaultOptions = {\n                rows: rows,\n                cols: cols,\n                vals: vals,\n                aggregatorName: 'Integer Sum',\n                aggregators: allowedAggregators,\n                renderers: $.extend(standardRenderers, $.pivotUtilities.gchart_renderers, $.pivotUtilities.d3_renderers, \n                // uncomment to enable C3 graphing library based charts\n                //(<any>$).pivotUtilities.c3_renderers,\n                $.pivotUtilities.export_renderers, \n                // Custom D3 & SVG based heapmap implementation. Not as good as the Canvas one but supports mouseover\n                //HeatMapRenderer,\n                d3_heatmap_canvas_1.default),\n                //sorters: (attr: string) => {\n                //    if(attr == \"time\") {\n                //        return function (a: string, b: string) {\n                //            return new Date(a).getTime() - new Date(b).getTime();\n                //        };\n                //    }\n                //},\n                onRefresh: _.bind(this.pluginSettingsChanged, this)\n            };\n            var mergedOptions = _.extend(defaultOptions, this.pivotUIOptions);\n            //Prevents \"item is undefined\" errors when manipulating the data on the next lines.\n            if (typeof mergedOptions.rows == 'undefined') {\n                mergedOptions.rows = [];\n            }\n            if (typeof mergedOptions.cols == 'undefined') {\n                mergedOptions.cols = [];\n            }\n            //Gets all the fields.\n            var header = modifiedTable[0];\n            //If a new search was made, modifying which fields were being searched on\n            //and removed the fields that were originally on the row or collumn\n            //Detect that they were removed\n            var wasDeletedRow = false;\n            var wasDeletedCol = false;\n            for (var i = 0; i < mergedOptions.rows.length; i++) {\n                var key = mergedOptions.rows[i];\n                if (header.indexOf(key) == -1) {\n                    wasDeletedRow = true;\n                    delete mergedOptions.rows[i];\n                }\n            }\n            for (var i = 0; i < mergedOptions.cols.length; i++) {\n                var key = mergedOptions.cols[i];\n                if (header.indexOf(key) == -1) {\n                    wasDeletedCol = true;\n                    delete mergedOptions.cols[i];\n                }\n            }\n            //If fields were deleted or change in this search\n            //Add a new field to the cols or rows, as long as it is not a numerical value\n            if (wasDeletedRow) {\n                for (var i = 0; i < header.length; i++) {\n                    var key = header[i];\n                    if (mergedOptions.cols.indexOf(key) == -1 && mergedOptions.vals.indexOf(key)) {\n                        mergedOptions.rows.push(key);\n                        break;\n                    }\n                }\n            }\n            if (wasDeletedCol) {\n                for (var i = 0; i < header.length; i++) {\n                    var key = header[i];\n                    if (mergedOptions.rows.indexOf(key) == -1 && mergedOptions.vals.indexOf(key)) {\n                        mergedOptions.cols.push(key);\n                        break;\n                    }\n                }\n            }\n            this.$el.pivotUI(modifiedTable, mergedOptions);\n            //Create a new url.\n            this.pluginSettingsChanged(mergedOptions);\n        };\n        PivotView.prototype.pluginSettingsChanged = function (pivotUIOptions) {\n            if (!this.initialSettingsSet) {\n                this.initialSettingsSet = true;\n                return;\n            }\n            this.pivotUIOptions = pivotUIOptions;\n            this.trigger(\"statechange\");\n        };\n        PivotView.prototype.getState = function () {\n            return {\n                cols: this.pivotUIOptions.cols,\n                rows: this.pivotUIOptions.rows,\n                //            vals: this.pivotUIOptions.vals,   // TODO: uncomment when we have positional column references\n                aggregator: this.pivotUIOptions.aggregatorName,\n                renderer: this.pivotUIOptions.rendererName\n            };\n        };\n        PivotView.prototype.setState = function (state) {\n            var aggregatorName = state.aggregator;\n            if (aggregatorName == \"sum\") {\n                aggregatorName = \"Sum\";\n            }\n            else if (aggregatorName == \"intSum\") {\n                aggregatorName = \"Integer Sum\";\n            }\n            var newOptions = {\n                cols: state.cols,\n                rows: state.rows,\n                //            vals: state.vals, // TODO: uncomment when we have positional column references\n                aggregatorName: aggregatorName,\n                rendererName: state.renderer\n            };\n            var customSet = newOptions[\"cols\"] || newOptions[\"rows\"];\n            // don't want empty values to overwrite the defaults\n            for (var key in newOptions) {\n                if (!newOptions[key] && !((key == 'cols' || key == 'rows') && customSet)) {\n                    delete newOptions[key];\n                }\n            }\n            this.pivotUIOptions = newOptions;\n        };\n        return PivotView;\n    }(Backbone.View));\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = PivotView;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceMappingURL=data:application/json;base64,");

/***/ },

/***/ 463:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/// <reference path=\"../deps.d.ts\" />\n/// <reference path=\"../utils.ts\" />\n/// <amd-dependency path=\"pivottable\" />\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(1), __webpack_require__(464), __webpack_require__(465)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, $, d3) {\n    \"use strict\";\n    var makeHeatmap = function (chartType) {\n        return function (pivotData, opts) {\n            //Defines rowkeys, and colkeys\n            var rowKeys;\n            rowKeys = pivotData.getRowKeys();\n            if (rowKeys.length === 0) {\n                rowKeys.push([]);\n            }\n            var numberOfRows = rowKeys.length;\n            var colKeys;\n            colKeys = pivotData.getColKeys();\n            if (colKeys.length === 0) {\n                colKeys.push([]);\n            }\n            var numberOfCols = colKeys.length;\n            /*\n             * Creates a data array where the datum is:\n             * datum.val=value\n             * datum.row = row number\n             * datum.col = col number.\n             * */\n            var dataArray = [];\n            var mymin = pivotData.getAggregator(rowKeys[0], colKeys[0]).value();\n            var mymax = mymin;\n            for (var i = 0, len = numberOfCols; i < len; i++) {\n                var colKey = colKeys[i];\n                for (var j = 0, len1 = numberOfRows; j < len1; j++) {\n                    var rowKey = rowKeys[j];\n                    var agg = pivotData.getAggregator(rowKey, colKey);\n                    var value = agg.value();\n                    var aux = {\n                        val: value ? value : 0,\n                        row: numberOfRows - j - 1,\n                        col: i\n                    };\n                    dataArray.push(aux);\n                    mymax = Math.max(mymax, value);\n                    if (!mymin) {\n                        mymin = value;\n                    }\n                    if (value) {\n                        mymin = Math.min(mymin, value);\n                    }\n                    else {\n                    }\n                }\n            }\n            var result = $(\"<div>\").css({\n                width: \"100%\",\n                height: \"100%\"\n            });\n            //Sizes to configure\n            var cellSize = 40; //A size where text can be written comfortably\n            var rowLabelsWidth = 3 * cellSize / 2; //Start of the heatmap X\n            var colLabelsHeight = cellSize / 2; //Start of the heatmap Y\n            var lowerMargin = cellSize;\n            var ratio = 2;\n            // References a few elements by class name outside to compute the graph dimensions\n            var maxHeight = window.innerHeight - $('.pvtRendererArea').offset().top - 40;\n            var containerWidth = $('.pivotresultdiv').innerWidth() - $('.pvtRows').outerWidth() - 50;\n            var containerHeight = Math.min(maxHeight, Math.round(containerWidth / ratio));\n            containerWidth = containerHeight * ratio;\n            var legendToDataSeparation = cellSize / 2;\n            var legendTextWidth = cellSize;\n            var gradientTextSeparation = 3;\n            var gradientWidth = cellSize / 2;\n            var gradientFrame = 2;\n            var backgroundColor = \"white\";\n            //Sizes calculated based on the above data\n            gradientWidth = gradientWidth - 2 * gradientFrame;\n            var legendWidth = gradientWidth + 2 * gradientFrame + gradientTextSeparation + legendTextWidth;\n            var rightMarginDataSize = legendWidth + legendToDataSeparation;\n            var maxDataWidth = containerWidth - rowLabelsWidth - rightMarginDataSize;\n            var maxDataHeight = containerHeight - colLabelsHeight - lowerMargin;\n            var dataHeight = maxDataHeight;\n            var dataWidth = maxDataWidth;\n            var startRightMargin = containerWidth - rightMarginDataSize;\n            var startTextGradientX = startRightMargin + legendToDataSeparation;\n            var startGradientX = startTextGradientX + legendTextWidth + gradientTextSeparation + gradientFrame;\n            var gradientHeight = dataHeight;\n            var gradientTextWidth = startGradientX - startTextGradientX - gradientTextSeparation;\n            var legendWidth = containerWidth - startTextGradientX;\n            var legendHeight = containerHeight; //Better be larger than the real value, so that the drawing doesn't get cropped\n            var startLegendX = startTextGradientX;\n            var parentContainer = result[0];\n            //Sets the parent container position ro relative, to allow to position\n            //its children elements. Css requirement.\n            var parentContainerSelection = d3.select(parentContainer)\n                .style(\"position\", \"relative\");\n            var heatmap = parentContainerSelection\n                .style(\"position\", \"relative\")\n                .style(\"overflow\", \"visible\")\n                .style(\"width\", containerWidth + \"px\")\n                .style(\"height\", containerHeight + \"px\");\n            //Heatmap color function\n            var hueStart = 220;\n            var hueEnd = 0;\n            var deltaHue = hueEnd - hueStart;\n            var satStart = 1;\n            var satEnd = 1;\n            var deltaSat = satEnd - satStart;\n            var lightStart = 0.5;\n            var lightEnd = 0.6;\n            var deltaLight = lightEnd - lightStart;\n            var colorHeatmap = function (value) {\n                var theHue = hueStart + deltaHue * value;\n                var theSat = satStart + deltaSat * value;\n                var theLight = lightStart + deltaLight * value;\n                return d3.hsl(theHue, theSat, theLight).rgb().toString();\n            };\n            var linearScaleDataColor = d3.scaleLinear()\n                .domain([mymin, mymax])\n                .range([0, 1]);\n            var logScaleDataColor = d3.scaleLog()\n                .domain([mymin, mymax])\n                .range([0, 1]);\n            var linearScaleRow = d3.scaleLinear()\n                .domain([0, numberOfRows])\n                .range([0, 1]);\n            var linearScaleCol = d3.scaleLinear()\n                .domain([0, numberOfCols])\n                .range([0, 1]);\n            if (chartType === \"Heatmap d3\") {\n                var scaleColor = linearScaleDataColor;\n            }\n            else if (chartType === \"Heatmap d3 log\") {\n                scaleColor = logScaleDataColor;\n            }\n            var scaleCol = function (x) {\n                return Math.floor(linearScaleCol(dataWidth * x));\n            };\n            var scaleRow = function (x) {\n                return Math.floor(linearScaleRow(dataHeight * x));\n            };\n            var heatmapCanvas = heatmap.append(\"canvas\")\n                .attr(\"width\", containerWidth)\n                .attr(\"height\", containerHeight)\n                .style(\"position\", \"absolute\");\n            var canvasNode = heatmapCanvas.node();\n            var context = canvasNode.getContext('2d');\n            context.beginPath();\n            context.rect(0, 0, containerWidth, containerHeight);\n            context.fillStyle = backgroundColor;\n            context.fill();\n            context.closePath();\n            var nextRowToPrint = 0;\n            var totalRowsToPrint = 10;\n            var totalColsToPrint = 10;\n            var font = \"12px sans-serif\";\n            var textBaselineRow = \"middle\";\n            var textBaselineCol = \"Middle\";\n            var textAlignCol = \"center\";\n            var textAlignRow = \"left\";\n            var indexDifferenceRows = (numberOfRows - 1) / totalRowsToPrint;\n            rowKeys.forEach(function (datum, index) {\n                if (Math.floor(nextRowToPrint) <= index) {\n                    nextRowToPrint = nextRowToPrint + indexDifferenceRows;\n                    context.beginPath();\n                    context.fillStyle = \"black\";\n                    context.font = font;\n                    context.textAlign = textAlignRow;\n                    context.textBaseline = textBaselineRow;\n                    context.fillText(datum, 0, colLabelsHeight + (scaleRow(numberOfRows - index) + scaleRow(numberOfRows - index - 1)) / 2, rowLabelsWidth);\n                    context.closePath();\n                }\n            });\n            var indexDifferenceCols = (numberOfCols - 1) / totalColsToPrint;\n            var nextColToPrint = 0;\n            var colLabelsWidth = dataWidth / (totalColsToPrint);\n            colKeys.forEach(function (datum, index) {\n                if (Math.floor(nextColToPrint) <= index) {\n                    nextColToPrint = nextColToPrint + indexDifferenceCols;\n                    context.beginPath();\n                    context.font = font;\n                    context.textAlign = textAlignCol;\n                    context.textBaseline = textBaselineCol;\n                    context.fillText(datum, rowLabelsWidth + (scaleCol(index) + scaleCol(index + 1)) / 2, colLabelsHeight / 2, colLabelsWidth);\n                    context.closePath();\n                }\n            });\n            var canvasLegend = document.createElement('canvas'); //Canvas not appended to DOM\n            canvasLegend.setAttribute('width', legendWidth + \"px\");\n            canvasLegend.setAttribute('height', legendHeight + \"px\");\n            var contextLegend = canvasLegend.getContext('2d');\n            //Create gradient for the data\n            var measurementPoints = [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0];\n            var numberOfMeasurementPoints = measurementPoints.length;\n            measurementPoints.reverse();\n            contextLegend.beginPath();\n            var gradient = context.createLinearGradient(0, colLabelsHeight, 0, colLabelsHeight + dataHeight);\n            measurementPoints.forEach(function (datum, index) {\n                var colorGrad = colorHeatmap(datum);\n                var normalizedIndex = index / (numberOfMeasurementPoints - 1);\n                gradient.addColorStop(normalizedIndex, colorGrad);\n                contextLegend.font = \"9px sans-serif\";\n                contextLegend.textBaseline = textBaselineRow;\n                contextLegend.textAlign = \"left\";\n                contextLegend.fillText(scaleColor.invert(datum).toPrecision(3), 0, colLabelsHeight + dataHeight * normalizedIndex, gradientTextWidth);\n            });\n            contextLegend.fillStyle = gradient;\n            contextLegend.rect(gradientTextWidth + gradientTextSeparation, colLabelsHeight, gradientWidth, gradientHeight);\n            contextLegend.fill();\n            contextLegend.lineWidth = gradientFrame;\n            contextLegend.strokeStyle = 'black';\n            contextLegend.stroke();\n            contextLegend.closePath();\n            var drawLegendPart = function (startX) {\n                context.drawImage(canvasLegend, startX, 0, Math.floor(legendWidth - startX), Math.floor(legendHeight), startLegendX + startX, 0, Math.floor(legendWidth - startX), Math.floor(legendHeight));\n            };\n            var drawWholeLegend = function () { drawLegendPart(0); };\n            var redrawGradient = function () { drawLegendPart(gradientTextSeparation + gradientTextWidth); };\n            drawWholeLegend();\n            //Draw a large black square in the background: Makes it faster to render data with lots of zeros, i.e. world maps\n            context.beginPath();\n            context.rect(rowLabelsWidth, colLabelsHeight, dataWidth, dataHeight);\n            context.fillStyle = \"black\";\n            context.strokeStyle = context.fillStyle;\n            context.fill();\n            context.closePath();\n            dataArray.forEach(function (datum, index) {\n                if (datum.val != 0) {\n                    context.beginPath();\n                    context.rect(rowLabelsWidth + scaleCol(datum.col), colLabelsHeight + scaleRow(datum.row), scaleCol(datum.col + 1) - scaleCol(datum.col), scaleRow(datum.row + 1) - scaleRow(datum.row));\n                    context.fillStyle = datum.val > 0 ? colorHeatmap(scaleColor(datum.val)) : \"black\";\n                    context.strokeStyle = context.fillStyle;\n                    context.fill();\n                    context.closePath();\n                }\n            });\n            ///Legend utils:\n            var findPos = function (canvas, evt) {\n                var rect = canvas.getBoundingClientRect();\n                return {\n                    x: evt.clientX - rect.left,\n                    y: evt.clientY - rect.top\n                };\n            };\n            var invertColor = function (red, green, blue) {\n                var myHue = d3.hsl(d3.rgb(red, green, blue)).h;\n                return (myHue - hueStart) / deltaHue;\n            };\n            $(heatmapCanvas.node()).mousemove(function (e) {\n                var pos = findPos(this, e);\n                var x = pos.x;\n                var y = pos.y;\n                var c = this.getContext('2d');\n                var p = c.getImageData(x, y, 1, 1).data;\n                var red = p[0];\n                var green = p[1];\n                var blue = p[2];\n                var myNormalizedIndex = invertColor(red, green, blue);\n                redrawGradient();\n                if (myNormalizedIndex >= 0) {\n                    var sizeRectangle = 3;\n                    context.beginPath();\n                    context.rect(startGradientX, colLabelsHeight + gradientHeight * (1 - myNormalizedIndex) - sizeRectangle / 2, gradientWidth, sizeRectangle);\n                    context.fillStyle = \"black\";\n                    context.fill();\n                    context.closePath();\n                }\n            });\n            return result;\n        };\n    };\n    var HeatMapRendererCanvas = {\n        \"Heatmap\": makeHeatmap(\"Heatmap d3\"),\n        \"Heatmap log scale\": makeHeatmap(\"Heatmap d3 log\")\n    };\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = HeatMapRendererCanvas;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceMappingURL=data:application/json;base64,");

/***/ },

/***/ 471:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/// <reference path=\"../deps.d.ts\" />\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(8), __webpack_require__(15), __webpack_require__(472), __webpack_require__(9), __webpack_require__(474), __webpack_require__(476)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, _, $, Backbone, iqlclient_1, errorview_1, events_1) {\n    \"use strict\";\n    /// <amd-dependency path=\"resultpresentation/resultpresentation.css\"/>\n    /// <amd-dependency path=\"resultpresentation/presentationview.html\"/>\n    var templateText = __webpack_require__(476);\n    var templateTextWarning = __webpack_require__(478);\n    var PresentationView = (function (_super) {\n        __extends(PresentationView, _super);\n        function PresentationView() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.currentPresentationView = null;\n            _this.template = _.template(templateText);\n            _this.warningTemplate = _.template(templateTextWarning);\n            return _this;\n        }\n        PresentationView.prototype.events = function () {\n            return {\n                \"click .cancelbutton\": PresentationView.onCancelClicked\n            };\n        };\n        PresentationView.prototype.initialize = function () {\n            this.listenTo(this.model, \"change:resultSet\", this.onResultSetChanged);\n            this.listenTo(this.model, \"change:selectedView\", this.onViewChangedInModel);\n            this.listenTo(this.model, \"change:progress:add\", this.onProgressAdd);\n            this.listenTo(this.model, \"change:progress:update\", this.onProgressUpdate);\n            this.listenTo(this.model, \"change:progress:reset\", this.onProgressReset);\n            this.listenTo(this.model, \"change:errorText\", this.onError);\n            this.listenTo(this.model, \"change:isLoading\", this.onLoadingChange);\n            this.listenTo(this.model, \"change:warningIsOpen\", this.renderWarnings);\n        };\n        PresentationView.prototype.render = function () {\n            var _this = this;\n            this.$el.html(this.template({ model: this.model }));\n            // append tabs. todo: move to template?\n            this.model.views.forEach(function (view) {\n                _this.$(\".viewtabs\").append($('<li data-view-type=\"' + view.getViewId() + '\">' +\n                    '<a href=\"#dummytab\">' + view.getName() + '</a>' +\n                    '</li>'));\n            });\n            // init jqueryui tabs widget\n            this.$el.tabs({\n                beforeActivate: _.bind(this.onViewTypeChanged, this)\n            });\n            // init resizable\n            this.$el.resizable({ handles: \"e\" });\n            if (PresentationView.isMac()) {\n                this.$el.css(\"margin-right\", \"20px\");\n            }\n            return this;\n        };\n        PresentationView.prototype.onResultSetChanged = function () {\n            this.renderResult();\n        };\n        PresentationView.prototype.onProgressAdd = function (index, columnNames) {\n            var serverOperationsCount = this.model.progress[index].total;\n            var offset = serverOperationsCount - columnNames.length;\n            var getLabelTextForOperationIndex = function (value) {\n                var groupByText = \"Grouping by \";\n                var filteringText = \"Filtering...\";\n                var getStatsText = \"Getting stats\";\n                var streamingText = \"Streaming rows and rendering\";\n                var doneText = \"Done\";\n                var index = value - offset;\n                var labelText = \"\";\n                if (value == serverOperationsCount + 1) {\n                    labelText = doneText;\n                }\n                else if (value == serverOperationsCount) {\n                    labelText = streamingText;\n                }\n                else if (index >= 0) {\n                    if (columnNames.length == 1 && columnNames[0].trim() === \"\") {\n                        labelText = getStatsText;\n                    }\n                    else {\n                        labelText = groupByText + columnNames[index];\n                    }\n                }\n                else {\n                    labelText = filteringText;\n                }\n                return labelText;\n            };\n            var progressbar = $('<div></div>');\n            progressbar.data('index', index);\n            progressbar.addClass('progressbar progress-' + index);\n            var progressbarlabel = $('<div></div>').appendTo(progressbar);\n            var initialText = getLabelTextForOperationIndex(0);\n            progressbarlabel.text(initialText);\n            progressbarlabel.addClass('progressbarlabel');\n            this.$('.loadingspinner').hide();\n            progressbar.progressbar({\n                value: this.model.progress[index].completed,\n                max: serverOperationsCount + 1,\n                change: function () {\n                    var value = progressbar.progressbar(\"value\");\n                    var labelText = getLabelTextForOperationIndex(value);\n                    progressbarlabel.text(labelText);\n                },\n                complete: function () {\n                    // noop, when it completes the progress bar is hidden\n                }\n            });\n            this.$(\".iql-progress\").append(progressbar);\n            var progressBars = this.$(\".iql-progress\").children();\n            progressBars.detach().sort(function (a, b) {\n                return parseInt(a.dataset.index, 10) > parseInt(b.dataset.index, 10) ? 1 : -1;\n            }).appendTo(\".iql-progress\");\n        };\n        PresentationView.prototype.onProgressUpdate = function (index) {\n            var progressbar = this.$('.progress-' + index);\n            progressbar.progressbar(\"value\", this.model.progress[index].completed);\n        };\n        PresentationView.prototype.onProgressReset = function () {\n            this.$('.iql-progress').children().remove();\n        };\n        PresentationView.prototype.renderResult = function () {\n            if (this.model.resultSet == null) {\n                return; // nothing to render yet\n            }\n            // tab deactivation is disabled so that users can pre-select any view they like before running a new query\n            //        this.$el.tabs(\"enable\");\n            //        this.model.views.forEach((view: ViewStaticInterface, index: number) => {\n            //            if(view.appliesTo && !view.appliesTo(this.model.resultSet)) {\n            //                this.$el.tabs(\"disable\", index);\n            //                if(this.model.selectedView == view.getViewId()) {\n            //                    this.model.selectedView = PresentationModel.DEFAULT_VIEW_NAME;\n            //                }\n            //            }\n            //        });\n            this.renderWarnings();\n            this.$('.viewtabs > li').addClass(\"presentation-loaded\");\n            var viewOptions = { resultSet: this.model.resultSet };\n            var viewClass = this.getViewClassForId(this.model.selectedView);\n            var viewInstance = new viewClass(viewOptions);\n            var viewName = this.model.selectedView.toLowerCase();\n            var state = this.model.viewToState[viewName] || {};\n            // TODO: avoid casting hacks\n            viewInstance.setState(state);\n            this.renderNewPresentation(viewInstance);\n        };\n        PresentationView.prototype.renderWarnings = function () {\n            var _this = this;\n            this.$('.warningdiv').attr(\"visibility\", \"hidden\");\n            // render the first time to see if text wraps, and the second time to actually render it\n            this.$('.warningdiv').html(this.warningTemplate({ model: this.model, willWarningsWrap: false }));\n            this.$('.warningdiv').html(this.warningTemplate({ model: this.model, willWarningsWrap: this.willWarningsWrap() }));\n            this.$('.warningdiv').attr(\"visibility\", \"visible\");\n            this.$('.warning-panel').click(function () { _this.model.warningIsOpen = !_this.model.warningIsOpen; });\n        };\n        PresentationView.prototype.willWarningsWrap = function () {\n            var height_em = this.$('.warning-body').height() / parseFloat(this.$(\".warning-body\").css(\"font-size\"));\n            return height_em > 2;\n        };\n        PresentationView.prototype.onError = function () {\n            if (this.model.errorText == null) {\n                return;\n            }\n            this.renderNewPresentation(new errorview_1.default({ errorText: this.model.errorText }));\n        };\n        PresentationView.prototype.renderNewPresentation = function (view) {\n            if (this.currentPresentationView !== null) {\n                this.stopListening(this.currentPresentationView);\n                this.currentPresentationView.remove();\n            }\n            this.$el.append(view.$el);\n            try {\n                view.render();\n            }\n            catch (e) {\n                console.error(e.stack);\n            }\n            this.currentPresentationView = view;\n            this.listenTo(view, \"statechange\", this.onViewStateChange);\n        };\n        PresentationView.prototype.onViewStateChange = function () {\n            if (this.currentPresentationView) {\n                var viewName = PresentationView.getViewNameForInstance(this.currentPresentationView).toLowerCase();\n                this.model.viewToState[viewName] = this.currentPresentationView.getState();\n                this.model.updateCombinedState();\n            }\n        };\n        PresentationView.prototype.onViewTypeChanged = function (e, ui) {\n            var newTab = ui.newTab;\n            this.model.selectedView = newTab.data(\"view-type\");\n        };\n        PresentationView.prototype.onViewChangedInModel = function () {\n            this.$el.tabs(\"option\", \"active\", this.getViewIndexForId(this.model.selectedView));\n            this.renderResult();\n        };\n        PresentationView.prototype.getViewIndexForId = function (viewId) {\n            var viewIndex = 0;\n            this.model.views.forEach(function (view, index) {\n                if (view.getViewId() == viewId) {\n                    viewIndex = index;\n                }\n            });\n            return viewIndex;\n        };\n        PresentationView.prototype.getViewClassForId = function (viewId) {\n            var viewMatch = this.model.views[0];\n            this.model.views.forEach(function (view) {\n                if (view.getViewId() == viewId) {\n                    viewMatch = view;\n                }\n            });\n            return viewMatch;\n        };\n        PresentationView.getViewNameForInstance = function (viewInstance) {\n            return Object.getPrototypeOf(viewInstance).constructor.getName();\n        };\n        PresentationView.prototype.onLoadingChange = function () {\n            this.$(\".loadingdiv\").toggle(this.model.isLoading);\n            if (this.model.isLoading) {\n                this.$('.loadingspinner').show();\n                // cancellation is currently only supported in IQL1\n                this.$('.cancelcontainer').toggleClass(\"hidden\", iqlclient_1.default.IQLLanguageVersion == 2);\n            }\n        };\n        PresentationView.isMac = function () {\n            return navigator.userAgent.indexOf(\"Mac OS X\") != -1;\n        };\n        PresentationView.onCancelClicked = function () {\n            events_1.default.eventBus.trigger(events_1.default.cancel);\n        };\n        return PresentationView;\n    }(Backbone.View));\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = PresentationView;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDcxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3Jlc3VsdHByZXNlbnRhdGlvbi9wcmVzZW50YXRpb252aWV3LnRzPzViMWYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL2RlcHMuZC50c1wiIC8+XG5cbi8vLyA8YW1kLWRlcGVuZGVuY3kgcGF0aD1cInJlc3VsdHByZXNlbnRhdGlvbi9yZXN1bHRwcmVzZW50YXRpb24uY3NzXCIvPlxuLy8vIDxhbWQtZGVwZW5kZW5jeSBwYXRoPVwicmVzdWx0cHJlc2VudGF0aW9uL3ByZXNlbnRhdGlvbnZpZXcuaHRtbFwiLz5cbnZhciB0ZW1wbGF0ZVRleHQgOiBzdHJpbmcgPSByZXF1aXJlKCdyZXN1bHRwcmVzZW50YXRpb24vcHJlc2VudGF0aW9udmlldy5odG1sJyk7XG52YXIgdGVtcGxhdGVUZXh0V2FybmluZyA6IHN0cmluZyA9IHJlcXVpcmUoJ3Jlc3VsdHByZXNlbnRhdGlvbi93YXJuaW5ndmlldy5odG1sJyk7XG5cbmltcG9ydCBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpO1xuaW1wb3J0ICQgPSByZXF1aXJlKCdqcXVlcnknKTtcbmltcG9ydCBCYWNrYm9uZSA9IHJlcXVpcmUoJ2JhY2tib25lJyk7XG5cbmltcG9ydCBSZXN1bHRTZXQgZnJvbSAncmVzdWx0c2V0JztcbmltcG9ydCBJUUxDbGllbnQgZnJvbSAnaXFsY2xpZW50JztcbmltcG9ydCBQcmVzZW50YXRpb25Nb2RlbCBmcm9tICdyZXN1bHRwcmVzZW50YXRpb24vcHJlc2VudGF0aW9ubW9kZWwnO1xuXG5pbXBvcnQgVmlld1N0YXRpY0ludGVyZmFjZSBmcm9tICd2aWV3c3RhdGljaW50ZXJmYWNlJztcbmltcG9ydCBWaWV3SW50ZXJmYWNlIGZyb20gJ3ZpZXdpbnRlcmZhY2UnO1xuaW1wb3J0IEVycm9yVmlldyBmcm9tICdlcnJvcnZpZXcnO1xuaW1wb3J0IEV2ZW50cyBmcm9tICdldmVudHMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQcmVzZW50YXRpb25WaWV3IGV4dGVuZHMgQmFja2JvbmUuVmlldzxQcmVzZW50YXRpb25Nb2RlbD4ge1xuICAgIHByaXZhdGUgY3VycmVudFByZXNlbnRhdGlvblZpZXc6IEJhY2tib25lLlZpZXc8YW55PiA9IG51bGw7XG5cbiAgICBwcml2YXRlIHRlbXBsYXRlIDogKC4uLmRhdGE6IGFueVtdKSA9PiBzdHJpbmcgPSBfLnRlbXBsYXRlKHRlbXBsYXRlVGV4dCk7XG4gICAgcHJpdmF0ZSB3YXJuaW5nVGVtcGxhdGUgOiAoLi4uZGF0YTogYW55W10pID0+IHN0cmluZyA9IF8udGVtcGxhdGUodGVtcGxhdGVUZXh0V2FybmluZyk7XG5cbiAgICBldmVudHMoKSB7XG4gICAgICAgIHJldHVybiA8YW55PntcbiAgICAgICAgICAgIFwiY2xpY2sgLmNhbmNlbGJ1dHRvblwiOiBQcmVzZW50YXRpb25WaWV3Lm9uQ2FuY2VsQ2xpY2tlZFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGluaXRpYWxpemUoKSB7XG4gICAgICAgIHRoaXMubGlzdGVuVG8odGhpcy5tb2RlbCwgXCJjaGFuZ2U6cmVzdWx0U2V0XCIsIHRoaXMub25SZXN1bHRTZXRDaGFuZ2VkKTtcbiAgICAgICAgdGhpcy5saXN0ZW5Ubyh0aGlzLm1vZGVsLCBcImNoYW5nZTpzZWxlY3RlZFZpZXdcIiwgdGhpcy5vblZpZXdDaGFuZ2VkSW5Nb2RlbCk7XG4gICAgICAgIHRoaXMubGlzdGVuVG8odGhpcy5tb2RlbCwgXCJjaGFuZ2U6cHJvZ3Jlc3M6YWRkXCIsIHRoaXMub25Qcm9ncmVzc0FkZCk7XG4gICAgICAgIHRoaXMubGlzdGVuVG8odGhpcy5tb2RlbCwgXCJjaGFuZ2U6cHJvZ3Jlc3M6dXBkYXRlXCIsIHRoaXMub25Qcm9ncmVzc1VwZGF0ZSk7XG4gICAgICAgIHRoaXMubGlzdGVuVG8odGhpcy5tb2RlbCwgXCJjaGFuZ2U6cHJvZ3Jlc3M6cmVzZXRcIiwgdGhpcy5vblByb2dyZXNzUmVzZXQpO1xuICAgICAgICB0aGlzLmxpc3RlblRvKHRoaXMubW9kZWwsIFwiY2hhbmdlOmVycm9yVGV4dFwiLCB0aGlzLm9uRXJyb3IpO1xuICAgICAgICB0aGlzLmxpc3RlblRvKHRoaXMubW9kZWwsIFwiY2hhbmdlOmlzTG9hZGluZ1wiLCB0aGlzLm9uTG9hZGluZ0NoYW5nZSk7XG4gICAgICAgIHRoaXMubGlzdGVuVG8odGhpcy5tb2RlbCwgXCJjaGFuZ2U6d2FybmluZ0lzT3BlblwiLCB0aGlzLnJlbmRlcldhcm5pbmdzKTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSA6IEJhY2tib25lLlZpZXc8UHJlc2VudGF0aW9uTW9kZWw+IHtcbiAgICAgICAgdGhpcy4kZWwuaHRtbCh0aGlzLnRlbXBsYXRlKHttb2RlbDogdGhpcy5tb2RlbH0pKTtcblxuICAgICAgICAvLyBhcHBlbmQgdGFicy4gdG9kbzogbW92ZSB0byB0ZW1wbGF0ZT9cbiAgICAgICAgdGhpcy5tb2RlbC52aWV3cy5mb3JFYWNoKCh2aWV3OiBWaWV3U3RhdGljSW50ZXJmYWNlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLiQoXCIudmlld3RhYnNcIikuYXBwZW5kKFxuICAgICAgICAgICAgICAgICQoJzxsaSBkYXRhLXZpZXctdHlwZT1cIicgKyB2aWV3LmdldFZpZXdJZCgpICsgJ1wiPicgK1xuICAgICAgICAgICAgICAgICAgICAnPGEgaHJlZj1cIiNkdW1teXRhYlwiPicgKyB2aWV3LmdldE5hbWUoKSArICc8L2E+JyArXG4gICAgICAgICAgICAgICAgJzwvbGk+JykpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gaW5pdCBqcXVlcnl1aSB0YWJzIHdpZGdldFxuICAgICAgICB0aGlzLiRlbC50YWJzKHtcbiAgICAgICAgICAgIGJlZm9yZUFjdGl2YXRlOiBfLmJpbmQodGhpcy5vblZpZXdUeXBlQ2hhbmdlZCwgdGhpcylcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gaW5pdCByZXNpemFibGVcbiAgICAgICAgdGhpcy4kZWwucmVzaXphYmxlKHsgaGFuZGxlczogXCJlXCJ9KTtcbiAgICAgICAgaWYoUHJlc2VudGF0aW9uVmlldy5pc01hYygpKSB7XG4gICAgICAgICAgICB0aGlzLiRlbC5jc3MoXCJtYXJnaW4tcmlnaHRcIiwgXCIyMHB4XCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgb25SZXN1bHRTZXRDaGFuZ2VkKCkge1xuICAgICAgICB0aGlzLnJlbmRlclJlc3VsdCgpO1xuICAgIH1cblxuICAgIG9uUHJvZ3Jlc3NBZGQoaW5kZXg6IG51bWJlciwgY29sdW1uTmFtZXM6IHN0cmluZ1tdKSB7XG4gICAgICAgIHZhciBzZXJ2ZXJPcGVyYXRpb25zQ291bnQgPSB0aGlzLm1vZGVsLnByb2dyZXNzW2luZGV4XS50b3RhbDtcbiAgICAgICAgdmFyIG9mZnNldCA9IHNlcnZlck9wZXJhdGlvbnNDb3VudCAtIGNvbHVtbk5hbWVzLmxlbmd0aDtcbiAgICAgICAgdmFyIGdldExhYmVsVGV4dEZvck9wZXJhdGlvbkluZGV4ID0gZnVuY3Rpb24odmFsdWU6IG51bWJlcik6IHN0cmluZyB7XG4gICAgICAgICAgICB2YXIgZ3JvdXBCeVRleHQgPSBcIkdyb3VwaW5nIGJ5IFwiO1xuICAgICAgICAgICAgdmFyIGZpbHRlcmluZ1RleHQgPSBcIkZpbHRlcmluZy4uLlwiO1xuICAgICAgICAgICAgdmFyIGdldFN0YXRzVGV4dCA9IFwiR2V0dGluZyBzdGF0c1wiO1xuICAgICAgICAgICAgdmFyIHN0cmVhbWluZ1RleHQgPSBcIlN0cmVhbWluZyByb3dzIGFuZCByZW5kZXJpbmdcIjtcbiAgICAgICAgICAgIHZhciBkb25lVGV4dCA9IFwiRG9uZVwiO1xuXG4gICAgICAgICAgICB2YXIgaW5kZXggPSB2YWx1ZSAtIG9mZnNldDtcbiAgICAgICAgICAgIHZhciBsYWJlbFRleHQgPSBcIlwiO1xuICAgICAgICAgICAgaWYodmFsdWUgPT0gc2VydmVyT3BlcmF0aW9uc0NvdW50ICsgMSkge1xuICAgICAgICAgICAgICAgIGxhYmVsVGV4dCA9IGRvbmVUZXh0O1xuICAgICAgICAgICAgfSBlbHNlIGlmKHZhbHVlID09IHNlcnZlck9wZXJhdGlvbnNDb3VudCkge1xuICAgICAgICAgICAgICAgIGxhYmVsVGV4dCA9IHN0cmVhbWluZ1RleHQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgICAgIGlmKGNvbHVtbk5hbWVzLmxlbmd0aCA9PSAxICYmIGNvbHVtbk5hbWVzWzBdLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbFRleHQgPSBnZXRTdGF0c1RleHQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbGFiZWxUZXh0ID0gZ3JvdXBCeVRleHQgKyBjb2x1bW5OYW1lc1tpbmRleF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsYWJlbFRleHQgPSBmaWx0ZXJpbmdUZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGxhYmVsVGV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgcHJvZ3Jlc3NiYXIgPSAkKCc8ZGl2PjwvZGl2PicpO1xuICAgICAgICBwcm9ncmVzc2Jhci5kYXRhKCdpbmRleCcsIGluZGV4KTtcbiAgICAgICAgcHJvZ3Jlc3NiYXIuYWRkQ2xhc3MoJ3Byb2dyZXNzYmFyIHByb2dyZXNzLScraW5kZXgpO1xuXG4gICAgICAgIHZhciBwcm9ncmVzc2JhcmxhYmVsID0gJCgnPGRpdj48L2Rpdj4nKS5hcHBlbmRUbyhwcm9ncmVzc2Jhcik7XG4gICAgICAgIHZhciBpbml0aWFsVGV4dCA9IGdldExhYmVsVGV4dEZvck9wZXJhdGlvbkluZGV4KDApO1xuICAgICAgICBwcm9ncmVzc2JhcmxhYmVsLnRleHQoaW5pdGlhbFRleHQpO1xuICAgICAgICBwcm9ncmVzc2JhcmxhYmVsLmFkZENsYXNzKCdwcm9ncmVzc2JhcmxhYmVsJyk7XG5cbiAgICAgICAgdGhpcy4kKCcubG9hZGluZ3NwaW5uZXInKS5oaWRlKCk7XG4gICAgICAgIHByb2dyZXNzYmFyLnByb2dyZXNzYmFyKDxKUXVlcnlVSS5Qcm9ncmVzc2Jhck9wdGlvbnM+e1xuICAgICAgICAgICAgdmFsdWU6IHRoaXMubW9kZWwucHJvZ3Jlc3NbaW5kZXhdLmNvbXBsZXRlZCxcbiAgICAgICAgICAgIG1heDogc2VydmVyT3BlcmF0aW9uc0NvdW50ICsgMSxcbiAgICAgICAgICAgIGNoYW5nZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gcHJvZ3Jlc3NiYXIucHJvZ3Jlc3NiYXIoXCJ2YWx1ZVwiKTtcbiAgICAgICAgICAgICAgICB2YXIgbGFiZWxUZXh0ID0gZ2V0TGFiZWxUZXh0Rm9yT3BlcmF0aW9uSW5kZXgodmFsdWUpO1xuICAgICAgICAgICAgICAgIHByb2dyZXNzYmFybGFiZWwudGV4dChsYWJlbFRleHQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAvLyBub29wLCB3aGVuIGl0IGNvbXBsZXRlcyB0aGUgcHJvZ3Jlc3MgYmFyIGlzIGhpZGRlblxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy4kKFwiLmlxbC1wcm9ncmVzc1wiKS5hcHBlbmQocHJvZ3Jlc3NiYXIpO1xuICAgICAgICB2YXIgcHJvZ3Jlc3NCYXJzID0gdGhpcy4kKFwiLmlxbC1wcm9ncmVzc1wiKS5jaGlsZHJlbigpO1xuICAgICAgICAoPGFueT5wcm9ncmVzc0JhcnMuZGV0YWNoKCkpLnNvcnQoZnVuY3Rpb24oYTogYW55LCBiOiBhbnkpOiBudW1iZXJ7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQoYS5kYXRhc2V0LmluZGV4LCAxMCkgPiBwYXJzZUludChiLmRhdGFzZXQuaW5kZXgsIDEwKSA/IDEgOiAtMTtcbiAgICAgICAgfSkuYXBwZW5kVG8oXCIuaXFsLXByb2dyZXNzXCIpO1xuICAgIH1cblxuICAgIG9uUHJvZ3Jlc3NVcGRhdGUoaW5kZXg6IG51bWJlcikge1xuICAgICAgICB2YXIgcHJvZ3Jlc3NiYXIgPSB0aGlzLiQoJy5wcm9ncmVzcy0nICsgaW5kZXgpO1xuICAgICAgICBwcm9ncmVzc2Jhci5wcm9ncmVzc2JhcihcInZhbHVlXCIsIHRoaXMubW9kZWwucHJvZ3Jlc3NbaW5kZXhdLmNvbXBsZXRlZCk7XG4gICAgfVxuXG4gICAgb25Qcm9ncmVzc1Jlc2V0KCkge1xuICAgICAgICB0aGlzLiQoJy5pcWwtcHJvZ3Jlc3MnKS5jaGlsZHJlbigpLnJlbW92ZSgpO1xuICAgIH1cblxuICAgIHJlbmRlclJlc3VsdCgpIHtcbiAgICAgICAgaWYodGhpcy5tb2RlbC5yZXN1bHRTZXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuOyAvLyBub3RoaW5nIHRvIHJlbmRlciB5ZXRcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRhYiBkZWFjdGl2YXRpb24gaXMgZGlzYWJsZWQgc28gdGhhdCB1c2VycyBjYW4gcHJlLXNlbGVjdCBhbnkgdmlldyB0aGV5IGxpa2UgYmVmb3JlIHJ1bm5pbmcgYSBuZXcgcXVlcnlcbi8vICAgICAgICB0aGlzLiRlbC50YWJzKFwiZW5hYmxlXCIpO1xuLy8gICAgICAgIHRoaXMubW9kZWwudmlld3MuZm9yRWFjaCgodmlldzogVmlld1N0YXRpY0ludGVyZmFjZSwgaW5kZXg6IG51bWJlcikgPT4ge1xuLy8gICAgICAgICAgICBpZih2aWV3LmFwcGxpZXNUbyAmJiAhdmlldy5hcHBsaWVzVG8odGhpcy5tb2RlbC5yZXN1bHRTZXQpKSB7XG4vLyAgICAgICAgICAgICAgICB0aGlzLiRlbC50YWJzKFwiZGlzYWJsZVwiLCBpbmRleCk7XG4vLyAgICAgICAgICAgICAgICBpZih0aGlzLm1vZGVsLnNlbGVjdGVkVmlldyA9PSB2aWV3LmdldFZpZXdJZCgpKSB7XG4vLyAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5zZWxlY3RlZFZpZXcgPSBQcmVzZW50YXRpb25Nb2RlbC5ERUZBVUxUX1ZJRVdfTkFNRTtcbi8vICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgfVxuLy8gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMucmVuZGVyV2FybmluZ3MoKTtcblxuICAgICAgICB0aGlzLiQoJy52aWV3dGFicyA+IGxpJykuYWRkQ2xhc3MoXCJwcmVzZW50YXRpb24tbG9hZGVkXCIpO1xuXG4gICAgICAgIHZhciB2aWV3T3B0aW9ucyA9IHtyZXN1bHRTZXQ6IHRoaXMubW9kZWwucmVzdWx0U2V0fTtcbiAgICAgICAgdmFyIHZpZXdDbGFzcyA9IHRoaXMuZ2V0Vmlld0NsYXNzRm9ySWQodGhpcy5tb2RlbC5zZWxlY3RlZFZpZXcpO1xuICAgICAgICB2YXIgdmlld0luc3RhbmNlID0gbmV3IHZpZXdDbGFzcyh2aWV3T3B0aW9ucyk7XG4gICAgICAgIHZhciB2aWV3TmFtZSA9IHRoaXMubW9kZWwuc2VsZWN0ZWRWaWV3LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHZhciBzdGF0ZTogYW55ID0gdGhpcy5tb2RlbC52aWV3VG9TdGF0ZVt2aWV3TmFtZV0gfHwge307XG4gICAgICAgIC8vIFRPRE86IGF2b2lkIGNhc3RpbmcgaGFja3NcbiAgICAgICAgKDxWaWV3SW50ZXJmYWNlPjxhbnk+dmlld0luc3RhbmNlKS5zZXRTdGF0ZShzdGF0ZSk7XG4gICAgICAgIHRoaXMucmVuZGVyTmV3UHJlc2VudGF0aW9uKHZpZXdJbnN0YW5jZSk7XG4gICAgfVxuXG4gICAgcmVuZGVyV2FybmluZ3MoKSB7XG4gICAgICAgIHRoaXMuJCgnLndhcm5pbmdkaXYnKS5hdHRyKFwidmlzaWJpbGl0eVwiLCBcImhpZGRlblwiKTtcbiAgICAgICAgLy8gcmVuZGVyIHRoZSBmaXJzdCB0aW1lIHRvIHNlZSBpZiB0ZXh0IHdyYXBzLCBhbmQgdGhlIHNlY29uZCB0aW1lIHRvIGFjdHVhbGx5IHJlbmRlciBpdFxuICAgICAgICB0aGlzLiQoJy53YXJuaW5nZGl2JykuaHRtbCh0aGlzLndhcm5pbmdUZW1wbGF0ZSh7bW9kZWw6IHRoaXMubW9kZWwsIHdpbGxXYXJuaW5nc1dyYXA6IGZhbHNlfSkpO1xuICAgICAgICB0aGlzLiQoJy53YXJuaW5nZGl2JykuaHRtbCh0aGlzLndhcm5pbmdUZW1wbGF0ZSh7bW9kZWw6IHRoaXMubW9kZWwsIHdpbGxXYXJuaW5nc1dyYXA6IHRoaXMud2lsbFdhcm5pbmdzV3JhcCgpfSkpO1xuICAgICAgICB0aGlzLiQoJy53YXJuaW5nZGl2JykuYXR0cihcInZpc2liaWxpdHlcIiwgXCJ2aXNpYmxlXCIpO1xuICAgICAgICB0aGlzLiQoJy53YXJuaW5nLXBhbmVsJykuY2xpY2soKCkgPT4geyB0aGlzLm1vZGVsLndhcm5pbmdJc09wZW4gPSAhdGhpcy5tb2RlbC53YXJuaW5nSXNPcGVuIH0pO1xuICAgIH1cblxuICAgIHdpbGxXYXJuaW5nc1dyYXAoKSB7XG4gICAgICAgIHZhciBoZWlnaHRfZW0gPSB0aGlzLiQoJy53YXJuaW5nLWJvZHknKS5oZWlnaHQoKSAvIHBhcnNlRmxvYXQodGhpcy4kKFwiLndhcm5pbmctYm9keVwiKS5jc3MoXCJmb250LXNpemVcIikpO1xuICAgICAgICByZXR1cm4gaGVpZ2h0X2VtID4gMjtcbiAgICB9XG5cbiAgICBvbkVycm9yKCkge1xuICAgICAgICBpZih0aGlzLm1vZGVsLmVycm9yVGV4dCA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZW5kZXJOZXdQcmVzZW50YXRpb24obmV3IEVycm9yVmlldyg8QmFja2JvbmUuVmlld09wdGlvbnM8YW55Pj57ZXJyb3JUZXh0OiB0aGlzLm1vZGVsLmVycm9yVGV4dH0pKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlck5ld1ByZXNlbnRhdGlvbih2aWV3OiBCYWNrYm9uZS5WaWV3PGFueT4pIHtcbiAgICAgICAgaWYodGhpcy5jdXJyZW50UHJlc2VudGF0aW9uVmlldyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5zdG9wTGlzdGVuaW5nKHRoaXMuY3VycmVudFByZXNlbnRhdGlvblZpZXcpO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50UHJlc2VudGF0aW9uVmlldy5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiRlbC5hcHBlbmQodmlldy4kZWwpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmlldy5yZW5kZXIoKTtcbiAgICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUuc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY3VycmVudFByZXNlbnRhdGlvblZpZXcgPSB2aWV3O1xuICAgICAgICB0aGlzLmxpc3RlblRvKHZpZXcsIFwic3RhdGVjaGFuZ2VcIiwgdGhpcy5vblZpZXdTdGF0ZUNoYW5nZSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvblZpZXdTdGF0ZUNoYW5nZSgpIHtcbiAgICAgICAgaWYodGhpcy5jdXJyZW50UHJlc2VudGF0aW9uVmlldykge1xuICAgICAgICAgICAgdmFyIHZpZXdOYW1lOiBzdHJpbmcgPSBQcmVzZW50YXRpb25WaWV3LmdldFZpZXdOYW1lRm9ySW5zdGFuY2UodGhpcy5jdXJyZW50UHJlc2VudGF0aW9uVmlldykudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIHRoaXMubW9kZWwudmlld1RvU3RhdGVbdmlld05hbWVdID0gKDxWaWV3SW50ZXJmYWNlPjxhbnk+dGhpcy5jdXJyZW50UHJlc2VudGF0aW9uVmlldykuZ2V0U3RhdGUoKTtcbiAgICAgICAgICAgIHRoaXMubW9kZWwudXBkYXRlQ29tYmluZWRTdGF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvblZpZXdUeXBlQ2hhbmdlZChlOiBFdmVudCwgdWk6IGFueSkge1xuICAgICAgICB2YXIgbmV3VGFiOiBKUXVlcnkgPSB1aS5uZXdUYWI7XG4gICAgICAgIHRoaXMubW9kZWwuc2VsZWN0ZWRWaWV3ID0gbmV3VGFiLmRhdGEoXCJ2aWV3LXR5cGVcIik7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvblZpZXdDaGFuZ2VkSW5Nb2RlbCgpIHtcbiAgICAgICAgdGhpcy4kZWwudGFicyhcIm9wdGlvblwiLCBcImFjdGl2ZVwiLCB0aGlzLmdldFZpZXdJbmRleEZvcklkKHRoaXMubW9kZWwuc2VsZWN0ZWRWaWV3KSk7XG4gICAgICAgIHRoaXMucmVuZGVyUmVzdWx0KCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRWaWV3SW5kZXhGb3JJZCh2aWV3SWQgOiBzdHJpbmcpOiBudW1iZXIge1xuICAgICAgICB2YXIgdmlld0luZGV4PSAwO1xuICAgICAgICB0aGlzLm1vZGVsLnZpZXdzLmZvckVhY2goKHZpZXc6IFZpZXdTdGF0aWNJbnRlcmZhY2UsIGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgICAgICAgIGlmKHZpZXcuZ2V0Vmlld0lkKCkgPT0gdmlld0lkKSB7XG4gICAgICAgICAgICAgICAgdmlld0luZGV4ID0gaW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdmlld0luZGV4O1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0Vmlld0NsYXNzRm9ySWQodmlld0lkIDogc3RyaW5nKTogVmlld1N0YXRpY0ludGVyZmFjZSB7XG4gICAgICAgIHZhciB2aWV3TWF0Y2ggPSB0aGlzLm1vZGVsLnZpZXdzWzBdO1xuICAgICAgICB0aGlzLm1vZGVsLnZpZXdzLmZvckVhY2goKHZpZXc6IFZpZXdTdGF0aWNJbnRlcmZhY2UpID0+IHtcbiAgICAgICAgICAgIGlmKHZpZXcuZ2V0Vmlld0lkKCkgPT0gdmlld0lkKSB7XG4gICAgICAgICAgICAgICAgdmlld01hdGNoID0gdmlldztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB2aWV3TWF0Y2g7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgZ2V0Vmlld05hbWVGb3JJbnN0YW5jZSh2aWV3SW5zdGFuY2U6IGFueSkge1xuICAgICAgICByZXR1cm4gKDxWaWV3U3RhdGljSW50ZXJmYWNlPk9iamVjdC5nZXRQcm90b3R5cGVPZih2aWV3SW5zdGFuY2UpLmNvbnN0cnVjdG9yKS5nZXROYW1lKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbkxvYWRpbmdDaGFuZ2UoKSB7XG4gICAgICAgIHRoaXMuJChcIi5sb2FkaW5nZGl2XCIpLnRvZ2dsZSh0aGlzLm1vZGVsLmlzTG9hZGluZyk7XG4gICAgICAgIGlmKHRoaXMubW9kZWwuaXNMb2FkaW5nKSB7XG4gICAgICAgICAgICB0aGlzLiQoJy5sb2FkaW5nc3Bpbm5lcicpLnNob3coKTtcblxuICAgICAgICAgICAgLy8gY2FuY2VsbGF0aW9uIGlzIGN1cnJlbnRseSBvbmx5IHN1cHBvcnRlZCBpbiBJUUwxXG4gICAgICAgICAgICB0aGlzLiQoJy5jYW5jZWxjb250YWluZXInKS50b2dnbGVDbGFzcyhcImhpZGRlblwiLCBJUUxDbGllbnQuSVFMTGFuZ3VhZ2VWZXJzaW9uID09IDIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBpc01hYygpIHtcbiAgICAgICAgcmV0dXJuIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihcIk1hYyBPUyBYXCIpICE9IC0xO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIG9uQ2FuY2VsQ2xpY2tlZCgpOiB2b2lkIHtcbiAgICAgICAgRXZlbnRzLmV2ZW50QnVzLnRyaWdnZXIoRXZlbnRzLmNhbmNlbCk7XG4gICAgfVxufVxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHJlc3VsdHByZXNlbnRhdGlvbi9wcmVzZW50YXRpb252aWV3LnRzXG4gKiovIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQWVBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUNBOztBQThPQTtBQTVPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBOzs7OzsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 472:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/// <reference path=\"deps.d.ts\" />\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(2), __webpack_require__(8), __webpack_require__(473)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, _, Backbone) {\n    \"use strict\";\n    // /// <amd-dependency path=\"errorview.css\"/>\n    /// <amd-dependency path=\"errorview.html\"/>\n    var templateText = __webpack_require__(473);\n    var ErrorView = (function (_super) {\n        __extends(ErrorView, _super);\n        function ErrorView() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.template = _.template(templateText);\n            return _this;\n        }\n        ErrorView.prototype.events = function () {\n            return {\n                \"click .stacktrace-toggle\": this.toggleStackTrace\n            };\n        };\n        ErrorView.prototype.initialize = function (options) {\n            this.errorData = ErrorView.extractStackTrace(options.errorText);\n            this.$el.addClass(\"errorresultdiv\");\n        };\n        ErrorView.extractStackTrace = function (message) {\n            var errorLines = message.split(\"\\n\");\n            var errorText = [];\n            var stackTrace = [];\n            var stackTraceFound = false;\n            errorLines.forEach(function (errorLine) {\n                if (!stackTraceFound && errorLine.indexOf(\"http\") == 0) {\n                    var escapedLine = _.escape(errorLine);\n                    errorText.push('<a target=\"_blank\" href=\"' + escapedLine + '\">' + escapedLine + '</a>');\n                    return;\n                }\n                if (errorLine.indexOf(\"\\tat\") == 0) {\n                    stackTraceFound = true;\n                }\n                if (stackTraceFound) {\n                    stackTrace.push(errorLine);\n                }\n                else {\n                    errorText.push(_.escape(errorLine));\n                }\n            });\n            return { errorText: errorText.join('<br/>'), stackTrace: stackTrace.join('\\n') };\n        };\n        ErrorView.prototype.render = function () {\n            this.$el.html(this.template(this.errorData));\n            this.toggleStackTrace();\n            return this;\n        };\n        ErrorView.prototype.toggleStackTrace = function () {\n            this.$('.stacktrace').toggle();\n        };\n        ErrorView.prototype.getState = function () {\n            return {};\n        };\n        ErrorView.prototype.setState = function (state) {\n        };\n        return ErrorView;\n    }(Backbone.View));\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = ErrorView;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDcyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2Vycm9ydmlldy50cz84NWJiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJkZXBzLmQudHNcIiAvPlxuXG4vLyAvLy8gPGFtZC1kZXBlbmRlbmN5IHBhdGg9XCJlcnJvcnZpZXcuY3NzXCIvPlxuLy8vIDxhbWQtZGVwZW5kZW5jeSBwYXRoPVwiZXJyb3J2aWV3Lmh0bWxcIi8+XG52YXIgdGVtcGxhdGVUZXh0IDogc3RyaW5nID0gcmVxdWlyZSgnZXJyb3J2aWV3Lmh0bWwnKTtcblxuaW1wb3J0IF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJyk7XG5pbXBvcnQgQmFja2JvbmUgPSByZXF1aXJlKCdiYWNrYm9uZScpO1xuaW1wb3J0ICQgPSByZXF1aXJlKCdqcXVlcnknKTtcblxuaW1wb3J0IFZpZXdJbnRlcmZhY2UgZnJvbSAndmlld2ludGVyZmFjZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVycm9yVmlldyBleHRlbmRzIEJhY2tib25lLlZpZXc8YW55PiBpbXBsZW1lbnRzIFZpZXdJbnRlcmZhY2Uge1xuICAgIGVycm9yRGF0YToge2Vycm9yVGV4dDogc3RyaW5nOyBzdGFja1RyYWNlOiBzdHJpbmd9O1xuXG4gICAgcHJpdmF0ZSB0ZW1wbGF0ZSA6ICguLi5kYXRhOiBhbnlbXSkgPT4gc3RyaW5nID0gXy50ZW1wbGF0ZSh0ZW1wbGF0ZVRleHQpO1xuXG4gICAgcHVibGljIGV2ZW50cygpIHtcbiAgICAgICAgcmV0dXJuIDxhbnk+e1xuICAgICAgICAgICAgXCJjbGljayAuc3RhY2t0cmFjZS10b2dnbGVcIjogdGhpcy50b2dnbGVTdGFja1RyYWNlXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgaW5pdGlhbGl6ZShvcHRpb25zOiBhbnkpIHtcbiAgICAgICAgdGhpcy5lcnJvckRhdGEgPSBFcnJvclZpZXcuZXh0cmFjdFN0YWNrVHJhY2Uob3B0aW9ucy5lcnJvclRleHQpO1xuICAgICAgICB0aGlzLiRlbC5hZGRDbGFzcyhcImVycm9ycmVzdWx0ZGl2XCIpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGV4dHJhY3RTdGFja1RyYWNlKG1lc3NhZ2U6IHN0cmluZyk6IHtlcnJvclRleHQ6IHN0cmluZzsgc3RhY2tUcmFjZTogc3RyaW5nfSB7XG4gICAgICAgIHZhciBlcnJvckxpbmVzID0gbWVzc2FnZS5zcGxpdChcIlxcblwiKTtcbiAgICAgICAgdmFyIGVycm9yVGV4dDogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgdmFyIHN0YWNrVHJhY2U6IHN0cmluZ1tdID0gW107XG4gICAgICAgIHZhciBzdGFja1RyYWNlRm91bmQgPSBmYWxzZTtcbiAgICAgICAgZXJyb3JMaW5lcy5mb3JFYWNoKGZ1bmN0aW9uKGVycm9yTGluZTogc3RyaW5nKSB7XG4gICAgICAgICAgICBpZighc3RhY2tUcmFjZUZvdW5kICYmIGVycm9yTGluZS5pbmRleE9mKFwiaHR0cFwiKSA9PSAwKSB7XG4gICAgICAgICAgICAgICAgbGV0IGVzY2FwZWRMaW5lID0gXy5lc2NhcGUoZXJyb3JMaW5lKTtcbiAgICAgICAgICAgICAgICBlcnJvclRleHQucHVzaCgnPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cIicgKyBlc2NhcGVkTGluZSArICdcIj4nICsgZXNjYXBlZExpbmUgKyAnPC9hPicpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGVycm9yTGluZS5pbmRleE9mKFwiXFx0YXRcIikgPT0gMCkge1xuICAgICAgICAgICAgICAgIHN0YWNrVHJhY2VGb3VuZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihzdGFja1RyYWNlRm91bmQpIHtcbiAgICAgICAgICAgICAgICBzdGFja1RyYWNlLnB1c2goZXJyb3JMaW5lKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZXJyb3JUZXh0LnB1c2goXy5lc2NhcGUoZXJyb3JMaW5lKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7ZXJyb3JUZXh0OiBlcnJvclRleHQuam9pbignPGJyLz4nKSwgc3RhY2tUcmFjZTogc3RhY2tUcmFjZS5qb2luKCdcXG4nKX1cbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHRoaXMuJGVsLmh0bWwodGhpcy50ZW1wbGF0ZSh0aGlzLmVycm9yRGF0YSkpO1xuICAgICAgICB0aGlzLnRvZ2dsZVN0YWNrVHJhY2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcHVibGljIHRvZ2dsZVN0YWNrVHJhY2UoKSB7XG4gICAgICAgIHRoaXMuJCgnLnN0YWNrdHJhY2UnKS50b2dnbGUoKTtcbiAgICB9XG5cbiAgICBnZXRTdGF0ZSgpOmFueSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG5cbiAgICBzZXRTdGF0ZShzdGF0ZTogYW55KTogdm9pZCB7XG5cbiAgICB9XG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBlcnJvcnZpZXcudHNcbiAqKi8iXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQUVBO0FBQ0E7QUFDQTtBQVFBO0FBQUE7QUFBQTtBQUFBO0FBR0E7O0FBcURBO0FBbkRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQUE7Ozs7OyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 477:
/***/ function(module, exports, __webpack_require__) {

	eval("module.exports = __webpack_require__.p + \"be1cede97289c13920048f238fd37b85.gif\";//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDc3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzdWx0cHJlc2VudGF0aW9uL2FqYXgtbG9hZGVyLmdpZj82ODc2Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImJlMWNlZGU5NzI4OWMxMzkyMDA0OGYyMzhmZDM3Yjg1LmdpZlwiO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9yZXN1bHRwcmVzZW50YXRpb24vYWpheC1sb2FkZXIuZ2lmXG4gKiogbW9kdWxlIGlkID0gNDc3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }

});