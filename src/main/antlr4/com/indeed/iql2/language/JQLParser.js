// Generated from com/indeed/iql2/language/JQL.g4 by ANTLR 4.5.1
// jshint ignore: start
var antlr4 = require('antlr4/index');
var JQLListener = require('./JQLListener').JQLListener;
var grammarFileName = "JQL.g4";

var serializedATN = ["\u0003\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd",
    "\u0003\u0082\u0619\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0004\u0005\u0004m\n\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0005\u0003\u0005\u0006\u0005s\n\u0005\r\u0005\u000e\u0005t\u0003\u0005",
    "\u0005\u0005x\n\u0005\u0003\u0005\u0005\u0005{\n\u0005\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0007\u0005\u0007\u0081\n\u0007\u0003\u0007",
    "\u0003\u0007\u0003\b\u0005\b\u0086\n\b\u0003\b\u0003\b\u0005\b\u008a",
    "\n\b\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u00a2\n\t\u0003\t",
    "\u0003\t\u0003\t\u0007\t\u00a7\n\t\f\t\u000e\t\u00aa\u000b\t\u0003\n",
    "\u0003\n\u0003\n\u0003\n\u0005\n\u00b0\n\n\u0003\u000b\u0003\u000b\u0003",
    "\u000b\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0005\f\u00d9\n\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f",
    "\u0003\f\u0003\f\u0003\f\u0003\f\u0005\f\u00e4\n\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0005\f\u00ea\n\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f",
    "\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0005\f\u013a\n\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f",
    "\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0005\f\u015c\n\f\u0003\f\u0003\f\u0005\f\u0160\n\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0005\f\u0169\n\f\u0003\f",
    "\u0003\f\u0005\f\u016d\n\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0007\f\u0176\n\f\f\f\u000e\f\u0179\u000b\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0007\f\u0182\n\f\f\f\u000e",
    "\f\u0185\u000b\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0005\f\u0195",
    "\n\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f",
    "\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0005\f\u01a5\n\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0005\f\u01ba\n\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f",
    "\u0003\f\u0005\f\u01c3\n\f\u0003\f\u0003\f\u0003\f\u0003\f\u0005\f\u01c9",
    "\n\f\u0003\f\u0003\f\u0003\f\u0003\f\u0007\f\u01cf\n\f\f\f\u000e\f\u01d2",
    "\u000b\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003",
    "\r\u0003\r\u0007\r\u01dd\n\r\f\r\u000e\r\u01e0\u000b\r\u0003\r\u0003",
    "\r\u0003\r\u0003\r\u0005\r\u01e6\n\r\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0005\u000e\u01ed\n\u000e\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0005\u0010\u01f7\n\u0010\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0003\u0011\u0005\u0011\u01fd\n\u0011\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u0222\n\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0007\u0013",
    "\u022a\n\u0013\f\u0013\u000e\u0013\u022d\u000b\u0013\u0003\u0014\u0003",
    "\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0005\u0015\u0268\n\u0015\u0005\u0015\u026a\n\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0005\u0015\u0273\n\u0015\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u02b6\n\u0016\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0005\u0016\u02c1\n\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0005",
    "\u0016\u02d0\n\u0016\u0005\u0016\u02d2\n\u0016\u0003\u0016\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016",
    "\u0003\u0016\u0005\u0016\u02dd\n\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u02eb\n\u0016",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u02f1\n",
    "\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0005\u0019\u030b\n\u0019\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u0314\n",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u032c",
    "\n\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019",
    "\u0332\n\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005",
    "\u0019\u0338\n\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u0342\n",
    "\u0019\u0003\u0019\u0007\u0019\u0345\n\u0019\f\u0019\u000e\u0019\u0348",
    "\u000b\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0005\u001a",
    "\u0366\n\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u036f\n\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0007\u001a\u0378\n\u001a\f\u001a\u000e\u001a\u037b\u000b\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0007\u001a\u0384\n\u001a\f\u001a\u000e\u001a\u0387\u000b\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u0399\n",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u039f",
    "\n\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0005\u001a",
    "\u03a5\n\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u03af\n\u001a",
    "\u0003\u001a\u0007\u001a\u03b2\n\u001a\f\u001a\u000e\u001a\u03b5\u000b",
    "\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u03bb",
    "\n\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u03c0\n\u001c",
    "\u0003\u001d\u0003\u001d\u0005\u001d\u03c4\n\u001d\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u03ca\n\u001e\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003",
    " \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0005",
    " \u03df\n \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003",
    " \u0003 \u0005 \u03eb\n \u0003 \u0003 \u0003 \u0005 \u03f0\n \u0003",
    " \u0003 \u0007 \u03f4\n \f \u000e \u03f7\u000b \u0003 \u0003 \u0003",
    " \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003",
    " \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003",
    " \u0003 \u0003 \u0003 \u0003 \u0003 \u0005 \u0415\n \u0005 \u0417\n",
    " \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003",
    " \u0003 \u0003 \u0003 \u0005 \u0426\n \u0003 \u0003 \u0003 \u0003 \u0003",
    " \u0003 \u0007 \u042e\n \f \u000e \u0431\u000b \u0003!\u0003!\u0003",
    "!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003",
    "!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003",
    "!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0005!\u0450\n!\u0003!\u0003",
    "!\u0003!\u0005!\u0455\n!\u0003!\u0003!\u0007!\u0459\n!\f!\u000e!\u045c",
    "\u000b!\u0003!\u0003!\u0003!\u0003!\u0005!\u0462\n!\u0003!\u0003!\u0003",
    "!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003",
    "!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003",
    "!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0005!\u0483",
    "\n!\u0005!\u0485\n!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003",
    "!\u0003!\u0003!\u0003!\u0003!\u0005!\u0492\n!\u0005!\u0494\n!\u0003",
    "!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003",
    "!\u0003!\u0003!\u0005!\u04a3\n!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003",
    "!\u0007!\u04ab\n!\f!\u000e!\u04ae\u000b!\u0003\"\u0003\"\u0003\"\u0003",
    "\"\u0005\"\u04b4\n\"\u0003\"\u0003\"\u0003\"\u0005\"\u04b9\n\"\u0003",
    "#\u0003#\u0003#\u0005#\u04be\n#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003",
    "#\u0003#\u0003#\u0003#\u0003#\u0005#\u04ca\n#\u0003#\u0003#\u0003#\u0005",
    "#\u04cf\n#\u0003#\u0003#\u0007#\u04d3\n#\f#\u000e#\u04d6\u000b#\u0003",
    "#\u0003#\u0003#\u0005#\u04db\n#\u0003#\u0003#\u0005#\u04df\n#\u0003",
    "#\u0003#\u0003#\u0003#\u0003#\u0003#\u0005#\u04e7\n#\u0003#\u0003#\u0003",
    "#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003",
    "#\u0003#\u0003#\u0003#\u0003#\u0005#\u04fa\n#\u0003#\u0003#\u0003#\u0003",
    "#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0005#\u0506\n#\u0003#\u0003",
    "#\u0005#\u050a\n#\u0003$\u0003$\u0003$\u0003%\u0003%\u0003%\u0003%\u0003",
    "%\u0003%\u0003%\u0003%\u0003%\u0005%\u0518\n%\u0005%\u051a\n%\u0005",
    "%\u051c\n%\u0003%\u0003%\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003",
    "&\u0003&\u0003&\u0003&\u0003&\u0003&\u0005&\u052c\n&\u0005&\u052e\n",
    "&\u0003&\u0003&\u0003&\u0005&\u0533\n&\u0003\'\u0003\'\u0003\'\u0005",
    "\'\u0538\n\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0005\'",
    "\u0540\n\'\u0005\'\u0542\n\'\u0005\'\u0544\n\'\u0003\'\u0005\'\u0547",
    "\n\'\u0003\'\u0005\'\u054a\n\'\u0003(\u0003(\u0003(\u0005(\u054f\n(",
    "\u0003(\u0005(\u0552\n(\u0003(\u0003(\u0005(\u0556\n(\u0003(\u0003(",
    "\u0005(\u055a\n(\u0003(\u0003(\u0003(\u0005(\u055f\n(\u0003(\u0003(",
    "\u0005(\u0563\n(\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0005)\u056f\n)\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0007*\u057b\n*\f*\u000e*\u057e\u000b",
    "*\u0003*\u0003*\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0005+\u0588",
    "\n+\u0003+\u0003+\u0003+\u0003+\u0005+\u058e\n+\u0003+\u0005+\u0591",
    "\n+\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0005,\u059a\n",
    ",\u0003,\u0003,\u0005,\u059e\n,\u0003,\u0005,\u05a1\n,\u0005,\u05a3",
    "\n,\u0003-\u0003-\u0003-\u0007-\u05a8\n-\f-\u000e-\u05ab\u000b-\u0003",
    ".\u0007.\u05ae\n.\f.\u000e.\u05b1\u000b.\u0003/\u0003/\u0003/\u0007",
    "/\u05b6\n/\f/\u000e/\u05b9\u000b/\u0005/\u05bb\n/\u00030\u00030\u0003",
    "0\u00030\u00030\u00030\u00030\u00030\u00050\u05c5\n0\u00031\u00031\u0003",
    "1\u00071\u05ca\n1\f1\u000e1\u05cd\u000b1\u00051\u05cf\n1\u00031\u0003",
    "1\u00051\u05d3\n1\u00032\u00032\u00052\u05d7\n2\u00032\u00032\u0003",
    "2\u00032\u00052\u05dd\n2\u00032\u00032\u00032\u00052\u05e2\n2\u0003",
    "2\u00032\u00052\u05e6\n2\u00032\u00032\u00032\u00032\u00032\u00072\u05ed",
    "\n2\f2\u000e2\u05f0\u000b2\u00052\u05f2\n2\u00032\u00052\u05f5\n2\u0003",
    "2\u00032\u00052\u05f9\n2\u00032\u00032\u00032\u00032\u00032\u00072\u0600",
    "\n2\f2\u000e2\u0603\u000b2\u00052\u0605\n2\u00032\u00052\u0608\n2\u0003",
    "2\u00032\u00033\u00033\u00033\u00053\u060f\n3\u00033\u00033\u00053\u0613",
    "\n3\u00033\u00033\u00033\u00033\u00033\u0002\t\u0010\u0016$02>@4\u0002",
    "\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e",
    " \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bd\u0002\u000f\u0007\u0002\u001e",
    "*,57jlx}~\u0005\u0002GHrsww\u0003\u0002\u0012\u0017\u0004\u0002\u0019",
    "\u0019RR\u0004\u0002\u001a\u001aSS\u0005\u0002ww}}\u0082\u0082\u0003",
    "\u0002>?\u0004\u0002\u0003\u0003\u0018\u0018\u0004\u0002yy\u0082\u0082",
    "\u0004\u0002@AJM\u0003\u0002GH\u0004\u0002CC\u0082\u0082\u0003\u0002",
    "@A\u071a\u0002f\u0003\u0002\u0002\u0002\u0004h\u0003\u0002\u0002\u0002",
    "\u0006l\u0003\u0002\u0002\u0002\bz\u0003\u0002\u0002\u0002\n|\u0003",
    "\u0002\u0002\u0002\f\u0080\u0003\u0002\u0002\u0002\u000e\u0089\u0003",
    "\u0002\u0002\u0002\u0010\u00a1\u0003\u0002\u0002\u0002\u0012\u00af\u0003",
    "\u0002\u0002\u0002\u0014\u00b1\u0003\u0002\u0002\u0002\u0016\u01b9\u0003",
    "\u0002\u0002\u0002\u0018\u01e5\u0003\u0002\u0002\u0002\u001a\u01ec\u0003",
    "\u0002\u0002\u0002\u001c\u01ee\u0003\u0002\u0002\u0002\u001e\u01f6\u0003",
    "\u0002\u0002\u0002 \u01fc\u0003\u0002\u0002\u0002\"\u01fe\u0003\u0002",
    "\u0002\u0002$\u0221\u0003\u0002\u0002\u0002&\u022e\u0003\u0002\u0002",
    "\u0002(\u0272\u0003\u0002\u0002\u0002*\u02ea\u0003\u0002\u0002\u0002",
    ",\u02f0\u0003\u0002\u0002\u0002.\u02f2\u0003\u0002\u0002\u00020\u032b",
    "\u0003\u0002\u0002\u00022\u0398\u0003\u0002\u0002\u00024\u03ba\u0003",
    "\u0002\u0002\u00026\u03bf\u0003\u0002\u0002\u00028\u03c3\u0003\u0002",
    "\u0002\u0002:\u03c9\u0003\u0002\u0002\u0002<\u03cb\u0003\u0002\u0002",
    "\u0002>\u0425\u0003\u0002\u0002\u0002@\u04a2\u0003\u0002\u0002\u0002",
    "B\u04af\u0003\u0002\u0002\u0002D\u0509\u0003\u0002\u0002\u0002F\u050b",
    "\u0003\u0002\u0002\u0002H\u050e\u0003\u0002\u0002\u0002J\u051f\u0003",
    "\u0002\u0002\u0002L\u0537\u0003\u0002\u0002\u0002N\u054b\u0003\u0002",
    "\u0002\u0002P\u056e\u0003\u0002\u0002\u0002R\u0570\u0003\u0002\u0002",
    "\u0002T\u0581\u0003\u0002\u0002\u0002V\u05a2\u0003\u0002\u0002\u0002",
    "X\u05a4\u0003\u0002\u0002\u0002Z\u05af\u0003\u0002\u0002\u0002\\\u05ba",
    "\u0003\u0002\u0002\u0002^\u05c4\u0003\u0002\u0002\u0002`\u05ce\u0003",
    "\u0002\u0002\u0002b\u05d6\u0003\u0002\u0002\u0002d\u060b\u0003\u0002",
    "\u0002\u0002fg\t\u0002\u0002\u0002g\u0003\u0003\u0002\u0002\u0002hi",
    "\u0005\u0002\u0002\u0002ij\u0007\u0002\u0002\u0003j\u0005\u0003\u0002",
    "\u0002\u0002km\u0007y\u0002\u0002lk\u0003\u0002\u0002\u0002lm\u0003",
    "\u0002\u0002\u0002mn\u0003\u0002\u0002\u0002no\t\u0003\u0002\u0002o",
    "\u0007\u0003\u0002\u0002\u0002ps\u0007x\u0002\u0002qs\u0005\u0006\u0004",
    "\u0002rp\u0003\u0002\u0002\u0002rq\u0003\u0002\u0002\u0002st\u0003\u0002",
    "\u0002\u0002tr\u0003\u0002\u0002\u0002tu\u0003\u0002\u0002\u0002uw\u0003",
    "\u0002\u0002\u0002vx\u0007:\u0002\u0002wv\u0003\u0002\u0002\u0002wx",
    "\u0003\u0002\u0002\u0002x{\u0003\u0002\u0002\u0002y{\u0007\u0082\u0002",
    "\u0002zr\u0003\u0002\u0002\u0002zy\u0003\u0002\u0002\u0002{\t\u0003",
    "\u0002\u0002\u0002|}\u0005\b\u0005\u0002}~\u0007\u0002\u0002\u0003~",
    "\u000b\u0003\u0002\u0002\u0002\u007f\u0081\u0007\u0003\u0002\u0002\u0080",
    "\u007f\u0003\u0002\u0002\u0002\u0080\u0081\u0003\u0002\u0002\u0002\u0081",
    "\u0082\u0003\u0002\u0002\u0002\u0082\u0083\u0007y\u0002\u0002\u0083",
    "\r\u0003\u0002\u0002\u0002\u0084\u0086\u0007\u0003\u0002\u0002\u0085",
    "\u0084\u0003\u0002\u0002\u0002\u0085\u0086\u0003\u0002\u0002\u0002\u0086",
    "\u0087\u0003\u0002\u0002\u0002\u0087\u008a\u0007y\u0002\u0002\u0088",
    "\u008a\u0007z\u0002\u0002\u0089\u0085\u0003\u0002\u0002\u0002\u0089",
    "\u0088\u0003\u0002\u0002\u0002\u008a\u000f\u0003\u0002\u0002\u0002\u008b",
    "\u008c\b\t\u0001\u0002\u008c\u008d\u0007!\u0002\u0002\u008d\u008e\u0007",
    "\u0004\u0002\u0002\u008e\u008f\u0005\u0002\u0002\u0002\u008f\u0090\u0007",
    "\u0005\u0002\u0002\u0090\u00a2\u0003\u0002\u0002\u0002\u0091\u0092\u0007",
    "$\u0002\u0002\u0092\u0093\u0007\u0004\u0002\u0002\u0093\u0094\u0005",
    "\u0002\u0002\u0002\u0094\u0095\u0007\u0006\u0002\u0002\u0095\u0096\u0005",
    "\u000e\b\u0002\u0096\u0097\u0007\u0005\u0002\u0002\u0097\u00a2\u0003",
    "\u0002\u0002\u0002\u0098\u0099\u00050\u0019\u0002\u0099\u009a\u0007",
    "\u0007\u0002\u0002\u009a\u009b\u00050\u0019\u0002\u009b\u00a2\u0003",
    "\u0002\u0002\u0002\u009c\u009d\u0007\u0004\u0002\u0002\u009d\u009e\u0005",
    "\u0010\t\u0002\u009e\u009f\u0007\u0005\u0002\u0002\u009f\u00a2\u0003",
    "\u0002\u0002\u0002\u00a0\u00a2\u00050\u0019\u0002\u00a1\u008b\u0003",
    "\u0002\u0002\u0002\u00a1\u0091\u0003\u0002\u0002\u0002\u00a1\u0098\u0003",
    "\u0002\u0002\u0002\u00a1\u009c\u0003\u0002\u0002\u0002\u00a1\u00a0\u0003",
    "\u0002\u0002\u0002\u00a2\u00a8\u0003\u0002\u0002\u0002\u00a3\u00a4\f",
    "\u0006\u0002\u0002\u00a4\u00a5\u0007\u0007\u0002\u0002\u00a5\u00a7\u0005",
    "\u000e\b\u0002\u00a6\u00a3\u0003\u0002\u0002\u0002\u00a7\u00aa\u0003",
    "\u0002\u0002\u0002\u00a8\u00a6\u0003\u0002\u0002\u0002\u00a8\u00a9\u0003",
    "\u0002\u0002\u0002\u00a9\u0011\u0003\u0002\u0002\u0002\u00aa\u00a8\u0003",
    "\u0002\u0002\u0002\u00ab\u00ac\u0006\n\u0003\u0003\u00ac\u00b0\u0005",
    "\u0010\t\u0002\u00ad\u00ae\u0006\n\u0004\u0003\u00ae\u00b0\u0005\u0016",
    "\f\u0002\u00af\u00ab\u0003\u0002\u0002\u0002\u00af\u00ad\u0003\u0002",
    "\u0002\u0002\u00b0\u0013\u0003\u0002\u0002\u0002\u00b1\u00b2\u0005\u0012",
    "\n\u0002\u00b2\u00b3\u0007\u0002\u0002\u0003\u00b3\u0015\u0003\u0002",
    "\u0002\u0002\u00b4\u00b5\b\f\u0001\u0002\u00b5\u00b6\u0007V\u0002\u0002",
    "\u00b6\u00b7\u0005$\u0013\u0002\u00b7\u00b8\u0007W\u0002\u0002\u00b8",
    "\u00b9\u0005\u0016\f\u0002\u00b9\u00ba\u0007X\u0002\u0002\u00ba\u00bb",
    "\u0005\u0016\f\'\u00bb\u01ba\u0003\u0002\u0002\u0002\u00bc\u00bd\u0007",
    "\u0003\u0002\u0002\u00bd\u01ba\u0005\u0016\f\n\u00be\u00bf\u0005\u0002",
    "\u0002\u0002\u00bf\u00c0\u0007\b\u0002\u0002\u00c0\u00c1\u0005\u001e",
    "\u0010\u0002\u00c1\u01ba\u0003\u0002\u0002\u0002\u00c2\u00c3\u0007\u001e",
    "\u0002\u0002\u00c3\u00c4\u0007\u0004\u0002\u0002\u00c4\u00c5\u0007y",
    "\u0002\u0002\u00c5\u00c6\u0007\u0006\u0002\u0002\u00c6\u00c7\u0005\u0016",
    "\f\u0002\u00c7\u00c8\u0007\u0005\u0002\u0002\u00c8\u01ba\u0003\u0002",
    "\u0002\u0002\u00c9\u00ca\u0007\u001f\u0002\u0002\u00ca\u00cb\u0007\u0004",
    "\u0002\u0002\u00cb\u00cc\u0005\u0016\f\u0002\u00cc\u00cd\u0007\u0005",
    "\u0002\u0002\u00cd\u01ba\u0003\u0002\u0002\u0002\u00ce\u00cf\u0007 ",
    "\u0002\u0002\u00cf\u00d0\u0007\u0004\u0002\u0002\u00d0\u00d1\u0005\u0016",
    "\f\u0002\u00d1\u00d2\u0007\u0005\u0002\u0002\u00d2\u01ba\u0003\u0002",
    "\u0002\u0002\u00d3\u00d4\u0007!\u0002\u0002\u00d4\u00d5\u0007\u0004",
    "\u0002\u0002\u00d5\u00d8\u0005\u0018\r\u0002\u00d6\u00d7\u0007\\\u0002",
    "\u0002\u00d7\u00d9\u0005$\u0013\u0002\u00d8\u00d6\u0003\u0002\u0002",
    "\u0002\u00d8\u00d9\u0003\u0002\u0002\u0002\u00d9\u00da\u0003\u0002\u0002",
    "\u0002\u00da\u00db\u0007\u0005\u0002\u0002\u00db\u01ba\u0003\u0002\u0002",
    "\u0002\u00dc\u00dd\u0007\"\u0002\u0002\u00dd\u00de\u0007\u0004\u0002",
    "\u0002\u00de\u00df\u0007y\u0002\u0002\u00df\u00e0\u0007\u0006\u0002",
    "\u0002\u00e0\u00e3\u0005\u0018\r\u0002\u00e1\u00e2\u0007\\\u0002\u0002",
    "\u00e2\u00e4\u0005$\u0013\u0002\u00e3\u00e1\u0003\u0002\u0002\u0002",
    "\u00e3\u00e4\u0003\u0002\u0002\u0002\u00e4\u00e5\u0003\u0002\u0002\u0002",
    "\u00e5\u00e6\u0007\u0005\u0002\u0002\u00e6\u01ba\u0003\u0002\u0002\u0002",
    "\u00e7\u00ea\u0007#\u0002\u0002\u00e8\u00ea\u0007g\u0002\u0002\u00e9",
    "\u00e7\u0003\u0002\u0002\u0002\u00e9\u00e8\u0003\u0002\u0002\u0002\u00ea",
    "\u00eb\u0003\u0002\u0002\u0002\u00eb\u00ec\u0007\u0004\u0002\u0002\u00ec",
    "\u00ed\u0007y\u0002\u0002\u00ed\u00ee\u0007\u0006\u0002\u0002\u00ee",
    "\u00ef\u0005\u0016\f\u0002\u00ef\u00f0\u0007\u0005\u0002\u0002\u00f0",
    "\u01ba\u0003\u0002\u0002\u0002\u00f1\u00f2\u0007$\u0002\u0002\u00f2",
    "\u00f3\u0007\u0004\u0002\u0002\u00f3\u00f4\u0005\u0018\r\u0002\u00f4",
    "\u00f5\u0007\u0006\u0002\u0002\u00f5\u00f6\u0005\u000e\b\u0002\u00f6",
    "\u00f7\u0007\u0005\u0002\u0002\u00f7\u01ba\u0003\u0002\u0002\u0002\u00f8",
    "\u00f9\u0007%\u0002\u0002\u00f9\u00fa\u0007\u0004\u0002\u0002\u00fa",
    "\u00fb\u0005\u0018\r\u0002\u00fb\u00fc\u0007\u0005\u0002\u0002\u00fc",
    "\u01ba\u0003\u0002\u0002\u0002\u00fd\u00fe\u0007&\u0002\u0002\u00fe",
    "\u00ff\u0007\u0004\u0002\u0002\u00ff\u0100\u0005\u0016\f\u0002\u0100",
    "\u0101\u0007\u0006\u0002\u0002\u0101\u0102\u0005\u0016\f\u0002\u0102",
    "\u0103\u0007\u0005\u0002\u0002\u0103\u01ba\u0003\u0002\u0002\u0002\u0104",
    "\u0105\u0007\'\u0002\u0002\u0105\u0106\u0007\u0004\u0002\u0002\u0106",
    "\u0107\u0005\u0016\f\u0002\u0107\u0108\u0007\u0006\u0002\u0002\u0108",
    "\u0109\u0005\u0016\f\u0002\u0109\u010a\u0007\u0005\u0002\u0002\u010a",
    "\u01ba\u0003\u0002\u0002\u0002\u010b\u010c\u0007(\u0002\u0002\u010c",
    "\u010d\u0007\u0004\u0002\u0002\u010d\u010e\u0005\u0016\f\u0002\u010e",
    "\u010f\u0007\u0006\u0002\u0002\u010f\u0110\u0005\u0016\f\u0002\u0110",
    "\u0111\u0007\u0006\u0002\u0002\u0111\u0112\u0005\u0016\f\u0002\u0112",
    "\u0113\u0007\u0006\u0002\u0002\u0113\u0114\u0005\u0016\f\u0002\u0114",
    "\u0115\u0007\u0005\u0002\u0002\u0115\u01ba\u0003\u0002\u0002\u0002\u0116",
    "\u0117\u0007)\u0002\u0002\u0117\u0118\u0007\u0004\u0002\u0002\u0118",
    "\u0119\u0005\u0016\f\u0002\u0119\u011a\u0007\u0006\u0002\u0002\u011a",
    "\u011b\u0005\u0016\f\u0002\u011b\u011c\u0007\u0005\u0002\u0002\u011c",
    "\u01ba\u0003\u0002\u0002\u0002\u011d\u011e\u0007*\u0002\u0002\u011e",
    "\u011f\u0007\u0004\u0002\u0002\u011f\u0120\u0005\u0016\f\u0002\u0120",
    "\u0121\u0007\u0006\u0002\u0002\u0121\u0122\u0005\u0016\f\u0002\u0122",
    "\u0123\u0007\u0006\u0002\u0002\u0123\u0124\u0005\u0016\f\u0002\u0124",
    "\u0125\u0007\u0006\u0002\u0002\u0125\u0126\u0005\u0016\f\u0002\u0126",
    "\u0127\u0007\u0005\u0002\u0002\u0127\u01ba\u0003\u0002\u0002\u0002\u0128",
    "\u0129\u0007+\u0002\u0002\u0129\u012a\u0007\u0004\u0002\u0002\u012a",
    "\u012b\u0005\u0016\f\u0002\u012b\u012c\u0007\u0006\u0002\u0002\u012c",
    "\u012d\u0005\u0016\f\u0002\u012d\u012e\u0007\u0006\u0002\u0002\u012e",
    "\u012f\u0005\u0016\f\u0002\u012f\u0130\u0007\u0006\u0002\u0002\u0130",
    "\u0131\u00052\u001a\u0002\u0131\u0132\u0007\u0006\u0002\u0002\u0132",
    "\u0133\u0005\f\u0007\u0002\u0133\u0134\u0007\u0006\u0002\u0002\u0134",
    "\u0135\u0005\f\u0007\u0002\u0135\u0136\u0007\u0006\u0002\u0002\u0136",
    "\u0139\u0005\f\u0007\u0002\u0137\u0138\u0007\u0006\u0002\u0002\u0138",
    "\u013a\u0005\u0002\u0002\u0002\u0139\u0137\u0003\u0002\u0002\u0002\u0139",
    "\u013a\u0003\u0002\u0002\u0002\u013a\u013b\u0003\u0002\u0002\u0002\u013b",
    "\u013c\u0007\u0005\u0002\u0002\u013c\u01ba\u0003\u0002\u0002\u0002\u013d",
    "\u013e\u0007,\u0002\u0002\u013e\u013f\u0007\u0004\u0002\u0002\u013f",
    "\u0140\u0005\u0016\f\u0002\u0140\u0141\u0007\u0005\u0002\u0002\u0141",
    "\u01ba\u0003\u0002\u0002\u0002\u0142\u0143\u0007-\u0002\u0002\u0143",
    "\u0144\u0007\u0004\u0002\u0002\u0144\u0145\u00052\u001a\u0002\u0145",
    "\u0146\u0007\u0005\u0002\u0002\u0146\u01ba\u0003\u0002\u0002\u0002\u0147",
    "\u0148\u0007.\u0002\u0002\u0148\u0149\u0007\u0004\u0002\u0002\u0149",
    "\u014a\u00052\u001a\u0002\u014a\u014b\u0007\u0005\u0002\u0002\u014b",
    "\u01ba\u0003\u0002\u0002\u0002\u014c\u014d\u0007/\u0002\u0002\u014d",
    "\u014e\u0007\u0004\u0002\u0002\u014e\u014f\u0005\u0016\f\u0002\u014f",
    "\u0150\u0007\u0005\u0002\u0002\u0150\u01ba\u0003\u0002\u0002\u0002\u0151",
    "\u0152\u00070\u0002\u0002\u0152\u0153\u0007\u0004\u0002\u0002\u0153",
    "\u0154\u0005\u0016\f\u0002\u0154\u0155\u0007\u0005\u0002\u0002\u0155",
    "\u01ba\u0003\u0002\u0002\u0002\u0156\u0157\u0007]\u0002\u0002\u0157",
    "\u0158\u0007\u0004\u0002\u0002\u0158\u015b\u0005\u0018\r\u0002\u0159",
    "\u015a\u00079\u0002\u0002\u015a\u015c\u0005\u0016\f\u0002\u015b\u0159",
    "\u0003\u0002\u0002\u0002\u015b\u015c\u0003\u0002\u0002\u0002\u015c\u015f",
    "\u0003\u0002\u0002\u0002\u015d\u015e\u0007\\\u0002\u0002\u015e\u0160",
    "\u0005$\u0013\u0002\u015f\u015d\u0003\u0002\u0002\u0002\u015f\u0160",
    "\u0003\u0002\u0002\u0002\u0160\u0161\u0003\u0002\u0002\u0002\u0161\u0162",
    "\u0007\u0005\u0002\u0002\u0162\u01ba\u0003\u0002\u0002\u0002\u0163\u0164",
    "\u0007^\u0002\u0002\u0164\u0165\u0007\u0004\u0002\u0002\u0165\u0168",
    "\u0005\u0018\r\u0002\u0166\u0167\u00079\u0002\u0002\u0167\u0169\u0005",
    "\u0016\f\u0002\u0168\u0166\u0003\u0002\u0002\u0002\u0168\u0169\u0003",
    "\u0002\u0002\u0002\u0169\u016c\u0003\u0002\u0002\u0002\u016a\u016b\u0007",
    "\\\u0002\u0002\u016b\u016d\u0005$\u0013\u0002\u016c\u016a\u0003\u0002",
    "\u0002\u0002\u016c\u016d\u0003\u0002\u0002\u0002\u016d\u016e\u0003\u0002",
    "\u0002\u0002\u016e\u016f\u0007\u0005\u0002\u0002\u016f\u01ba\u0003\u0002",
    "\u0002\u0002\u0170\u0171\u0007h\u0002\u0002\u0171\u0172\u0007\u0004",
    "\u0002\u0002\u0172\u0177\u0005\u0016\f\u0002\u0173\u0174\u0007\u0006",
    "\u0002\u0002\u0174\u0176\u0005\u0016\f\u0002\u0175\u0173\u0003\u0002",
    "\u0002\u0002\u0176\u0179\u0003\u0002\u0002\u0002\u0177\u0175\u0003\u0002",
    "\u0002\u0002\u0177\u0178\u0003\u0002\u0002\u0002\u0178\u017a\u0003\u0002",
    "\u0002\u0002\u0179\u0177\u0003\u0002\u0002\u0002\u017a\u017b\u0007\u0005",
    "\u0002\u0002\u017b\u01ba\u0003\u0002\u0002\u0002\u017c\u017d\u0007i",
    "\u0002\u0002\u017d\u017e\u0007\u0004\u0002\u0002\u017e\u0183\u0005\u0016",
    "\f\u0002\u017f\u0180\u0007\u0006\u0002\u0002\u0180\u0182\u0005\u0016",
    "\f\u0002\u0181\u017f\u0003\u0002\u0002\u0002\u0182\u0185\u0003\u0002",
    "\u0002\u0002\u0183\u0181\u0003\u0002\u0002\u0002\u0183\u0184\u0003\u0002",
    "\u0002\u0002\u0184\u0186\u0003\u0002\u0002\u0002\u0185\u0183\u0003\u0002",
    "\u0002\u0002\u0186\u0187\u0007\u0005\u0002\u0002\u0187\u01ba\u0003\u0002",
    "\u0002\u0002\u0188\u0189\u00071\u0002\u0002\u0189\u018a\u0007\u0004",
    "\u0002\u0002\u018a\u018b\u0005D#\u0002\u018b\u018c\u0007\u0006\u0002",
    "\u0002\u018c\u018d\u0005\u0016\f\u0002\u018d\u018e\u0007\u0005\u0002",
    "\u0002\u018e\u01ba\u0003\u0002\u0002\u0002\u018f\u0190\u00071\u0002",
    "\u0002\u0190\u0191\u0007\u0004\u0002\u0002\u0191\u0194\u0005\u0018\r",
    "\u0002\u0192\u0193\u0007\\\u0002\u0002\u0193\u0195\u0005$\u0013\u0002",
    "\u0194\u0192\u0003\u0002\u0002\u0002\u0194\u0195\u0003\u0002\u0002\u0002",
    "\u0195\u0196\u0003\u0002\u0002\u0002\u0196\u0197\u0007\u0006\u0002\u0002",
    "\u0197\u0198\u0005\u0016\f\u0002\u0198\u0199\u0007\u0005\u0002\u0002",
    "\u0199\u01ba\u0003\u0002\u0002\u0002\u019a\u019b\u00072\u0002\u0002",
    "\u019b\u019c\u0007\u0004\u0002\u0002\u019c\u01a4\u0005\u0018\r\u0002",
    "\u019d\u019e\u0007\t\u0002\u0002\u019e\u019f\u0007\\\u0002\u0002\u019f",
    "\u01a0\u0005$\u0013\u0002\u01a0\u01a1\u0007\n\u0002\u0002\u01a1\u01a5",
    "\u0003\u0002\u0002\u0002\u01a2\u01a3\u0007\\\u0002\u0002\u01a3\u01a5",
    "\u0005$\u0013\u0002\u01a4\u019d\u0003\u0002\u0002\u0002\u01a4\u01a2",
    "\u0003\u0002\u0002\u0002\u01a4\u01a5\u0003\u0002\u0002\u0002\u01a5\u01a6",
    "\u0003\u0002\u0002\u0002\u01a6\u01a7\u0007\u0006\u0002\u0002\u01a7\u01a8",
    "\u0005\u0016\f\u0002\u01a8\u01a9\u0007\u0005\u0002\u0002\u01a9\u01ba",
    "\u0003\u0002\u0002\u0002\u01aa\u01ab\u0007r\u0002\u0002\u01ab\u01ac",
    "\u0007\u0004\u0002\u0002\u01ac\u01ad\u0005$\u0013\u0002\u01ad\u01ae",
    "\u0007\u0005\u0002\u0002\u01ae\u01ba\u0003\u0002\u0002\u0002\u01af\u01ba",
    "\u0005*\u0016\u0002\u01b0\u01b1\u0007\t\u0002\u0002\u01b1\u01b2\u0005",
    "2\u001a\u0002\u01b2\u01b3\u0007\n\u0002\u0002\u01b3\u01ba\u0003\u0002",
    "\u0002\u0002\u01b4\u01b5\u0007\u0004\u0002\u0002\u01b5\u01b6\u0005\u0016",
    "\f\u0002\u01b6\u01b7\u0007\u0005\u0002\u0002\u01b7\u01ba\u0003\u0002",
    "\u0002\u0002\u01b8\u01ba\u0005\u001e\u0010\u0002\u01b9\u00b4\u0003\u0002",
    "\u0002\u0002\u01b9\u00bc\u0003\u0002\u0002\u0002\u01b9\u00be\u0003\u0002",
    "\u0002\u0002\u01b9\u00c2\u0003\u0002\u0002\u0002\u01b9\u00c9\u0003\u0002",
    "\u0002\u0002\u01b9\u00ce\u0003\u0002\u0002\u0002\u01b9\u00d3\u0003\u0002",
    "\u0002\u0002\u01b9\u00dc\u0003\u0002\u0002\u0002\u01b9\u00e9\u0003\u0002",
    "\u0002\u0002\u01b9\u00f1\u0003\u0002\u0002\u0002\u01b9\u00f8\u0003\u0002",
    "\u0002\u0002\u01b9\u00fd\u0003\u0002\u0002\u0002\u01b9\u0104\u0003\u0002",
    "\u0002\u0002\u01b9\u010b\u0003\u0002\u0002\u0002\u01b9\u0116\u0003\u0002",
    "\u0002\u0002\u01b9\u011d\u0003\u0002\u0002\u0002\u01b9\u0128\u0003\u0002",
    "\u0002\u0002\u01b9\u013d\u0003\u0002\u0002\u0002\u01b9\u0142\u0003\u0002",
    "\u0002\u0002\u01b9\u0147\u0003\u0002\u0002\u0002\u01b9\u014c\u0003\u0002",
    "\u0002\u0002\u01b9\u0151\u0003\u0002\u0002\u0002\u01b9\u0156\u0003\u0002",
    "\u0002\u0002\u01b9\u0163\u0003\u0002\u0002\u0002\u01b9\u0170\u0003\u0002",
    "\u0002\u0002\u01b9\u017c\u0003\u0002\u0002\u0002\u01b9\u0188\u0003\u0002",
    "\u0002\u0002\u01b9\u018f\u0003\u0002\u0002\u0002\u01b9\u019a\u0003\u0002",
    "\u0002\u0002\u01b9\u01aa\u0003\u0002\u0002\u0002\u01b9\u01af\u0003\u0002",
    "\u0002\u0002\u01b9\u01b0\u0003\u0002\u0002\u0002\u01b9\u01b4\u0003\u0002",
    "\u0002\u0002\u01b9\u01b8\u0003\u0002\u0002\u0002\u01ba\u01d0\u0003\u0002",
    "\u0002\u0002\u01bb\u01bc\f\t\u0002\u0002\u01bc\u01bd\u0007\u000b\u0002",
    "\u0002\u01bd\u01cf\u0005\u0016\f\t\u01be\u01c2\f\b\u0002\u0002\u01bf",
    "\u01c3\u0007\f\u0002\u0002\u01c0\u01c3\u0007\u0007\u0002\u0002\u01c1",
    "\u01c3\u0007\r\u0002\u0002\u01c2\u01bf\u0003\u0002\u0002\u0002\u01c2",
    "\u01c0\u0003\u0002\u0002\u0002\u01c2\u01c1\u0003\u0002\u0002\u0002\u01c3",
    "\u01c4\u0003\u0002\u0002\u0002\u01c4\u01cf\u0005\u0016\f\t\u01c5\u01c8",
    "\f\u0007\u0002\u0002\u01c6\u01c9\u0007\u000e\u0002\u0002\u01c7\u01c9",
    "\u0007\u0003\u0002\u0002\u01c8\u01c6\u0003\u0002\u0002\u0002\u01c8\u01c7",
    "\u0003\u0002\u0002\u0002\u01c9\u01ca\u0003\u0002\u0002\u0002\u01ca\u01cf",
    "\u0005\u0016\f\b\u01cb\u01cc\f\u0006\u0002\u0002\u01cc\u01cd\u0007<",
    "\u0002\u0002\u01cd\u01cf\u0005\u0002\u0002\u0002\u01ce\u01bb\u0003\u0002",
    "\u0002\u0002\u01ce\u01be\u0003\u0002\u0002\u0002\u01ce\u01c5\u0003\u0002",
    "\u0002\u0002\u01ce\u01cb\u0003\u0002\u0002\u0002\u01cf\u01d2\u0003\u0002",
    "\u0002\u0002\u01d0\u01ce\u0003\u0002\u0002\u0002\u01d0\u01d1\u0003\u0002",
    "\u0002\u0002\u01d1\u0017\u0003\u0002\u0002\u0002\u01d2\u01d0\u0003\u0002",
    "\u0002\u0002\u01d3\u01e6\u0005\u0002\u0002\u0002\u01d4\u01d5\u0005\u0002",
    "\u0002\u0002\u01d5\u01d6\u0007\b\u0002\u0002\u01d6\u01d7\u0005\u0002",
    "\u0002\u0002\u01d7\u01e6\u0003\u0002\u0002\u0002\u01d8\u01d9\u0007\t",
    "\u0002\u0002\u01d9\u01de\u0005\u0002\u0002\u0002\u01da\u01db\u0007\u0006",
    "\u0002\u0002\u01db\u01dd\u0005\u0002\u0002\u0002\u01dc\u01da\u0003\u0002",
    "\u0002\u0002\u01dd\u01e0\u0003\u0002\u0002\u0002\u01de\u01dc\u0003\u0002",
    "\u0002\u0002\u01de\u01df\u0003\u0002\u0002\u0002\u01df\u01e1\u0003\u0002",
    "\u0002\u0002\u01e0\u01de\u0003\u0002\u0002\u0002\u01e1\u01e2\u0007\n",
    "\u0002\u0002\u01e2\u01e3\u0007\b\u0002\u0002\u01e3\u01e4\u0005\u0002",
    "\u0002\u0002\u01e4\u01e6\u0003\u0002\u0002\u0002\u01e5\u01d3\u0003\u0002",
    "\u0002\u0002\u01e5\u01d4\u0003\u0002\u0002\u0002\u01e5\u01d8\u0003\u0002",
    "\u0002\u0002\u01e6\u0019\u0003\u0002\u0002\u0002\u01e7\u01ed\u0005\u0002",
    "\u0002\u0002\u01e8\u01e9\u0005\u0002\u0002\u0002\u01e9\u01ea\u0007\b",
    "\u0002\u0002\u01ea\u01eb\u0005\u0002\u0002\u0002\u01eb\u01ed\u0003\u0002",
    "\u0002\u0002\u01ec\u01e7\u0003\u0002\u0002\u0002\u01ec\u01e8\u0003\u0002",
    "\u0002\u0002\u01ed\u001b\u0003\u0002\u0002\u0002\u01ee\u01ef\u0005\u001a",
    "\u000e\u0002\u01ef\u01f0\u0007\u0002\u0002\u0003\u01f0\u001d\u0003\u0002",
    "\u0002\u0002\u01f1\u01f2\u0007;\u0002\u0002\u01f2\u01f3\u0007\u0004",
    "\u0002\u0002\u01f3\u01f7\u0007\u0005\u0002\u0002\u01f4\u01f7\u0005\u000e",
    "\b\u0002\u01f5\u01f7\u0005&\u0014\u0002\u01f6\u01f1\u0003\u0002\u0002",
    "\u0002\u01f6\u01f4\u0003\u0002\u0002\u0002\u01f6\u01f5\u0003\u0002\u0002",
    "\u0002\u01f7\u001f\u0003\u0002\u0002\u0002\u01f8\u01f9\u0006\u0011\t",
    "\u0003\u01f9\u01fd\u0006\u0011\n\u0002\u01fa\u01fb\u0006\u0011\u000b",
    "\u0003\u01fb\u01fd\u0005$\u0013\u0002\u01fc\u01f8\u0003\u0002\u0002",
    "\u0002\u01fc\u01fa\u0003\u0002\u0002\u0002\u01fd!\u0003\u0002\u0002",
    "\u0002\u01fe\u01ff\u0005 \u0011\u0002\u01ff\u0200\u0007\u0002\u0002",
    "\u0003\u0200#\u0003\u0002\u0002\u0002\u0201\u0202\b\u0013\u0001\u0002",
    "\u0202\u0203\u0007\u0018\u0002\u0002\u0203\u0222\u0005$\u0013\t\u0204",
    "\u0205\u0005\u0002\u0002\u0002\u0205\u0206\u0007\u000f\u0002\u0002\u0206",
    "\u0207\u0007\u0082\u0002\u0002\u0207\u0222\u0003\u0002\u0002\u0002\u0208",
    "\u0209\u0005\u0002\u0002\u0002\u0209\u020a\u0007\u0010\u0002\u0002\u020a",
    "\u020b\u0007\u0082\u0002\u0002\u020b\u0222\u0003\u0002\u0002\u0002\u020c",
    "\u020d\u0007\u0011\u0002\u0002\u020d\u020e\u0007\u0012\u0002\u0002\u020e",
    "\u0222\u00058\u001d\u0002\u020f\u0210\u0007\u0011\u0002\u0002\u0210",
    "\u0211\u0007\u000f\u0002\u0002\u0211\u0222\u0007\u0082\u0002\u0002\u0212",
    "\u0213\u0005\u0016\f\u0002\u0213\u0214\t\u0004\u0002\u0002\u0214\u0215",
    "\u0005\u0016\f\u0002\u0215\u0222\u0003\u0002\u0002\u0002\u0216\u0217",
    "\u0007=\u0002\u0002\u0217\u0218\u0007\u0004\u0002\u0002\u0218\u0219",
    "\u0005$\u0013\u0002\u0219\u021a\u0007\u0005\u0002\u0002\u021a\u0222",
    "\u0003\u0002\u0002\u0002\u021b\u021c\u0007\u0004\u0002\u0002\u021c\u021d",
    "\u0005$\u0013\u0002\u021d\u021e\u0007\u0005\u0002\u0002\u021e\u0222",
    "\u0003\u0002\u0002\u0002\u021f\u0222\u0007T\u0002\u0002\u0220\u0222",
    "\u0007U\u0002\u0002\u0221\u0201\u0003\u0002\u0002\u0002\u0221\u0204",
    "\u0003\u0002\u0002\u0002\u0221\u0208\u0003\u0002\u0002\u0002\u0221\u020c",
    "\u0003\u0002\u0002\u0002\u0221\u020f\u0003\u0002\u0002\u0002\u0221\u0212",
    "\u0003\u0002\u0002\u0002\u0221\u0216\u0003\u0002\u0002\u0002\u0221\u021b",
    "\u0003\u0002\u0002\u0002\u0221\u021f\u0003\u0002\u0002\u0002\u0221\u0220",
    "\u0003\u0002\u0002\u0002\u0222\u022b\u0003\u0002\u0002\u0002\u0223\u0224",
    "\f\u0007\u0002\u0002\u0224\u0225\t\u0005\u0002\u0002\u0225\u022a\u0005",
    "$\u0013\b\u0226\u0227\f\u0006\u0002\u0002\u0227\u0228\t\u0006\u0002",
    "\u0002\u0228\u022a\u0005$\u0013\u0007\u0229\u0223\u0003\u0002\u0002",
    "\u0002\u0229\u0226\u0003\u0002\u0002\u0002\u022a\u022d\u0003\u0002\u0002",
    "\u0002\u022b\u0229\u0003\u0002\u0002\u0002\u022b\u022c\u0003\u0002\u0002",
    "\u0002\u022c%\u0003\u0002\u0002\u0002\u022d\u022b\u0003\u0002\u0002",
    "\u0002\u022e\u022f\u0005\u001a\u000e\u0002\u022f\'\u0003\u0002\u0002",
    "\u0002\u0230\u0231\u0005\u0002\u0002\u0002\u0231\u0232\u0007\u0012\u0002",
    "\u0002\u0232\u0233\t\u0007\u0002\u0002\u0233\u0273\u0003\u0002\u0002",
    "\u0002\u0234\u0235\u00074\u0002\u0002\u0235\u0236\u0007\u0004\u0002",
    "\u0002\u0236\u0237\u0005\u0002\u0002\u0002\u0237\u0238\u0007\u0006\u0002",
    "\u0002\u0238\u0239\t\u0007\u0002\u0002\u0239\u023a\u0007\u0005\u0002",
    "\u0002\u023a\u0273\u0003\u0002\u0002\u0002\u023b\u023c\u0005\u0002\u0002",
    "\u0002\u023c\u023d\u0007\u0013\u0002\u0002\u023d\u023e\t\u0007\u0002",
    "\u0002\u023e\u0273\u0003\u0002\u0002\u0002\u023f\u0240\u0005\u0002\u0002",
    "\u0002\u0240\u0241\u0007\u0012\u0002\u0002\u0241\u0242\u0005\f\u0007",
    "\u0002\u0242\u0273\u0003\u0002\u0002\u0002\u0243\u0244\u00075\u0002",
    "\u0002\u0244\u0245\u0007\u0004\u0002\u0002\u0245\u0246\u0005\u0002\u0002",
    "\u0002\u0246\u0247\u0007\u0006\u0002\u0002\u0247\u0248\u0005\f\u0007",
    "\u0002\u0248\u0249\u0007\u0005\u0002\u0002\u0249\u0273\u0003\u0002\u0002",
    "\u0002\u024a\u024b\u0005\u0002\u0002\u0002\u024b\u024c\u0007\u0013\u0002",
    "\u0002\u024c\u024d\u0005\f\u0007\u0002\u024d\u0273\u0003\u0002\u0002",
    "\u0002\u024e\u024f\u00074\u0002\u0002\u024f\u0250\u0007\u0004\u0002",
    "\u0002\u0250\u0251\u0007\u0082\u0002\u0002\u0251\u0273\u0007\u0005\u0002",
    "\u0002\u0252\u0253\u0007a\u0002\u0002\u0253\u0254\u0007\u0004\u0002",
    "\u0002\u0254\u0255\u0005\u0002\u0002\u0002\u0255\u0256\u0007\u0005\u0002",
    "\u0002\u0256\u0273\u0003\u0002\u0002\u0002\u0257\u0258\u0007`\u0002",
    "\u0002\u0258\u0259\u0007\u0004\u0002\u0002\u0259\u025a\u0005\u0002\u0002",
    "\u0002\u025a\u025b\u0007\u0005\u0002\u0002\u025b\u0273\u0003\u0002\u0002",
    "\u0002\u025c\u025d\u00075\u0002\u0002\u025d\u025e\u0007\u0004\u0002",
    "\u0002\u025e\u025f\u0007\u0082\u0002\u0002\u025f\u0273\u0007\u0005\u0002",
    "\u0002\u0260\u0261\u0007Y\u0002\u0002\u0261\u0262\u0007\u0004\u0002",
    "\u0002\u0262\u0269\u0005\u0002\u0002\u0002\u0263\u0264\u0007\u0006\u0002",
    "\u0002\u0264\u0267\u0005\u000e\b\u0002\u0265\u0266\u0007\u0006\u0002",
    "\u0002\u0266\u0268\u0005\u000e\b\u0002\u0267\u0265\u0003\u0002\u0002",
    "\u0002\u0267\u0268\u0003\u0002\u0002\u0002\u0268\u026a\u0003\u0002\u0002",
    "\u0002\u0269\u0263\u0003\u0002\u0002\u0002\u0269\u026a\u0003\u0002\u0002",
    "\u0002\u026a\u026b\u0003\u0002\u0002\u0002\u026b\u026c\u0007\u0005\u0002",
    "\u0002\u026c\u0273\u0003\u0002\u0002\u0002\u026d\u026e\u0007>\u0002",
    "\u0002\u026e\u026f\u0007\u0004\u0002\u0002\u026f\u0270\u0007\u0082\u0002",
    "\u0002\u0270\u0273\u0007\u0005\u0002\u0002\u0271\u0273\u0005\u0002\u0002",
    "\u0002\u0272\u0230\u0003\u0002\u0002\u0002\u0272\u0234\u0003\u0002\u0002",
    "\u0002\u0272\u023b\u0003\u0002\u0002\u0002\u0272\u023f\u0003\u0002\u0002",
    "\u0002\u0272\u0243\u0003\u0002\u0002\u0002\u0272\u024a\u0003\u0002\u0002",
    "\u0002\u0272\u024e\u0003\u0002\u0002\u0002\u0272\u0252\u0003\u0002\u0002",
    "\u0002\u0272\u0257\u0003\u0002\u0002\u0002\u0272\u025c\u0003\u0002\u0002",
    "\u0002\u0272\u0260\u0003\u0002\u0002\u0002\u0272\u026d\u0003\u0002\u0002",
    "\u0002\u0272\u0271\u0003\u0002\u0002\u0002\u0273)\u0003\u0002\u0002",
    "\u0002\u0274\u0275\u0005\u001a\u000e\u0002\u0275\u0276\u0007\u0012\u0002",
    "\u0002\u0276\u0277\u0005\u001a\u000e\u0002\u0277\u02eb\u0003\u0002\u0002",
    "\u0002\u0278\u0279\u0005\u001a\u000e\u0002\u0279\u027a\u0007\u0013\u0002",
    "\u0002\u027a\u027b\u0005\u001a\u000e\u0002\u027b\u02eb\u0003\u0002\u0002",
    "\u0002\u027c\u027d\u0005\u001a\u000e\u0002\u027d\u027e\u0007\u0012\u0002",
    "\u0002\u027e\u027f\u0007\u0082\u0002\u0002\u027f\u02eb\u0003\u0002\u0002",
    "\u0002\u0280\u0281\u00074\u0002\u0002\u0281\u0282\u0007\u0004\u0002",
    "\u0002\u0282\u0283\u0005\u001a\u000e\u0002\u0283\u0284\u0007\u0006\u0002",
    "\u0002\u0284\u0285\u0007\u0082\u0002\u0002\u0285\u0286\u0007\u0005\u0002",
    "\u0002\u0286\u02eb\u0003\u0002\u0002\u0002\u0287\u0288\u0005\u001a\u000e",
    "\u0002\u0288\u0289\u0007\u0013\u0002\u0002\u0289\u028a\u0007\u0082\u0002",
    "\u0002\u028a\u02eb\u0003\u0002\u0002\u0002\u028b\u028c\u0005\u001a\u000e",
    "\u0002\u028c\u028d\u0007\u0012\u0002\u0002\u028d\u028e\u0005\f\u0007",
    "\u0002\u028e\u02eb\u0003\u0002\u0002\u0002\u028f\u0290\u00075\u0002",
    "\u0002\u0290\u0291\u0007\u0004\u0002\u0002\u0291\u0292\u0005\u001a\u000e",
    "\u0002\u0292\u0293\u0007\u0006\u0002\u0002\u0293\u0294\u0005\f\u0007",
    "\u0002\u0294\u0295\u0007\u0005\u0002\u0002\u0295\u02eb\u0003\u0002\u0002",
    "\u0002\u0296\u0297\u0005\u001a\u000e\u0002\u0297\u0298\u0007\u0013\u0002",
    "\u0002\u0298\u0299\u0005\f\u0007\u0002\u0299\u02eb\u0003\u0002\u0002",
    "\u0002\u029a\u029b\u0007a\u0002\u0002\u029b\u029c\u0007\u0004\u0002",
    "\u0002\u029c\u029d\u0005\u001a\u000e\u0002\u029d\u029e\u0007\u0005\u0002",
    "\u0002\u029e\u02eb\u0003\u0002\u0002\u0002\u029f\u02a0\u0007`\u0002",
    "\u0002\u02a0\u02a1\u0007\u0004\u0002\u0002\u02a1\u02a2\u0005\u001a\u000e",
    "\u0002\u02a2\u02a3\u0007\u0005\u0002\u0002\u02a3\u02eb\u0003\u0002\u0002",
    "\u0002\u02a4\u02a5\u0007c\u0002\u0002\u02a5\u02a6\u0007\u0004\u0002",
    "\u0002\u02a6\u02a7\u0005\u001a\u000e\u0002\u02a7\u02a8\u0007\u0005\u0002",
    "\u0002\u02a8\u02eb\u0003\u0002\u0002\u0002\u02a9\u02aa\u0007d\u0002",
    "\u0002\u02aa\u02ab\u0007\u0004\u0002\u0002\u02ab\u02ac\u0005\u001a\u000e",
    "\u0002\u02ac\u02ad\u0007\u0005\u0002\u0002\u02ad\u02eb\u0003\u0002\u0002",
    "\u0002\u02ae\u02af\u0007o\u0002\u0002\u02af\u02b0\u0007\u0004\u0002",
    "\u0002\u02b0\u02b1\u0005\u001a\u000e\u0002\u02b1\u02b2\u0007\u0006\u0002",
    "\u0002\u02b2\u02b5\u0005\f\u0007\u0002\u02b3\u02b4\u0007\u0006\u0002",
    "\u0002\u02b4\u02b6\u0007\u0082\u0002\u0002\u02b5\u02b3\u0003\u0002\u0002",
    "\u0002\u02b5\u02b6\u0003\u0002\u0002\u0002\u02b6\u02b7\u0003\u0002\u0002",
    "\u0002\u02b7\u02b8\u0007\u0005\u0002\u0002\u02b8\u02eb\u0003\u0002\u0002",
    "\u0002\u02b9\u02ba\u0007o\u0002\u0002\u02ba\u02bb\u0007\u0004\u0002",
    "\u0002\u02bb\u02bc\u00052\u001a\u0002\u02bc\u02bd\u0007\u0006\u0002",
    "\u0002\u02bd\u02c0\u0005\f\u0007\u0002\u02be\u02bf\u0007\u0006\u0002",
    "\u0002\u02bf\u02c1\u0007\u0082\u0002\u0002\u02c0\u02be\u0003\u0002\u0002",
    "\u0002\u02c0\u02c1\u0003\u0002\u0002\u0002\u02c1\u02c2\u0003\u0002\u0002",
    "\u0002\u02c2\u02c3\u0007\u0005\u0002\u0002\u02c3\u02eb\u0003\u0002\u0002",
    "\u0002\u02c4\u02c5\u0005\u001a\u000e\u0002\u02c5\u02c6\u0007\u000f\u0002",
    "\u0002\u02c6\u02c7\u0007\u0082\u0002\u0002\u02c7\u02eb\u0003\u0002\u0002",
    "\u0002\u02c8\u02c9\u0007Y\u0002\u0002\u02c9\u02ca\u0007\u0004\u0002",
    "\u0002\u02ca\u02d1\u0005\u001a\u000e\u0002\u02cb\u02cc\u0007\u0006\u0002",
    "\u0002\u02cc\u02cf\u0005\u000e\b\u0002\u02cd\u02ce\u0007\u0006\u0002",
    "\u0002\u02ce\u02d0\u0005\u000e\b\u0002\u02cf\u02cd\u0003\u0002\u0002",
    "\u0002\u02cf\u02d0\u0003\u0002\u0002\u0002\u02d0\u02d2\u0003\u0002\u0002",
    "\u0002\u02d1\u02cb\u0003\u0002\u0002\u0002\u02d1\u02d2\u0003\u0002\u0002",
    "\u0002\u02d2\u02d3\u0003\u0002\u0002\u0002\u02d3\u02d4\u0007\u0005\u0002",
    "\u0002\u02d4\u02eb\u0003\u0002\u0002\u0002\u02d5\u02d6\u0007l\u0002",
    "\u0002\u02d6\u02d7\u0007\u0004\u0002\u0002\u02d7\u02d8\u0005\u001a\u000e",
    "\u0002\u02d8\u02d9\u0007\u0006\u0002\u0002\u02d9\u02dc\u0007\u0082\u0002",
    "\u0002\u02da\u02db\u0007\u0006\u0002\u0002\u02db\u02dd\u0007y\u0002",
    "\u0002\u02dc\u02da\u0003\u0002\u0002\u0002\u02dc\u02dd\u0003\u0002\u0002",
    "\u0002\u02dd\u02de\u0003\u0002\u0002\u0002\u02de\u02df\u0007\u0005\u0002",
    "\u0002\u02df\u02eb\u0003\u0002\u0002\u0002\u02e0\u02e1\t\b\u0002\u0002",
    "\u02e1\u02e2\u0007\u0004\u0002\u0002\u02e2\u02e3\u0007\u0082\u0002\u0002",
    "\u02e3\u02eb\u0007\u0005\u0002\u0002\u02e4\u02e5\u0007b\u0002\u0002",
    "\u02e5\u02e6\u0007\u0004\u0002\u0002\u02e6\u02e7\u0005\u001a\u000e\u0002",
    "\u02e7\u02e8\u0007\u0005\u0002\u0002\u02e8\u02eb\u0003\u0002\u0002\u0002",
    "\u02e9\u02eb\u0005&\u0014\u0002\u02ea\u0274\u0003\u0002\u0002\u0002",
    "\u02ea\u0278\u0003\u0002\u0002\u0002\u02ea\u027c\u0003\u0002\u0002\u0002",
    "\u02ea\u0280\u0003\u0002\u0002\u0002\u02ea\u0287\u0003\u0002\u0002\u0002",
    "\u02ea\u028b\u0003\u0002\u0002\u0002\u02ea\u028f\u0003\u0002\u0002\u0002",
    "\u02ea\u0296\u0003\u0002\u0002\u0002\u02ea\u029a\u0003\u0002\u0002\u0002",
    "\u02ea\u029f\u0003\u0002\u0002\u0002\u02ea\u02a4\u0003\u0002\u0002\u0002",
    "\u02ea\u02a9\u0003\u0002\u0002\u0002\u02ea\u02ae\u0003\u0002\u0002\u0002",
    "\u02ea\u02b9\u0003\u0002\u0002\u0002\u02ea\u02c4\u0003\u0002\u0002\u0002",
    "\u02ea\u02c8\u0003\u0002\u0002\u0002\u02ea\u02d5\u0003\u0002\u0002\u0002",
    "\u02ea\u02e0\u0003\u0002\u0002\u0002\u02ea\u02e4\u0003\u0002\u0002\u0002",
    "\u02ea\u02e9\u0003\u0002\u0002\u0002\u02eb+\u0003\u0002\u0002\u0002",
    "\u02ec\u02ed\u0006\u0017\u000e\u0003\u02ed\u02f1\u00050\u0019\u0002",
    "\u02ee\u02ef\u0006\u0017\u000f\u0003\u02ef\u02f1\u00052\u001a\u0002",
    "\u02f0\u02ec\u0003\u0002\u0002\u0002\u02f0\u02ee\u0003\u0002\u0002\u0002",
    "\u02f1-\u0003\u0002\u0002\u0002\u02f2\u02f3\u0005,\u0017\u0002\u02f3",
    "\u02f4\u0007\u0002\u0002\u0003\u02f4/\u0003\u0002\u0002\u0002\u02f5",
    "\u02f6\b\u0019\u0001\u0002\u02f6\u02f7\u0007\u0003\u0002\u0002\u02f7",
    "\u032c\u00050\u0019\t\u02f8\u02f9\u0007;\u0002\u0002\u02f9\u02fa\u0007",
    "\u0004\u0002\u0002\u02fa\u032c\u0007\u0005\u0002\u0002\u02fb\u02fc\u0007",
    "0\u0002\u0002\u02fc\u02fd\u0007\u0004\u0002\u0002\u02fd\u02fe\u0005",
    "0\u0019\u0002\u02fe\u02ff\u0007\u0005\u0002\u0002\u02ff\u032c\u0003",
    "\u0002\u0002\u0002\u0300\u0301\u0007Z\u0002\u0002\u0301\u0302\u0007",
    "\u0004\u0002\u0002\u0302\u0303\u00050\u0019\u0002\u0303\u0304\u0007",
    "\u0005\u0002\u0002\u0304\u032c\u0003\u0002\u0002\u0002\u0305\u0306\u0007",
    "/\u0002\u0002\u0306\u0307\u0007\u0004\u0002\u0002\u0307\u030a\u0005",
    "0\u0019\u0002\u0308\u0309\u0007\u0006\u0002\u0002\u0309\u030b\u0005",
    "\f\u0007\u0002\u030a\u0308\u0003\u0002\u0002\u0002\u030a\u030b\u0003",
    "\u0002\u0002\u0002\u030b\u030c\u0003\u0002\u0002\u0002\u030c\u030d\u0007",
    "\u0005\u0002\u0002\u030d\u032c\u0003\u0002\u0002\u0002\u030e\u030f\u0007",
    "f\u0002\u0002\u030f\u0310\u0007\u0004\u0002\u0002\u0310\u0313\u0005",
    "0\u0019\u0002\u0311\u0312\u0007\u0006\u0002\u0002\u0312\u0314\u0005",
    "\f\u0007\u0002\u0313\u0311\u0003\u0002\u0002\u0002\u0313\u0314\u0003",
    "\u0002\u0002\u0002\u0314\u0315\u0003\u0002\u0002\u0002\u0315\u0316\u0007",
    "\u0005\u0002\u0002\u0316\u032c\u0003\u0002\u0002\u0002\u0317\u0318\u0007",
    "h\u0002\u0002\u0318\u0319\u0007\u0004\u0002\u0002\u0319\u031a\u0005",
    "0\u0019\u0002\u031a\u031b\u0007\u0006\u0002\u0002\u031b\u031c\u0005",
    "0\u0019\u0002\u031c\u031d\u0007\u0005\u0002\u0002\u031d\u032c\u0003",
    "\u0002\u0002\u0002\u031e\u031f\u0007i\u0002\u0002\u031f\u0320\u0007",
    "\u0004\u0002\u0002\u0320\u0321\u00050\u0019\u0002\u0321\u0322\u0007",
    "\u0006\u0002\u0002\u0322\u0323\u00050\u0019\u0002\u0323\u0324\u0007",
    "\u0005\u0002\u0002\u0324\u032c\u0003\u0002\u0002\u0002\u0325\u0326\u0007",
    "\u0004\u0002\u0002\u0326\u0327\u00050\u0019\u0002\u0327\u0328\u0007",
    "\u0005\u0002\u0002\u0328\u032c\u0003\u0002\u0002\u0002\u0329\u032c\u0005",
    "(\u0015\u0002\u032a\u032c\u0005\f\u0007\u0002\u032b\u02f5\u0003\u0002",
    "\u0002\u0002\u032b\u02f8\u0003\u0002\u0002\u0002\u032b\u02fb\u0003\u0002",
    "\u0002\u0002\u032b\u0300\u0003\u0002\u0002\u0002\u032b\u0305\u0003\u0002",
    "\u0002\u0002\u032b\u030e\u0003\u0002\u0002\u0002\u032b\u0317\u0003\u0002",
    "\u0002\u0002\u032b\u031e\u0003\u0002\u0002\u0002\u032b\u0325\u0003\u0002",
    "\u0002\u0002\u032b\u0329\u0003\u0002\u0002\u0002\u032b\u032a\u0003\u0002",
    "\u0002\u0002\u032c\u0346\u0003\u0002\u0002\u0002\u032d\u0331\f\b\u0002",
    "\u0002\u032e\u0332\u0007\f\u0002\u0002\u032f\u0332\u0007\u001b\u0002",
    "\u0002\u0330\u0332\u0007\r\u0002\u0002\u0331\u032e\u0003\u0002\u0002",
    "\u0002\u0331\u032f\u0003\u0002\u0002\u0002\u0331\u0330\u0003\u0002\u0002",
    "\u0002\u0332\u0333\u0003\u0002\u0002\u0002\u0333\u0345\u00050\u0019",
    "\t\u0334\u0337\f\u0007\u0002\u0002\u0335\u0338\u0007\u000e\u0002\u0002",
    "\u0336\u0338\u0007\u0003\u0002\u0002\u0337\u0335\u0003\u0002\u0002\u0002",
    "\u0337\u0336\u0003\u0002\u0002\u0002\u0338\u0339\u0003\u0002\u0002\u0002",
    "\u0339\u0345\u00050\u0019\b\u033a\u0341\f\u0006\u0002\u0002\u033b\u0342",
    "\u0007\u0017\u0002\u0002\u033c\u0342\u0007\u0016\u0002\u0002\u033d\u0342",
    "\u0007\u0015\u0002\u0002\u033e\u0342\u0007\u0014\u0002\u0002\u033f\u0342",
    "\u0007\u0012\u0002\u0002\u0340\u0342\u0007\u0013\u0002\u0002\u0341\u033b",
    "\u0003\u0002\u0002\u0002\u0341\u033c\u0003\u0002\u0002\u0002\u0341\u033d",
    "\u0003\u0002\u0002\u0002\u0341\u033e\u0003\u0002\u0002\u0002\u0341\u033f",
    "\u0003\u0002\u0002\u0002\u0341\u0340\u0003\u0002\u0002\u0002\u0342\u0343",
    "\u0003\u0002\u0002\u0002\u0343\u0345\u00050\u0019\u0007\u0344\u032d",
    "\u0003\u0002\u0002\u0002\u0344\u0334\u0003\u0002\u0002\u0002\u0344\u033a",
    "\u0003\u0002\u0002\u0002\u0345\u0348\u0003\u0002\u0002\u0002\u0346\u0344",
    "\u0003\u0002\u0002\u0002\u0346\u0347\u0003\u0002\u0002\u0002\u03471",
    "\u0003\u0002\u0002\u0002\u0348\u0346\u0003\u0002\u0002\u0002\u0349\u034a",
    "\b\u001a\u0001\u0002\u034a\u034b\u0007V\u0002\u0002\u034b\u034c\u0005",
    "@!\u0002\u034c\u034d\u0007W\u0002\u0002\u034d\u034e\u00052\u001a\u0002",
    "\u034e\u034f\u0007X\u0002\u0002\u034f\u0350\u00052\u001a\u000b\u0350",
    "\u0399\u0003\u0002\u0002\u0002\u0351\u0352\u0007\u0003\u0002\u0002\u0352",
    "\u0399\u00052\u001a\n\u0353\u0354\u0007;\u0002\u0002\u0354\u0355\u0007",
    "\u0004\u0002\u0002\u0355\u0399\u0007\u0005\u0002\u0002\u0356\u0357\u0007",
    "0\u0002\u0002\u0357\u0358\u0007\u0004\u0002\u0002\u0358\u0359\u0005",
    "2\u001a\u0002\u0359\u035a\u0007\u0005\u0002\u0002\u035a\u0399\u0003",
    "\u0002\u0002\u0002\u035b\u035c\u0007Z\u0002\u0002\u035c\u035d\u0007",
    "\u0004\u0002\u0002\u035d\u035e\u00052\u001a\u0002\u035e\u035f\u0007",
    "\u0005\u0002\u0002\u035f\u0399\u0003\u0002\u0002\u0002\u0360\u0361\u0007",
    "/\u0002\u0002\u0361\u0362\u0007\u0004\u0002\u0002\u0362\u0365\u0005",
    "2\u001a\u0002\u0363\u0364\u0007\u0006\u0002\u0002\u0364\u0366\u0005",
    "\f\u0007\u0002\u0365\u0363\u0003\u0002\u0002\u0002\u0365\u0366\u0003",
    "\u0002\u0002\u0002\u0366\u0367\u0003\u0002\u0002\u0002\u0367\u0368\u0007",
    "\u0005\u0002\u0002\u0368\u0399\u0003\u0002\u0002\u0002\u0369\u036a\u0007",
    "f\u0002\u0002\u036a\u036b\u0007\u0004\u0002\u0002\u036b\u036e\u0005",
    "2\u001a\u0002\u036c\u036d\u0007\u0006\u0002\u0002\u036d\u036f\u0005",
    "\f\u0007\u0002\u036e\u036c\u0003\u0002\u0002\u0002\u036e\u036f\u0003",
    "\u0002\u0002\u0002\u036f\u0370\u0003\u0002\u0002\u0002\u0370\u0371\u0007",
    "\u0005\u0002\u0002\u0371\u0399\u0003\u0002\u0002\u0002\u0372\u0373\u0007",
    "h\u0002\u0002\u0373\u0374\u0007\u0004\u0002\u0002\u0374\u0379\u0005",
    "2\u001a\u0002\u0375\u0376\u0007\u0006\u0002\u0002\u0376\u0378\u0005",
    "2\u001a\u0002\u0377\u0375\u0003\u0002\u0002\u0002\u0378\u037b\u0003",
    "\u0002\u0002\u0002\u0379\u0377\u0003\u0002\u0002\u0002\u0379\u037a\u0003",
    "\u0002\u0002\u0002\u037a\u037c\u0003\u0002\u0002\u0002\u037b\u0379\u0003",
    "\u0002\u0002\u0002\u037c\u037d\u0007\u0005\u0002\u0002\u037d\u0399\u0003",
    "\u0002\u0002\u0002\u037e\u037f\u0007i\u0002\u0002\u037f\u0380\u0007",
    "\u0004\u0002\u0002\u0380\u0385\u00052\u001a\u0002\u0381\u0382\u0007",
    "\u0006\u0002\u0002\u0382\u0384\u00052\u001a\u0002\u0383\u0381\u0003",
    "\u0002\u0002\u0002\u0384\u0387\u0003\u0002\u0002\u0002\u0385\u0383\u0003",
    "\u0002\u0002\u0002\u0385\u0386\u0003\u0002\u0002\u0002\u0386\u0388\u0003",
    "\u0002\u0002\u0002\u0387\u0385\u0003\u0002\u0002\u0002\u0388\u0389\u0007",
    "\u0005\u0002\u0002\u0389\u0399\u0003\u0002\u0002\u0002\u038a\u038b\u0007",
    "r\u0002\u0002\u038b\u038c\u0007\u0004\u0002\u0002\u038c\u038d\u0005",
    "@!\u0002\u038d\u038e\u0007\u0005\u0002\u0002\u038e\u0399\u0003\u0002",
    "\u0002\u0002\u038f\u0390\u0007\u0004\u0002\u0002\u0390\u0391\u00052",
    "\u001a\u0002\u0391\u0392\u0007\u0005\u0002\u0002\u0392\u0399\u0003\u0002",
    "\u0002\u0002\u0393\u0399\u0005*\u0016\u0002\u0394\u0399\u0005\f\u0007",
    "\u0002\u0395\u0396\u0007q\u0002\u0002\u0396\u0397\u0007\u0004\u0002",
    "\u0002\u0397\u0399\u0007\u0005\u0002\u0002\u0398\u0349\u0003\u0002\u0002",
    "\u0002\u0398\u0351\u0003\u0002\u0002\u0002\u0398\u0353\u0003\u0002\u0002",
    "\u0002\u0398\u0356\u0003\u0002\u0002\u0002\u0398\u035b\u0003\u0002\u0002",
    "\u0002\u0398\u0360\u0003\u0002\u0002\u0002\u0398\u0369\u0003\u0002\u0002",
    "\u0002\u0398\u0372\u0003\u0002\u0002\u0002\u0398\u037e\u0003\u0002\u0002",
    "\u0002\u0398\u038a\u0003\u0002\u0002\u0002\u0398\u038f\u0003\u0002\u0002",
    "\u0002\u0398\u0393\u0003\u0002\u0002\u0002\u0398\u0394\u0003\u0002\u0002",
    "\u0002\u0398\u0395\u0003\u0002\u0002\u0002\u0399\u03b3\u0003\u0002\u0002",
    "\u0002\u039a\u039e\f\t\u0002\u0002\u039b\u039f\u0007\f\u0002\u0002\u039c",
    "\u039f\u0007\u0007\u0002\u0002\u039d\u039f\u0007\r\u0002\u0002\u039e",
    "\u039b\u0003\u0002\u0002\u0002\u039e\u039c\u0003\u0002\u0002\u0002\u039e",
    "\u039d\u0003\u0002\u0002\u0002\u039f\u03a0\u0003\u0002\u0002\u0002\u03a0",
    "\u03b2\u00052\u001a\n\u03a1\u03a4\f\b\u0002\u0002\u03a2\u03a5\u0007",
    "\u000e\u0002\u0002\u03a3\u03a5\u0007\u0003\u0002\u0002\u03a4\u03a2\u0003",
    "\u0002\u0002\u0002\u03a4\u03a3\u0003\u0002\u0002\u0002\u03a5\u03a6\u0003",
    "\u0002\u0002\u0002\u03a6\u03b2\u00052\u001a\t\u03a7\u03ae\f\u0007\u0002",
    "\u0002\u03a8\u03af\u0007\u0017\u0002\u0002\u03a9\u03af\u0007\u0016\u0002",
    "\u0002\u03aa\u03af\u0007\u0015\u0002\u0002\u03ab\u03af\u0007\u0014\u0002",
    "\u0002\u03ac\u03af\u0007\u0012\u0002\u0002\u03ad\u03af\u0007\u0013\u0002",
    "\u0002\u03ae\u03a8\u0003\u0002\u0002\u0002\u03ae\u03a9\u0003\u0002\u0002",
    "\u0002\u03ae\u03aa\u0003\u0002\u0002\u0002\u03ae\u03ab\u0003\u0002\u0002",
    "\u0002\u03ae\u03ac\u0003\u0002\u0002\u0002\u03ae\u03ad\u0003\u0002\u0002",
    "\u0002\u03af\u03b0\u0003\u0002\u0002\u0002\u03b0\u03b2\u00052\u001a",
    "\b\u03b1\u039a\u0003\u0002\u0002\u0002\u03b1\u03a1\u0003\u0002\u0002",
    "\u0002\u03b1\u03a7\u0003\u0002\u0002\u0002\u03b2\u03b5\u0003\u0002\u0002",
    "\u0002\u03b3\u03b1\u0003\u0002\u0002\u0002\u03b3\u03b4\u0003\u0002\u0002",
    "\u0002\u03b43\u0003\u0002\u0002\u0002\u03b5\u03b3\u0003\u0002\u0002",
    "\u0002\u03b6\u03b7\u0006\u001b\u0016\u0003\u03b7\u03bb\u00056\u001c",
    "\u0002\u03b8\u03b9\u0006\u001b\u0017\u0003\u03b9\u03bb\u00058\u001d",
    "\u0002\u03ba\u03b6\u0003\u0002\u0002\u0002\u03ba\u03b8\u0003\u0002\u0002",
    "\u0002\u03bb5\u0003\u0002\u0002\u0002\u03bc\u03c0\u0005\f\u0007\u0002",
    "\u03bd\u03c0\u0007\u0082\u0002\u0002\u03be\u03c0\u0005\u0002\u0002\u0002",
    "\u03bf\u03bc\u0003\u0002\u0002\u0002\u03bf\u03bd\u0003\u0002\u0002\u0002",
    "\u03bf\u03be\u0003\u0002\u0002\u0002\u03c07\u0003\u0002\u0002\u0002",
    "\u03c1\u03c4\u0005\f\u0007\u0002\u03c2\u03c4\u0007\u0082\u0002\u0002",
    "\u03c3\u03c1\u0003\u0002\u0002\u0002\u03c3\u03c2\u0003\u0002\u0002\u0002",
    "\u03c49\u0003\u0002\u0002\u0002\u03c5\u03c6\u0006\u001e\u0018\u0003",
    "\u03c6\u03ca\u0005> \u0002\u03c7\u03c8\u0006\u001e\u0019\u0003\u03c8",
    "\u03ca\u0005@!\u0002\u03c9\u03c5\u0003\u0002\u0002\u0002\u03c9\u03c7",
    "\u0003\u0002\u0002\u0002\u03ca;\u0003\u0002\u0002\u0002\u03cb\u03cc",
    "\u0005:\u001e\u0002\u03cc\u03cd\u0007\u0002\u0002\u0003\u03cd=\u0003",
    "\u0002\u0002\u0002\u03ce\u03cf\b \u0001\u0002\u03cf\u03d0\t\t\u0002",
    "\u0002\u03d0\u0426\u0005> \t\u03d1\u03d2\u0005\u0002\u0002\u0002\u03d2",
    "\u03d3\u0007\u000f\u0002\u0002\u03d3\u03d4\u0007\u0082\u0002\u0002\u03d4",
    "\u0426\u0003\u0002\u0002\u0002\u03d5\u03d6\u0005\u0002\u0002\u0002\u03d6",
    "\u03d7\u0007\u0010\u0002\u0002\u03d7\u03d8\u0007\u0082\u0002\u0002\u03d8",
    "\u0426\u0003\u0002\u0002\u0002\u03d9\u03da\u0005\u0002\u0002\u0002\u03da",
    "\u03db\u0007\u0012\u0002\u0002\u03db\u03dc\u00056\u001c\u0002\u03dc",
    "\u0426\u0003\u0002\u0002\u0002\u03dd\u03df\u0007\u0003\u0002\u0002\u03de",
    "\u03dd\u0003\u0002\u0002\u0002\u03de\u03df\u0003\u0002\u0002\u0002\u03df",
    "\u03e0\u0003\u0002\u0002\u0002\u03e0\u03e1\u0005\u0002\u0002\u0002\u03e1",
    "\u03e2\u0007\u001c\u0002\u0002\u03e2\u03e3\u00056\u001c\u0002\u03e3",
    "\u0426\u0003\u0002\u0002\u0002\u03e4\u03e5\u0005\u0002\u0002\u0002\u03e5",
    "\u03e6\u0007\u0013\u0002\u0002\u03e6\u03e7\u00056\u001c\u0002\u03e7",
    "\u0426\u0003\u0002\u0002\u0002\u03e8\u03ea\u0005\u0002\u0002\u0002\u03e9",
    "\u03eb\u0007=\u0002\u0002\u03ea\u03e9\u0003\u0002\u0002\u0002\u03ea",
    "\u03eb\u0003\u0002\u0002\u0002\u03eb\u03ec\u0003\u0002\u0002\u0002\u03ec",
    "\u03ed\u0007I\u0002\u0002\u03ed\u03ef\u0007\u0004\u0002\u0002\u03ee",
    "\u03f0\u00056\u001c\u0002\u03ef\u03ee\u0003\u0002\u0002\u0002\u03ef",
    "\u03f0\u0003\u0002\u0002\u0002\u03f0\u03f5\u0003\u0002\u0002\u0002\u03f1",
    "\u03f2\u0007\u0006\u0002\u0002\u03f2\u03f4\u00056\u001c\u0002\u03f3",
    "\u03f1\u0003\u0002\u0002\u0002\u03f4\u03f7\u0003\u0002\u0002\u0002\u03f5",
    "\u03f3\u0003\u0002\u0002\u0002\u03f5\u03f6\u0003\u0002\u0002\u0002\u03f6",
    "\u03f8\u0003\u0002\u0002\u0002\u03f7\u03f5\u0003\u0002\u0002\u0002\u03f8",
    "\u03f9\u0007\u0005\u0002\u0002\u03f9\u0426\u0003\u0002\u0002\u0002\u03fa",
    "\u03fb\u00050\u0019\u0002\u03fb\u03fc\t\u0004\u0002\u0002\u03fc\u03fd",
    "\u00050\u0019\u0002\u03fd\u0426\u0003\u0002\u0002\u0002\u03fe\u03ff",
    "\t\b\u0002\u0002\u03ff\u0400\u0007\u0004\u0002\u0002\u0400\u0401\u0007",
    "\u0082\u0002\u0002\u0401\u0426\u0007\u0005\u0002\u0002\u0402\u0403\u0007",
    "P\u0002\u0002\u0403\u0404\u0007\u0004\u0002\u0002\u0404\u0405\u0005",
    "\u0002\u0002\u0002\u0405\u0406\u0007\u0006\u0002\u0002\u0406\u0407\u0005",
    "\f\u0007\u0002\u0407\u0408\u0007\u0006\u0002\u0002\u0408\u0409\u0005",
    "\f\u0007\u0002\u0409\u040a\u0007\u0005\u0002\u0002\u040a\u0426\u0003",
    "\u0002\u0002\u0002\u040b\u040c\u0007Q\u0002\u0002\u040c\u040d\u0007",
    "\u0004\u0002\u0002\u040d\u040e\u0005\u0002\u0002\u0002\u040e\u040f\u0007",
    "\u0006\u0002\u0002\u040f\u0416\u0007y\u0002\u0002\u0410\u0411\u0007",
    "\u0006\u0002\u0002\u0411\u0414\u0007y\u0002\u0002\u0412\u0413\u0007",
    "\u0006\u0002\u0002\u0413\u0415\t\n\u0002\u0002\u0414\u0412\u0003\u0002",
    "\u0002\u0002\u0414\u0415\u0003\u0002\u0002\u0002\u0415\u0417\u0003\u0002",
    "\u0002\u0002\u0416\u0410\u0003\u0002\u0002\u0002\u0416\u0417\u0003\u0002",
    "\u0002\u0002\u0417\u0418\u0003\u0002\u0002\u0002\u0418\u0419\u0007\u0005",
    "\u0002\u0002\u0419\u0426\u0003\u0002\u0002\u0002\u041a\u041b\u0007=",
    "\u0002\u0002\u041b\u041c\u0007\u0004\u0002\u0002\u041c\u041d\u0005>",
    " \u0002\u041d\u041e\u0007\u0005\u0002\u0002\u041e\u0426\u0003\u0002",
    "\u0002\u0002\u041f\u0420\u0007\u0004\u0002\u0002\u0420\u0421\u0005>",
    " \u0002\u0421\u0422\u0007\u0005\u0002\u0002\u0422\u0426\u0003\u0002",
    "\u0002\u0002\u0423\u0426\u0007T\u0002\u0002\u0424\u0426\u0007U\u0002",
    "\u0002\u0425\u03ce\u0003\u0002\u0002\u0002\u0425\u03d1\u0003\u0002\u0002",
    "\u0002\u0425\u03d5\u0003\u0002\u0002\u0002\u0425\u03d9\u0003\u0002\u0002",
    "\u0002\u0425\u03de\u0003\u0002\u0002\u0002\u0425\u03e4\u0003\u0002\u0002",
    "\u0002\u0425\u03e8\u0003\u0002\u0002\u0002\u0425\u03fa\u0003\u0002\u0002",
    "\u0002\u0425\u03fe\u0003\u0002\u0002\u0002\u0425\u0402\u0003\u0002\u0002",
    "\u0002\u0425\u040b\u0003\u0002\u0002\u0002\u0425\u041a\u0003\u0002\u0002",
    "\u0002\u0425\u041f\u0003\u0002\u0002\u0002\u0425\u0423\u0003\u0002\u0002",
    "\u0002\u0425\u0424\u0003\u0002\u0002\u0002\u0426\u042f\u0003\u0002\u0002",
    "\u0002\u0427\u0428\f\u0007\u0002\u0002\u0428\u0429\t\u0005\u0002\u0002",
    "\u0429\u042e\u0005> \b\u042a\u042b\f\u0006\u0002\u0002\u042b\u042c\t",
    "\u0006\u0002\u0002\u042c\u042e\u0005> \u0007\u042d\u0427\u0003\u0002",
    "\u0002\u0002\u042d\u042a\u0003\u0002\u0002\u0002\u042e\u0431\u0003\u0002",
    "\u0002\u0002\u042f\u042d\u0003\u0002\u0002\u0002\u042f\u0430\u0003\u0002",
    "\u0002\u0002\u0430?\u0003\u0002\u0002\u0002\u0431\u042f\u0003\u0002",
    "\u0002\u0002\u0432\u0433\b!\u0001\u0002\u0433\u0434\u0007\u0018\u0002",
    "\u0002\u0434\u04a3\u0005@!\t\u0435\u0436\u0005\u001a\u000e\u0002\u0436",
    "\u0437\u0007\u000f\u0002\u0002\u0437\u0438\u0007\u0082\u0002\u0002\u0438",
    "\u04a3\u0003\u0002\u0002\u0002\u0439\u043a\u0005\u001a\u000e\u0002\u043a",
    "\u043b\u0007\u0010\u0002\u0002\u043b\u043c\u0007\u0082\u0002\u0002\u043c",
    "\u04a3\u0003\u0002\u0002\u0002\u043d\u043e\u0005\u001a\u000e\u0002\u043e",
    "\u043f\u0007\u0012\u0002\u0002\u043f\u0440\u0005\u001a\u000e\u0002\u0440",
    "\u04a3\u0003\u0002\u0002\u0002\u0441\u0442\u0005\u001a\u000e\u0002\u0442",
    "\u0443\u0007\u0013\u0002\u0002\u0443\u0444\u0005\u001a\u000e\u0002\u0444",
    "\u04a3\u0003\u0002\u0002\u0002\u0445\u0446\u0005\u001a\u000e\u0002\u0446",
    "\u0447\u0007\u0012\u0002\u0002\u0447\u0448\u00058\u001d\u0002\u0448",
    "\u04a3\u0003\u0002\u0002\u0002\u0449\u044a\u0005\u001a\u000e\u0002\u044a",
    "\u044b\u0007\u0013\u0002\u0002\u044b\u044c\u00058\u001d\u0002\u044c",
    "\u04a3\u0003\u0002\u0002\u0002\u044d\u044f\u0005\u001a\u000e\u0002\u044e",
    "\u0450\u0007=\u0002\u0002\u044f\u044e\u0003\u0002\u0002\u0002\u044f",
    "\u0450\u0003\u0002\u0002\u0002\u0450\u0451\u0003\u0002\u0002\u0002\u0451",
    "\u0452\u0007I\u0002\u0002\u0452\u0454\u0007\u0004\u0002\u0002\u0453",
    "\u0455\u00058\u001d\u0002\u0454\u0453\u0003\u0002\u0002\u0002\u0454",
    "\u0455\u0003\u0002\u0002\u0002\u0455\u045a\u0003\u0002\u0002\u0002\u0456",
    "\u0457\u0007\u0006\u0002\u0002\u0457\u0459\u00058\u001d\u0002\u0458",
    "\u0456\u0003\u0002\u0002\u0002\u0459\u045c\u0003\u0002\u0002\u0002\u045a",
    "\u0458\u0003\u0002\u0002\u0002\u045a\u045b\u0003\u0002\u0002\u0002\u045b",
    "\u045d\u0003\u0002\u0002\u0002\u045c\u045a\u0003\u0002\u0002\u0002\u045d",
    "\u045e\u0007\u0005\u0002\u0002\u045e\u04a3\u0003\u0002\u0002\u0002\u045f",
    "\u0461\u0005\u001a\u000e\u0002\u0460\u0462\u0007=\u0002\u0002\u0461",
    "\u0460\u0003\u0002\u0002\u0002\u0461\u0462\u0003\u0002\u0002\u0002\u0462",
    "\u0463\u0003\u0002\u0002\u0002\u0463\u0464\u0007I\u0002\u0002\u0464",
    "\u0465\u0007\u0004\u0002\u0002\u0465\u0466\u0005d3\u0002\u0466\u0467",
    "\u0007\u0005\u0002\u0002\u0467\u04a3\u0003\u0002\u0002\u0002\u0468\u0469",
    "\u00052\u001a\u0002\u0469\u046a\t\u0004\u0002\u0002\u046a\u046b\u0005",
    "2\u001a\u0002\u046b\u04a3\u0003\u0002\u0002\u0002\u046c\u046d\t\b\u0002",
    "\u0002\u046d\u046e\u0007\u0004\u0002\u0002\u046e\u046f\u0007\u0082\u0002",
    "\u0002\u046f\u04a3\u0007\u0005\u0002\u0002\u0470\u0471\u0007P\u0002",
    "\u0002\u0471\u0472\u0007\u0004\u0002\u0002\u0472\u0473\u0005\u001a\u000e",
    "\u0002\u0473\u0474\u0007\u0006\u0002\u0002\u0474\u0475\u0005\f\u0007",
    "\u0002\u0475\u0476\u0007\u0006\u0002\u0002\u0476\u0477\u0005\f\u0007",
    "\u0002\u0477\u0478\u0007\u0005\u0002\u0002\u0478\u04a3\u0003\u0002\u0002",
    "\u0002\u0479\u047a\u0007Q\u0002\u0002\u047a\u047b\u0007\u0004\u0002",
    "\u0002\u047b\u047c\u0005\u001a\u000e\u0002\u047c\u047d\u0007\u0006\u0002",
    "\u0002\u047d\u0484\u0007y\u0002\u0002\u047e\u047f\u0007\u0006\u0002",
    "\u0002\u047f\u0482\u0007y\u0002\u0002\u0480\u0481\u0007\u0006\u0002",
    "\u0002\u0481\u0483\t\n\u0002\u0002\u0482\u0480\u0003\u0002\u0002\u0002",
    "\u0482\u0483\u0003\u0002\u0002\u0002\u0483\u0485\u0003\u0002\u0002\u0002",
    "\u0484\u047e\u0003\u0002\u0002\u0002\u0484\u0485\u0003\u0002\u0002\u0002",
    "\u0485\u0486\u0003\u0002\u0002\u0002\u0486\u0487\u0007\u0005\u0002\u0002",
    "\u0487\u04a3\u0003\u0002\u0002\u0002\u0488\u0489\u0007Q\u0002\u0002",
    "\u0489\u048a\u0007\u0004\u0002\u0002\u048a\u048b\u00052\u001a\u0002",
    "\u048b\u048c\u0007\u0006\u0002\u0002\u048c\u0493\u0007y\u0002\u0002",
    "\u048d\u048e\u0007\u0006\u0002\u0002\u048e\u0491\u0007y\u0002\u0002",
    "\u048f\u0490\u0007\u0006\u0002\u0002\u0490\u0492\t\n\u0002\u0002\u0491",
    "\u048f\u0003\u0002\u0002\u0002\u0491\u0492\u0003\u0002\u0002\u0002\u0492",
    "\u0494\u0003\u0002\u0002\u0002\u0493\u048d\u0003\u0002\u0002\u0002\u0493",
    "\u0494\u0003\u0002\u0002\u0002\u0494\u0495\u0003\u0002\u0002\u0002\u0495",
    "\u0496\u0007\u0005\u0002\u0002\u0496\u04a3\u0003\u0002\u0002\u0002\u0497",
    "\u0498\u0007=\u0002\u0002\u0498\u0499\u0007\u0004\u0002\u0002\u0499",
    "\u049a\u0005@!\u0002\u049a\u049b\u0007\u0005\u0002\u0002\u049b\u04a3",
    "\u0003\u0002\u0002\u0002\u049c\u049d\u0007\u0004\u0002\u0002\u049d\u049e",
    "\u0005@!\u0002\u049e\u049f\u0007\u0005\u0002\u0002\u049f\u04a3\u0003",
    "\u0002\u0002\u0002\u04a0\u04a3\u0007T\u0002\u0002\u04a1\u04a3\u0007",
    "U\u0002\u0002\u04a2\u0432\u0003\u0002\u0002\u0002\u04a2\u0435\u0003",
    "\u0002\u0002\u0002\u04a2\u0439\u0003\u0002\u0002\u0002\u04a2\u043d\u0003",
    "\u0002\u0002\u0002\u04a2\u0441\u0003\u0002\u0002\u0002\u04a2\u0445\u0003",
    "\u0002\u0002\u0002\u04a2\u0449\u0003\u0002\u0002\u0002\u04a2\u044d\u0003",
    "\u0002\u0002\u0002\u04a2\u045f\u0003\u0002\u0002\u0002\u04a2\u0468\u0003",
    "\u0002\u0002\u0002\u04a2\u046c\u0003\u0002\u0002\u0002\u04a2\u0470\u0003",
    "\u0002\u0002\u0002\u04a2\u0479\u0003\u0002\u0002\u0002\u04a2\u0488\u0003",
    "\u0002\u0002\u0002\u04a2\u0497\u0003\u0002\u0002\u0002\u04a2\u049c\u0003",
    "\u0002\u0002\u0002\u04a2\u04a0\u0003\u0002\u0002\u0002\u04a2\u04a1\u0003",
    "\u0002\u0002\u0002\u04a3\u04ac\u0003\u0002\u0002\u0002\u04a4\u04a5\f",
    "\u0007\u0002\u0002\u04a5\u04a6\t\u0005\u0002\u0002\u04a6\u04ab\u0005",
    "@!\b\u04a7\u04a8\f\u0006\u0002\u0002\u04a8\u04a9\t\u0006\u0002\u0002",
    "\u04a9\u04ab\u0005@!\u0007\u04aa\u04a4\u0003\u0002\u0002\u0002\u04aa",
    "\u04a7\u0003\u0002\u0002\u0002\u04ab\u04ae\u0003\u0002\u0002\u0002\u04ac",
    "\u04aa\u0003\u0002\u0002\u0002\u04ac\u04ad\u0003\u0002\u0002\u0002\u04ad",
    "A\u0003\u0002\u0002\u0002\u04ae\u04ac\u0003\u0002\u0002\u0002\u04af",
    "\u04b3\u0005D#\u0002\u04b0\u04b1\u0006\"\u001e\u0003\u04b1\u04b2\u0007",
    "\\\u0002\u0002\u04b2\u04b4\u0005 \u0011\u0002\u04b3\u04b0\u0003\u0002",
    "\u0002\u0002\u04b3\u04b4\u0003\u0002\u0002\u0002\u04b4\u04b8\u0003\u0002",
    "\u0002\u0002\u04b5\u04b6\u0006\"\u001f\u0003\u04b6\u04b7\u0007<\u0002",
    "\u0002\u04b7\u04b9\u0005\u0002\u0002\u0002\u04b8\u04b5\u0003\u0002\u0002",
    "\u0002\u04b8\u04b9\u0003\u0002\u0002\u0002\u04b9C\u0003\u0002\u0002",
    "\u0002\u04ba\u04bd\u0007N\u0002\u0002\u04bb\u04bc\u0007\u0004\u0002",
    "\u0002\u04bc\u04be\u0007\u0005\u0002\u0002\u04bd\u04bb\u0003\u0002\u0002",
    "\u0002\u04bd\u04be\u0003\u0002\u0002\u0002\u04be\u050a\u0003\u0002\u0002",
    "\u0002\u04bf\u04c0\u0007O\u0002\u0002\u04c0\u04c1\u0007\u0004\u0002",
    "\u0002\u04c1\u04c2\u0005\u0002\u0002\u0002\u04c2\u04c3\u0007\u0006\u0002",
    "\u0002\u04c3\u04c4\u0007y\u0002\u0002\u04c4\u04c5\u0007\u0005\u0002",
    "\u0002\u04c5\u050a\u0003\u0002\u0002\u0002\u04c6\u050a\u0005H%\u0002",
    "\u04c7\u04c9\u0005\u0002\u0002\u0002\u04c8\u04ca\u0007=\u0002\u0002",
    "\u04c9\u04c8\u0003\u0002\u0002\u0002\u04c9\u04ca\u0003\u0002\u0002\u0002",
    "\u04ca\u04cb\u0003\u0002\u0002\u0002\u04cb\u04cc\u0007I\u0002\u0002",
    "\u04cc\u04ce\u0007\u0004\u0002\u0002\u04cd\u04cf\u00054\u001b\u0002",
    "\u04ce\u04cd\u0003\u0002\u0002\u0002\u04ce\u04cf\u0003\u0002\u0002\u0002",
    "\u04cf\u04d4\u0003\u0002\u0002\u0002\u04d0\u04d1\u0007\u0006\u0002\u0002",
    "\u04d1\u04d3\u00054\u001b\u0002\u04d2\u04d0\u0003\u0002\u0002\u0002",
    "\u04d3\u04d6\u0003\u0002\u0002\u0002\u04d4\u04d2\u0003\u0002\u0002\u0002",
    "\u04d4\u04d5\u0003\u0002\u0002\u0002\u04d5\u04d7\u0003\u0002\u0002\u0002",
    "\u04d6\u04d4\u0003\u0002\u0002\u0002\u04d7\u04da\u0007\u0005\u0002\u0002",
    "\u04d8\u04d9\u0007B\u0002\u0002\u04d9\u04db\u0007C\u0002\u0002\u04da",
    "\u04d8\u0003\u0002\u0002\u0002\u04da\u04db\u0003\u0002\u0002\u0002\u04db",
    "\u050a\u0003\u0002\u0002\u0002\u04dc\u04de\u0005\u0002\u0002\u0002\u04dd",
    "\u04df\u0007=\u0002\u0002\u04de\u04dd\u0003\u0002\u0002\u0002\u04de",
    "\u04df\u0003\u0002\u0002\u0002\u04df\u04e0\u0003\u0002\u0002\u0002\u04e0",
    "\u04e1\u0007I\u0002\u0002\u04e1\u04e2\u0007\u0004\u0002\u0002\u04e2",
    "\u04e3\u0005d3\u0002\u04e3\u04e6\u0007\u0005\u0002\u0002\u04e4\u04e5",
    "\u0007B\u0002\u0002\u04e5\u04e7\u0007C\u0002\u0002\u04e6\u04e4\u0003",
    "\u0002\u0002\u0002\u04e6\u04e7\u0003\u0002\u0002\u0002\u04e7\u050a\u0003",
    "\u0002\u0002\u0002\u04e8\u050a\u0005J&\u0002\u04e9\u050a\u0005L\'\u0002",
    "\u04ea\u050a\u0005N(\u0002\u04eb\u04ec\u0006# \u0003\u04ec\u04ed\u0007",
    "n\u0002\u0002\u04ed\u04ee\u0007\u0004\u0002\u0002\u04ee\u050a\u0007",
    "\u0005\u0002\u0002\u04ef\u04f0\u0006#!\u0003\u04f0\u050a\u0005@!\u0002",
    "\u04f1\u04f2\u0006#\"\u0003\u04f2\u04f3\u0007o\u0002\u0002\u04f3\u04f4",
    "\u0007\u0004\u0002\u0002\u04f4\u04f5\u0005\u0002\u0002\u0002\u04f5\u04f6",
    "\u0007\u0006\u0002\u0002\u04f6\u04f9\u0007y\u0002\u0002\u04f7\u04f8",
    "\u0007\u0006\u0002\u0002\u04f8\u04fa\u0007\u0082\u0002\u0002\u04f9\u04f7",
    "\u0003\u0002\u0002\u0002\u04f9\u04fa\u0003\u0002\u0002\u0002\u04fa\u04fb",
    "\u0003\u0002\u0002\u0002\u04fb\u04fc\u0007\u0005\u0002\u0002\u04fc\u050a",
    "\u0003\u0002\u0002\u0002\u04fd\u04fe\u0006##\u0003\u04fe\u04ff\u0007",
    "o\u0002\u0002\u04ff\u0500\u0007\u0004\u0002\u0002\u0500\u0501\u0005",
    "2\u001a\u0002\u0501\u0502\u0007\u0006\u0002\u0002\u0502\u0505\u0007",
    "y\u0002\u0002\u0503\u0504\u0007\u0006\u0002\u0002\u0504\u0506\u0007",
    "\u0082\u0002\u0002\u0505\u0503\u0003\u0002\u0002\u0002\u0505\u0506\u0003",
    "\u0002\u0002\u0002\u0506\u0507\u0003\u0002\u0002\u0002\u0507\u0508\u0007",
    "\u0005\u0002\u0002\u0508\u050a\u0003\u0002\u0002\u0002\u0509\u04ba\u0003",
    "\u0002\u0002\u0002\u0509\u04bf\u0003\u0002\u0002\u0002\u0509\u04c6\u0003",
    "\u0002\u0002\u0002\u0509\u04c7\u0003\u0002\u0002\u0002\u0509\u04dc\u0003",
    "\u0002\u0002\u0002\u0509\u04e8\u0003\u0002\u0002\u0002\u0509\u04e9\u0003",
    "\u0002\u0002\u0002\u0509\u04ea\u0003\u0002\u0002\u0002\u0509\u04eb\u0003",
    "\u0002\u0002\u0002\u0509\u04ef\u0003\u0002\u0002\u0002\u0509\u04f1\u0003",
    "\u0002\u0002\u0002\u0509\u04fd\u0003\u0002\u0002\u0002\u050aE\u0003",
    "\u0002\u0002\u0002\u050b\u050c\u0005D#\u0002\u050c\u050d\u0007\u0002",
    "\u0002\u0003\u050dG\u0003\u0002\u0002\u0002\u050e\u050f\u0007\u001d",
    "\u0002\u0002\u050f\u0510\u0007\u0004\u0002\u0002\u0510\u051b\u0005\u0002",
    "\u0002\u0002\u0511\u0512\u0007\u0006\u0002\u0002\u0512\u0519\u0007y",
    "\u0002\u0002\u0513\u0514\u0007\u0006\u0002\u0002\u0514\u0517\u0005\u0012",
    "\n\u0002\u0515\u0516\u0007\u0006\u0002\u0002\u0516\u0518\t\u000b\u0002",
    "\u0002\u0517\u0515\u0003\u0002\u0002\u0002\u0517\u0518\u0003\u0002\u0002",
    "\u0002\u0518\u051a\u0003\u0002\u0002\u0002\u0519\u0513\u0003\u0002\u0002",
    "\u0002\u0519\u051a\u0003\u0002\u0002\u0002\u051a\u051c\u0003\u0002\u0002",
    "\u0002\u051b\u0511\u0003\u0002\u0002\u0002\u051b\u051c\u0003\u0002\u0002",
    "\u0002\u051c\u051d\u0003\u0002\u0002\u0002\u051d\u051e\u0007\u0005\u0002",
    "\u0002\u051eI\u0003\u0002\u0002\u0002\u051f\u0520\t\f\u0002\u0002\u0520",
    "\u0521\u0007\u0004\u0002\u0002\u0521\u0522\u0005,\u0017\u0002\u0522",
    "\u0523\u0007\u0006\u0002\u0002\u0523\u0524\u0005\f\u0007\u0002\u0524",
    "\u0525\u0007\u0006\u0002\u0002\u0525\u0526\u0005\f\u0007\u0002\u0526",
    "\u0527\u0007\u0006\u0002\u0002\u0527\u052d\u0007y\u0002\u0002\u0528",
    "\u052b\u0007\u0006\u0002\u0002\u0529\u052c\u0005\u0002\u0002\u0002\u052a",
    "\u052c\u0005\u000e\b\u0002\u052b\u0529\u0003\u0002\u0002\u0002\u052b",
    "\u052a\u0003\u0002\u0002\u0002\u052c\u052e\u0003\u0002\u0002\u0002\u052d",
    "\u0528\u0003\u0002\u0002\u0002\u052d\u052e\u0003\u0002\u0002\u0002\u052e",
    "\u052f\u0003\u0002\u0002\u0002\u052f\u0532\u0007\u0005\u0002\u0002\u0530",
    "\u0531\u0007B\u0002\u0002\u0531\u0533\u0007C\u0002\u0002\u0532\u0530",
    "\u0003\u0002\u0002\u0002\u0532\u0533\u0003\u0002\u0002\u0002\u0533K",
    "\u0003\u0002\u0002\u0002\u0534\u0538\u0007D\u0002\u0002\u0535\u0536",
    "\u0006\'$\u0003\u0536\u0538\u0007E\u0002\u0002\u0537\u0534\u0003\u0002",
    "\u0002\u0002\u0537\u0535\u0003\u0002\u0002\u0002\u0538\u0549\u0003\u0002",
    "\u0002\u0002\u0539\u0543\u0007\u0004\u0002\u0002\u053a\u0541\u0005\b",
    "\u0005\u0002\u053b\u053c\u0007\u0006\u0002\u0002\u053c\u053f\t\r\u0002",
    "\u0002\u053d\u053e\u0007\u0006\u0002\u0002\u053e\u0540\u0005\u0002\u0002",
    "\u0002\u053f\u053d\u0003\u0002\u0002\u0002\u053f\u0540\u0003\u0002\u0002",
    "\u0002\u0540\u0542\u0003\u0002\u0002\u0002\u0541\u053b\u0003\u0002\u0002",
    "\u0002\u0541\u0542\u0003\u0002\u0002\u0002\u0542\u0544\u0003\u0002\u0002",
    "\u0002\u0543\u053a\u0003\u0002\u0002\u0002\u0543\u0544\u0003\u0002\u0002",
    "\u0002\u0544\u0546\u0003\u0002\u0002\u0002\u0545\u0547\u0007m\u0002",
    "\u0002\u0546\u0545\u0003\u0002\u0002\u0002\u0546\u0547\u0003\u0002\u0002",
    "\u0002\u0547\u0548\u0003\u0002\u0002\u0002\u0548\u054a\u0007\u0005\u0002",
    "\u0002\u0549\u0539\u0003\u0002\u0002\u0002\u0549\u054a\u0003\u0002\u0002",
    "\u0002\u054aM\u0003\u0002\u0002\u0002\u054b\u0562\u0005\u0002\u0002",
    "\u0002\u054c\u054e\u0007\t\u0002\u0002\u054d\u054f\t\u000e\u0002\u0002",
    "\u054e\u054d\u0003\u0002\u0002\u0002\u054e\u054f\u0003\u0002\u0002\u0002",
    "\u054f\u0551\u0003\u0002\u0002\u0002\u0550\u0552\u0007y\u0002\u0002",
    "\u0551\u0550\u0003\u0002\u0002\u0002\u0551\u0552\u0003\u0002\u0002\u0002",
    "\u0552\u0555\u0003\u0002\u0002\u0002\u0553\u0554\u00079\u0002\u0002",
    "\u0554\u0556\u0005\u0012\n\u0002\u0555\u0553\u0003\u0002\u0002\u0002",
    "\u0555\u0556\u0003\u0002\u0002\u0002\u0556\u0559\u0003\u0002\u0002\u0002",
    "\u0557\u0558\u0007\\\u0002\u0002\u0558\u055a\u0005 \u0011\u0002\u0559",
    "\u0557\u0003\u0002\u0002\u0002\u0559\u055a\u0003\u0002\u0002\u0002\u055a",
    "\u055b\u0003\u0002\u0002\u0002\u055b\u055e\u0007\n\u0002\u0002\u055c",
    "\u055d\u0007B\u0002\u0002\u055d\u055f\u0007C\u0002\u0002\u055e\u055c",
    "\u0003\u0002\u0002\u0002\u055e\u055f\u0003\u0002\u0002\u0002\u055f\u0563",
    "\u0003\u0002\u0002\u0002\u0560\u0561\u0007B\u0002\u0002\u0561\u0563",
    "\u0007C\u0002\u0002\u0562\u054c\u0003\u0002\u0002\u0002\u0562\u0560",
    "\u0003\u0002\u0002\u0002\u0562\u0563\u0003\u0002\u0002\u0002\u0563O",
    "\u0003\u0002\u0002\u0002\u0564\u056f\u0007{\u0002\u0002\u0565\u056f",
    "\u0007|\u0002\u0002\u0566\u056f\u0007\u0082\u0002\u0002\u0567\u056f",
    "\u0007y\u0002\u0002\u0568\u056f\u0005\b\u0005\u0002\u0569\u056f\u0007",
    "t\u0002\u0002\u056a\u056f\u0007F\u0002\u0002\u056b\u056f\u0007u\u0002",
    "\u0002\u056c\u056f\u0007v\u0002\u0002\u056d\u056f\u0007:\u0002\u0002",
    "\u056e\u0564\u0003\u0002\u0002\u0002\u056e\u0565\u0003\u0002\u0002\u0002",
    "\u056e\u0566\u0003\u0002\u0002\u0002\u056e\u0567\u0003\u0002\u0002\u0002",
    "\u056e\u0568\u0003\u0002\u0002\u0002\u056e\u0569\u0003\u0002\u0002\u0002",
    "\u056e\u056a\u0003\u0002\u0002\u0002\u056e\u056b\u0003\u0002\u0002\u0002",
    "\u056e\u056c\u0003\u0002\u0002\u0002\u056e\u056d\u0003\u0002\u0002\u0002",
    "\u056fQ\u0003\u0002\u0002\u0002\u0570\u0571\u0007_\u0002\u0002\u0571",
    "\u0572\u0007\u0004\u0002\u0002\u0572\u0573\u0005\u0002\u0002\u0002\u0573",
    "\u0574\u0007<\u0002\u0002\u0574\u057c\u0005\u0002\u0002\u0002\u0575",
    "\u0576\u0007\u0006\u0002\u0002\u0576\u0577\u0005\u0002\u0002\u0002\u0577",
    "\u0578\u0007<\u0002\u0002\u0578\u0579\u0005\u0002\u0002\u0002\u0579",
    "\u057b\u0003\u0002\u0002\u0002\u057a\u0575\u0003\u0002\u0002\u0002\u057b",
    "\u057e\u0003\u0002\u0002\u0002\u057c\u057a\u0003\u0002\u0002\u0002\u057c",
    "\u057d\u0003\u0002\u0002\u0002\u057d\u057f\u0003\u0002\u0002\u0002\u057e",
    "\u057c\u0003\u0002\u0002\u0002\u057f\u0580\u0007\u0005\u0002\u0002\u0580",
    "S\u0003\u0002\u0002\u0002\u0581\u0587\u0005\u0002\u0002\u0002\u0582",
    "\u0583\u0006+%\u0003\u0583\u0584\u0007\u0004\u0002\u0002\u0584\u0585",
    "\u0005Z.\u0002\u0585\u0586\u0007\u0005\u0002\u0002\u0586\u0588\u0003",
    "\u0002\u0002\u0002\u0587\u0582\u0003\u0002\u0002\u0002\u0587\u0588\u0003",
    "\u0002\u0002\u0002\u0588\u0589\u0003\u0002\u0002\u0002\u0589\u058a\u0005",
    "P)\u0002\u058a\u058d\u0005P)\u0002\u058b\u058c\u0007<\u0002\u0002\u058c",
    "\u058e\u0005\u0002\u0002\u0002\u058d\u058b\u0003\u0002\u0002\u0002\u058d",
    "\u058e\u0003\u0002\u0002\u0002\u058e\u0590\u0003\u0002\u0002\u0002\u058f",
    "\u0591\u0005R*\u0002\u0590\u058f\u0003\u0002\u0002\u0002\u0590\u0591",
    "\u0003\u0002\u0002\u0002\u0591U\u0003\u0002\u0002\u0002\u0592\u05a3",
    "\u0005T+\u0002\u0593\u0599\u0005\u0002\u0002\u0002\u0594\u0595\u0006",
    ",&\u0003\u0595\u0596\u0007\u0004\u0002\u0002\u0596\u0597\u0005Z.\u0002",
    "\u0597\u0598\u0007\u0005\u0002\u0002\u0598\u059a\u0003\u0002\u0002\u0002",
    "\u0599\u0594\u0003\u0002\u0002\u0002\u0599\u059a\u0003\u0002\u0002\u0002",
    "\u059a\u059d\u0003\u0002\u0002\u0002\u059b\u059c\u0007<\u0002\u0002",
    "\u059c\u059e\u0005\u0002\u0002\u0002\u059d\u059b\u0003\u0002\u0002\u0002",
    "\u059d\u059e\u0003\u0002\u0002\u0002\u059e\u05a0\u0003\u0002\u0002\u0002",
    "\u059f\u05a1\u0005R*\u0002\u05a0\u059f\u0003\u0002\u0002\u0002\u05a0",
    "\u05a1\u0003\u0002\u0002\u0002\u05a1\u05a3\u0003\u0002\u0002\u0002\u05a2",
    "\u0592\u0003\u0002\u0002\u0002\u05a2\u0593\u0003\u0002\u0002\u0002\u05a3",
    "W\u0003\u0002\u0002\u0002\u05a4\u05a9\u0005T+\u0002\u05a5\u05a6\u0007",
    "\u0006\u0002\u0002\u05a6\u05a8\u0005V,\u0002\u05a7\u05a5\u0003\u0002",
    "\u0002\u0002\u05a8\u05ab\u0003\u0002\u0002\u0002\u05a9\u05a7\u0003\u0002",
    "\u0002\u0002\u05a9\u05aa\u0003\u0002\u0002\u0002\u05aaY\u0003\u0002",
    "\u0002\u0002\u05ab\u05a9\u0003\u0002\u0002\u0002\u05ac\u05ae\u0005:",
    "\u001e\u0002\u05ad\u05ac\u0003\u0002\u0002\u0002\u05ae\u05b1\u0003\u0002",
    "\u0002\u0002\u05af\u05ad\u0003\u0002\u0002\u0002\u05af\u05b0\u0003\u0002",
    "\u0002\u0002\u05b0[\u0003\u0002\u0002\u0002\u05b1\u05af\u0003\u0002",
    "\u0002\u0002\u05b2\u05b7\u0005B\"\u0002\u05b3\u05b4\u0007\u0006\u0002",
    "\u0002\u05b4\u05b6\u0005B\"\u0002\u05b5\u05b3\u0003\u0002\u0002\u0002",
    "\u05b6\u05b9\u0003\u0002\u0002\u0002\u05b7\u05b5\u0003\u0002\u0002\u0002",
    "\u05b7\u05b8\u0003\u0002\u0002\u0002\u05b8\u05bb\u0003\u0002\u0002\u0002",
    "\u05b9\u05b7\u0003\u0002\u0002\u0002\u05ba\u05b2\u0003\u0002\u0002\u0002",
    "\u05ba\u05bb\u0003\u0002\u0002\u0002\u05bb]\u0003\u0002\u0002\u0002",
    "\u05bc\u05c5\u0005\u0012\n\u0002\u05bd\u05be\u0007j\u0002\u0002\u05be",
    "\u05bf\u0007\u0004\u0002\u0002\u05bf\u05c0\u0007\u0082\u0002\u0002\u05c0",
    "\u05c1\u0007\u0006\u0002\u0002\u05c1\u05c2\u0005\u0012\n\u0002\u05c2",
    "\u05c3\u0007\u0005\u0002\u0002\u05c3\u05c5\u0003\u0002\u0002\u0002\u05c4",
    "\u05bc\u0003\u0002\u0002\u0002\u05c4\u05bd\u0003\u0002\u0002\u0002\u05c5",
    "_\u0003\u0002\u0002\u0002\u05c6\u05cb\u0005^0\u0002\u05c7\u05c8\u0007",
    "\u0006\u0002\u0002\u05c8\u05ca\u0005^0\u0002\u05c9\u05c7\u0003\u0002",
    "\u0002\u0002\u05ca\u05cd\u0003\u0002\u0002\u0002\u05cb\u05c9\u0003\u0002",
    "\u0002\u0002\u05cb\u05cc\u0003\u0002\u0002\u0002\u05cc\u05cf\u0003\u0002",
    "\u0002\u0002\u05cd\u05cb\u0003\u0002\u0002\u0002\u05ce\u05c6\u0003\u0002",
    "\u0002\u0002\u05ce\u05cf\u0003\u0002\u0002\u0002\u05cf\u05d2\u0003\u0002",
    "\u0002\u0002\u05d0\u05d1\u0007k\u0002\u0002\u05d1\u05d3\u0007y\u0002",
    "\u0002\u05d2\u05d0\u0003\u0002\u0002\u0002\u05d2\u05d3\u0003\u0002\u0002",
    "\u0002\u05d3a\u0003\u0002\u0002\u0002\u05d4\u05d5\u00076\u0002\u0002",
    "\u05d5\u05d7\u0005`1\u0002\u05d6\u05d4\u0003\u0002\u0002\u0002\u05d6",
    "\u05d7\u0003\u0002\u0002\u0002\u05d7\u05d8\u0003\u0002\u0002\u0002\u05d8",
    "\u05d9\u00077\u0002\u0002\u05d9\u05dc\u0005X-\u0002\u05da\u05db\u0007",
    "3\u0002\u0002\u05db\u05dd\u0005Z.\u0002\u05dc\u05da\u0003\u0002\u0002",
    "\u0002\u05dc\u05dd\u0003\u0002\u0002\u0002\u05dd\u05e1\u0003\u0002\u0002",
    "\u0002\u05de\u05df\u00078\u0002\u0002\u05df\u05e0\u00079\u0002\u0002",
    "\u05e0\u05e2\u0005\\/\u0002\u05e1\u05de\u0003\u0002\u0002\u0002\u05e1",
    "\u05e2\u0003\u0002\u0002\u0002\u05e2\u05e5\u0003\u0002\u0002\u0002\u05e3",
    "\u05e4\u00076\u0002\u0002\u05e4\u05e6\u0005`1\u0002\u05e5\u05e3\u0003",
    "\u0002\u0002\u0002\u05e5\u05e6\u0003\u0002\u0002\u0002\u05e6\u05f4\u0003",
    "\u0002\u0002\u0002\u05e7\u05e8\u0007p\u0002\u0002\u05e8\u05f1\u0007",
    "\t\u0002\u0002\u05e9\u05ee\u0007\u0082\u0002\u0002\u05ea\u05eb\u0007",
    "\u0006\u0002\u0002\u05eb\u05ed\u0007\u0082\u0002\u0002\u05ec\u05ea\u0003",
    "\u0002\u0002\u0002\u05ed\u05f0\u0003\u0002\u0002\u0002\u05ee\u05ec\u0003",
    "\u0002\u0002\u0002\u05ee\u05ef\u0003\u0002\u0002\u0002\u05ef\u05f2\u0003",
    "\u0002\u0002\u0002\u05f0\u05ee\u0003\u0002\u0002\u0002\u05f1\u05e9\u0003",
    "\u0002\u0002\u0002\u05f1\u05f2\u0003\u0002\u0002\u0002\u05f2\u05f3\u0003",
    "\u0002\u0002\u0002\u05f3\u05f5\u0007\n\u0002\u0002\u05f4\u05e7\u0003",
    "\u0002\u0002\u0002\u05f4\u05f5\u0003\u0002\u0002\u0002\u05f5\u05f8\u0003",
    "\u0002\u0002\u0002\u05f6\u05f7\u0007[\u0002\u0002\u05f7\u05f9\u0007",
    "y\u0002\u0002\u05f8\u05f6\u0003\u0002\u0002\u0002\u05f8\u05f9\u0003",
    "\u0002\u0002\u0002\u05f9\u0607\u0003\u0002\u0002\u0002\u05fa\u05fb\u0007",
    "p\u0002\u0002\u05fb\u0604\u0007\t\u0002\u0002\u05fc\u0601\u0007\u0082",
    "\u0002\u0002\u05fd\u05fe\u0007\u0006\u0002\u0002\u05fe\u0600\u0007\u0082",
    "\u0002\u0002\u05ff\u05fd\u0003\u0002\u0002\u0002\u0600\u0603\u0003\u0002",
    "\u0002\u0002\u0601\u05ff\u0003\u0002\u0002\u0002\u0601\u0602\u0003\u0002",
    "\u0002\u0002\u0602\u0605\u0003\u0002\u0002\u0002\u0603\u0601\u0003\u0002",
    "\u0002\u0002\u0604\u05fc\u0003\u0002\u0002\u0002\u0604\u0605\u0003\u0002",
    "\u0002\u0002\u0605\u0606\u0003\u0002\u0002\u0002\u0606\u0608\u0007\n",
    "\u0002\u0002\u0607\u05fa\u0003\u0002\u0002\u0002\u0607\u0608\u0003\u0002",
    "\u0002\u0002\u0608\u0609\u0003\u0002\u0002\u0002\u0609\u060a\u0007\u0002",
    "\u0002\u0003\u060ac\u0003\u0002\u0002\u0002\u060b\u060e\u00077\u0002",
    "\u0002\u060c\u060f\u0007e\u0002\u0002\u060d\u060f\u0005X-\u0002\u060e",
    "\u060c\u0003\u0002\u0002\u0002\u060e\u060d\u0003\u0002\u0002\u0002\u060f",
    "\u0612\u0003\u0002\u0002\u0002\u0610\u0611\u00073\u0002\u0002\u0611",
    "\u0613\u0005Z.\u0002\u0612\u0610\u0003\u0002\u0002\u0002\u0612\u0613",
    "\u0003\u0002\u0002\u0002\u0613\u0614\u0003\u0002\u0002\u0002\u0614\u0615",
    "\u00078\u0002\u0002\u0615\u0616\u00079\u0002\u0002\u0616\u0617\u0005",
    "\\/\u0002\u0617e\u0003\u0002\u0002\u0002\u0096lrtwz\u0080\u0085\u0089",
    "\u00a1\u00a8\u00af\u00d8\u00e3\u00e9\u0139\u015b\u015f\u0168\u016c\u0177",
    "\u0183\u0194\u01a4\u01b9\u01c2\u01c8\u01ce\u01d0\u01de\u01e5\u01ec\u01f6",
    "\u01fc\u0221\u0229\u022b\u0267\u0269\u0272\u02b5\u02c0\u02cf\u02d1\u02dc",
    "\u02ea\u02f0\u030a\u0313\u032b\u0331\u0337\u0341\u0344\u0346\u0365\u036e",
    "\u0379\u0385\u0398\u039e\u03a4\u03ae\u03b1\u03b3\u03ba\u03bf\u03c3\u03c9",
    "\u03de\u03ea\u03ef\u03f5\u0414\u0416\u0425\u042d\u042f\u044f\u0454\u045a",
    "\u0461\u0482\u0484\u0491\u0493\u04a2\u04aa\u04ac\u04b3\u04b8\u04bd\u04c9",
    "\u04ce\u04d4\u04da\u04de\u04e6\u04f9\u0505\u0509\u0517\u0519\u051b\u052b",
    "\u052d\u0532\u0537\u053f\u0541\u0543\u0546\u0549\u054e\u0551\u0555\u0559",
    "\u055e\u0562\u056e\u057c\u0587\u058d\u0590\u0599\u059d\u05a0\u05a2\u05a9",
    "\u05af\u05b7\u05ba\u05c4\u05cb\u05ce\u05d2\u05d6\u05dc\u05e1\u05e5\u05ee",
    "\u05f1\u05f4\u05f8\u0601\u0604\u0607\u060e\u0612"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ 'null', "'-'", "'('", "')'", "','", "'/'", "'.'", "'['", 
                     "']'", "'^'", "'*'", "'%'", "'+'", "'=~'", "'!=~'", 
                     "'TERM()'", "'='", "'!='", "'<'", "'<='", "'>'", "'>='", 
                     "'!'", "'&&'", "'||'", "'\\'", "':'", "'TOPTERMS'", 
                     "'LAG'", "'RUNNING'", "'PARENT'", "'DISTINCT'", "'DISTINCT_WINDOW'", 
                     "'WINDOW'", "'PERCENTILE'", "'MEDIAN'", "'PDIFF'", 
                     "'DIFF'", "'RATIODIFF'", "'SINGLESCORE'", "'RATIOSCORE'", 
                     "'RMSERROR'", "'AVG'", "'VARIANCE'", "'STDEV'", "'LOG'", 
                     "'ABS'", "'SUM_OVER'", "'AVG_OVER'", "'WHERE'", "'HASSTR'", 
                     "'HASINT'", "'SELECT'", "'FROM'", "'GROUP'", "'BY'", 
                     "'AGO'", "'COUNT'", "'AS'", "'NOT'", "'LUCENE'", "'QUERY'", 
                     "'TOP'", "'BOTTOM'", "'WITH'", "'DEFAULT'", "'TIME'", 
                     "'TIMEBUCKETS'", "'TO'", "'BUCKETS'", "'BUCKET'", "'IN'", 
                     "'DESCENDING'", "'DESC'", "'ASCENDING'", "'ASC'", "'DAYOFWEEK'", 
                     "'QUANTILES'", "'BETWEEN'", "'SAMPLE'", "'AND'", "'OR'", 
                     "'TRUE'", "'FALSE'", "'IF'", "'THEN'", "'ELSE'", "'FLOATSCALE'", 
                     "'SIGNUM'", "'LIMIT'", "'HAVING'", "'FIELD_MIN'", "'FIELD_MAX'", 
                     "'ALIASING'", "'HASSTRFIELD'", "'HASINTFIELD'", "'LEN'", 
                     "'INTTERMCOUNT'", "'STRTERMCOUNT'", "'SAME'", "'EXP'", 
                     "'WINDOW_SUM'", "'MIN'", "'MAX'", "'PRINTF'", "'ROUNDING'", 
                     "'EXTRACT'", "'RELATIVE'", "'DATASET'", "'RANDOM'", 
                     "'OPTIONS'", "'DOCID'", "'M'", "'Y'" ];

var symbolicNames = [ 'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                      'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                      'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                      'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                      "LAG", "RUNNING", "PARENT", "DISTINCT", "DISTINCT_WINDOW", 
                      "WINDOW", "PERCENTILE", "MEDIAN", "PDIFF", "DIFF", 
                      "RATIODIFF", "SINGLESCORE", "RATIOSCORE", "RMSERROR", 
                      "AVG", "VARIANCE", "STDEV", "LOG", "ABS", "SUM_OVER", 
                      "AVG_OVER", "WHERE", "HASSTR", "HASINT", "SELECT", 
                      "FROM", "GROUP", "BY", "AGO", "COUNT", "AS", "NOT", 
                      "LUCENE", "QUERY", "TOP", "BOTTOM", "WITH", "DEFAULT", 
                      "TIME", "TIMEBUCKETS", "TO", "BUCKETS", "BUCKET", 
                      "IN", "DESCENDING", "DESC", "ASCENDING", "ASC", "DAYOFWEEK", 
                      "QUANTILES", "BETWEEN", "SAMPLE", "AND", "OR", "TRUE", 
                      "FALSE", "IF", "THEN", "ELSE", "FLOATSCALE", "SIGNUM", 
                      "LIMIT", "HAVING", "FIELD_MIN", "FIELD_MAX", "ALIASING", 
                      "HASSTRFIELD", "HASINTFIELD", "LEN", "INTTERMCOUNT", 
                      "STRTERMCOUNT", "SAME", "EXP", "WINDOW_SUM", "MIN", 
                      "MAX", "PRINTF", "ROUNDING", "EXTRACT", "RELATIVE", 
                      "DATASET", "RANDOM", "OPTIONS", "DOCID", "M", "Y", 
                      "TODAYS", "TOMORROWS", "YESTERDAYS", "TIME_UNIT", 
                      "TIME_PERIOD_ATOM", "NAT", "DOUBLE", "DATETIME_TOKEN", 
                      "DATE_TOKEN", "ID", "BACKQUOTED_ID", "WS", "COMMENT", 
                      "LINE_COMMENT", "STRING_LITERAL" ];

var ruleNames =  [ "identifier", "identifierTerminal", "timeUnit", "timePeriod", 
                   "timePeriodTerminal", "integer", "number", "legacyAggregateMetric", 
                   "aggregateMetric", "aggregateMetricEof", "jqlAggregateMetric", 
                   "scopedField", "singlyScopedField", "singlyScopedFieldTerminal", 
                   "syntacticallyAtomicJqlAggregateMetric", "aggregateFilter", 
                   "aggregateFilterEof", "jqlAggregateFilter", "jqlSyntacticallyAtomicDocMetricAtom", 
                   "legacyDocMetricAtom", "jqlDocMetricAtom", "docMetric", 
                   "docMetricEof", "legacyDocMetric", "jqlDocMetric", "termVal", 
                   "legacyTermVal", "jqlTermVal", "docFilter", "docFilterEof", 
                   "legacyDocFilter", "jqlDocFilter", "groupByEntry", "groupByElement", 
                   "groupByElementEof", "topTermsGroupByElem", "groupByMetric", 
                   "groupByTime", "groupByField", "dateTime", "aliases", 
                   "dataset", "datasetOptTime", "fromContents", "whereContents", 
                   "groupByContents", "formattedAggregateMetric", "selectContents", 
                   "query", "queryNoSelect" ];

function JQLParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

JQLParser.prototype = Object.create(antlr4.Parser.prototype);
JQLParser.prototype.constructor = JQLParser;

Object.defineProperty(JQLParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

JQLParser.EOF = antlr4.Token.EOF;
JQLParser.T__0 = 1;
JQLParser.T__1 = 2;
JQLParser.T__2 = 3;
JQLParser.T__3 = 4;
JQLParser.T__4 = 5;
JQLParser.T__5 = 6;
JQLParser.T__6 = 7;
JQLParser.T__7 = 8;
JQLParser.T__8 = 9;
JQLParser.T__9 = 10;
JQLParser.T__10 = 11;
JQLParser.T__11 = 12;
JQLParser.T__12 = 13;
JQLParser.T__13 = 14;
JQLParser.T__14 = 15;
JQLParser.T__15 = 16;
JQLParser.T__16 = 17;
JQLParser.T__17 = 18;
JQLParser.T__18 = 19;
JQLParser.T__19 = 20;
JQLParser.T__20 = 21;
JQLParser.T__21 = 22;
JQLParser.T__22 = 23;
JQLParser.T__23 = 24;
JQLParser.T__24 = 25;
JQLParser.T__25 = 26;
JQLParser.T__26 = 27;
JQLParser.LAG = 28;
JQLParser.RUNNING = 29;
JQLParser.PARENT = 30;
JQLParser.DISTINCT = 31;
JQLParser.DISTINCT_WINDOW = 32;
JQLParser.WINDOW = 33;
JQLParser.PERCENTILE = 34;
JQLParser.MEDIAN = 35;
JQLParser.PDIFF = 36;
JQLParser.DIFF = 37;
JQLParser.RATIODIFF = 38;
JQLParser.SINGLESCORE = 39;
JQLParser.RATIOSCORE = 40;
JQLParser.RMSERROR = 41;
JQLParser.AVG = 42;
JQLParser.VARIANCE = 43;
JQLParser.STDEV = 44;
JQLParser.LOG = 45;
JQLParser.ABS = 46;
JQLParser.SUM_OVER = 47;
JQLParser.AVG_OVER = 48;
JQLParser.WHERE = 49;
JQLParser.HASSTR = 50;
JQLParser.HASINT = 51;
JQLParser.SELECT = 52;
JQLParser.FROM = 53;
JQLParser.GROUP = 54;
JQLParser.BY = 55;
JQLParser.AGO = 56;
JQLParser.COUNT = 57;
JQLParser.AS = 58;
JQLParser.NOT = 59;
JQLParser.LUCENE = 60;
JQLParser.QUERY = 61;
JQLParser.TOP = 62;
JQLParser.BOTTOM = 63;
JQLParser.WITH = 64;
JQLParser.DEFAULT = 65;
JQLParser.TIME = 66;
JQLParser.TIMEBUCKETS = 67;
JQLParser.TO = 68;
JQLParser.BUCKETS = 69;
JQLParser.BUCKET = 70;
JQLParser.IN = 71;
JQLParser.DESCENDING = 72;
JQLParser.DESC = 73;
JQLParser.ASCENDING = 74;
JQLParser.ASC = 75;
JQLParser.DAYOFWEEK = 76;
JQLParser.QUANTILES = 77;
JQLParser.BETWEEN = 78;
JQLParser.SAMPLE = 79;
JQLParser.AND = 80;
JQLParser.OR = 81;
JQLParser.TRUE = 82;
JQLParser.FALSE = 83;
JQLParser.IF = 84;
JQLParser.THEN = 85;
JQLParser.ELSE = 86;
JQLParser.FLOATSCALE = 87;
JQLParser.SIGNUM = 88;
JQLParser.LIMIT = 89;
JQLParser.HAVING = 90;
JQLParser.FIELD_MIN = 91;
JQLParser.FIELD_MAX = 92;
JQLParser.ALIASING = 93;
JQLParser.HASSTRFIELD = 94;
JQLParser.HASINTFIELD = 95;
JQLParser.LEN = 96;
JQLParser.INTTERMCOUNT = 97;
JQLParser.STRTERMCOUNT = 98;
JQLParser.SAME = 99;
JQLParser.EXP = 100;
JQLParser.WINDOW_SUM = 101;
JQLParser.MIN = 102;
JQLParser.MAX = 103;
JQLParser.PRINTF = 104;
JQLParser.ROUNDING = 105;
JQLParser.EXTRACT = 106;
JQLParser.RELATIVE = 107;
JQLParser.DATASET = 108;
JQLParser.RANDOM = 109;
JQLParser.OPTIONS = 110;
JQLParser.DOCID = 111;
JQLParser.M = 112;
JQLParser.Y = 113;
JQLParser.TODAYS = 114;
JQLParser.TOMORROWS = 115;
JQLParser.YESTERDAYS = 116;
JQLParser.TIME_UNIT = 117;
JQLParser.TIME_PERIOD_ATOM = 118;
JQLParser.NAT = 119;
JQLParser.DOUBLE = 120;
JQLParser.DATETIME_TOKEN = 121;
JQLParser.DATE_TOKEN = 122;
JQLParser.ID = 123;
JQLParser.BACKQUOTED_ID = 124;
JQLParser.WS = 125;
JQLParser.COMMENT = 126;
JQLParser.LINE_COMMENT = 127;
JQLParser.STRING_LITERAL = 128;

JQLParser.RULE_identifier = 0;
JQLParser.RULE_identifierTerminal = 1;
JQLParser.RULE_timeUnit = 2;
JQLParser.RULE_timePeriod = 3;
JQLParser.RULE_timePeriodTerminal = 4;
JQLParser.RULE_integer = 5;
JQLParser.RULE_number = 6;
JQLParser.RULE_legacyAggregateMetric = 7;
JQLParser.RULE_aggregateMetric = 8;
JQLParser.RULE_aggregateMetricEof = 9;
JQLParser.RULE_jqlAggregateMetric = 10;
JQLParser.RULE_scopedField = 11;
JQLParser.RULE_singlyScopedField = 12;
JQLParser.RULE_singlyScopedFieldTerminal = 13;
JQLParser.RULE_syntacticallyAtomicJqlAggregateMetric = 14;
JQLParser.RULE_aggregateFilter = 15;
JQLParser.RULE_aggregateFilterEof = 16;
JQLParser.RULE_jqlAggregateFilter = 17;
JQLParser.RULE_jqlSyntacticallyAtomicDocMetricAtom = 18;
JQLParser.RULE_legacyDocMetricAtom = 19;
JQLParser.RULE_jqlDocMetricAtom = 20;
JQLParser.RULE_docMetric = 21;
JQLParser.RULE_docMetricEof = 22;
JQLParser.RULE_legacyDocMetric = 23;
JQLParser.RULE_jqlDocMetric = 24;
JQLParser.RULE_termVal = 25;
JQLParser.RULE_legacyTermVal = 26;
JQLParser.RULE_jqlTermVal = 27;
JQLParser.RULE_docFilter = 28;
JQLParser.RULE_docFilterEof = 29;
JQLParser.RULE_legacyDocFilter = 30;
JQLParser.RULE_jqlDocFilter = 31;
JQLParser.RULE_groupByEntry = 32;
JQLParser.RULE_groupByElement = 33;
JQLParser.RULE_groupByElementEof = 34;
JQLParser.RULE_topTermsGroupByElem = 35;
JQLParser.RULE_groupByMetric = 36;
JQLParser.RULE_groupByTime = 37;
JQLParser.RULE_groupByField = 38;
JQLParser.RULE_dateTime = 39;
JQLParser.RULE_aliases = 40;
JQLParser.RULE_dataset = 41;
JQLParser.RULE_datasetOptTime = 42;
JQLParser.RULE_fromContents = 43;
JQLParser.RULE_whereContents = 44;
JQLParser.RULE_groupByContents = 45;
JQLParser.RULE_formattedAggregateMetric = 46;
JQLParser.RULE_selectContents = 47;
JQLParser.RULE_query = 48;
JQLParser.RULE_queryNoSelect = 49;

function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

IdentifierContext.prototype.ID = function() {
    return this.getToken(JQLParser.ID, 0);
};

IdentifierContext.prototype.LAG = function() {
    return this.getToken(JQLParser.LAG, 0);
};

IdentifierContext.prototype.RUNNING = function() {
    return this.getToken(JQLParser.RUNNING, 0);
};

IdentifierContext.prototype.PARENT = function() {
    return this.getToken(JQLParser.PARENT, 0);
};

IdentifierContext.prototype.DISTINCT = function() {
    return this.getToken(JQLParser.DISTINCT, 0);
};

IdentifierContext.prototype.DISTINCT_WINDOW = function() {
    return this.getToken(JQLParser.DISTINCT_WINDOW, 0);
};

IdentifierContext.prototype.WINDOW = function() {
    return this.getToken(JQLParser.WINDOW, 0);
};

IdentifierContext.prototype.PERCENTILE = function() {
    return this.getToken(JQLParser.PERCENTILE, 0);
};

IdentifierContext.prototype.MEDIAN = function() {
    return this.getToken(JQLParser.MEDIAN, 0);
};

IdentifierContext.prototype.PDIFF = function() {
    return this.getToken(JQLParser.PDIFF, 0);
};

IdentifierContext.prototype.DIFF = function() {
    return this.getToken(JQLParser.DIFF, 0);
};

IdentifierContext.prototype.RATIODIFF = function() {
    return this.getToken(JQLParser.RATIODIFF, 0);
};

IdentifierContext.prototype.SINGLESCORE = function() {
    return this.getToken(JQLParser.SINGLESCORE, 0);
};

IdentifierContext.prototype.RATIOSCORE = function() {
    return this.getToken(JQLParser.RATIOSCORE, 0);
};

IdentifierContext.prototype.AVG = function() {
    return this.getToken(JQLParser.AVG, 0);
};

IdentifierContext.prototype.VARIANCE = function() {
    return this.getToken(JQLParser.VARIANCE, 0);
};

IdentifierContext.prototype.STDEV = function() {
    return this.getToken(JQLParser.STDEV, 0);
};

IdentifierContext.prototype.LOG = function() {
    return this.getToken(JQLParser.LOG, 0);
};

IdentifierContext.prototype.ABS = function() {
    return this.getToken(JQLParser.ABS, 0);
};

IdentifierContext.prototype.SUM_OVER = function() {
    return this.getToken(JQLParser.SUM_OVER, 0);
};

IdentifierContext.prototype.AVG_OVER = function() {
    return this.getToken(JQLParser.AVG_OVER, 0);
};

IdentifierContext.prototype.WHERE = function() {
    return this.getToken(JQLParser.WHERE, 0);
};

IdentifierContext.prototype.HASSTR = function() {
    return this.getToken(JQLParser.HASSTR, 0);
};

IdentifierContext.prototype.HASINT = function() {
    return this.getToken(JQLParser.HASINT, 0);
};

IdentifierContext.prototype.FROM = function() {
    return this.getToken(JQLParser.FROM, 0);
};

IdentifierContext.prototype.GROUP = function() {
    return this.getToken(JQLParser.GROUP, 0);
};

IdentifierContext.prototype.BY = function() {
    return this.getToken(JQLParser.BY, 0);
};

IdentifierContext.prototype.AGO = function() {
    return this.getToken(JQLParser.AGO, 0);
};

IdentifierContext.prototype.COUNT = function() {
    return this.getToken(JQLParser.COUNT, 0);
};

IdentifierContext.prototype.AS = function() {
    return this.getToken(JQLParser.AS, 0);
};

IdentifierContext.prototype.NOT = function() {
    return this.getToken(JQLParser.NOT, 0);
};

IdentifierContext.prototype.LUCENE = function() {
    return this.getToken(JQLParser.LUCENE, 0);
};

IdentifierContext.prototype.QUERY = function() {
    return this.getToken(JQLParser.QUERY, 0);
};

IdentifierContext.prototype.TOP = function() {
    return this.getToken(JQLParser.TOP, 0);
};

IdentifierContext.prototype.BOTTOM = function() {
    return this.getToken(JQLParser.BOTTOM, 0);
};

IdentifierContext.prototype.WITH = function() {
    return this.getToken(JQLParser.WITH, 0);
};

IdentifierContext.prototype.DEFAULT = function() {
    return this.getToken(JQLParser.DEFAULT, 0);
};

IdentifierContext.prototype.TIME = function() {
    return this.getToken(JQLParser.TIME, 0);
};

IdentifierContext.prototype.TIMEBUCKETS = function() {
    return this.getToken(JQLParser.TIMEBUCKETS, 0);
};

IdentifierContext.prototype.TO = function() {
    return this.getToken(JQLParser.TO, 0);
};

IdentifierContext.prototype.BUCKETS = function() {
    return this.getToken(JQLParser.BUCKETS, 0);
};

IdentifierContext.prototype.BUCKET = function() {
    return this.getToken(JQLParser.BUCKET, 0);
};

IdentifierContext.prototype.IN = function() {
    return this.getToken(JQLParser.IN, 0);
};

IdentifierContext.prototype.DESCENDING = function() {
    return this.getToken(JQLParser.DESCENDING, 0);
};

IdentifierContext.prototype.DESC = function() {
    return this.getToken(JQLParser.DESC, 0);
};

IdentifierContext.prototype.ASCENDING = function() {
    return this.getToken(JQLParser.ASCENDING, 0);
};

IdentifierContext.prototype.ASC = function() {
    return this.getToken(JQLParser.ASC, 0);
};

IdentifierContext.prototype.DAYOFWEEK = function() {
    return this.getToken(JQLParser.DAYOFWEEK, 0);
};

IdentifierContext.prototype.QUANTILES = function() {
    return this.getToken(JQLParser.QUANTILES, 0);
};

IdentifierContext.prototype.BETWEEN = function() {
    return this.getToken(JQLParser.BETWEEN, 0);
};

IdentifierContext.prototype.SAMPLE = function() {
    return this.getToken(JQLParser.SAMPLE, 0);
};

IdentifierContext.prototype.AND = function() {
    return this.getToken(JQLParser.AND, 0);
};

IdentifierContext.prototype.OR = function() {
    return this.getToken(JQLParser.OR, 0);
};

IdentifierContext.prototype.TRUE = function() {
    return this.getToken(JQLParser.TRUE, 0);
};

IdentifierContext.prototype.FALSE = function() {
    return this.getToken(JQLParser.FALSE, 0);
};

IdentifierContext.prototype.IF = function() {
    return this.getToken(JQLParser.IF, 0);
};

IdentifierContext.prototype.THEN = function() {
    return this.getToken(JQLParser.THEN, 0);
};

IdentifierContext.prototype.ELSE = function() {
    return this.getToken(JQLParser.ELSE, 0);
};

IdentifierContext.prototype.FLOATSCALE = function() {
    return this.getToken(JQLParser.FLOATSCALE, 0);
};

IdentifierContext.prototype.SIGNUM = function() {
    return this.getToken(JQLParser.SIGNUM, 0);
};

IdentifierContext.prototype.LIMIT = function() {
    return this.getToken(JQLParser.LIMIT, 0);
};

IdentifierContext.prototype.HAVING = function() {
    return this.getToken(JQLParser.HAVING, 0);
};

IdentifierContext.prototype.FIELD_MIN = function() {
    return this.getToken(JQLParser.FIELD_MIN, 0);
};

IdentifierContext.prototype.FIELD_MAX = function() {
    return this.getToken(JQLParser.FIELD_MAX, 0);
};

IdentifierContext.prototype.ALIASING = function() {
    return this.getToken(JQLParser.ALIASING, 0);
};

IdentifierContext.prototype.HASINTFIELD = function() {
    return this.getToken(JQLParser.HASINTFIELD, 0);
};

IdentifierContext.prototype.HASSTRFIELD = function() {
    return this.getToken(JQLParser.HASSTRFIELD, 0);
};

IdentifierContext.prototype.INTTERMCOUNT = function() {
    return this.getToken(JQLParser.INTTERMCOUNT, 0);
};

IdentifierContext.prototype.STRTERMCOUNT = function() {
    return this.getToken(JQLParser.STRTERMCOUNT, 0);
};

IdentifierContext.prototype.SAME = function() {
    return this.getToken(JQLParser.SAME, 0);
};

IdentifierContext.prototype.EXP = function() {
    return this.getToken(JQLParser.EXP, 0);
};

IdentifierContext.prototype.WINDOW_SUM = function() {
    return this.getToken(JQLParser.WINDOW_SUM, 0);
};

IdentifierContext.prototype.MIN = function() {
    return this.getToken(JQLParser.MIN, 0);
};

IdentifierContext.prototype.MAX = function() {
    return this.getToken(JQLParser.MAX, 0);
};

IdentifierContext.prototype.PRINTF = function() {
    return this.getToken(JQLParser.PRINTF, 0);
};

IdentifierContext.prototype.EXTRACT = function() {
    return this.getToken(JQLParser.EXTRACT, 0);
};

IdentifierContext.prototype.RANDOM = function() {
    return this.getToken(JQLParser.RANDOM, 0);
};

IdentifierContext.prototype.OPTIONS = function() {
    return this.getToken(JQLParser.OPTIONS, 0);
};

IdentifierContext.prototype.M = function() {
    return this.getToken(JQLParser.M, 0);
};

IdentifierContext.prototype.Y = function() {
    return this.getToken(JQLParser.Y, 0);
};

IdentifierContext.prototype.TODAYS = function() {
    return this.getToken(JQLParser.TODAYS, 0);
};

IdentifierContext.prototype.TOMORROWS = function() {
    return this.getToken(JQLParser.TOMORROWS, 0);
};

IdentifierContext.prototype.YESTERDAYS = function() {
    return this.getToken(JQLParser.YESTERDAYS, 0);
};

IdentifierContext.prototype.TIME_UNIT = function() {
    return this.getToken(JQLParser.TIME_UNIT, 0);
};

IdentifierContext.prototype.TIME_PERIOD_ATOM = function() {
    return this.getToken(JQLParser.TIME_PERIOD_ATOM, 0);
};

IdentifierContext.prototype.RELATIVE = function() {
    return this.getToken(JQLParser.RELATIVE, 0);
};

IdentifierContext.prototype.DATASET = function() {
    return this.getToken(JQLParser.DATASET, 0);
};

IdentifierContext.prototype.BACKQUOTED_ID = function() {
    return this.getToken(JQLParser.BACKQUOTED_ID, 0);
};

IdentifierContext.prototype.LEN = function() {
    return this.getToken(JQLParser.LEN, 0);
};

IdentifierContext.prototype.DOCID = function() {
    return this.getToken(JQLParser.DOCID, 0);
};

IdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterIdentifier(this);
	}
};

IdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitIdentifier(this);
	}
};




JQLParser.IdentifierContext = IdentifierContext;

JQLParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, JQLParser.RULE_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 100;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JQLParser.LAG) | (1 << JQLParser.RUNNING) | (1 << JQLParser.PARENT) | (1 << JQLParser.DISTINCT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (JQLParser.DISTINCT_WINDOW - 32)) | (1 << (JQLParser.WINDOW - 32)) | (1 << (JQLParser.PERCENTILE - 32)) | (1 << (JQLParser.MEDIAN - 32)) | (1 << (JQLParser.PDIFF - 32)) | (1 << (JQLParser.DIFF - 32)) | (1 << (JQLParser.RATIODIFF - 32)) | (1 << (JQLParser.SINGLESCORE - 32)) | (1 << (JQLParser.RATIOSCORE - 32)) | (1 << (JQLParser.AVG - 32)) | (1 << (JQLParser.VARIANCE - 32)) | (1 << (JQLParser.STDEV - 32)) | (1 << (JQLParser.LOG - 32)) | (1 << (JQLParser.ABS - 32)) | (1 << (JQLParser.SUM_OVER - 32)) | (1 << (JQLParser.AVG_OVER - 32)) | (1 << (JQLParser.WHERE - 32)) | (1 << (JQLParser.HASSTR - 32)) | (1 << (JQLParser.HASINT - 32)) | (1 << (JQLParser.FROM - 32)) | (1 << (JQLParser.GROUP - 32)) | (1 << (JQLParser.BY - 32)) | (1 << (JQLParser.AGO - 32)) | (1 << (JQLParser.COUNT - 32)) | (1 << (JQLParser.AS - 32)) | (1 << (JQLParser.NOT - 32)) | (1 << (JQLParser.LUCENE - 32)) | (1 << (JQLParser.QUERY - 32)) | (1 << (JQLParser.TOP - 32)) | (1 << (JQLParser.BOTTOM - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (JQLParser.WITH - 64)) | (1 << (JQLParser.DEFAULT - 64)) | (1 << (JQLParser.TIME - 64)) | (1 << (JQLParser.TIMEBUCKETS - 64)) | (1 << (JQLParser.TO - 64)) | (1 << (JQLParser.BUCKETS - 64)) | (1 << (JQLParser.BUCKET - 64)) | (1 << (JQLParser.IN - 64)) | (1 << (JQLParser.DESCENDING - 64)) | (1 << (JQLParser.DESC - 64)) | (1 << (JQLParser.ASCENDING - 64)) | (1 << (JQLParser.ASC - 64)) | (1 << (JQLParser.DAYOFWEEK - 64)) | (1 << (JQLParser.QUANTILES - 64)) | (1 << (JQLParser.BETWEEN - 64)) | (1 << (JQLParser.SAMPLE - 64)) | (1 << (JQLParser.AND - 64)) | (1 << (JQLParser.OR - 64)) | (1 << (JQLParser.TRUE - 64)) | (1 << (JQLParser.FALSE - 64)) | (1 << (JQLParser.IF - 64)) | (1 << (JQLParser.THEN - 64)) | (1 << (JQLParser.ELSE - 64)) | (1 << (JQLParser.FLOATSCALE - 64)) | (1 << (JQLParser.SIGNUM - 64)) | (1 << (JQLParser.LIMIT - 64)) | (1 << (JQLParser.HAVING - 64)) | (1 << (JQLParser.FIELD_MIN - 64)) | (1 << (JQLParser.FIELD_MAX - 64)) | (1 << (JQLParser.ALIASING - 64)) | (1 << (JQLParser.HASSTRFIELD - 64)) | (1 << (JQLParser.HASINTFIELD - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (JQLParser.LEN - 96)) | (1 << (JQLParser.INTTERMCOUNT - 96)) | (1 << (JQLParser.STRTERMCOUNT - 96)) | (1 << (JQLParser.SAME - 96)) | (1 << (JQLParser.EXP - 96)) | (1 << (JQLParser.WINDOW_SUM - 96)) | (1 << (JQLParser.MIN - 96)) | (1 << (JQLParser.MAX - 96)) | (1 << (JQLParser.PRINTF - 96)) | (1 << (JQLParser.EXTRACT - 96)) | (1 << (JQLParser.RELATIVE - 96)) | (1 << (JQLParser.DATASET - 96)) | (1 << (JQLParser.RANDOM - 96)) | (1 << (JQLParser.OPTIONS - 96)) | (1 << (JQLParser.DOCID - 96)) | (1 << (JQLParser.M - 96)) | (1 << (JQLParser.Y - 96)) | (1 << (JQLParser.TODAYS - 96)) | (1 << (JQLParser.TOMORROWS - 96)) | (1 << (JQLParser.YESTERDAYS - 96)) | (1 << (JQLParser.TIME_UNIT - 96)) | (1 << (JQLParser.TIME_PERIOD_ATOM - 96)) | (1 << (JQLParser.ID - 96)) | (1 << (JQLParser.BACKQUOTED_ID - 96)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierTerminalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_identifierTerminal;
    return this;
}

IdentifierTerminalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierTerminalContext.prototype.constructor = IdentifierTerminalContext;

IdentifierTerminalContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

IdentifierTerminalContext.prototype.EOF = function() {
    return this.getToken(JQLParser.EOF, 0);
};

IdentifierTerminalContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterIdentifierTerminal(this);
	}
};

IdentifierTerminalContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitIdentifierTerminal(this);
	}
};




JQLParser.IdentifierTerminalContext = IdentifierTerminalContext;

JQLParser.prototype.identifierTerminal = function() {

    var localctx = new IdentifierTerminalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, JQLParser.RULE_identifierTerminal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 102;
        this.identifier();
        this.state = 103;
        this.match(JQLParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TimeUnitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_timeUnit;
    this.coeff = null; // Token
    this.unit = null; // Token
    return this;
}

TimeUnitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TimeUnitContext.prototype.constructor = TimeUnitContext;

TimeUnitContext.prototype.TIME_UNIT = function() {
    return this.getToken(JQLParser.TIME_UNIT, 0);
};

TimeUnitContext.prototype.Y = function() {
    return this.getToken(JQLParser.Y, 0);
};

TimeUnitContext.prototype.M = function() {
    return this.getToken(JQLParser.M, 0);
};

TimeUnitContext.prototype.BUCKET = function() {
    return this.getToken(JQLParser.BUCKET, 0);
};

TimeUnitContext.prototype.BUCKETS = function() {
    return this.getToken(JQLParser.BUCKETS, 0);
};

TimeUnitContext.prototype.NAT = function() {
    return this.getToken(JQLParser.NAT, 0);
};

TimeUnitContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterTimeUnit(this);
	}
};

TimeUnitContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitTimeUnit(this);
	}
};




JQLParser.TimeUnitContext = TimeUnitContext;

JQLParser.prototype.timeUnit = function() {

    var localctx = new TimeUnitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, JQLParser.RULE_timeUnit);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 106;
        _la = this._input.LA(1);
        if(_la===JQLParser.NAT) {
            this.state = 105;
            localctx.coeff = this.match(JQLParser.NAT);
        }

        this.state = 108;
        localctx.unit = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===JQLParser.BUCKETS || _la===JQLParser.BUCKET || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (JQLParser.M - 112)) | (1 << (JQLParser.Y - 112)) | (1 << (JQLParser.TIME_UNIT - 112)))) !== 0))) {
            localctx.unit = this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TimePeriodContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_timePeriod;
    return this;
}

TimePeriodContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TimePeriodContext.prototype.constructor = TimePeriodContext;


 
TimePeriodContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function TimePeriodParseableContext(parser, ctx) {
	TimePeriodContext.call(this, parser);
    this._TIME_PERIOD_ATOM = null; // Token;
    this.atoms = []; // of Tokens;
    this._timeUnit = null; // TimeUnitContext;
    this.timeunits = []; // of TimeUnitContexts;
    TimePeriodContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TimePeriodParseableContext.prototype = Object.create(TimePeriodContext.prototype);
TimePeriodParseableContext.prototype.constructor = TimePeriodParseableContext;

JQLParser.TimePeriodParseableContext = TimePeriodParseableContext;

TimePeriodParseableContext.prototype.AGO = function() {
    return this.getToken(JQLParser.AGO, 0);
};

TimePeriodParseableContext.prototype.TIME_PERIOD_ATOM = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JQLParser.TIME_PERIOD_ATOM);
    } else {
        return this.getToken(JQLParser.TIME_PERIOD_ATOM, i);
    }
};


TimePeriodParseableContext.prototype.timeUnit = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TimeUnitContext);
    } else {
        return this.getTypedRuleContext(TimeUnitContext,i);
    }
};
TimePeriodParseableContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterTimePeriodParseable(this);
	}
};

TimePeriodParseableContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitTimePeriodParseable(this);
	}
};


function TimePeriodStringLiteralContext(parser, ctx) {
	TimePeriodContext.call(this, parser);
    TimePeriodContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TimePeriodStringLiteralContext.prototype = Object.create(TimePeriodContext.prototype);
TimePeriodStringLiteralContext.prototype.constructor = TimePeriodStringLiteralContext;

JQLParser.TimePeriodStringLiteralContext = TimePeriodStringLiteralContext;

TimePeriodStringLiteralContext.prototype.STRING_LITERAL = function() {
    return this.getToken(JQLParser.STRING_LITERAL, 0);
};
TimePeriodStringLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterTimePeriodStringLiteral(this);
	}
};

TimePeriodStringLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitTimePeriodStringLiteral(this);
	}
};



JQLParser.TimePeriodContext = TimePeriodContext;

JQLParser.prototype.timePeriod = function() {

    var localctx = new TimePeriodContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, JQLParser.RULE_timePeriod);
    try {
        this.state = 120;
        switch(this._input.LA(1)) {
        case JQLParser.BUCKETS:
        case JQLParser.BUCKET:
        case JQLParser.M:
        case JQLParser.Y:
        case JQLParser.TIME_UNIT:
        case JQLParser.TIME_PERIOD_ATOM:
        case JQLParser.NAT:
            localctx = new TimePeriodParseableContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 112; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 112;
            		switch(this._input.LA(1)) {
            		case JQLParser.TIME_PERIOD_ATOM:
            		    this.state = 110;
            		    localctx._TIME_PERIOD_ATOM = this.match(JQLParser.TIME_PERIOD_ATOM);
            		    localctx.atoms.push(localctx._TIME_PERIOD_ATOM);
            		    break;
            		case JQLParser.BUCKETS:
            		case JQLParser.BUCKET:
            		case JQLParser.M:
            		case JQLParser.Y:
            		case JQLParser.TIME_UNIT:
            		case JQLParser.NAT:
            		    this.state = 111;
            		    localctx._timeUnit = this.timeUnit();
            		    localctx.timeunits.push(localctx._timeUnit);
            		    break;
            		default:
            		    throw new antlr4.error.NoViableAltException(this);
            		}
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 114; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,2, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            this.state = 117;
            var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
            if(la_===1) {
                this.state = 116;
                this.match(JQLParser.AGO);

            }
            break;
        case JQLParser.STRING_LITERAL:
            localctx = new TimePeriodStringLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 119;
            this.match(JQLParser.STRING_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TimePeriodTerminalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_timePeriodTerminal;
    return this;
}

TimePeriodTerminalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TimePeriodTerminalContext.prototype.constructor = TimePeriodTerminalContext;

TimePeriodTerminalContext.prototype.timePeriod = function() {
    return this.getTypedRuleContext(TimePeriodContext,0);
};

TimePeriodTerminalContext.prototype.EOF = function() {
    return this.getToken(JQLParser.EOF, 0);
};

TimePeriodTerminalContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterTimePeriodTerminal(this);
	}
};

TimePeriodTerminalContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitTimePeriodTerminal(this);
	}
};




JQLParser.TimePeriodTerminalContext = TimePeriodTerminalContext;

JQLParser.prototype.timePeriodTerminal = function() {

    var localctx = new TimePeriodTerminalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, JQLParser.RULE_timePeriodTerminal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 122;
        this.timePeriod();
        this.state = 123;
        this.match(JQLParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IntegerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_integer;
    this.neg = null; // Token
    return this;
}

IntegerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntegerContext.prototype.constructor = IntegerContext;

IntegerContext.prototype.NAT = function() {
    return this.getToken(JQLParser.NAT, 0);
};

IntegerContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterInteger(this);
	}
};

IntegerContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitInteger(this);
	}
};




JQLParser.IntegerContext = IntegerContext;

JQLParser.prototype.integer = function() {

    var localctx = new IntegerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, JQLParser.RULE_integer);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 126;
        _la = this._input.LA(1);
        if(_la===JQLParser.T__0) {
            this.state = 125;
            localctx.neg = this.match(JQLParser.T__0);
        }

        this.state = 128;
        this.match(JQLParser.NAT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NumberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_number;
    this.neg = null; // Token
    return this;
}

NumberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumberContext.prototype.constructor = NumberContext;

NumberContext.prototype.NAT = function() {
    return this.getToken(JQLParser.NAT, 0);
};

NumberContext.prototype.DOUBLE = function() {
    return this.getToken(JQLParser.DOUBLE, 0);
};

NumberContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterNumber(this);
	}
};

NumberContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitNumber(this);
	}
};




JQLParser.NumberContext = NumberContext;

JQLParser.prototype.number = function() {

    var localctx = new NumberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, JQLParser.RULE_number);
    var _la = 0; // Token type
    try {
        this.state = 135;
        switch(this._input.LA(1)) {
        case JQLParser.T__0:
        case JQLParser.NAT:
            this.enterOuterAlt(localctx, 1);
            this.state = 131;
            _la = this._input.LA(1);
            if(_la===JQLParser.T__0) {
                this.state = 130;
                localctx.neg = this.match(JQLParser.T__0);
            }

            this.state = 133;
            this.match(JQLParser.NAT);
            break;
        case JQLParser.DOUBLE:
            this.enterOuterAlt(localctx, 2);
            this.state = 134;
            this.match(JQLParser.DOUBLE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LegacyAggregateMetricContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_legacyAggregateMetric;
    return this;
}

LegacyAggregateMetricContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LegacyAggregateMetricContext.prototype.constructor = LegacyAggregateMetricContext;


 
LegacyAggregateMetricContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function LegacyAggregateDivByConstantContext(parser, ctx) {
	LegacyAggregateMetricContext.call(this, parser);
    LegacyAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyAggregateDivByConstantContext.prototype = Object.create(LegacyAggregateMetricContext.prototype);
LegacyAggregateDivByConstantContext.prototype.constructor = LegacyAggregateDivByConstantContext;

JQLParser.LegacyAggregateDivByConstantContext = LegacyAggregateDivByConstantContext;

LegacyAggregateDivByConstantContext.prototype.legacyAggregateMetric = function() {
    return this.getTypedRuleContext(LegacyAggregateMetricContext,0);
};

LegacyAggregateDivByConstantContext.prototype.number = function() {
    return this.getTypedRuleContext(NumberContext,0);
};
LegacyAggregateDivByConstantContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyAggregateDivByConstant(this);
	}
};

LegacyAggregateDivByConstantContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyAggregateDivByConstant(this);
	}
};


function LegacyAggregatePercentileContext(parser, ctx) {
	LegacyAggregateMetricContext.call(this, parser);
    LegacyAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyAggregatePercentileContext.prototype = Object.create(LegacyAggregateMetricContext.prototype);
LegacyAggregatePercentileContext.prototype.constructor = LegacyAggregatePercentileContext;

JQLParser.LegacyAggregatePercentileContext = LegacyAggregatePercentileContext;

LegacyAggregatePercentileContext.prototype.PERCENTILE = function() {
    return this.getToken(JQLParser.PERCENTILE, 0);
};

LegacyAggregatePercentileContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

LegacyAggregatePercentileContext.prototype.number = function() {
    return this.getTypedRuleContext(NumberContext,0);
};
LegacyAggregatePercentileContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyAggregatePercentile(this);
	}
};

LegacyAggregatePercentileContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyAggregatePercentile(this);
	}
};


function LegacyAggregateDivContext(parser, ctx) {
	LegacyAggregateMetricContext.call(this, parser);
    LegacyAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyAggregateDivContext.prototype = Object.create(LegacyAggregateMetricContext.prototype);
LegacyAggregateDivContext.prototype.constructor = LegacyAggregateDivContext;

JQLParser.LegacyAggregateDivContext = LegacyAggregateDivContext;

LegacyAggregateDivContext.prototype.legacyDocMetric = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LegacyDocMetricContext);
    } else {
        return this.getTypedRuleContext(LegacyDocMetricContext,i);
    }
};
LegacyAggregateDivContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyAggregateDiv(this);
	}
};

LegacyAggregateDivContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyAggregateDiv(this);
	}
};


function LegacyAggregateDistinctContext(parser, ctx) {
	LegacyAggregateMetricContext.call(this, parser);
    LegacyAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyAggregateDistinctContext.prototype = Object.create(LegacyAggregateMetricContext.prototype);
LegacyAggregateDistinctContext.prototype.constructor = LegacyAggregateDistinctContext;

JQLParser.LegacyAggregateDistinctContext = LegacyAggregateDistinctContext;

LegacyAggregateDistinctContext.prototype.DISTINCT = function() {
    return this.getToken(JQLParser.DISTINCT, 0);
};

LegacyAggregateDistinctContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
LegacyAggregateDistinctContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyAggregateDistinct(this);
	}
};

LegacyAggregateDistinctContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyAggregateDistinct(this);
	}
};


function LegacyImplicitSumContext(parser, ctx) {
	LegacyAggregateMetricContext.call(this, parser);
    LegacyAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyImplicitSumContext.prototype = Object.create(LegacyAggregateMetricContext.prototype);
LegacyImplicitSumContext.prototype.constructor = LegacyImplicitSumContext;

JQLParser.LegacyImplicitSumContext = LegacyImplicitSumContext;

LegacyImplicitSumContext.prototype.legacyDocMetric = function() {
    return this.getTypedRuleContext(LegacyDocMetricContext,0);
};
LegacyImplicitSumContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyImplicitSum(this);
	}
};

LegacyImplicitSumContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyImplicitSum(this);
	}
};


function LegacyAggregateParensContext(parser, ctx) {
	LegacyAggregateMetricContext.call(this, parser);
    LegacyAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyAggregateParensContext.prototype = Object.create(LegacyAggregateMetricContext.prototype);
LegacyAggregateParensContext.prototype.constructor = LegacyAggregateParensContext;

JQLParser.LegacyAggregateParensContext = LegacyAggregateParensContext;

LegacyAggregateParensContext.prototype.legacyAggregateMetric = function() {
    return this.getTypedRuleContext(LegacyAggregateMetricContext,0);
};
LegacyAggregateParensContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyAggregateParens(this);
	}
};

LegacyAggregateParensContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyAggregateParens(this);
	}
};



JQLParser.prototype.legacyAggregateMetric = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new LegacyAggregateMetricContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 14;
    this.enterRecursionRule(localctx, 14, JQLParser.RULE_legacyAggregateMetric, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 159;
        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
        switch(la_) {
        case 1:
            localctx = new LegacyAggregateDistinctContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 138;
            this.match(JQLParser.DISTINCT);
            this.state = 139;
            this.match(JQLParser.T__1);
            this.state = 140;
            this.identifier();
            this.state = 141;
            this.match(JQLParser.T__2);
            break;

        case 2:
            localctx = new LegacyAggregatePercentileContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 143;
            this.match(JQLParser.PERCENTILE);
            this.state = 144;
            this.match(JQLParser.T__1);
            this.state = 145;
            this.identifier();
            this.state = 146;
            this.match(JQLParser.T__3);
            this.state = 147;
            this.number();
            this.state = 148;
            this.match(JQLParser.T__2);
            break;

        case 3:
            localctx = new LegacyAggregateDivContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 150;
            this.legacyDocMetric(0);
            this.state = 151;
            this.match(JQLParser.T__4);
            this.state = 152;
            this.legacyDocMetric(0);
            break;

        case 4:
            localctx = new LegacyAggregateParensContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 154;
            this.match(JQLParser.T__1);
            this.state = 155;
            this.legacyAggregateMetric(0);
            this.state = 156;
            this.match(JQLParser.T__2);
            break;

        case 5:
            localctx = new LegacyImplicitSumContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 158;
            this.legacyDocMetric(0);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 166;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,9,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new LegacyAggregateDivByConstantContext(this, new LegacyAggregateMetricContext(this, _parentctx, _parentState));
                this.pushNewRecursionContext(localctx, _startState, JQLParser.RULE_legacyAggregateMetric);
                this.state = 161;
                if (!( this.precpred(this._ctx, 4))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                }
                this.state = 162;
                this.match(JQLParser.T__4);
                this.state = 163;
                this.number(); 
            }
            this.state = 168;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,9,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function AggregateMetricContext(parser, parent, invokingState, useLegacy) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_aggregateMetric;
    this.useLegacy = null
    this.useLegacy = useLegacy || null;
    return this;
}

AggregateMetricContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AggregateMetricContext.prototype.constructor = AggregateMetricContext;

AggregateMetricContext.prototype.legacyAggregateMetric = function() {
    return this.getTypedRuleContext(LegacyAggregateMetricContext,0);
};

AggregateMetricContext.prototype.jqlAggregateMetric = function() {
    return this.getTypedRuleContext(JqlAggregateMetricContext,0);
};

AggregateMetricContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateMetric(this);
	}
};

AggregateMetricContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateMetric(this);
	}
};




JQLParser.AggregateMetricContext = AggregateMetricContext;

JQLParser.prototype.aggregateMetric = function(useLegacy) {

    var localctx = new AggregateMetricContext(this, this._ctx, this.state, useLegacy);
    this.enterRule(localctx, 16, JQLParser.RULE_aggregateMetric);
    try {
        this.state = 173;
        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 169;
            if (!( localctx.useLegacy)) {
                throw new antlr4.error.FailedPredicateException(this, "$ctx.useLegacy");
            }
            this.state = 170;
            this.legacyAggregateMetric(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 171;
            if (!( !localctx.useLegacy)) {
                throw new antlr4.error.FailedPredicateException(this, "!$ctx.useLegacy");
            }
            this.state = 172;
            this.jqlAggregateMetric(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AggregateMetricEofContext(parser, parent, invokingState, useLegacy) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_aggregateMetricEof;
    this.useLegacy = null
    this.useLegacy = useLegacy || null;
    return this;
}

AggregateMetricEofContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AggregateMetricEofContext.prototype.constructor = AggregateMetricEofContext;

AggregateMetricEofContext.prototype.aggregateMetric = function() {
    return this.getTypedRuleContext(AggregateMetricContext,0);
};

AggregateMetricEofContext.prototype.EOF = function() {
    return this.getToken(JQLParser.EOF, 0);
};

AggregateMetricEofContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateMetricEof(this);
	}
};

AggregateMetricEofContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateMetricEof(this);
	}
};




JQLParser.AggregateMetricEofContext = AggregateMetricEofContext;

JQLParser.prototype.aggregateMetricEof = function(useLegacy) {

    var localctx = new AggregateMetricEofContext(this, this._ctx, this.state, useLegacy);
    this.enterRule(localctx, 18, JQLParser.RULE_aggregateMetricEof);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 175;
        this.aggregateMetric(localctx.useLegacy);
        this.state = 176;
        this.match(JQLParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function JqlAggregateMetricContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_jqlAggregateMetric;
    return this;
}

JqlAggregateMetricContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JqlAggregateMetricContext.prototype.constructor = JqlAggregateMetricContext;


 
JqlAggregateMetricContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function AggregateParensContext(parser, ctx) {
	JqlAggregateMetricContext.call(this, parser);
    JqlAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateParensContext.prototype = Object.create(JqlAggregateMetricContext.prototype);
AggregateParensContext.prototype.constructor = AggregateParensContext;

JQLParser.AggregateParensContext = AggregateParensContext;

AggregateParensContext.prototype.jqlAggregateMetric = function() {
    return this.getTypedRuleContext(JqlAggregateMetricContext,0);
};
AggregateParensContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateParens(this);
	}
};

AggregateParensContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateParens(this);
	}
};


function AggregateParentContext(parser, ctx) {
	JqlAggregateMetricContext.call(this, parser);
    JqlAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateParentContext.prototype = Object.create(JqlAggregateMetricContext.prototype);
AggregateParentContext.prototype.constructor = AggregateParentContext;

JQLParser.AggregateParentContext = AggregateParentContext;

AggregateParentContext.prototype.PARENT = function() {
    return this.getToken(JQLParser.PARENT, 0);
};

AggregateParentContext.prototype.jqlAggregateMetric = function() {
    return this.getTypedRuleContext(JqlAggregateMetricContext,0);
};
AggregateParentContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateParent(this);
	}
};

AggregateParentContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateParent(this);
	}
};


function AggregateMetricMinContext(parser, ctx) {
	JqlAggregateMetricContext.call(this, parser);
    this._jqlAggregateMetric = null; // JqlAggregateMetricContext;
    this.metrics = []; // of JqlAggregateMetricContexts;
    JqlAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateMetricMinContext.prototype = Object.create(JqlAggregateMetricContext.prototype);
AggregateMetricMinContext.prototype.constructor = AggregateMetricMinContext;

JQLParser.AggregateMetricMinContext = AggregateMetricMinContext;

AggregateMetricMinContext.prototype.MIN = function() {
    return this.getToken(JQLParser.MIN, 0);
};

AggregateMetricMinContext.prototype.jqlAggregateMetric = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JqlAggregateMetricContext);
    } else {
        return this.getTypedRuleContext(JqlAggregateMetricContext,i);
    }
};
AggregateMetricMinContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateMetricMin(this);
	}
};

AggregateMetricMinContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateMetricMin(this);
	}
};


function AggregateSumAcross2Context(parser, ctx) {
	JqlAggregateMetricContext.call(this, parser);
    this.field = null; // ScopedFieldContext;
    JqlAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateSumAcross2Context.prototype = Object.create(JqlAggregateMetricContext.prototype);
AggregateSumAcross2Context.prototype.constructor = AggregateSumAcross2Context;

JQLParser.AggregateSumAcross2Context = AggregateSumAcross2Context;

AggregateSumAcross2Context.prototype.SUM_OVER = function() {
    return this.getToken(JQLParser.SUM_OVER, 0);
};

AggregateSumAcross2Context.prototype.jqlAggregateMetric = function() {
    return this.getTypedRuleContext(JqlAggregateMetricContext,0);
};

AggregateSumAcross2Context.prototype.scopedField = function() {
    return this.getTypedRuleContext(ScopedFieldContext,0);
};

AggregateSumAcross2Context.prototype.HAVING = function() {
    return this.getToken(JQLParser.HAVING, 0);
};

AggregateSumAcross2Context.prototype.jqlAggregateFilter = function() {
    return this.getTypedRuleContext(JqlAggregateFilterContext,0);
};
AggregateSumAcross2Context.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateSumAcross2(this);
	}
};

AggregateSumAcross2Context.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateSumAcross2(this);
	}
};


function AggregateLagContext(parser, ctx) {
	JqlAggregateMetricContext.call(this, parser);
    JqlAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateLagContext.prototype = Object.create(JqlAggregateMetricContext.prototype);
AggregateLagContext.prototype.constructor = AggregateLagContext;

JQLParser.AggregateLagContext = AggregateLagContext;

AggregateLagContext.prototype.LAG = function() {
    return this.getToken(JQLParser.LAG, 0);
};

AggregateLagContext.prototype.NAT = function() {
    return this.getToken(JQLParser.NAT, 0);
};

AggregateLagContext.prototype.jqlAggregateMetric = function() {
    return this.getTypedRuleContext(JqlAggregateMetricContext,0);
};
AggregateLagContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateLag(this);
	}
};

AggregateLagContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateLag(this);
	}
};


function AggregateAvgContext(parser, ctx) {
	JqlAggregateMetricContext.call(this, parser);
    JqlAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateAvgContext.prototype = Object.create(JqlAggregateMetricContext.prototype);
AggregateAvgContext.prototype.constructor = AggregateAvgContext;

JQLParser.AggregateAvgContext = AggregateAvgContext;

AggregateAvgContext.prototype.AVG = function() {
    return this.getToken(JQLParser.AVG, 0);
};

AggregateAvgContext.prototype.jqlAggregateMetric = function() {
    return this.getTypedRuleContext(JqlAggregateMetricContext,0);
};
AggregateAvgContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateAvg(this);
	}
};

AggregateAvgContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateAvg(this);
	}
};


function AggregateFieldMinContext(parser, ctx) {
	JqlAggregateMetricContext.call(this, parser);
    this.aggregate = null; // JqlAggregateMetricContext;
    this.filter = null; // JqlAggregateFilterContext;
    JqlAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateFieldMinContext.prototype = Object.create(JqlAggregateMetricContext.prototype);
AggregateFieldMinContext.prototype.constructor = AggregateFieldMinContext;

JQLParser.AggregateFieldMinContext = AggregateFieldMinContext;

AggregateFieldMinContext.prototype.FIELD_MIN = function() {
    return this.getToken(JQLParser.FIELD_MIN, 0);
};

AggregateFieldMinContext.prototype.scopedField = function() {
    return this.getTypedRuleContext(ScopedFieldContext,0);
};

AggregateFieldMinContext.prototype.BY = function() {
    return this.getToken(JQLParser.BY, 0);
};

AggregateFieldMinContext.prototype.HAVING = function() {
    return this.getToken(JQLParser.HAVING, 0);
};

AggregateFieldMinContext.prototype.jqlAggregateMetric = function() {
    return this.getTypedRuleContext(JqlAggregateMetricContext,0);
};

AggregateFieldMinContext.prototype.jqlAggregateFilter = function() {
    return this.getTypedRuleContext(JqlAggregateFilterContext,0);
};
AggregateFieldMinContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateFieldMin(this);
	}
};

AggregateFieldMinContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateFieldMin(this);
	}
};


function AggregateQualifiedContext(parser, ctx) {
	JqlAggregateMetricContext.call(this, parser);
    this.field = null; // IdentifierContext;
    JqlAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateQualifiedContext.prototype = Object.create(JqlAggregateMetricContext.prototype);
AggregateQualifiedContext.prototype.constructor = AggregateQualifiedContext;

JQLParser.AggregateQualifiedContext = AggregateQualifiedContext;

AggregateQualifiedContext.prototype.syntacticallyAtomicJqlAggregateMetric = function() {
    return this.getTypedRuleContext(SyntacticallyAtomicJqlAggregateMetricContext,0);
};

AggregateQualifiedContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
AggregateQualifiedContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateQualified(this);
	}
};

AggregateQualifiedContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateQualified(this);
	}
};


function AggregateAverageAcrossContext(parser, ctx) {
	JqlAggregateMetricContext.call(this, parser);
    this.field = null; // ScopedFieldContext;
    this.havingBrackets = null; // Token;
    JqlAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateAverageAcrossContext.prototype = Object.create(JqlAggregateMetricContext.prototype);
AggregateAverageAcrossContext.prototype.constructor = AggregateAverageAcrossContext;

JQLParser.AggregateAverageAcrossContext = AggregateAverageAcrossContext;

AggregateAverageAcrossContext.prototype.AVG_OVER = function() {
    return this.getToken(JQLParser.AVG_OVER, 0);
};

AggregateAverageAcrossContext.prototype.jqlAggregateMetric = function() {
    return this.getTypedRuleContext(JqlAggregateMetricContext,0);
};

AggregateAverageAcrossContext.prototype.scopedField = function() {
    return this.getTypedRuleContext(ScopedFieldContext,0);
};

AggregateAverageAcrossContext.prototype.HAVING = function() {
    return this.getToken(JQLParser.HAVING, 0);
};

AggregateAverageAcrossContext.prototype.jqlAggregateFilter = function() {
    return this.getTypedRuleContext(JqlAggregateFilterContext,0);
};
AggregateAverageAcrossContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateAverageAcross(this);
	}
};

AggregateAverageAcrossContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateAverageAcross(this);
	}
};


function AggregatePlusOrMinusContext(parser, ctx) {
	JqlAggregateMetricContext.call(this, parser);
    this.plus = null; // Token;
    this.minus = null; // Token;
    JqlAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregatePlusOrMinusContext.prototype = Object.create(JqlAggregateMetricContext.prototype);
AggregatePlusOrMinusContext.prototype.constructor = AggregatePlusOrMinusContext;

JQLParser.AggregatePlusOrMinusContext = AggregatePlusOrMinusContext;

AggregatePlusOrMinusContext.prototype.jqlAggregateMetric = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JqlAggregateMetricContext);
    } else {
        return this.getTypedRuleContext(JqlAggregateMetricContext,i);
    }
};
AggregatePlusOrMinusContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregatePlusOrMinus(this);
	}
};

AggregatePlusOrMinusContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregatePlusOrMinus(this);
	}
};


function AggregateNamedContext(parser, ctx) {
	JqlAggregateMetricContext.call(this, parser);
    this.name = null; // IdentifierContext;
    JqlAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateNamedContext.prototype = Object.create(JqlAggregateMetricContext.prototype);
AggregateNamedContext.prototype.constructor = AggregateNamedContext;

JQLParser.AggregateNamedContext = AggregateNamedContext;

AggregateNamedContext.prototype.jqlAggregateMetric = function() {
    return this.getTypedRuleContext(JqlAggregateMetricContext,0);
};

AggregateNamedContext.prototype.AS = function() {
    return this.getToken(JQLParser.AS, 0);
};

AggregateNamedContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
AggregateNamedContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateNamed(this);
	}
};

AggregateNamedContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateNamed(this);
	}
};


function SyntacticallyAtomicAggregateMetricContext(parser, ctx) {
	JqlAggregateMetricContext.call(this, parser);
    JqlAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SyntacticallyAtomicAggregateMetricContext.prototype = Object.create(JqlAggregateMetricContext.prototype);
SyntacticallyAtomicAggregateMetricContext.prototype.constructor = SyntacticallyAtomicAggregateMetricContext;

JQLParser.SyntacticallyAtomicAggregateMetricContext = SyntacticallyAtomicAggregateMetricContext;

SyntacticallyAtomicAggregateMetricContext.prototype.syntacticallyAtomicJqlAggregateMetric = function() {
    return this.getTypedRuleContext(SyntacticallyAtomicJqlAggregateMetricContext,0);
};
SyntacticallyAtomicAggregateMetricContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterSyntacticallyAtomicAggregateMetric(this);
	}
};

SyntacticallyAtomicAggregateMetricContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitSyntacticallyAtomicAggregateMetric(this);
	}
};


function AggregateLogContext(parser, ctx) {
	JqlAggregateMetricContext.call(this, parser);
    JqlAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateLogContext.prototype = Object.create(JqlAggregateMetricContext.prototype);
AggregateLogContext.prototype.constructor = AggregateLogContext;

JQLParser.AggregateLogContext = AggregateLogContext;

AggregateLogContext.prototype.LOG = function() {
    return this.getToken(JQLParser.LOG, 0);
};

AggregateLogContext.prototype.jqlAggregateMetric = function() {
    return this.getTypedRuleContext(JqlAggregateMetricContext,0);
};
AggregateLogContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateLog(this);
	}
};

AggregateLogContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateLog(this);
	}
};


function AggregateStandardDeviationContext(parser, ctx) {
	JqlAggregateMetricContext.call(this, parser);
    JqlAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateStandardDeviationContext.prototype = Object.create(JqlAggregateMetricContext.prototype);
AggregateStandardDeviationContext.prototype.constructor = AggregateStandardDeviationContext;

JQLParser.AggregateStandardDeviationContext = AggregateStandardDeviationContext;

AggregateStandardDeviationContext.prototype.STDEV = function() {
    return this.getToken(JQLParser.STDEV, 0);
};

AggregateStandardDeviationContext.prototype.jqlDocMetric = function() {
    return this.getTypedRuleContext(JqlDocMetricContext,0);
};
AggregateStandardDeviationContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateStandardDeviation(this);
	}
};

AggregateStandardDeviationContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateStandardDeviation(this);
	}
};


function AggregateMetricMaxContext(parser, ctx) {
	JqlAggregateMetricContext.call(this, parser);
    this._jqlAggregateMetric = null; // JqlAggregateMetricContext;
    this.metrics = []; // of JqlAggregateMetricContexts;
    JqlAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateMetricMaxContext.prototype = Object.create(JqlAggregateMetricContext.prototype);
AggregateMetricMaxContext.prototype.constructor = AggregateMetricMaxContext;

JQLParser.AggregateMetricMaxContext = AggregateMetricMaxContext;

AggregateMetricMaxContext.prototype.MAX = function() {
    return this.getToken(JQLParser.MAX, 0);
};

AggregateMetricMaxContext.prototype.jqlAggregateMetric = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JqlAggregateMetricContext);
    } else {
        return this.getTypedRuleContext(JqlAggregateMetricContext,i);
    }
};
AggregateMetricMaxContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateMetricMax(this);
	}
};

AggregateMetricMaxContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateMetricMax(this);
	}
};


function AggregatePowerContext(parser, ctx) {
	JqlAggregateMetricContext.call(this, parser);
    JqlAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregatePowerContext.prototype = Object.create(JqlAggregateMetricContext.prototype);
AggregatePowerContext.prototype.constructor = AggregatePowerContext;

JQLParser.AggregatePowerContext = AggregatePowerContext;

AggregatePowerContext.prototype.jqlAggregateMetric = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JqlAggregateMetricContext);
    } else {
        return this.getTypedRuleContext(JqlAggregateMetricContext,i);
    }
};
AggregatePowerContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregatePower(this);
	}
};

AggregatePowerContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregatePower(this);
	}
};


function AggregateSumAcrossContext(parser, ctx) {
	JqlAggregateMetricContext.call(this, parser);
    JqlAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateSumAcrossContext.prototype = Object.create(JqlAggregateMetricContext.prototype);
AggregateSumAcrossContext.prototype.constructor = AggregateSumAcrossContext;

JQLParser.AggregateSumAcrossContext = AggregateSumAcrossContext;

AggregateSumAcrossContext.prototype.SUM_OVER = function() {
    return this.getToken(JQLParser.SUM_OVER, 0);
};

AggregateSumAcrossContext.prototype.groupByElement = function() {
    return this.getTypedRuleContext(GroupByElementContext,0);
};

AggregateSumAcrossContext.prototype.jqlAggregateMetric = function() {
    return this.getTypedRuleContext(JqlAggregateMetricContext,0);
};
AggregateSumAcrossContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateSumAcross(this);
	}
};

AggregateSumAcrossContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateSumAcross(this);
	}
};


function AggregatePDiffContext(parser, ctx) {
	JqlAggregateMetricContext.call(this, parser);
    this.expected = null; // JqlAggregateMetricContext;
    this.actual = null; // JqlAggregateMetricContext;
    JqlAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregatePDiffContext.prototype = Object.create(JqlAggregateMetricContext.prototype);
AggregatePDiffContext.prototype.constructor = AggregatePDiffContext;

JQLParser.AggregatePDiffContext = AggregatePDiffContext;

AggregatePDiffContext.prototype.PDIFF = function() {
    return this.getToken(JQLParser.PDIFF, 0);
};

AggregatePDiffContext.prototype.jqlAggregateMetric = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JqlAggregateMetricContext);
    } else {
        return this.getTypedRuleContext(JqlAggregateMetricContext,i);
    }
};
AggregatePDiffContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregatePDiff(this);
	}
};

AggregatePDiffContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregatePDiff(this);
	}
};


function AggregateSumContext(parser, ctx) {
	JqlAggregateMetricContext.call(this, parser);
    JqlAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateSumContext.prototype = Object.create(JqlAggregateMetricContext.prototype);
AggregateSumContext.prototype.constructor = AggregateSumContext;

JQLParser.AggregateSumContext = AggregateSumContext;

AggregateSumContext.prototype.jqlDocMetric = function() {
    return this.getTypedRuleContext(JqlDocMetricContext,0);
};
AggregateSumContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateSum(this);
	}
};

AggregateSumContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateSum(this);
	}
};


function AggregateSingleScorerContext(parser, ctx) {
	JqlAggregateMetricContext.call(this, parser);
    this.controlGrp = null; // JqlAggregateMetricContext;
    this.testGrp = null; // JqlAggregateMetricContext;
    JqlAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateSingleScorerContext.prototype = Object.create(JqlAggregateMetricContext.prototype);
AggregateSingleScorerContext.prototype.constructor = AggregateSingleScorerContext;

JQLParser.AggregateSingleScorerContext = AggregateSingleScorerContext;

AggregateSingleScorerContext.prototype.SINGLESCORE = function() {
    return this.getToken(JQLParser.SINGLESCORE, 0);
};

AggregateSingleScorerContext.prototype.jqlAggregateMetric = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JqlAggregateMetricContext);
    } else {
        return this.getTypedRuleContext(JqlAggregateMetricContext,i);
    }
};
AggregateSingleScorerContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateSingleScorer(this);
	}
};

AggregateSingleScorerContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateSingleScorer(this);
	}
};


function AggregateIfThenElseContext(parser, ctx) {
	JqlAggregateMetricContext.call(this, parser);
    this.filter = null; // JqlAggregateFilterContext;
    this.trueCase = null; // JqlAggregateMetricContext;
    this.falseCase = null; // JqlAggregateMetricContext;
    JqlAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateIfThenElseContext.prototype = Object.create(JqlAggregateMetricContext.prototype);
AggregateIfThenElseContext.prototype.constructor = AggregateIfThenElseContext;

JQLParser.AggregateIfThenElseContext = AggregateIfThenElseContext;

AggregateIfThenElseContext.prototype.IF = function() {
    return this.getToken(JQLParser.IF, 0);
};

AggregateIfThenElseContext.prototype.THEN = function() {
    return this.getToken(JQLParser.THEN, 0);
};

AggregateIfThenElseContext.prototype.ELSE = function() {
    return this.getToken(JQLParser.ELSE, 0);
};

AggregateIfThenElseContext.prototype.jqlAggregateFilter = function() {
    return this.getTypedRuleContext(JqlAggregateFilterContext,0);
};

AggregateIfThenElseContext.prototype.jqlAggregateMetric = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JqlAggregateMetricContext);
    } else {
        return this.getTypedRuleContext(JqlAggregateMetricContext,i);
    }
};
AggregateIfThenElseContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateIfThenElse(this);
	}
};

AggregateIfThenElseContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateIfThenElse(this);
	}
};


function AggregateDocMetricAtomContext(parser, ctx) {
	JqlAggregateMetricContext.call(this, parser);
    JqlAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateDocMetricAtomContext.prototype = Object.create(JqlAggregateMetricContext.prototype);
AggregateDocMetricAtomContext.prototype.constructor = AggregateDocMetricAtomContext;

JQLParser.AggregateDocMetricAtomContext = AggregateDocMetricAtomContext;

AggregateDocMetricAtomContext.prototype.jqlDocMetricAtom = function() {
    return this.getTypedRuleContext(JqlDocMetricAtomContext,0);
};
AggregateDocMetricAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateDocMetricAtom(this);
	}
};

AggregateDocMetricAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateDocMetricAtom(this);
	}
};


function AggregateVarianceContext(parser, ctx) {
	JqlAggregateMetricContext.call(this, parser);
    JqlAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateVarianceContext.prototype = Object.create(JqlAggregateMetricContext.prototype);
AggregateVarianceContext.prototype.constructor = AggregateVarianceContext;

JQLParser.AggregateVarianceContext = AggregateVarianceContext;

AggregateVarianceContext.prototype.VARIANCE = function() {
    return this.getToken(JQLParser.VARIANCE, 0);
};

AggregateVarianceContext.prototype.jqlDocMetric = function() {
    return this.getTypedRuleContext(JqlDocMetricContext,0);
};
AggregateVarianceContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateVariance(this);
	}
};

AggregateVarianceContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateVariance(this);
	}
};


function AggregateAbsContext(parser, ctx) {
	JqlAggregateMetricContext.call(this, parser);
    JqlAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateAbsContext.prototype = Object.create(JqlAggregateMetricContext.prototype);
AggregateAbsContext.prototype.constructor = AggregateAbsContext;

JQLParser.AggregateAbsContext = AggregateAbsContext;

AggregateAbsContext.prototype.ABS = function() {
    return this.getToken(JQLParser.ABS, 0);
};

AggregateAbsContext.prototype.jqlAggregateMetric = function() {
    return this.getTypedRuleContext(JqlAggregateMetricContext,0);
};
AggregateAbsContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateAbs(this);
	}
};

AggregateAbsContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateAbs(this);
	}
};


function AggregateWindowContext(parser, ctx) {
	JqlAggregateMetricContext.call(this, parser);
    this.old = null; // Token;
    JqlAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateWindowContext.prototype = Object.create(JqlAggregateMetricContext.prototype);
AggregateWindowContext.prototype.constructor = AggregateWindowContext;

JQLParser.AggregateWindowContext = AggregateWindowContext;

AggregateWindowContext.prototype.NAT = function() {
    return this.getToken(JQLParser.NAT, 0);
};

AggregateWindowContext.prototype.jqlAggregateMetric = function() {
    return this.getTypedRuleContext(JqlAggregateMetricContext,0);
};

AggregateWindowContext.prototype.WINDOW_SUM = function() {
    return this.getToken(JQLParser.WINDOW_SUM, 0);
};

AggregateWindowContext.prototype.WINDOW = function() {
    return this.getToken(JQLParser.WINDOW, 0);
};
AggregateWindowContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateWindow(this);
	}
};

AggregateWindowContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateWindow(this);
	}
};


function AggregateDiffContext(parser, ctx) {
	JqlAggregateMetricContext.call(this, parser);
    this.controlGrp = null; // JqlAggregateMetricContext;
    this.testGrp = null; // JqlAggregateMetricContext;
    JqlAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateDiffContext.prototype = Object.create(JqlAggregateMetricContext.prototype);
AggregateDiffContext.prototype.constructor = AggregateDiffContext;

JQLParser.AggregateDiffContext = AggregateDiffContext;

AggregateDiffContext.prototype.DIFF = function() {
    return this.getToken(JQLParser.DIFF, 0);
};

AggregateDiffContext.prototype.jqlAggregateMetric = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JqlAggregateMetricContext);
    } else {
        return this.getTypedRuleContext(JqlAggregateMetricContext,i);
    }
};
AggregateDiffContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateDiff(this);
	}
};

AggregateDiffContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateDiff(this);
	}
};


function AggregateDistinctWindowContext(parser, ctx) {
	JqlAggregateMetricContext.call(this, parser);
    JqlAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateDistinctWindowContext.prototype = Object.create(JqlAggregateMetricContext.prototype);
AggregateDistinctWindowContext.prototype.constructor = AggregateDistinctWindowContext;

JQLParser.AggregateDistinctWindowContext = AggregateDistinctWindowContext;

AggregateDistinctWindowContext.prototype.DISTINCT_WINDOW = function() {
    return this.getToken(JQLParser.DISTINCT_WINDOW, 0);
};

AggregateDistinctWindowContext.prototype.NAT = function() {
    return this.getToken(JQLParser.NAT, 0);
};

AggregateDistinctWindowContext.prototype.scopedField = function() {
    return this.getTypedRuleContext(ScopedFieldContext,0);
};

AggregateDistinctWindowContext.prototype.HAVING = function() {
    return this.getToken(JQLParser.HAVING, 0);
};

AggregateDistinctWindowContext.prototype.jqlAggregateFilter = function() {
    return this.getTypedRuleContext(JqlAggregateFilterContext,0);
};
AggregateDistinctWindowContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateDistinctWindow(this);
	}
};

AggregateDistinctWindowContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateDistinctWindow(this);
	}
};


function AggregateMultiplyOrDivideOrModulusContext(parser, ctx) {
	JqlAggregateMetricContext.call(this, parser);
    this.multiply = null; // Token;
    this.divide = null; // Token;
    this.modulus = null; // Token;
    JqlAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateMultiplyOrDivideOrModulusContext.prototype = Object.create(JqlAggregateMetricContext.prototype);
AggregateMultiplyOrDivideOrModulusContext.prototype.constructor = AggregateMultiplyOrDivideOrModulusContext;

JQLParser.AggregateMultiplyOrDivideOrModulusContext = AggregateMultiplyOrDivideOrModulusContext;

AggregateMultiplyOrDivideOrModulusContext.prototype.jqlAggregateMetric = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JqlAggregateMetricContext);
    } else {
        return this.getTypedRuleContext(JqlAggregateMetricContext,i);
    }
};
AggregateMultiplyOrDivideOrModulusContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateMultiplyOrDivideOrModulus(this);
	}
};

AggregateMultiplyOrDivideOrModulusContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateMultiplyOrDivideOrModulus(this);
	}
};


function AggregateNegateContext(parser, ctx) {
	JqlAggregateMetricContext.call(this, parser);
    JqlAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateNegateContext.prototype = Object.create(JqlAggregateMetricContext.prototype);
AggregateNegateContext.prototype.constructor = AggregateNegateContext;

JQLParser.AggregateNegateContext = AggregateNegateContext;

AggregateNegateContext.prototype.jqlAggregateMetric = function() {
    return this.getTypedRuleContext(JqlAggregateMetricContext,0);
};
AggregateNegateContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateNegate(this);
	}
};

AggregateNegateContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateNegate(this);
	}
};


function AggregatePercentileContext(parser, ctx) {
	JqlAggregateMetricContext.call(this, parser);
    JqlAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregatePercentileContext.prototype = Object.create(JqlAggregateMetricContext.prototype);
AggregatePercentileContext.prototype.constructor = AggregatePercentileContext;

JQLParser.AggregatePercentileContext = AggregatePercentileContext;

AggregatePercentileContext.prototype.PERCENTILE = function() {
    return this.getToken(JQLParser.PERCENTILE, 0);
};

AggregatePercentileContext.prototype.scopedField = function() {
    return this.getTypedRuleContext(ScopedFieldContext,0);
};

AggregatePercentileContext.prototype.number = function() {
    return this.getTypedRuleContext(NumberContext,0);
};
AggregatePercentileContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregatePercentile(this);
	}
};

AggregatePercentileContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregatePercentile(this);
	}
};


function AggregateMedianContext(parser, ctx) {
	JqlAggregateMetricContext.call(this, parser);
    JqlAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateMedianContext.prototype = Object.create(JqlAggregateMetricContext.prototype);
AggregateMedianContext.prototype.constructor = AggregateMedianContext;

JQLParser.AggregateMedianContext = AggregateMedianContext;

AggregateMedianContext.prototype.MEDIAN = function() {
    return this.getToken(JQLParser.MEDIAN, 0);
};

AggregateMedianContext.prototype.scopedField = function() {
    return this.getTypedRuleContext(ScopedFieldContext,0);
};
AggregateMedianContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateMedian(this);
	}
};

AggregateMedianContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateMedian(this);
	}
};


function AggregateRatioScorerContext(parser, ctx) {
	JqlAggregateMetricContext.call(this, parser);
    this.controlClcMetric = null; // JqlAggregateMetricContext;
    this.controlImpMetric = null; // JqlAggregateMetricContext;
    this.testClcMetric = null; // JqlAggregateMetricContext;
    this.testImpMetric = null; // JqlAggregateMetricContext;
    JqlAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateRatioScorerContext.prototype = Object.create(JqlAggregateMetricContext.prototype);
AggregateRatioScorerContext.prototype.constructor = AggregateRatioScorerContext;

JQLParser.AggregateRatioScorerContext = AggregateRatioScorerContext;

AggregateRatioScorerContext.prototype.RATIOSCORE = function() {
    return this.getToken(JQLParser.RATIOSCORE, 0);
};

AggregateRatioScorerContext.prototype.jqlAggregateMetric = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JqlAggregateMetricContext);
    } else {
        return this.getTypedRuleContext(JqlAggregateMetricContext,i);
    }
};
AggregateRatioScorerContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateRatioScorer(this);
	}
};

AggregateRatioScorerContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateRatioScorer(this);
	}
};


function AggregateRunningContext(parser, ctx) {
	JqlAggregateMetricContext.call(this, parser);
    JqlAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateRunningContext.prototype = Object.create(JqlAggregateMetricContext.prototype);
AggregateRunningContext.prototype.constructor = AggregateRunningContext;

JQLParser.AggregateRunningContext = AggregateRunningContext;

AggregateRunningContext.prototype.RUNNING = function() {
    return this.getToken(JQLParser.RUNNING, 0);
};

AggregateRunningContext.prototype.jqlAggregateMetric = function() {
    return this.getTypedRuleContext(JqlAggregateMetricContext,0);
};
AggregateRunningContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateRunning(this);
	}
};

AggregateRunningContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateRunning(this);
	}
};


function AggregateRMSErrorContext(parser, ctx) {
	JqlAggregateMetricContext.call(this, parser);
    this.predictedVal = null; // JqlAggregateMetricContext;
    this.actualVal = null; // JqlAggregateMetricContext;
    this.total = null; // JqlAggregateMetricContext;
    this.grouping = null; // JqlDocMetricContext;
    this.lowerLimit = null; // IntegerContext;
    this.upperLimit = null; // IntegerContext;
    this.stepSize = null; // IntegerContext;
    this.useRatio = null; // IdentifierContext;
    JqlAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateRMSErrorContext.prototype = Object.create(JqlAggregateMetricContext.prototype);
AggregateRMSErrorContext.prototype.constructor = AggregateRMSErrorContext;

JQLParser.AggregateRMSErrorContext = AggregateRMSErrorContext;

AggregateRMSErrorContext.prototype.RMSERROR = function() {
    return this.getToken(JQLParser.RMSERROR, 0);
};

AggregateRMSErrorContext.prototype.jqlAggregateMetric = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JqlAggregateMetricContext);
    } else {
        return this.getTypedRuleContext(JqlAggregateMetricContext,i);
    }
};

AggregateRMSErrorContext.prototype.jqlDocMetric = function() {
    return this.getTypedRuleContext(JqlDocMetricContext,0);
};

AggregateRMSErrorContext.prototype.integer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IntegerContext);
    } else {
        return this.getTypedRuleContext(IntegerContext,i);
    }
};

AggregateRMSErrorContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
AggregateRMSErrorContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateRMSError(this);
	}
};

AggregateRMSErrorContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateRMSError(this);
	}
};


function AggregateRatioDiffContext(parser, ctx) {
	JqlAggregateMetricContext.call(this, parser);
    this.controlClcMetric = null; // JqlAggregateMetricContext;
    this.controlImpMetric = null; // JqlAggregateMetricContext;
    this.testClcMetric = null; // JqlAggregateMetricContext;
    this.testImpMetric = null; // JqlAggregateMetricContext;
    JqlAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateRatioDiffContext.prototype = Object.create(JqlAggregateMetricContext.prototype);
AggregateRatioDiffContext.prototype.constructor = AggregateRatioDiffContext;

JQLParser.AggregateRatioDiffContext = AggregateRatioDiffContext;

AggregateRatioDiffContext.prototype.RATIODIFF = function() {
    return this.getToken(JQLParser.RATIODIFF, 0);
};

AggregateRatioDiffContext.prototype.jqlAggregateMetric = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JqlAggregateMetricContext);
    } else {
        return this.getTypedRuleContext(JqlAggregateMetricContext,i);
    }
};
AggregateRatioDiffContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateRatioDiff(this);
	}
};

AggregateRatioDiffContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateRatioDiff(this);
	}
};


function AggregateFieldMaxContext(parser, ctx) {
	JqlAggregateMetricContext.call(this, parser);
    this.aggregate = null; // JqlAggregateMetricContext;
    this.filter = null; // JqlAggregateFilterContext;
    JqlAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateFieldMaxContext.prototype = Object.create(JqlAggregateMetricContext.prototype);
AggregateFieldMaxContext.prototype.constructor = AggregateFieldMaxContext;

JQLParser.AggregateFieldMaxContext = AggregateFieldMaxContext;

AggregateFieldMaxContext.prototype.FIELD_MAX = function() {
    return this.getToken(JQLParser.FIELD_MAX, 0);
};

AggregateFieldMaxContext.prototype.scopedField = function() {
    return this.getTypedRuleContext(ScopedFieldContext,0);
};

AggregateFieldMaxContext.prototype.BY = function() {
    return this.getToken(JQLParser.BY, 0);
};

AggregateFieldMaxContext.prototype.HAVING = function() {
    return this.getToken(JQLParser.HAVING, 0);
};

AggregateFieldMaxContext.prototype.jqlAggregateMetric = function() {
    return this.getTypedRuleContext(JqlAggregateMetricContext,0);
};

AggregateFieldMaxContext.prototype.jqlAggregateFilter = function() {
    return this.getTypedRuleContext(JqlAggregateFilterContext,0);
};
AggregateFieldMaxContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateFieldMax(this);
	}
};

AggregateFieldMaxContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateFieldMax(this);
	}
};


function AggregateMetricFilterContext(parser, ctx) {
	JqlAggregateMetricContext.call(this, parser);
    JqlAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateMetricFilterContext.prototype = Object.create(JqlAggregateMetricContext.prototype);
AggregateMetricFilterContext.prototype.constructor = AggregateMetricFilterContext;

JQLParser.AggregateMetricFilterContext = AggregateMetricFilterContext;

AggregateMetricFilterContext.prototype.M = function() {
    return this.getToken(JQLParser.M, 0);
};

AggregateMetricFilterContext.prototype.jqlAggregateFilter = function() {
    return this.getTypedRuleContext(JqlAggregateFilterContext,0);
};
AggregateMetricFilterContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateMetricFilter(this);
	}
};

AggregateMetricFilterContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateMetricFilter(this);
	}
};


function AggregateDistinctContext(parser, ctx) {
	JqlAggregateMetricContext.call(this, parser);
    JqlAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateDistinctContext.prototype = Object.create(JqlAggregateMetricContext.prototype);
AggregateDistinctContext.prototype.constructor = AggregateDistinctContext;

JQLParser.AggregateDistinctContext = AggregateDistinctContext;

AggregateDistinctContext.prototype.DISTINCT = function() {
    return this.getToken(JQLParser.DISTINCT, 0);
};

AggregateDistinctContext.prototype.scopedField = function() {
    return this.getTypedRuleContext(ScopedFieldContext,0);
};

AggregateDistinctContext.prototype.HAVING = function() {
    return this.getToken(JQLParser.HAVING, 0);
};

AggregateDistinctContext.prototype.jqlAggregateFilter = function() {
    return this.getTypedRuleContext(JqlAggregateFilterContext,0);
};
AggregateDistinctContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateDistinct(this);
	}
};

AggregateDistinctContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateDistinct(this);
	}
};



JQLParser.prototype.jqlAggregateMetric = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new JqlAggregateMetricContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 20;
    this.enterRecursionRule(localctx, 20, JQLParser.RULE_jqlAggregateMetric, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 439;
        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
        switch(la_) {
        case 1:
            localctx = new AggregateIfThenElseContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 179;
            this.match(JQLParser.IF);
            this.state = 180;
            localctx.filter = this.jqlAggregateFilter(0);
            this.state = 181;
            this.match(JQLParser.THEN);
            this.state = 182;
            localctx.trueCase = this.jqlAggregateMetric(0);
            this.state = 183;
            this.match(JQLParser.ELSE);
            this.state = 184;
            localctx.falseCase = this.jqlAggregateMetric(37);
            break;

        case 2:
            localctx = new AggregateNegateContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 186;
            this.match(JQLParser.T__0);
            this.state = 187;
            this.jqlAggregateMetric(8);
            break;

        case 3:
            localctx = new AggregateQualifiedContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 188;
            localctx.field = this.identifier();
            this.state = 189;
            this.match(JQLParser.T__5);
            this.state = 190;
            this.syntacticallyAtomicJqlAggregateMetric();
            break;

        case 4:
            localctx = new AggregateLagContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 192;
            this.match(JQLParser.LAG);
            this.state = 193;
            this.match(JQLParser.T__1);
            this.state = 194;
            this.match(JQLParser.NAT);
            this.state = 195;
            this.match(JQLParser.T__3);
            this.state = 196;
            this.jqlAggregateMetric(0);
            this.state = 197;
            this.match(JQLParser.T__2);
            break;

        case 5:
            localctx = new AggregateRunningContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 199;
            this.match(JQLParser.RUNNING);
            this.state = 200;
            this.match(JQLParser.T__1);
            this.state = 201;
            this.jqlAggregateMetric(0);
            this.state = 202;
            this.match(JQLParser.T__2);
            break;

        case 6:
            localctx = new AggregateParentContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 204;
            this.match(JQLParser.PARENT);
            this.state = 205;
            this.match(JQLParser.T__1);
            this.state = 206;
            this.jqlAggregateMetric(0);
            this.state = 207;
            this.match(JQLParser.T__2);
            break;

        case 7:
            localctx = new AggregateDistinctContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 209;
            this.match(JQLParser.DISTINCT);
            this.state = 210;
            this.match(JQLParser.T__1);
            this.state = 211;
            this.scopedField();
            this.state = 214;
            _la = this._input.LA(1);
            if(_la===JQLParser.HAVING) {
                this.state = 212;
                this.match(JQLParser.HAVING);
                this.state = 213;
                this.jqlAggregateFilter(0);
            }

            this.state = 216;
            this.match(JQLParser.T__2);
            break;

        case 8:
            localctx = new AggregateDistinctWindowContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 218;
            this.match(JQLParser.DISTINCT_WINDOW);
            this.state = 219;
            this.match(JQLParser.T__1);
            this.state = 220;
            this.match(JQLParser.NAT);
            this.state = 221;
            this.match(JQLParser.T__3);
            this.state = 222;
            this.scopedField();
            this.state = 225;
            _la = this._input.LA(1);
            if(_la===JQLParser.HAVING) {
                this.state = 223;
                this.match(JQLParser.HAVING);
                this.state = 224;
                this.jqlAggregateFilter(0);
            }

            this.state = 227;
            this.match(JQLParser.T__2);
            break;

        case 9:
            localctx = new AggregateWindowContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 231;
            switch(this._input.LA(1)) {
            case JQLParser.WINDOW:
                this.state = 229;
                localctx.old = this.match(JQLParser.WINDOW);
                break;
            case JQLParser.WINDOW_SUM:
                this.state = 230;
                this.match(JQLParser.WINDOW_SUM);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 233;
            this.match(JQLParser.T__1);
            this.state = 234;
            this.match(JQLParser.NAT);
            this.state = 235;
            this.match(JQLParser.T__3);
            this.state = 236;
            this.jqlAggregateMetric(0);
            this.state = 237;
            this.match(JQLParser.T__2);
            break;

        case 10:
            localctx = new AggregatePercentileContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 239;
            this.match(JQLParser.PERCENTILE);
            this.state = 240;
            this.match(JQLParser.T__1);
            this.state = 241;
            this.scopedField();
            this.state = 242;
            this.match(JQLParser.T__3);
            this.state = 243;
            this.number();
            this.state = 244;
            this.match(JQLParser.T__2);
            break;

        case 11:
            localctx = new AggregateMedianContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 246;
            this.match(JQLParser.MEDIAN);
            this.state = 247;
            this.match(JQLParser.T__1);
            this.state = 248;
            this.scopedField();
            this.state = 249;
            this.match(JQLParser.T__2);
            break;

        case 12:
            localctx = new AggregatePDiffContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 251;
            this.match(JQLParser.PDIFF);
            this.state = 252;
            this.match(JQLParser.T__1);
            this.state = 253;
            localctx.expected = this.jqlAggregateMetric(0);
            this.state = 254;
            this.match(JQLParser.T__3);
            this.state = 255;
            localctx.actual = this.jqlAggregateMetric(0);
            this.state = 256;
            this.match(JQLParser.T__2);
            break;

        case 13:
            localctx = new AggregateDiffContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 258;
            this.match(JQLParser.DIFF);
            this.state = 259;
            this.match(JQLParser.T__1);
            this.state = 260;
            localctx.controlGrp = this.jqlAggregateMetric(0);
            this.state = 261;
            this.match(JQLParser.T__3);
            this.state = 262;
            localctx.testGrp = this.jqlAggregateMetric(0);
            this.state = 263;
            this.match(JQLParser.T__2);
            break;

        case 14:
            localctx = new AggregateRatioDiffContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 265;
            this.match(JQLParser.RATIODIFF);
            this.state = 266;
            this.match(JQLParser.T__1);
            this.state = 267;
            localctx.controlClcMetric = this.jqlAggregateMetric(0);
            this.state = 268;
            this.match(JQLParser.T__3);
            this.state = 269;
            localctx.controlImpMetric = this.jqlAggregateMetric(0);
            this.state = 270;
            this.match(JQLParser.T__3);
            this.state = 271;
            localctx.testClcMetric = this.jqlAggregateMetric(0);
            this.state = 272;
            this.match(JQLParser.T__3);
            this.state = 273;
            localctx.testImpMetric = this.jqlAggregateMetric(0);
            this.state = 274;
            this.match(JQLParser.T__2);
            break;

        case 15:
            localctx = new AggregateSingleScorerContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 276;
            this.match(JQLParser.SINGLESCORE);
            this.state = 277;
            this.match(JQLParser.T__1);
            this.state = 278;
            localctx.controlGrp = this.jqlAggregateMetric(0);
            this.state = 279;
            this.match(JQLParser.T__3);
            this.state = 280;
            localctx.testGrp = this.jqlAggregateMetric(0);
            this.state = 281;
            this.match(JQLParser.T__2);
            break;

        case 16:
            localctx = new AggregateRatioScorerContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 283;
            this.match(JQLParser.RATIOSCORE);
            this.state = 284;
            this.match(JQLParser.T__1);
            this.state = 285;
            localctx.controlClcMetric = this.jqlAggregateMetric(0);
            this.state = 286;
            this.match(JQLParser.T__3);
            this.state = 287;
            localctx.controlImpMetric = this.jqlAggregateMetric(0);
            this.state = 288;
            this.match(JQLParser.T__3);
            this.state = 289;
            localctx.testClcMetric = this.jqlAggregateMetric(0);
            this.state = 290;
            this.match(JQLParser.T__3);
            this.state = 291;
            localctx.testImpMetric = this.jqlAggregateMetric(0);
            this.state = 292;
            this.match(JQLParser.T__2);
            break;

        case 17:
            localctx = new AggregateRMSErrorContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 294;
            this.match(JQLParser.RMSERROR);
            this.state = 295;
            this.match(JQLParser.T__1);
            this.state = 296;
            localctx.predictedVal = this.jqlAggregateMetric(0);
            this.state = 297;
            this.match(JQLParser.T__3);
            this.state = 298;
            localctx.actualVal = this.jqlAggregateMetric(0);
            this.state = 299;
            this.match(JQLParser.T__3);
            this.state = 300;
            localctx.total = this.jqlAggregateMetric(0);
            this.state = 301;
            this.match(JQLParser.T__3);
            this.state = 302;
            localctx.grouping = this.jqlDocMetric(0);
            this.state = 303;
            this.match(JQLParser.T__3);
            this.state = 304;
            localctx.lowerLimit = this.integer();
            this.state = 305;
            this.match(JQLParser.T__3);
            this.state = 306;
            localctx.upperLimit = this.integer();
            this.state = 307;
            this.match(JQLParser.T__3);
            this.state = 308;
            localctx.stepSize = this.integer();
            this.state = 311;
            _la = this._input.LA(1);
            if(_la===JQLParser.T__3) {
                this.state = 309;
                this.match(JQLParser.T__3);
                this.state = 310;
                localctx.useRatio = this.identifier();
            }

            this.state = 313;
            this.match(JQLParser.T__2);
            break;

        case 18:
            localctx = new AggregateAvgContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 315;
            this.match(JQLParser.AVG);
            this.state = 316;
            this.match(JQLParser.T__1);
            this.state = 317;
            this.jqlAggregateMetric(0);
            this.state = 318;
            this.match(JQLParser.T__2);
            break;

        case 19:
            localctx = new AggregateVarianceContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 320;
            this.match(JQLParser.VARIANCE);
            this.state = 321;
            this.match(JQLParser.T__1);
            this.state = 322;
            this.jqlDocMetric(0);
            this.state = 323;
            this.match(JQLParser.T__2);
            break;

        case 20:
            localctx = new AggregateStandardDeviationContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 325;
            this.match(JQLParser.STDEV);
            this.state = 326;
            this.match(JQLParser.T__1);
            this.state = 327;
            this.jqlDocMetric(0);
            this.state = 328;
            this.match(JQLParser.T__2);
            break;

        case 21:
            localctx = new AggregateLogContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 330;
            this.match(JQLParser.LOG);
            this.state = 331;
            this.match(JQLParser.T__1);
            this.state = 332;
            this.jqlAggregateMetric(0);
            this.state = 333;
            this.match(JQLParser.T__2);
            break;

        case 22:
            localctx = new AggregateAbsContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 335;
            this.match(JQLParser.ABS);
            this.state = 336;
            this.match(JQLParser.T__1);
            this.state = 337;
            this.jqlAggregateMetric(0);
            this.state = 338;
            this.match(JQLParser.T__2);
            break;

        case 23:
            localctx = new AggregateFieldMinContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 340;
            this.match(JQLParser.FIELD_MIN);
            this.state = 341;
            this.match(JQLParser.T__1);
            this.state = 342;
            this.scopedField();
            this.state = 345;
            _la = this._input.LA(1);
            if(_la===JQLParser.BY) {
                this.state = 343;
                this.match(JQLParser.BY);
                this.state = 344;
                localctx.aggregate = this.jqlAggregateMetric(0);
            }

            this.state = 349;
            _la = this._input.LA(1);
            if(_la===JQLParser.HAVING) {
                this.state = 347;
                this.match(JQLParser.HAVING);
                this.state = 348;
                localctx.filter = this.jqlAggregateFilter(0);
            }

            this.state = 351;
            this.match(JQLParser.T__2);
            break;

        case 24:
            localctx = new AggregateFieldMaxContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 353;
            this.match(JQLParser.FIELD_MAX);
            this.state = 354;
            this.match(JQLParser.T__1);
            this.state = 355;
            this.scopedField();
            this.state = 358;
            _la = this._input.LA(1);
            if(_la===JQLParser.BY) {
                this.state = 356;
                this.match(JQLParser.BY);
                this.state = 357;
                localctx.aggregate = this.jqlAggregateMetric(0);
            }

            this.state = 362;
            _la = this._input.LA(1);
            if(_la===JQLParser.HAVING) {
                this.state = 360;
                this.match(JQLParser.HAVING);
                this.state = 361;
                localctx.filter = this.jqlAggregateFilter(0);
            }

            this.state = 364;
            this.match(JQLParser.T__2);
            break;

        case 25:
            localctx = new AggregateMetricMinContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 366;
            this.match(JQLParser.MIN);
            this.state = 367;
            this.match(JQLParser.T__1);
            this.state = 368;
            localctx._jqlAggregateMetric = this.jqlAggregateMetric(0);
            localctx.metrics.push(localctx._jqlAggregateMetric);
            this.state = 373;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===JQLParser.T__3) {
                this.state = 369;
                this.match(JQLParser.T__3);
                this.state = 370;
                localctx._jqlAggregateMetric = this.jqlAggregateMetric(0);
                localctx.metrics.push(localctx._jqlAggregateMetric);
                this.state = 375;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 376;
            this.match(JQLParser.T__2);
            break;

        case 26:
            localctx = new AggregateMetricMaxContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 378;
            this.match(JQLParser.MAX);
            this.state = 379;
            this.match(JQLParser.T__1);
            this.state = 380;
            localctx._jqlAggregateMetric = this.jqlAggregateMetric(0);
            localctx.metrics.push(localctx._jqlAggregateMetric);
            this.state = 385;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===JQLParser.T__3) {
                this.state = 381;
                this.match(JQLParser.T__3);
                this.state = 382;
                localctx._jqlAggregateMetric = this.jqlAggregateMetric(0);
                localctx.metrics.push(localctx._jqlAggregateMetric);
                this.state = 387;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 388;
            this.match(JQLParser.T__2);
            break;

        case 27:
            localctx = new AggregateSumAcrossContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 390;
            this.match(JQLParser.SUM_OVER);
            this.state = 391;
            this.match(JQLParser.T__1);
            this.state = 392;
            this.groupByElement(false);
            this.state = 393;
            this.match(JQLParser.T__3);
            this.state = 394;
            this.jqlAggregateMetric(0);
            this.state = 395;
            this.match(JQLParser.T__2);
            break;

        case 28:
            localctx = new AggregateSumAcross2Context(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 397;
            this.match(JQLParser.SUM_OVER);
            this.state = 398;
            this.match(JQLParser.T__1);
            this.state = 399;
            localctx.field = this.scopedField();
            this.state = 402;
            _la = this._input.LA(1);
            if(_la===JQLParser.HAVING) {
                this.state = 400;
                this.match(JQLParser.HAVING);
                this.state = 401;
                this.jqlAggregateFilter(0);
            }

            this.state = 404;
            this.match(JQLParser.T__3);
            this.state = 405;
            this.jqlAggregateMetric(0);
            this.state = 406;
            this.match(JQLParser.T__2);
            break;

        case 29:
            localctx = new AggregateAverageAcrossContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 408;
            this.match(JQLParser.AVG_OVER);
            this.state = 409;
            this.match(JQLParser.T__1);
            this.state = 410;
            localctx.field = this.scopedField();
            this.state = 418;
            switch (this._input.LA(1)) {
            case JQLParser.T__6:
            	this.state = 411;
            	localctx.havingBrackets = this.match(JQLParser.T__6);
            	this.state = 412;
            	this.match(JQLParser.HAVING);
            	this.state = 413;
            	this.jqlAggregateFilter(0);
            	this.state = 414;
            	this.match(JQLParser.T__7);
            	break;
            case JQLParser.HAVING:
            	this.state = 416;
            	this.match(JQLParser.HAVING);
            	this.state = 417;
            	this.jqlAggregateFilter(0);
            	break;
            case JQLParser.T__3:
            	break;
            default:
            	throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 420;
            this.match(JQLParser.T__3);
            this.state = 421;
            this.jqlAggregateMetric(0);
            this.state = 422;
            this.match(JQLParser.T__2);
            break;

        case 30:
            localctx = new AggregateMetricFilterContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 424;
            this.match(JQLParser.M);
            this.state = 425;
            this.match(JQLParser.T__1);
            this.state = 426;
            this.jqlAggregateFilter(0);
            this.state = 427;
            this.match(JQLParser.T__2);
            break;

        case 31:
            localctx = new AggregateDocMetricAtomContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 429;
            this.jqlDocMetricAtom();
            break;

        case 32:
            localctx = new AggregateSumContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 430;
            this.match(JQLParser.T__6);
            this.state = 431;
            this.jqlDocMetric(0);
            this.state = 432;
            this.match(JQLParser.T__7);
            break;

        case 33:
            localctx = new AggregateParensContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 434;
            this.match(JQLParser.T__1);
            this.state = 435;
            this.jqlAggregateMetric(0);
            this.state = 436;
            this.match(JQLParser.T__2);
            break;

        case 34:
            localctx = new SyntacticallyAtomicAggregateMetricContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 438;
            this.syntacticallyAtomicJqlAggregateMetric();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 462;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,27,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 460;
                var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new AggregatePowerContext(this, new JqlAggregateMetricContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JQLParser.RULE_jqlAggregateMetric);
                    this.state = 441;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 442;
                    this.match(JQLParser.T__8);
                    this.state = 443;
                    this.jqlAggregateMetric(7);
                    break;

                case 2:
                    localctx = new AggregateMultiplyOrDivideOrModulusContext(this, new JqlAggregateMetricContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JQLParser.RULE_jqlAggregateMetric);
                    this.state = 444;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 448;
                    switch(this._input.LA(1)) {
                    case JQLParser.T__9:
                        this.state = 445;
                        localctx.multiply = this.match(JQLParser.T__9);
                        break;
                    case JQLParser.T__4:
                        this.state = 446;
                        localctx.divide = this.match(JQLParser.T__4);
                        break;
                    case JQLParser.T__10:
                        this.state = 447;
                        localctx.modulus = this.match(JQLParser.T__10);
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    this.state = 450;
                    this.jqlAggregateMetric(7);
                    break;

                case 3:
                    localctx = new AggregatePlusOrMinusContext(this, new JqlAggregateMetricContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JQLParser.RULE_jqlAggregateMetric);
                    this.state = 451;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 454;
                    switch(this._input.LA(1)) {
                    case JQLParser.T__11:
                        this.state = 452;
                        localctx.plus = this.match(JQLParser.T__11);
                        break;
                    case JQLParser.T__0:
                        this.state = 453;
                        localctx.minus = this.match(JQLParser.T__0);
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    this.state = 456;
                    this.jqlAggregateMetric(6);
                    break;

                case 4:
                    localctx = new AggregateNamedContext(this, new JqlAggregateMetricContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JQLParser.RULE_jqlAggregateMetric);
                    this.state = 457;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 458;
                    this.match(JQLParser.AS);
                    this.state = 459;
                    localctx.name = this.identifier();
                    break;

                } 
            }
            this.state = 464;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,27,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ScopedFieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_scopedField;
    this.field = null; // IdentifierContext
    this.oneScope = null; // IdentifierContext
    this._identifier = null; // IdentifierContext
    this.manyScope = []; // of IdentifierContexts
    return this;
}

ScopedFieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ScopedFieldContext.prototype.constructor = ScopedFieldContext;

ScopedFieldContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

ScopedFieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterScopedField(this);
	}
};

ScopedFieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitScopedField(this);
	}
};




JQLParser.ScopedFieldContext = ScopedFieldContext;

JQLParser.prototype.scopedField = function() {

    var localctx = new ScopedFieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, JQLParser.RULE_scopedField);
    var _la = 0; // Token type
    try {
        this.state = 483;
        var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 465;
            localctx.field = this.identifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 466;
            localctx.oneScope = this.identifier();
            this.state = 467;
            this.match(JQLParser.T__5);
            this.state = 468;
            localctx.field = this.identifier();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 470;
            this.match(JQLParser.T__6);
            this.state = 471;
            localctx._identifier = this.identifier();
            localctx.manyScope.push(localctx._identifier);
            this.state = 476;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===JQLParser.T__3) {
                this.state = 472;
                this.match(JQLParser.T__3);
                this.state = 473;
                localctx._identifier = this.identifier();
                localctx.manyScope.push(localctx._identifier);
                this.state = 478;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 479;
            this.match(JQLParser.T__7);
            this.state = 480;
            this.match(JQLParser.T__5);
            this.state = 481;
            localctx.field = this.identifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SinglyScopedFieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_singlyScopedField;
    this.field = null; // IdentifierContext
    this.oneScope = null; // IdentifierContext
    return this;
}

SinglyScopedFieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SinglyScopedFieldContext.prototype.constructor = SinglyScopedFieldContext;

SinglyScopedFieldContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

SinglyScopedFieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterSinglyScopedField(this);
	}
};

SinglyScopedFieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitSinglyScopedField(this);
	}
};




JQLParser.SinglyScopedFieldContext = SinglyScopedFieldContext;

JQLParser.prototype.singlyScopedField = function() {

    var localctx = new SinglyScopedFieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, JQLParser.RULE_singlyScopedField);
    try {
        this.state = 490;
        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 485;
            localctx.field = this.identifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 486;
            localctx.oneScope = this.identifier();
            this.state = 487;
            this.match(JQLParser.T__5);
            this.state = 488;
            localctx.field = this.identifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SinglyScopedFieldTerminalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_singlyScopedFieldTerminal;
    return this;
}

SinglyScopedFieldTerminalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SinglyScopedFieldTerminalContext.prototype.constructor = SinglyScopedFieldTerminalContext;

SinglyScopedFieldTerminalContext.prototype.singlyScopedField = function() {
    return this.getTypedRuleContext(SinglyScopedFieldContext,0);
};

SinglyScopedFieldTerminalContext.prototype.EOF = function() {
    return this.getToken(JQLParser.EOF, 0);
};

SinglyScopedFieldTerminalContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterSinglyScopedFieldTerminal(this);
	}
};

SinglyScopedFieldTerminalContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitSinglyScopedFieldTerminal(this);
	}
};




JQLParser.SinglyScopedFieldTerminalContext = SinglyScopedFieldTerminalContext;

JQLParser.prototype.singlyScopedFieldTerminal = function() {

    var localctx = new SinglyScopedFieldTerminalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, JQLParser.RULE_singlyScopedFieldTerminal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 492;
        this.singlyScopedField();
        this.state = 493;
        this.match(JQLParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SyntacticallyAtomicJqlAggregateMetricContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_syntacticallyAtomicJqlAggregateMetric;
    return this;
}

SyntacticallyAtomicJqlAggregateMetricContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SyntacticallyAtomicJqlAggregateMetricContext.prototype.constructor = SyntacticallyAtomicJqlAggregateMetricContext;


 
SyntacticallyAtomicJqlAggregateMetricContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function AggregateConstantContext(parser, ctx) {
	SyntacticallyAtomicJqlAggregateMetricContext.call(this, parser);
    SyntacticallyAtomicJqlAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateConstantContext.prototype = Object.create(SyntacticallyAtomicJqlAggregateMetricContext.prototype);
AggregateConstantContext.prototype.constructor = AggregateConstantContext;

JQLParser.AggregateConstantContext = AggregateConstantContext;

AggregateConstantContext.prototype.number = function() {
    return this.getTypedRuleContext(NumberContext,0);
};
AggregateConstantContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateConstant(this);
	}
};

AggregateConstantContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateConstant(this);
	}
};


function AggregateDocMetricAtom2Context(parser, ctx) {
	SyntacticallyAtomicJqlAggregateMetricContext.call(this, parser);
    SyntacticallyAtomicJqlAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateDocMetricAtom2Context.prototype = Object.create(SyntacticallyAtomicJqlAggregateMetricContext.prototype);
AggregateDocMetricAtom2Context.prototype.constructor = AggregateDocMetricAtom2Context;

JQLParser.AggregateDocMetricAtom2Context = AggregateDocMetricAtom2Context;

AggregateDocMetricAtom2Context.prototype.jqlSyntacticallyAtomicDocMetricAtom = function() {
    return this.getTypedRuleContext(JqlSyntacticallyAtomicDocMetricAtomContext,0);
};
AggregateDocMetricAtom2Context.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateDocMetricAtom2(this);
	}
};

AggregateDocMetricAtom2Context.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateDocMetricAtom2(this);
	}
};


function AggregateCountsContext(parser, ctx) {
	SyntacticallyAtomicJqlAggregateMetricContext.call(this, parser);
    SyntacticallyAtomicJqlAggregateMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateCountsContext.prototype = Object.create(SyntacticallyAtomicJqlAggregateMetricContext.prototype);
AggregateCountsContext.prototype.constructor = AggregateCountsContext;

JQLParser.AggregateCountsContext = AggregateCountsContext;

AggregateCountsContext.prototype.COUNT = function() {
    return this.getToken(JQLParser.COUNT, 0);
};
AggregateCountsContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateCounts(this);
	}
};

AggregateCountsContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateCounts(this);
	}
};



JQLParser.SyntacticallyAtomicJqlAggregateMetricContext = SyntacticallyAtomicJqlAggregateMetricContext;

JQLParser.prototype.syntacticallyAtomicJqlAggregateMetric = function() {

    var localctx = new SyntacticallyAtomicJqlAggregateMetricContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, JQLParser.RULE_syntacticallyAtomicJqlAggregateMetric);
    try {
        this.state = 500;
        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
        switch(la_) {
        case 1:
            localctx = new AggregateCountsContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 495;
            this.match(JQLParser.COUNT);
            this.state = 496;
            this.match(JQLParser.T__1);
            this.state = 497;
            this.match(JQLParser.T__2);
            break;

        case 2:
            localctx = new AggregateConstantContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 498;
            this.number();
            break;

        case 3:
            localctx = new AggregateDocMetricAtom2Context(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 499;
            this.jqlSyntacticallyAtomicDocMetricAtom();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AggregateFilterContext(parser, parent, invokingState, useLegacy) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_aggregateFilter;
    this.useLegacy = null
    this.useLegacy = useLegacy || null;
    return this;
}

AggregateFilterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AggregateFilterContext.prototype.constructor = AggregateFilterContext;

AggregateFilterContext.prototype.jqlAggregateFilter = function() {
    return this.getTypedRuleContext(JqlAggregateFilterContext,0);
};

AggregateFilterContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateFilter(this);
	}
};

AggregateFilterContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateFilter(this);
	}
};




JQLParser.AggregateFilterContext = AggregateFilterContext;

JQLParser.prototype.aggregateFilter = function(useLegacy) {

    var localctx = new AggregateFilterContext(this, this._ctx, this.state, useLegacy);
    this.enterRule(localctx, 30, JQLParser.RULE_aggregateFilter);
    try {
        this.state = 506;
        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 502;
            if (!( localctx.useLegacy)) {
                throw new antlr4.error.FailedPredicateException(this, "$ctx.useLegacy");
            }
            this.state = 503;
            if (!( false)) {
                throw new antlr4.error.FailedPredicateException(this, "false");
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 504;
            if (!( !localctx.useLegacy)) {
                throw new antlr4.error.FailedPredicateException(this, "!$ctx.useLegacy");
            }
            this.state = 505;
            this.jqlAggregateFilter(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AggregateFilterEofContext(parser, parent, invokingState, useLegacy) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_aggregateFilterEof;
    this.useLegacy = null
    this.useLegacy = useLegacy || null;
    return this;
}

AggregateFilterEofContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AggregateFilterEofContext.prototype.constructor = AggregateFilterEofContext;

AggregateFilterEofContext.prototype.aggregateFilter = function() {
    return this.getTypedRuleContext(AggregateFilterContext,0);
};

AggregateFilterEofContext.prototype.EOF = function() {
    return this.getToken(JQLParser.EOF, 0);
};

AggregateFilterEofContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateFilterEof(this);
	}
};

AggregateFilterEofContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateFilterEof(this);
	}
};




JQLParser.AggregateFilterEofContext = AggregateFilterEofContext;

JQLParser.prototype.aggregateFilterEof = function(useLegacy) {

    var localctx = new AggregateFilterEofContext(this, this._ctx, this.state, useLegacy);
    this.enterRule(localctx, 32, JQLParser.RULE_aggregateFilterEof);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 508;
        this.aggregateFilter(localctx.useLegacy);
        this.state = 509;
        this.match(JQLParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function JqlAggregateFilterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_jqlAggregateFilter;
    return this;
}

JqlAggregateFilterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JqlAggregateFilterContext.prototype.constructor = JqlAggregateFilterContext;


 
JqlAggregateFilterContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function AggregateOrContext(parser, ctx) {
	JqlAggregateFilterContext.call(this, parser);
    JqlAggregateFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateOrContext.prototype = Object.create(JqlAggregateFilterContext.prototype);
AggregateOrContext.prototype.constructor = AggregateOrContext;

JQLParser.AggregateOrContext = AggregateOrContext;

AggregateOrContext.prototype.jqlAggregateFilter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JqlAggregateFilterContext);
    } else {
        return this.getTypedRuleContext(JqlAggregateFilterContext,i);
    }
};

AggregateOrContext.prototype.OR = function() {
    return this.getToken(JQLParser.OR, 0);
};
AggregateOrContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateOr(this);
	}
};

AggregateOrContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateOr(this);
	}
};


function AggregateNotContext(parser, ctx) {
	JqlAggregateFilterContext.call(this, parser);
    JqlAggregateFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateNotContext.prototype = Object.create(JqlAggregateFilterContext.prototype);
AggregateNotContext.prototype.constructor = AggregateNotContext;

JQLParser.AggregateNotContext = AggregateNotContext;

AggregateNotContext.prototype.jqlAggregateFilter = function() {
    return this.getTypedRuleContext(JqlAggregateFilterContext,0);
};

AggregateNotContext.prototype.NOT = function() {
    return this.getToken(JQLParser.NOT, 0);
};
AggregateNotContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateNot(this);
	}
};

AggregateNotContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateNot(this);
	}
};


function AggregateTermRegexContext(parser, ctx) {
	JqlAggregateFilterContext.call(this, parser);
    JqlAggregateFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateTermRegexContext.prototype = Object.create(JqlAggregateFilterContext.prototype);
AggregateTermRegexContext.prototype.constructor = AggregateTermRegexContext;

JQLParser.AggregateTermRegexContext = AggregateTermRegexContext;

AggregateTermRegexContext.prototype.STRING_LITERAL = function() {
    return this.getToken(JQLParser.STRING_LITERAL, 0);
};
AggregateTermRegexContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateTermRegex(this);
	}
};

AggregateTermRegexContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateTermRegex(this);
	}
};


function AggregateRegexContext(parser, ctx) {
	JqlAggregateFilterContext.call(this, parser);
    this.field = null; // IdentifierContext;
    JqlAggregateFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateRegexContext.prototype = Object.create(JqlAggregateFilterContext.prototype);
AggregateRegexContext.prototype.constructor = AggregateRegexContext;

JQLParser.AggregateRegexContext = AggregateRegexContext;

AggregateRegexContext.prototype.STRING_LITERAL = function() {
    return this.getToken(JQLParser.STRING_LITERAL, 0);
};

AggregateRegexContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
AggregateRegexContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateRegex(this);
	}
};

AggregateRegexContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateRegex(this);
	}
};


function AggregateFalseContext(parser, ctx) {
	JqlAggregateFilterContext.call(this, parser);
    JqlAggregateFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateFalseContext.prototype = Object.create(JqlAggregateFilterContext.prototype);
AggregateFalseContext.prototype.constructor = AggregateFalseContext;

JQLParser.AggregateFalseContext = AggregateFalseContext;

AggregateFalseContext.prototype.FALSE = function() {
    return this.getToken(JQLParser.FALSE, 0);
};
AggregateFalseContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateFalse(this);
	}
};

AggregateFalseContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateFalse(this);
	}
};


function AggregateTermIsContext(parser, ctx) {
	JqlAggregateFilterContext.call(this, parser);
    JqlAggregateFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateTermIsContext.prototype = Object.create(JqlAggregateFilterContext.prototype);
AggregateTermIsContext.prototype.constructor = AggregateTermIsContext;

JQLParser.AggregateTermIsContext = AggregateTermIsContext;

AggregateTermIsContext.prototype.jqlTermVal = function() {
    return this.getTypedRuleContext(JqlTermValContext,0);
};
AggregateTermIsContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateTermIs(this);
	}
};

AggregateTermIsContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateTermIs(this);
	}
};


function AggregateNotRegexContext(parser, ctx) {
	JqlAggregateFilterContext.call(this, parser);
    this.field = null; // IdentifierContext;
    JqlAggregateFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateNotRegexContext.prototype = Object.create(JqlAggregateFilterContext.prototype);
AggregateNotRegexContext.prototype.constructor = AggregateNotRegexContext;

JQLParser.AggregateNotRegexContext = AggregateNotRegexContext;

AggregateNotRegexContext.prototype.STRING_LITERAL = function() {
    return this.getToken(JQLParser.STRING_LITERAL, 0);
};

AggregateNotRegexContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
AggregateNotRegexContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateNotRegex(this);
	}
};

AggregateNotRegexContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateNotRegex(this);
	}
};


function AggregateTrueContext(parser, ctx) {
	JqlAggregateFilterContext.call(this, parser);
    JqlAggregateFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateTrueContext.prototype = Object.create(JqlAggregateFilterContext.prototype);
AggregateTrueContext.prototype.constructor = AggregateTrueContext;

JQLParser.AggregateTrueContext = AggregateTrueContext;

AggregateTrueContext.prototype.TRUE = function() {
    return this.getToken(JQLParser.TRUE, 0);
};
AggregateTrueContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateTrue(this);
	}
};

AggregateTrueContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateTrue(this);
	}
};


function AggregateFilterParensContext(parser, ctx) {
	JqlAggregateFilterContext.call(this, parser);
    JqlAggregateFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateFilterParensContext.prototype = Object.create(JqlAggregateFilterContext.prototype);
AggregateFilterParensContext.prototype.constructor = AggregateFilterParensContext;

JQLParser.AggregateFilterParensContext = AggregateFilterParensContext;

AggregateFilterParensContext.prototype.jqlAggregateFilter = function() {
    return this.getTypedRuleContext(JqlAggregateFilterContext,0);
};
AggregateFilterParensContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateFilterParens(this);
	}
};

AggregateFilterParensContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateFilterParens(this);
	}
};


function AggregateAndContext(parser, ctx) {
	JqlAggregateFilterContext.call(this, parser);
    JqlAggregateFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateAndContext.prototype = Object.create(JqlAggregateFilterContext.prototype);
AggregateAndContext.prototype.constructor = AggregateAndContext;

JQLParser.AggregateAndContext = AggregateAndContext;

AggregateAndContext.prototype.jqlAggregateFilter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JqlAggregateFilterContext);
    } else {
        return this.getTypedRuleContext(JqlAggregateFilterContext,i);
    }
};

AggregateAndContext.prototype.AND = function() {
    return this.getToken(JQLParser.AND, 0);
};
AggregateAndContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateAnd(this);
	}
};

AggregateAndContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateAnd(this);
	}
};


function AggregateMetricInequalityContext(parser, ctx) {
	JqlAggregateFilterContext.call(this, parser);
    this.op = null; // Token;
    JqlAggregateFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateMetricInequalityContext.prototype = Object.create(JqlAggregateFilterContext.prototype);
AggregateMetricInequalityContext.prototype.constructor = AggregateMetricInequalityContext;

JQLParser.AggregateMetricInequalityContext = AggregateMetricInequalityContext;

AggregateMetricInequalityContext.prototype.jqlAggregateMetric = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JqlAggregateMetricContext);
    } else {
        return this.getTypedRuleContext(JqlAggregateMetricContext,i);
    }
};
AggregateMetricInequalityContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAggregateMetricInequality(this);
	}
};

AggregateMetricInequalityContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAggregateMetricInequality(this);
	}
};



JQLParser.prototype.jqlAggregateFilter = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new JqlAggregateFilterContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 34;
    this.enterRecursionRule(localctx, 34, JQLParser.RULE_jqlAggregateFilter, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 543;
        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
        switch(la_) {
        case 1:
            localctx = new AggregateNotContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 512;
            this.match(JQLParser.T__21);
            this.state = 513;
            this.jqlAggregateFilter(7);
            break;

        case 2:
            localctx = new AggregateRegexContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 514;
            localctx.field = this.identifier();
            this.state = 515;
            this.match(JQLParser.T__12);
            this.state = 516;
            this.match(JQLParser.STRING_LITERAL);
            break;

        case 3:
            localctx = new AggregateNotRegexContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 518;
            localctx.field = this.identifier();
            this.state = 519;
            this.match(JQLParser.T__13);
            this.state = 520;
            this.match(JQLParser.STRING_LITERAL);
            break;

        case 4:
            localctx = new AggregateTermIsContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 522;
            this.match(JQLParser.T__14);
            this.state = 523;
            this.match(JQLParser.T__15);
            this.state = 524;
            this.jqlTermVal();
            break;

        case 5:
            localctx = new AggregateTermRegexContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 525;
            this.match(JQLParser.T__14);
            this.state = 526;
            this.match(JQLParser.T__12);
            this.state = 527;
            this.match(JQLParser.STRING_LITERAL);
            break;

        case 6:
            localctx = new AggregateMetricInequalityContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 528;
            this.jqlAggregateMetric(0);
            this.state = 529;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JQLParser.T__15) | (1 << JQLParser.T__16) | (1 << JQLParser.T__17) | (1 << JQLParser.T__18) | (1 << JQLParser.T__19) | (1 << JQLParser.T__20))) !== 0))) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 530;
            this.jqlAggregateMetric(0);
            break;

        case 7:
            localctx = new AggregateNotContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 532;
            this.match(JQLParser.NOT);
            this.state = 533;
            this.match(JQLParser.T__1);
            this.state = 534;
            this.jqlAggregateFilter(0);
            this.state = 535;
            this.match(JQLParser.T__2);
            break;

        case 8:
            localctx = new AggregateFilterParensContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 537;
            this.match(JQLParser.T__1);
            this.state = 538;
            this.jqlAggregateFilter(0);
            this.state = 539;
            this.match(JQLParser.T__2);
            break;

        case 9:
            localctx = new AggregateTrueContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 541;
            this.match(JQLParser.TRUE);
            break;

        case 10:
            localctx = new AggregateFalseContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 542;
            this.match(JQLParser.FALSE);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 553;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,35,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 551;
                var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new AggregateAndContext(this, new JqlAggregateFilterContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JQLParser.RULE_jqlAggregateFilter);
                    this.state = 545;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 546;
                    _la = this._input.LA(1);
                    if(!(_la===JQLParser.T__22 || _la===JQLParser.AND)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                        this.consume();
                    }
                    this.state = 547;
                    this.jqlAggregateFilter(6);
                    break;

                case 2:
                    localctx = new AggregateOrContext(this, new JqlAggregateFilterContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JQLParser.RULE_jqlAggregateFilter);
                    this.state = 548;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 549;
                    _la = this._input.LA(1);
                    if(!(_la===JQLParser.T__23 || _la===JQLParser.OR)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                        this.consume();
                    }
                    this.state = 550;
                    this.jqlAggregateFilter(5);
                    break;

                } 
            }
            this.state = 555;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,35,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function JqlSyntacticallyAtomicDocMetricAtomContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_jqlSyntacticallyAtomicDocMetricAtom;
    return this;
}

JqlSyntacticallyAtomicDocMetricAtomContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JqlSyntacticallyAtomicDocMetricAtomContext.prototype.constructor = JqlSyntacticallyAtomicDocMetricAtomContext;


 
JqlSyntacticallyAtomicDocMetricAtomContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function DocMetricAtomRawFieldContext(parser, ctx) {
	JqlSyntacticallyAtomicDocMetricAtomContext.call(this, parser);
    JqlSyntacticallyAtomicDocMetricAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocMetricAtomRawFieldContext.prototype = Object.create(JqlSyntacticallyAtomicDocMetricAtomContext.prototype);
DocMetricAtomRawFieldContext.prototype.constructor = DocMetricAtomRawFieldContext;

JQLParser.DocMetricAtomRawFieldContext = DocMetricAtomRawFieldContext;

DocMetricAtomRawFieldContext.prototype.singlyScopedField = function() {
    return this.getTypedRuleContext(SinglyScopedFieldContext,0);
};
DocMetricAtomRawFieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocMetricAtomRawField(this);
	}
};

DocMetricAtomRawFieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocMetricAtomRawField(this);
	}
};



JQLParser.JqlSyntacticallyAtomicDocMetricAtomContext = JqlSyntacticallyAtomicDocMetricAtomContext;

JQLParser.prototype.jqlSyntacticallyAtomicDocMetricAtom = function() {

    var localctx = new JqlSyntacticallyAtomicDocMetricAtomContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, JQLParser.RULE_jqlSyntacticallyAtomicDocMetricAtom);
    try {
        localctx = new DocMetricAtomRawFieldContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 556;
        this.singlyScopedField();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LegacyDocMetricAtomContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_legacyDocMetricAtom;
    return this;
}

LegacyDocMetricAtomContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LegacyDocMetricAtomContext.prototype.constructor = LegacyDocMetricAtomContext;


 
LegacyDocMetricAtomContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function LegacyDocMetricAtomHasntStringContext(parser, ctx) {
	LegacyDocMetricAtomContext.call(this, parser);
    this.field = null; // IdentifierContext;
    this.term = null; // Token;
    LegacyDocMetricAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyDocMetricAtomHasntStringContext.prototype = Object.create(LegacyDocMetricAtomContext.prototype);
LegacyDocMetricAtomHasntStringContext.prototype.constructor = LegacyDocMetricAtomHasntStringContext;

JQLParser.LegacyDocMetricAtomHasntStringContext = LegacyDocMetricAtomHasntStringContext;

LegacyDocMetricAtomHasntStringContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

LegacyDocMetricAtomHasntStringContext.prototype.STRING_LITERAL = function() {
    return this.getToken(JQLParser.STRING_LITERAL, 0);
};

LegacyDocMetricAtomHasntStringContext.prototype.ID = function() {
    return this.getToken(JQLParser.ID, 0);
};

LegacyDocMetricAtomHasntStringContext.prototype.TIME_UNIT = function() {
    return this.getToken(JQLParser.TIME_UNIT, 0);
};
LegacyDocMetricAtomHasntStringContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyDocMetricAtomHasntString(this);
	}
};

LegacyDocMetricAtomHasntStringContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyDocMetricAtomHasntString(this);
	}
};


function LegacyDocMetricAtomHasIntQuotedContext(parser, ctx) {
	LegacyDocMetricAtomContext.call(this, parser);
    LegacyDocMetricAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyDocMetricAtomHasIntQuotedContext.prototype = Object.create(LegacyDocMetricAtomContext.prototype);
LegacyDocMetricAtomHasIntQuotedContext.prototype.constructor = LegacyDocMetricAtomHasIntQuotedContext;

JQLParser.LegacyDocMetricAtomHasIntQuotedContext = LegacyDocMetricAtomHasIntQuotedContext;

LegacyDocMetricAtomHasIntQuotedContext.prototype.HASINT = function() {
    return this.getToken(JQLParser.HASINT, 0);
};

LegacyDocMetricAtomHasIntQuotedContext.prototype.STRING_LITERAL = function() {
    return this.getToken(JQLParser.STRING_LITERAL, 0);
};
LegacyDocMetricAtomHasIntQuotedContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyDocMetricAtomHasIntQuoted(this);
	}
};

LegacyDocMetricAtomHasIntQuotedContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyDocMetricAtomHasIntQuoted(this);
	}
};


function LegacyDocMetricAtomFloatScaleContext(parser, ctx) {
	LegacyDocMetricAtomContext.call(this, parser);
    this.field = null; // IdentifierContext;
    this.mult = null; // NumberContext;
    this.add = null; // NumberContext;
    LegacyDocMetricAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyDocMetricAtomFloatScaleContext.prototype = Object.create(LegacyDocMetricAtomContext.prototype);
LegacyDocMetricAtomFloatScaleContext.prototype.constructor = LegacyDocMetricAtomFloatScaleContext;

JQLParser.LegacyDocMetricAtomFloatScaleContext = LegacyDocMetricAtomFloatScaleContext;

LegacyDocMetricAtomFloatScaleContext.prototype.FLOATSCALE = function() {
    return this.getToken(JQLParser.FLOATSCALE, 0);
};

LegacyDocMetricAtomFloatScaleContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

LegacyDocMetricAtomFloatScaleContext.prototype.number = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NumberContext);
    } else {
        return this.getTypedRuleContext(NumberContext,i);
    }
};
LegacyDocMetricAtomFloatScaleContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyDocMetricAtomFloatScale(this);
	}
};

LegacyDocMetricAtomFloatScaleContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyDocMetricAtomFloatScale(this);
	}
};


function LegacyDocMetricAtomHasStringQuotedContext(parser, ctx) {
	LegacyDocMetricAtomContext.call(this, parser);
    LegacyDocMetricAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyDocMetricAtomHasStringQuotedContext.prototype = Object.create(LegacyDocMetricAtomContext.prototype);
LegacyDocMetricAtomHasStringQuotedContext.prototype.constructor = LegacyDocMetricAtomHasStringQuotedContext;

JQLParser.LegacyDocMetricAtomHasStringQuotedContext = LegacyDocMetricAtomHasStringQuotedContext;

LegacyDocMetricAtomHasStringQuotedContext.prototype.HASSTR = function() {
    return this.getToken(JQLParser.HASSTR, 0);
};

LegacyDocMetricAtomHasStringQuotedContext.prototype.STRING_LITERAL = function() {
    return this.getToken(JQLParser.STRING_LITERAL, 0);
};
LegacyDocMetricAtomHasStringQuotedContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyDocMetricAtomHasStringQuoted(this);
	}
};

LegacyDocMetricAtomHasStringQuotedContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyDocMetricAtomHasStringQuoted(this);
	}
};


function LegacyDocMetricAtomHasIntFieldContext(parser, ctx) {
	LegacyDocMetricAtomContext.call(this, parser);
    this.field = null; // IdentifierContext;
    LegacyDocMetricAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyDocMetricAtomHasIntFieldContext.prototype = Object.create(LegacyDocMetricAtomContext.prototype);
LegacyDocMetricAtomHasIntFieldContext.prototype.constructor = LegacyDocMetricAtomHasIntFieldContext;

JQLParser.LegacyDocMetricAtomHasIntFieldContext = LegacyDocMetricAtomHasIntFieldContext;

LegacyDocMetricAtomHasIntFieldContext.prototype.HASINTFIELD = function() {
    return this.getToken(JQLParser.HASINTFIELD, 0);
};

LegacyDocMetricAtomHasIntFieldContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
LegacyDocMetricAtomHasIntFieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyDocMetricAtomHasIntField(this);
	}
};

LegacyDocMetricAtomHasIntFieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyDocMetricAtomHasIntField(this);
	}
};


function LegacyDocMetricAtomHasStringContext(parser, ctx) {
	LegacyDocMetricAtomContext.call(this, parser);
    this.field = null; // IdentifierContext;
    this.term = null; // Token;
    LegacyDocMetricAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyDocMetricAtomHasStringContext.prototype = Object.create(LegacyDocMetricAtomContext.prototype);
LegacyDocMetricAtomHasStringContext.prototype.constructor = LegacyDocMetricAtomHasStringContext;

JQLParser.LegacyDocMetricAtomHasStringContext = LegacyDocMetricAtomHasStringContext;

LegacyDocMetricAtomHasStringContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

LegacyDocMetricAtomHasStringContext.prototype.STRING_LITERAL = function() {
    return this.getToken(JQLParser.STRING_LITERAL, 0);
};

LegacyDocMetricAtomHasStringContext.prototype.ID = function() {
    return this.getToken(JQLParser.ID, 0);
};

LegacyDocMetricAtomHasStringContext.prototype.TIME_UNIT = function() {
    return this.getToken(JQLParser.TIME_UNIT, 0);
};

LegacyDocMetricAtomHasStringContext.prototype.HASSTR = function() {
    return this.getToken(JQLParser.HASSTR, 0);
};
LegacyDocMetricAtomHasStringContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyDocMetricAtomHasString(this);
	}
};

LegacyDocMetricAtomHasStringContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyDocMetricAtomHasString(this);
	}
};


function LegacyDocMetricAtomRawFieldContext(parser, ctx) {
	LegacyDocMetricAtomContext.call(this, parser);
    LegacyDocMetricAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyDocMetricAtomRawFieldContext.prototype = Object.create(LegacyDocMetricAtomContext.prototype);
LegacyDocMetricAtomRawFieldContext.prototype.constructor = LegacyDocMetricAtomRawFieldContext;

JQLParser.LegacyDocMetricAtomRawFieldContext = LegacyDocMetricAtomRawFieldContext;

LegacyDocMetricAtomRawFieldContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
LegacyDocMetricAtomRawFieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyDocMetricAtomRawField(this);
	}
};

LegacyDocMetricAtomRawFieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyDocMetricAtomRawField(this);
	}
};


function LegacyDocMetricAtomHasntIntContext(parser, ctx) {
	LegacyDocMetricAtomContext.call(this, parser);
    this.field = null; // IdentifierContext;
    LegacyDocMetricAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyDocMetricAtomHasntIntContext.prototype = Object.create(LegacyDocMetricAtomContext.prototype);
LegacyDocMetricAtomHasntIntContext.prototype.constructor = LegacyDocMetricAtomHasntIntContext;

JQLParser.LegacyDocMetricAtomHasntIntContext = LegacyDocMetricAtomHasntIntContext;

LegacyDocMetricAtomHasntIntContext.prototype.integer = function() {
    return this.getTypedRuleContext(IntegerContext,0);
};

LegacyDocMetricAtomHasntIntContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
LegacyDocMetricAtomHasntIntContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyDocMetricAtomHasntInt(this);
	}
};

LegacyDocMetricAtomHasntIntContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyDocMetricAtomHasntInt(this);
	}
};


function LegacyDocMetricAtomLuceneContext(parser, ctx) {
	LegacyDocMetricAtomContext.call(this, parser);
    this.queryField = null; // Token;
    LegacyDocMetricAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyDocMetricAtomLuceneContext.prototype = Object.create(LegacyDocMetricAtomContext.prototype);
LegacyDocMetricAtomLuceneContext.prototype.constructor = LegacyDocMetricAtomLuceneContext;

JQLParser.LegacyDocMetricAtomLuceneContext = LegacyDocMetricAtomLuceneContext;

LegacyDocMetricAtomLuceneContext.prototype.LUCENE = function() {
    return this.getToken(JQLParser.LUCENE, 0);
};

LegacyDocMetricAtomLuceneContext.prototype.STRING_LITERAL = function() {
    return this.getToken(JQLParser.STRING_LITERAL, 0);
};
LegacyDocMetricAtomLuceneContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyDocMetricAtomLucene(this);
	}
};

LegacyDocMetricAtomLuceneContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyDocMetricAtomLucene(this);
	}
};


function LegacyDocMetricAtomHasIntContext(parser, ctx) {
	LegacyDocMetricAtomContext.call(this, parser);
    this.field = null; // IdentifierContext;
    this.term = null; // IntegerContext;
    LegacyDocMetricAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyDocMetricAtomHasIntContext.prototype = Object.create(LegacyDocMetricAtomContext.prototype);
LegacyDocMetricAtomHasIntContext.prototype.constructor = LegacyDocMetricAtomHasIntContext;

JQLParser.LegacyDocMetricAtomHasIntContext = LegacyDocMetricAtomHasIntContext;

LegacyDocMetricAtomHasIntContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

LegacyDocMetricAtomHasIntContext.prototype.integer = function() {
    return this.getTypedRuleContext(IntegerContext,0);
};

LegacyDocMetricAtomHasIntContext.prototype.HASINT = function() {
    return this.getToken(JQLParser.HASINT, 0);
};
LegacyDocMetricAtomHasIntContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyDocMetricAtomHasInt(this);
	}
};

LegacyDocMetricAtomHasIntContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyDocMetricAtomHasInt(this);
	}
};


function LegacyDocMetricAtomHasStringFieldContext(parser, ctx) {
	LegacyDocMetricAtomContext.call(this, parser);
    this.field = null; // IdentifierContext;
    LegacyDocMetricAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyDocMetricAtomHasStringFieldContext.prototype = Object.create(LegacyDocMetricAtomContext.prototype);
LegacyDocMetricAtomHasStringFieldContext.prototype.constructor = LegacyDocMetricAtomHasStringFieldContext;

JQLParser.LegacyDocMetricAtomHasStringFieldContext = LegacyDocMetricAtomHasStringFieldContext;

LegacyDocMetricAtomHasStringFieldContext.prototype.HASSTRFIELD = function() {
    return this.getToken(JQLParser.HASSTRFIELD, 0);
};

LegacyDocMetricAtomHasStringFieldContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
LegacyDocMetricAtomHasStringFieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyDocMetricAtomHasStringField(this);
	}
};

LegacyDocMetricAtomHasStringFieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyDocMetricAtomHasStringField(this);
	}
};



JQLParser.LegacyDocMetricAtomContext = LegacyDocMetricAtomContext;

JQLParser.prototype.legacyDocMetricAtom = function() {

    var localctx = new LegacyDocMetricAtomContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, JQLParser.RULE_legacyDocMetricAtom);
    var _la = 0; // Token type
    try {
        this.state = 624;
        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
        switch(la_) {
        case 1:
            localctx = new LegacyDocMetricAtomHasStringContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 558;
            localctx.field = this.identifier();
            this.state = 559;
            this.match(JQLParser.T__15);
            this.state = 560;
            localctx.term = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 117)) & ~0x1f) == 0 && ((1 << (_la - 117)) & ((1 << (JQLParser.TIME_UNIT - 117)) | (1 << (JQLParser.ID - 117)) | (1 << (JQLParser.STRING_LITERAL - 117)))) !== 0))) {
                localctx.term = this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            break;

        case 2:
            localctx = new LegacyDocMetricAtomHasStringContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 562;
            this.match(JQLParser.HASSTR);
            this.state = 563;
            this.match(JQLParser.T__1);
            this.state = 564;
            localctx.field = this.identifier();
            this.state = 565;
            this.match(JQLParser.T__3);
            this.state = 566;
            localctx.term = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 117)) & ~0x1f) == 0 && ((1 << (_la - 117)) & ((1 << (JQLParser.TIME_UNIT - 117)) | (1 << (JQLParser.ID - 117)) | (1 << (JQLParser.STRING_LITERAL - 117)))) !== 0))) {
                localctx.term = this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 567;
            this.match(JQLParser.T__2);
            break;

        case 3:
            localctx = new LegacyDocMetricAtomHasntStringContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 569;
            localctx.field = this.identifier();
            this.state = 570;
            this.match(JQLParser.T__16);
            this.state = 571;
            localctx.term = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 117)) & ~0x1f) == 0 && ((1 << (_la - 117)) & ((1 << (JQLParser.TIME_UNIT - 117)) | (1 << (JQLParser.ID - 117)) | (1 << (JQLParser.STRING_LITERAL - 117)))) !== 0))) {
                localctx.term = this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            break;

        case 4:
            localctx = new LegacyDocMetricAtomHasIntContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 573;
            localctx.field = this.identifier();
            this.state = 574;
            this.match(JQLParser.T__15);
            this.state = 575;
            localctx.term = this.integer();
            break;

        case 5:
            localctx = new LegacyDocMetricAtomHasIntContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 577;
            this.match(JQLParser.HASINT);
            this.state = 578;
            this.match(JQLParser.T__1);
            this.state = 579;
            localctx.field = this.identifier();
            this.state = 580;
            this.match(JQLParser.T__3);
            this.state = 581;
            localctx.term = this.integer();
            this.state = 582;
            this.match(JQLParser.T__2);
            break;

        case 6:
            localctx = new LegacyDocMetricAtomHasntIntContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 584;
            localctx.field = this.identifier();
            this.state = 585;
            this.match(JQLParser.T__16);
            this.state = 586;
            this.integer();
            break;

        case 7:
            localctx = new LegacyDocMetricAtomHasStringQuotedContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 588;
            this.match(JQLParser.HASSTR);
            this.state = 589;
            this.match(JQLParser.T__1);
            this.state = 590;
            this.match(JQLParser.STRING_LITERAL);
            this.state = 591;
            this.match(JQLParser.T__2);
            break;

        case 8:
            localctx = new LegacyDocMetricAtomHasIntFieldContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 592;
            this.match(JQLParser.HASINTFIELD);
            this.state = 593;
            this.match(JQLParser.T__1);
            this.state = 594;
            localctx.field = this.identifier();
            this.state = 595;
            this.match(JQLParser.T__2);
            break;

        case 9:
            localctx = new LegacyDocMetricAtomHasStringFieldContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 597;
            this.match(JQLParser.HASSTRFIELD);
            this.state = 598;
            this.match(JQLParser.T__1);
            this.state = 599;
            localctx.field = this.identifier();
            this.state = 600;
            this.match(JQLParser.T__2);
            break;

        case 10:
            localctx = new LegacyDocMetricAtomHasIntQuotedContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 602;
            this.match(JQLParser.HASINT);
            this.state = 603;
            this.match(JQLParser.T__1);
            this.state = 604;
            this.match(JQLParser.STRING_LITERAL);
            this.state = 605;
            this.match(JQLParser.T__2);
            break;

        case 11:
            localctx = new LegacyDocMetricAtomFloatScaleContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 606;
            this.match(JQLParser.FLOATSCALE);
            this.state = 607;
            this.match(JQLParser.T__1);
            this.state = 608;
            localctx.field = this.identifier();
            this.state = 615;
            _la = this._input.LA(1);
            if(_la===JQLParser.T__3) {
                this.state = 609;
                this.match(JQLParser.T__3);
                this.state = 610;
                localctx.mult = this.number();
                this.state = 613;
                _la = this._input.LA(1);
                if(_la===JQLParser.T__3) {
                    this.state = 611;
                    this.match(JQLParser.T__3);
                    this.state = 612;
                    localctx.add = this.number();
                }

            }

            this.state = 617;
            this.match(JQLParser.T__2);
            break;

        case 12:
            localctx = new LegacyDocMetricAtomLuceneContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 619;
            this.match(JQLParser.LUCENE);
            this.state = 620;
            this.match(JQLParser.T__1);
            this.state = 621;
            localctx.queryField = this.match(JQLParser.STRING_LITERAL);
            this.state = 622;
            this.match(JQLParser.T__2);
            break;

        case 13:
            localctx = new LegacyDocMetricAtomRawFieldContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 623;
            this.identifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function JqlDocMetricAtomContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_jqlDocMetricAtom;
    return this;
}

JqlDocMetricAtomContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JqlDocMetricAtomContext.prototype.constructor = JqlDocMetricAtomContext;


 
JqlDocMetricAtomContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function DocMetricAtomHasntStringContext(parser, ctx) {
	JqlDocMetricAtomContext.call(this, parser);
    this.term = null; // Token;
    JqlDocMetricAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocMetricAtomHasntStringContext.prototype = Object.create(JqlDocMetricAtomContext.prototype);
DocMetricAtomHasntStringContext.prototype.constructor = DocMetricAtomHasntStringContext;

JQLParser.DocMetricAtomHasntStringContext = DocMetricAtomHasntStringContext;

DocMetricAtomHasntStringContext.prototype.singlyScopedField = function() {
    return this.getTypedRuleContext(SinglyScopedFieldContext,0);
};

DocMetricAtomHasntStringContext.prototype.STRING_LITERAL = function() {
    return this.getToken(JQLParser.STRING_LITERAL, 0);
};
DocMetricAtomHasntStringContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocMetricAtomHasntString(this);
	}
};

DocMetricAtomHasntStringContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocMetricAtomHasntString(this);
	}
};


function DocMetricAtomStrTermCountContext(parser, ctx) {
	JqlDocMetricAtomContext.call(this, parser);
    JqlDocMetricAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocMetricAtomStrTermCountContext.prototype = Object.create(JqlDocMetricAtomContext.prototype);
DocMetricAtomStrTermCountContext.prototype.constructor = DocMetricAtomStrTermCountContext;

JQLParser.DocMetricAtomStrTermCountContext = DocMetricAtomStrTermCountContext;

DocMetricAtomStrTermCountContext.prototype.STRTERMCOUNT = function() {
    return this.getToken(JQLParser.STRTERMCOUNT, 0);
};

DocMetricAtomStrTermCountContext.prototype.singlyScopedField = function() {
    return this.getTypedRuleContext(SinglyScopedFieldContext,0);
};
DocMetricAtomStrTermCountContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocMetricAtomStrTermCount(this);
	}
};

DocMetricAtomStrTermCountContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocMetricAtomStrTermCount(this);
	}
};


function DocMetricAtomRegexContext(parser, ctx) {
	JqlDocMetricAtomContext.call(this, parser);
    this.regex = null; // Token;
    JqlDocMetricAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocMetricAtomRegexContext.prototype = Object.create(JqlDocMetricAtomContext.prototype);
DocMetricAtomRegexContext.prototype.constructor = DocMetricAtomRegexContext;

JQLParser.DocMetricAtomRegexContext = DocMetricAtomRegexContext;

DocMetricAtomRegexContext.prototype.singlyScopedField = function() {
    return this.getTypedRuleContext(SinglyScopedFieldContext,0);
};

DocMetricAtomRegexContext.prototype.STRING_LITERAL = function() {
    return this.getToken(JQLParser.STRING_LITERAL, 0);
};
DocMetricAtomRegexContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocMetricAtomRegex(this);
	}
};

DocMetricAtomRegexContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocMetricAtomRegex(this);
	}
};


function DocMetricAtomHasStringContext(parser, ctx) {
	JqlDocMetricAtomContext.call(this, parser);
    this.term = null; // Token;
    JqlDocMetricAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocMetricAtomHasStringContext.prototype = Object.create(JqlDocMetricAtomContext.prototype);
DocMetricAtomHasStringContext.prototype.constructor = DocMetricAtomHasStringContext;

JQLParser.DocMetricAtomHasStringContext = DocMetricAtomHasStringContext;

DocMetricAtomHasStringContext.prototype.singlyScopedField = function() {
    return this.getTypedRuleContext(SinglyScopedFieldContext,0);
};

DocMetricAtomHasStringContext.prototype.STRING_LITERAL = function() {
    return this.getToken(JQLParser.STRING_LITERAL, 0);
};

DocMetricAtomHasStringContext.prototype.HASSTR = function() {
    return this.getToken(JQLParser.HASSTR, 0);
};
DocMetricAtomHasStringContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocMetricAtomHasString(this);
	}
};

DocMetricAtomHasStringContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocMetricAtomHasString(this);
	}
};


function DocMetricAtomRandomFieldContext(parser, ctx) {
	JqlDocMetricAtomContext.call(this, parser);
    this.max = null; // IntegerContext;
    this.seed = null; // Token;
    JqlDocMetricAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocMetricAtomRandomFieldContext.prototype = Object.create(JqlDocMetricAtomContext.prototype);
DocMetricAtomRandomFieldContext.prototype.constructor = DocMetricAtomRandomFieldContext;

JQLParser.DocMetricAtomRandomFieldContext = DocMetricAtomRandomFieldContext;

DocMetricAtomRandomFieldContext.prototype.RANDOM = function() {
    return this.getToken(JQLParser.RANDOM, 0);
};

DocMetricAtomRandomFieldContext.prototype.singlyScopedField = function() {
    return this.getTypedRuleContext(SinglyScopedFieldContext,0);
};

DocMetricAtomRandomFieldContext.prototype.integer = function() {
    return this.getTypedRuleContext(IntegerContext,0);
};

DocMetricAtomRandomFieldContext.prototype.STRING_LITERAL = function() {
    return this.getToken(JQLParser.STRING_LITERAL, 0);
};
DocMetricAtomRandomFieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocMetricAtomRandomField(this);
	}
};

DocMetricAtomRandomFieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocMetricAtomRandomField(this);
	}
};


function DocMetricAtomHasIntFieldContext(parser, ctx) {
	JqlDocMetricAtomContext.call(this, parser);
    JqlDocMetricAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocMetricAtomHasIntFieldContext.prototype = Object.create(JqlDocMetricAtomContext.prototype);
DocMetricAtomHasIntFieldContext.prototype.constructor = DocMetricAtomHasIntFieldContext;

JQLParser.DocMetricAtomHasIntFieldContext = DocMetricAtomHasIntFieldContext;

DocMetricAtomHasIntFieldContext.prototype.HASINTFIELD = function() {
    return this.getToken(JQLParser.HASINTFIELD, 0);
};

DocMetricAtomHasIntFieldContext.prototype.singlyScopedField = function() {
    return this.getTypedRuleContext(SinglyScopedFieldContext,0);
};
DocMetricAtomHasIntFieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocMetricAtomHasIntField(this);
	}
};

DocMetricAtomHasIntFieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocMetricAtomHasIntField(this);
	}
};


function DocMetricAtomHasIntContext(parser, ctx) {
	JqlDocMetricAtomContext.call(this, parser);
    this.term = null; // IntegerContext;
    JqlDocMetricAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocMetricAtomHasIntContext.prototype = Object.create(JqlDocMetricAtomContext.prototype);
DocMetricAtomHasIntContext.prototype.constructor = DocMetricAtomHasIntContext;

JQLParser.DocMetricAtomHasIntContext = DocMetricAtomHasIntContext;

DocMetricAtomHasIntContext.prototype.singlyScopedField = function() {
    return this.getTypedRuleContext(SinglyScopedFieldContext,0);
};

DocMetricAtomHasIntContext.prototype.integer = function() {
    return this.getTypedRuleContext(IntegerContext,0);
};

DocMetricAtomHasIntContext.prototype.HASINT = function() {
    return this.getToken(JQLParser.HASINT, 0);
};
DocMetricAtomHasIntContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocMetricAtomHasInt(this);
	}
};

DocMetricAtomHasIntContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocMetricAtomHasInt(this);
	}
};


function DocMetricAtomLenContext(parser, ctx) {
	JqlDocMetricAtomContext.call(this, parser);
    JqlDocMetricAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocMetricAtomLenContext.prototype = Object.create(JqlDocMetricAtomContext.prototype);
DocMetricAtomLenContext.prototype.constructor = DocMetricAtomLenContext;

JQLParser.DocMetricAtomLenContext = DocMetricAtomLenContext;

DocMetricAtomLenContext.prototype.LEN = function() {
    return this.getToken(JQLParser.LEN, 0);
};

DocMetricAtomLenContext.prototype.singlyScopedField = function() {
    return this.getTypedRuleContext(SinglyScopedFieldContext,0);
};
DocMetricAtomLenContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocMetricAtomLen(this);
	}
};

DocMetricAtomLenContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocMetricAtomLen(this);
	}
};


function DocMetricAtomFieldEqualContext(parser, ctx) {
	JqlDocMetricAtomContext.call(this, parser);
    JqlDocMetricAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocMetricAtomFieldEqualContext.prototype = Object.create(JqlDocMetricAtomContext.prototype);
DocMetricAtomFieldEqualContext.prototype.constructor = DocMetricAtomFieldEqualContext;

JQLParser.DocMetricAtomFieldEqualContext = DocMetricAtomFieldEqualContext;

DocMetricAtomFieldEqualContext.prototype.singlyScopedField = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SinglyScopedFieldContext);
    } else {
        return this.getTypedRuleContext(SinglyScopedFieldContext,i);
    }
};
DocMetricAtomFieldEqualContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocMetricAtomFieldEqual(this);
	}
};

DocMetricAtomFieldEqualContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocMetricAtomFieldEqual(this);
	}
};


function DocMetricAtomNotFieldEqualContext(parser, ctx) {
	JqlDocMetricAtomContext.call(this, parser);
    JqlDocMetricAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocMetricAtomNotFieldEqualContext.prototype = Object.create(JqlDocMetricAtomContext.prototype);
DocMetricAtomNotFieldEqualContext.prototype.constructor = DocMetricAtomNotFieldEqualContext;

JQLParser.DocMetricAtomNotFieldEqualContext = DocMetricAtomNotFieldEqualContext;

DocMetricAtomNotFieldEqualContext.prototype.singlyScopedField = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SinglyScopedFieldContext);
    } else {
        return this.getTypedRuleContext(SinglyScopedFieldContext,i);
    }
};
DocMetricAtomNotFieldEqualContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocMetricAtomNotFieldEqual(this);
	}
};

DocMetricAtomNotFieldEqualContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocMetricAtomNotFieldEqual(this);
	}
};


function DocMetricAtomExtractContext(parser, ctx) {
	JqlDocMetricAtomContext.call(this, parser);
    this.regex = null; // Token;
    this.groupNumber = null; // Token;
    JqlDocMetricAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocMetricAtomExtractContext.prototype = Object.create(JqlDocMetricAtomContext.prototype);
DocMetricAtomExtractContext.prototype.constructor = DocMetricAtomExtractContext;

JQLParser.DocMetricAtomExtractContext = DocMetricAtomExtractContext;

DocMetricAtomExtractContext.prototype.EXTRACT = function() {
    return this.getToken(JQLParser.EXTRACT, 0);
};

DocMetricAtomExtractContext.prototype.singlyScopedField = function() {
    return this.getTypedRuleContext(SinglyScopedFieldContext,0);
};

DocMetricAtomExtractContext.prototype.STRING_LITERAL = function() {
    return this.getToken(JQLParser.STRING_LITERAL, 0);
};

DocMetricAtomExtractContext.prototype.NAT = function() {
    return this.getToken(JQLParser.NAT, 0);
};
DocMetricAtomExtractContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocMetricAtomExtract(this);
	}
};

DocMetricAtomExtractContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocMetricAtomExtract(this);
	}
};


function DocMetricAtomLuceneContext(parser, ctx) {
	JqlDocMetricAtomContext.call(this, parser);
    this.queryField = null; // Token;
    JqlDocMetricAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocMetricAtomLuceneContext.prototype = Object.create(JqlDocMetricAtomContext.prototype);
DocMetricAtomLuceneContext.prototype.constructor = DocMetricAtomLuceneContext;

JQLParser.DocMetricAtomLuceneContext = DocMetricAtomLuceneContext;

DocMetricAtomLuceneContext.prototype.LUCENE = function() {
    return this.getToken(JQLParser.LUCENE, 0);
};

DocMetricAtomLuceneContext.prototype.QUERY = function() {
    return this.getToken(JQLParser.QUERY, 0);
};

DocMetricAtomLuceneContext.prototype.STRING_LITERAL = function() {
    return this.getToken(JQLParser.STRING_LITERAL, 0);
};
DocMetricAtomLuceneContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocMetricAtomLucene(this);
	}
};

DocMetricAtomLuceneContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocMetricAtomLucene(this);
	}
};


function DocMetricAtomHasntIntContext(parser, ctx) {
	JqlDocMetricAtomContext.call(this, parser);
    JqlDocMetricAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocMetricAtomHasntIntContext.prototype = Object.create(JqlDocMetricAtomContext.prototype);
DocMetricAtomHasntIntContext.prototype.constructor = DocMetricAtomHasntIntContext;

JQLParser.DocMetricAtomHasntIntContext = DocMetricAtomHasntIntContext;

DocMetricAtomHasntIntContext.prototype.singlyScopedField = function() {
    return this.getTypedRuleContext(SinglyScopedFieldContext,0);
};

DocMetricAtomHasntIntContext.prototype.integer = function() {
    return this.getTypedRuleContext(IntegerContext,0);
};
DocMetricAtomHasntIntContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocMetricAtomHasntInt(this);
	}
};

DocMetricAtomHasntIntContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocMetricAtomHasntInt(this);
	}
};


function DocMetricAtomFloatScaleContext(parser, ctx) {
	JqlDocMetricAtomContext.call(this, parser);
    this.mult = null; // NumberContext;
    this.add = null; // NumberContext;
    JqlDocMetricAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocMetricAtomFloatScaleContext.prototype = Object.create(JqlDocMetricAtomContext.prototype);
DocMetricAtomFloatScaleContext.prototype.constructor = DocMetricAtomFloatScaleContext;

JQLParser.DocMetricAtomFloatScaleContext = DocMetricAtomFloatScaleContext;

DocMetricAtomFloatScaleContext.prototype.FLOATSCALE = function() {
    return this.getToken(JQLParser.FLOATSCALE, 0);
};

DocMetricAtomFloatScaleContext.prototype.singlyScopedField = function() {
    return this.getTypedRuleContext(SinglyScopedFieldContext,0);
};

DocMetricAtomFloatScaleContext.prototype.number = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NumberContext);
    } else {
        return this.getTypedRuleContext(NumberContext,i);
    }
};
DocMetricAtomFloatScaleContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocMetricAtomFloatScale(this);
	}
};

DocMetricAtomFloatScaleContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocMetricAtomFloatScale(this);
	}
};


function DocMetricAtomHasStringFieldContext(parser, ctx) {
	JqlDocMetricAtomContext.call(this, parser);
    JqlDocMetricAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocMetricAtomHasStringFieldContext.prototype = Object.create(JqlDocMetricAtomContext.prototype);
DocMetricAtomHasStringFieldContext.prototype.constructor = DocMetricAtomHasStringFieldContext;

JQLParser.DocMetricAtomHasStringFieldContext = DocMetricAtomHasStringFieldContext;

DocMetricAtomHasStringFieldContext.prototype.HASSTRFIELD = function() {
    return this.getToken(JQLParser.HASSTRFIELD, 0);
};

DocMetricAtomHasStringFieldContext.prototype.singlyScopedField = function() {
    return this.getTypedRuleContext(SinglyScopedFieldContext,0);
};
DocMetricAtomHasStringFieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocMetricAtomHasStringField(this);
	}
};

DocMetricAtomHasStringFieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocMetricAtomHasStringField(this);
	}
};


function DocMetricAtomIntTermCountContext(parser, ctx) {
	JqlDocMetricAtomContext.call(this, parser);
    JqlDocMetricAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocMetricAtomIntTermCountContext.prototype = Object.create(JqlDocMetricAtomContext.prototype);
DocMetricAtomIntTermCountContext.prototype.constructor = DocMetricAtomIntTermCountContext;

JQLParser.DocMetricAtomIntTermCountContext = DocMetricAtomIntTermCountContext;

DocMetricAtomIntTermCountContext.prototype.INTTERMCOUNT = function() {
    return this.getToken(JQLParser.INTTERMCOUNT, 0);
};

DocMetricAtomIntTermCountContext.prototype.singlyScopedField = function() {
    return this.getTypedRuleContext(SinglyScopedFieldContext,0);
};
DocMetricAtomIntTermCountContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocMetricAtomIntTermCount(this);
	}
};

DocMetricAtomIntTermCountContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocMetricAtomIntTermCount(this);
	}
};


function SyntacticallyAtomicDocMetricAtomContext(parser, ctx) {
	JqlDocMetricAtomContext.call(this, parser);
    JqlDocMetricAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SyntacticallyAtomicDocMetricAtomContext.prototype = Object.create(JqlDocMetricAtomContext.prototype);
SyntacticallyAtomicDocMetricAtomContext.prototype.constructor = SyntacticallyAtomicDocMetricAtomContext;

JQLParser.SyntacticallyAtomicDocMetricAtomContext = SyntacticallyAtomicDocMetricAtomContext;

SyntacticallyAtomicDocMetricAtomContext.prototype.jqlSyntacticallyAtomicDocMetricAtom = function() {
    return this.getTypedRuleContext(JqlSyntacticallyAtomicDocMetricAtomContext,0);
};
SyntacticallyAtomicDocMetricAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterSyntacticallyAtomicDocMetricAtom(this);
	}
};

SyntacticallyAtomicDocMetricAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitSyntacticallyAtomicDocMetricAtom(this);
	}
};


function DocMetricAtomRandomMetricContext(parser, ctx) {
	JqlDocMetricAtomContext.call(this, parser);
    this.max = null; // IntegerContext;
    this.seed = null; // Token;
    JqlDocMetricAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocMetricAtomRandomMetricContext.prototype = Object.create(JqlDocMetricAtomContext.prototype);
DocMetricAtomRandomMetricContext.prototype.constructor = DocMetricAtomRandomMetricContext;

JQLParser.DocMetricAtomRandomMetricContext = DocMetricAtomRandomMetricContext;

DocMetricAtomRandomMetricContext.prototype.RANDOM = function() {
    return this.getToken(JQLParser.RANDOM, 0);
};

DocMetricAtomRandomMetricContext.prototype.jqlDocMetric = function() {
    return this.getTypedRuleContext(JqlDocMetricContext,0);
};

DocMetricAtomRandomMetricContext.prototype.integer = function() {
    return this.getTypedRuleContext(IntegerContext,0);
};

DocMetricAtomRandomMetricContext.prototype.STRING_LITERAL = function() {
    return this.getToken(JQLParser.STRING_LITERAL, 0);
};
DocMetricAtomRandomMetricContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocMetricAtomRandomMetric(this);
	}
};

DocMetricAtomRandomMetricContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocMetricAtomRandomMetric(this);
	}
};



JQLParser.JqlDocMetricAtomContext = JqlDocMetricAtomContext;

JQLParser.prototype.jqlDocMetricAtom = function() {

    var localctx = new JqlDocMetricAtomContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, JQLParser.RULE_jqlDocMetricAtom);
    var _la = 0; // Token type
    try {
        this.state = 744;
        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
        switch(la_) {
        case 1:
            localctx = new DocMetricAtomFieldEqualContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 626;
            this.singlyScopedField();
            this.state = 627;
            this.match(JQLParser.T__15);
            this.state = 628;
            this.singlyScopedField();
            break;

        case 2:
            localctx = new DocMetricAtomNotFieldEqualContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 630;
            this.singlyScopedField();
            this.state = 631;
            this.match(JQLParser.T__16);
            this.state = 632;
            this.singlyScopedField();
            break;

        case 3:
            localctx = new DocMetricAtomHasStringContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 634;
            this.singlyScopedField();
            this.state = 635;
            this.match(JQLParser.T__15);
            this.state = 636;
            localctx.term = this.match(JQLParser.STRING_LITERAL);
            break;

        case 4:
            localctx = new DocMetricAtomHasStringContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 638;
            this.match(JQLParser.HASSTR);
            this.state = 639;
            this.match(JQLParser.T__1);
            this.state = 640;
            this.singlyScopedField();
            this.state = 641;
            this.match(JQLParser.T__3);
            this.state = 642;
            localctx.term = this.match(JQLParser.STRING_LITERAL);
            this.state = 643;
            this.match(JQLParser.T__2);
            break;

        case 5:
            localctx = new DocMetricAtomHasntStringContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 645;
            this.singlyScopedField();
            this.state = 646;
            this.match(JQLParser.T__16);
            this.state = 647;
            localctx.term = this.match(JQLParser.STRING_LITERAL);
            break;

        case 6:
            localctx = new DocMetricAtomHasIntContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 649;
            this.singlyScopedField();
            this.state = 650;
            this.match(JQLParser.T__15);
            this.state = 651;
            localctx.term = this.integer();
            break;

        case 7:
            localctx = new DocMetricAtomHasIntContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 653;
            this.match(JQLParser.HASINT);
            this.state = 654;
            this.match(JQLParser.T__1);
            this.state = 655;
            this.singlyScopedField();
            this.state = 656;
            this.match(JQLParser.T__3);
            this.state = 657;
            localctx.term = this.integer();
            this.state = 658;
            this.match(JQLParser.T__2);
            break;

        case 8:
            localctx = new DocMetricAtomHasntIntContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 660;
            this.singlyScopedField();
            this.state = 661;
            this.match(JQLParser.T__16);
            this.state = 662;
            this.integer();
            break;

        case 9:
            localctx = new DocMetricAtomHasIntFieldContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 664;
            this.match(JQLParser.HASINTFIELD);
            this.state = 665;
            this.match(JQLParser.T__1);
            this.state = 666;
            this.singlyScopedField();
            this.state = 667;
            this.match(JQLParser.T__2);
            break;

        case 10:
            localctx = new DocMetricAtomHasStringFieldContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 669;
            this.match(JQLParser.HASSTRFIELD);
            this.state = 670;
            this.match(JQLParser.T__1);
            this.state = 671;
            this.singlyScopedField();
            this.state = 672;
            this.match(JQLParser.T__2);
            break;

        case 11:
            localctx = new DocMetricAtomIntTermCountContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 674;
            this.match(JQLParser.INTTERMCOUNT);
            this.state = 675;
            this.match(JQLParser.T__1);
            this.state = 676;
            this.singlyScopedField();
            this.state = 677;
            this.match(JQLParser.T__2);
            break;

        case 12:
            localctx = new DocMetricAtomStrTermCountContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 679;
            this.match(JQLParser.STRTERMCOUNT);
            this.state = 680;
            this.match(JQLParser.T__1);
            this.state = 681;
            this.singlyScopedField();
            this.state = 682;
            this.match(JQLParser.T__2);
            break;

        case 13:
            localctx = new DocMetricAtomRandomFieldContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 684;
            this.match(JQLParser.RANDOM);
            this.state = 685;
            this.match(JQLParser.T__1);
            this.state = 686;
            this.singlyScopedField();
            this.state = 687;
            this.match(JQLParser.T__3);
            this.state = 688;
            localctx.max = this.integer();
            this.state = 691;
            _la = this._input.LA(1);
            if(_la===JQLParser.T__3) {
                this.state = 689;
                this.match(JQLParser.T__3);
                this.state = 690;
                localctx.seed = this.match(JQLParser.STRING_LITERAL);
            }

            this.state = 693;
            this.match(JQLParser.T__2);
            break;

        case 14:
            localctx = new DocMetricAtomRandomMetricContext(this, localctx);
            this.enterOuterAlt(localctx, 14);
            this.state = 695;
            this.match(JQLParser.RANDOM);
            this.state = 696;
            this.match(JQLParser.T__1);
            this.state = 697;
            this.jqlDocMetric(0);
            this.state = 698;
            this.match(JQLParser.T__3);
            this.state = 699;
            localctx.max = this.integer();
            this.state = 702;
            _la = this._input.LA(1);
            if(_la===JQLParser.T__3) {
                this.state = 700;
                this.match(JQLParser.T__3);
                this.state = 701;
                localctx.seed = this.match(JQLParser.STRING_LITERAL);
            }

            this.state = 704;
            this.match(JQLParser.T__2);
            break;

        case 15:
            localctx = new DocMetricAtomRegexContext(this, localctx);
            this.enterOuterAlt(localctx, 15);
            this.state = 706;
            this.singlyScopedField();
            this.state = 707;
            this.match(JQLParser.T__12);
            this.state = 708;
            localctx.regex = this.match(JQLParser.STRING_LITERAL);
            break;

        case 16:
            localctx = new DocMetricAtomFloatScaleContext(this, localctx);
            this.enterOuterAlt(localctx, 16);
            this.state = 710;
            this.match(JQLParser.FLOATSCALE);
            this.state = 711;
            this.match(JQLParser.T__1);
            this.state = 712;
            this.singlyScopedField();
            this.state = 719;
            _la = this._input.LA(1);
            if(_la===JQLParser.T__3) {
                this.state = 713;
                this.match(JQLParser.T__3);
                this.state = 714;
                localctx.mult = this.number();
                this.state = 717;
                _la = this._input.LA(1);
                if(_la===JQLParser.T__3) {
                    this.state = 715;
                    this.match(JQLParser.T__3);
                    this.state = 716;
                    localctx.add = this.number();
                }

            }

            this.state = 721;
            this.match(JQLParser.T__2);
            break;

        case 17:
            localctx = new DocMetricAtomExtractContext(this, localctx);
            this.enterOuterAlt(localctx, 17);
            this.state = 723;
            this.match(JQLParser.EXTRACT);
            this.state = 724;
            this.match(JQLParser.T__1);
            this.state = 725;
            this.singlyScopedField();
            this.state = 726;
            this.match(JQLParser.T__3);
            this.state = 727;
            localctx.regex = this.match(JQLParser.STRING_LITERAL);
            this.state = 730;
            _la = this._input.LA(1);
            if(_la===JQLParser.T__3) {
                this.state = 728;
                this.match(JQLParser.T__3);
                this.state = 729;
                localctx.groupNumber = this.match(JQLParser.NAT);
            }

            this.state = 732;
            this.match(JQLParser.T__2);
            break;

        case 18:
            localctx = new DocMetricAtomLuceneContext(this, localctx);
            this.enterOuterAlt(localctx, 18);
            this.state = 734;
            _la = this._input.LA(1);
            if(!(_la===JQLParser.LUCENE || _la===JQLParser.QUERY)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 735;
            this.match(JQLParser.T__1);
            this.state = 736;
            localctx.queryField = this.match(JQLParser.STRING_LITERAL);
            this.state = 737;
            this.match(JQLParser.T__2);
            break;

        case 19:
            localctx = new DocMetricAtomLenContext(this, localctx);
            this.enterOuterAlt(localctx, 19);
            this.state = 738;
            this.match(JQLParser.LEN);
            this.state = 739;
            this.match(JQLParser.T__1);
            this.state = 740;
            this.singlyScopedField();
            this.state = 741;
            this.match(JQLParser.T__2);
            break;

        case 20:
            localctx = new SyntacticallyAtomicDocMetricAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 20);
            this.state = 743;
            this.jqlSyntacticallyAtomicDocMetricAtom();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DocMetricContext(parser, parent, invokingState, useLegacy) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_docMetric;
    this.useLegacy = null
    this.useLegacy = useLegacy || null;
    return this;
}

DocMetricContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DocMetricContext.prototype.constructor = DocMetricContext;

DocMetricContext.prototype.legacyDocMetric = function() {
    return this.getTypedRuleContext(LegacyDocMetricContext,0);
};

DocMetricContext.prototype.jqlDocMetric = function() {
    return this.getTypedRuleContext(JqlDocMetricContext,0);
};

DocMetricContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocMetric(this);
	}
};

DocMetricContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocMetric(this);
	}
};




JQLParser.DocMetricContext = DocMetricContext;

JQLParser.prototype.docMetric = function(useLegacy) {

    var localctx = new DocMetricContext(this, this._ctx, this.state, useLegacy);
    this.enterRule(localctx, 42, JQLParser.RULE_docMetric);
    try {
        this.state = 750;
        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 746;
            if (!( localctx.useLegacy)) {
                throw new antlr4.error.FailedPredicateException(this, "$ctx.useLegacy");
            }
            this.state = 747;
            this.legacyDocMetric(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 748;
            if (!( !localctx.useLegacy)) {
                throw new antlr4.error.FailedPredicateException(this, "!$ctx.useLegacy");
            }
            this.state = 749;
            this.jqlDocMetric(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DocMetricEofContext(parser, parent, invokingState, useLegacy) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_docMetricEof;
    this.useLegacy = null
    this.useLegacy = useLegacy || null;
    return this;
}

DocMetricEofContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DocMetricEofContext.prototype.constructor = DocMetricEofContext;

DocMetricEofContext.prototype.docMetric = function() {
    return this.getTypedRuleContext(DocMetricContext,0);
};

DocMetricEofContext.prototype.EOF = function() {
    return this.getToken(JQLParser.EOF, 0);
};

DocMetricEofContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocMetricEof(this);
	}
};

DocMetricEofContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocMetricEof(this);
	}
};




JQLParser.DocMetricEofContext = DocMetricEofContext;

JQLParser.prototype.docMetricEof = function(useLegacy) {

    var localctx = new DocMetricEofContext(this, this._ctx, this.state, useLegacy);
    this.enterRule(localctx, 44, JQLParser.RULE_docMetricEof);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 752;
        this.docMetric(localctx.useLegacy);
        this.state = 753;
        this.match(JQLParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LegacyDocMetricContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_legacyDocMetric;
    return this;
}

LegacyDocMetricContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LegacyDocMetricContext.prototype.constructor = LegacyDocMetricContext;


 
LegacyDocMetricContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function LegacyDocCountsContext(parser, ctx) {
	LegacyDocMetricContext.call(this, parser);
    LegacyDocMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyDocCountsContext.prototype = Object.create(LegacyDocMetricContext.prototype);
LegacyDocCountsContext.prototype.constructor = LegacyDocCountsContext;

JQLParser.LegacyDocCountsContext = LegacyDocCountsContext;

LegacyDocCountsContext.prototype.COUNT = function() {
    return this.getToken(JQLParser.COUNT, 0);
};
LegacyDocCountsContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyDocCounts(this);
	}
};

LegacyDocCountsContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyDocCounts(this);
	}
};


function LegacyDocSignumContext(parser, ctx) {
	LegacyDocMetricContext.call(this, parser);
    LegacyDocMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyDocSignumContext.prototype = Object.create(LegacyDocMetricContext.prototype);
LegacyDocSignumContext.prototype.constructor = LegacyDocSignumContext;

JQLParser.LegacyDocSignumContext = LegacyDocSignumContext;

LegacyDocSignumContext.prototype.SIGNUM = function() {
    return this.getToken(JQLParser.SIGNUM, 0);
};

LegacyDocSignumContext.prototype.legacyDocMetric = function() {
    return this.getTypedRuleContext(LegacyDocMetricContext,0);
};
LegacyDocSignumContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyDocSignum(this);
	}
};

LegacyDocSignumContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyDocSignum(this);
	}
};


function LegacyDocExpContext(parser, ctx) {
	LegacyDocMetricContext.call(this, parser);
    this.scaleFactor = null; // IntegerContext;
    LegacyDocMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyDocExpContext.prototype = Object.create(LegacyDocMetricContext.prototype);
LegacyDocExpContext.prototype.constructor = LegacyDocExpContext;

JQLParser.LegacyDocExpContext = LegacyDocExpContext;

LegacyDocExpContext.prototype.EXP = function() {
    return this.getToken(JQLParser.EXP, 0);
};

LegacyDocExpContext.prototype.legacyDocMetric = function() {
    return this.getTypedRuleContext(LegacyDocMetricContext,0);
};

LegacyDocExpContext.prototype.integer = function() {
    return this.getTypedRuleContext(IntegerContext,0);
};
LegacyDocExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyDocExp(this);
	}
};

LegacyDocExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyDocExp(this);
	}
};


function LegacyDocPlusOrMinusContext(parser, ctx) {
	LegacyDocMetricContext.call(this, parser);
    this.plus = null; // Token;
    this.minus = null; // Token;
    LegacyDocMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyDocPlusOrMinusContext.prototype = Object.create(LegacyDocMetricContext.prototype);
LegacyDocPlusOrMinusContext.prototype.constructor = LegacyDocPlusOrMinusContext;

JQLParser.LegacyDocPlusOrMinusContext = LegacyDocPlusOrMinusContext;

LegacyDocPlusOrMinusContext.prototype.legacyDocMetric = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LegacyDocMetricContext);
    } else {
        return this.getTypedRuleContext(LegacyDocMetricContext,i);
    }
};
LegacyDocPlusOrMinusContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyDocPlusOrMinus(this);
	}
};

LegacyDocPlusOrMinusContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyDocPlusOrMinus(this);
	}
};


function LegacyDocIntContext(parser, ctx) {
	LegacyDocMetricContext.call(this, parser);
    LegacyDocMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyDocIntContext.prototype = Object.create(LegacyDocMetricContext.prototype);
LegacyDocIntContext.prototype.constructor = LegacyDocIntContext;

JQLParser.LegacyDocIntContext = LegacyDocIntContext;

LegacyDocIntContext.prototype.integer = function() {
    return this.getTypedRuleContext(IntegerContext,0);
};
LegacyDocIntContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyDocInt(this);
	}
};

LegacyDocIntContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyDocInt(this);
	}
};


function LegacyDocAbsContext(parser, ctx) {
	LegacyDocMetricContext.call(this, parser);
    LegacyDocMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyDocAbsContext.prototype = Object.create(LegacyDocMetricContext.prototype);
LegacyDocAbsContext.prototype.constructor = LegacyDocAbsContext;

JQLParser.LegacyDocAbsContext = LegacyDocAbsContext;

LegacyDocAbsContext.prototype.ABS = function() {
    return this.getToken(JQLParser.ABS, 0);
};

LegacyDocAbsContext.prototype.legacyDocMetric = function() {
    return this.getTypedRuleContext(LegacyDocMetricContext,0);
};
LegacyDocAbsContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyDocAbs(this);
	}
};

LegacyDocAbsContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyDocAbs(this);
	}
};


function LegacyDocMinContext(parser, ctx) {
	LegacyDocMetricContext.call(this, parser);
    this.arg1 = null; // LegacyDocMetricContext;
    this.arg2 = null; // LegacyDocMetricContext;
    LegacyDocMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyDocMinContext.prototype = Object.create(LegacyDocMetricContext.prototype);
LegacyDocMinContext.prototype.constructor = LegacyDocMinContext;

JQLParser.LegacyDocMinContext = LegacyDocMinContext;

LegacyDocMinContext.prototype.MIN = function() {
    return this.getToken(JQLParser.MIN, 0);
};

LegacyDocMinContext.prototype.legacyDocMetric = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LegacyDocMetricContext);
    } else {
        return this.getTypedRuleContext(LegacyDocMetricContext,i);
    }
};
LegacyDocMinContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyDocMin(this);
	}
};

LegacyDocMinContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyDocMin(this);
	}
};


function LegacyDocNegateContext(parser, ctx) {
	LegacyDocMetricContext.call(this, parser);
    LegacyDocMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyDocNegateContext.prototype = Object.create(LegacyDocMetricContext.prototype);
LegacyDocNegateContext.prototype.constructor = LegacyDocNegateContext;

JQLParser.LegacyDocNegateContext = LegacyDocNegateContext;

LegacyDocNegateContext.prototype.legacyDocMetric = function() {
    return this.getTypedRuleContext(LegacyDocMetricContext,0);
};
LegacyDocNegateContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyDocNegate(this);
	}
};

LegacyDocNegateContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyDocNegate(this);
	}
};


function LegacyDocLogContext(parser, ctx) {
	LegacyDocMetricContext.call(this, parser);
    this.scaleFactor = null; // IntegerContext;
    LegacyDocMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyDocLogContext.prototype = Object.create(LegacyDocMetricContext.prototype);
LegacyDocLogContext.prototype.constructor = LegacyDocLogContext;

JQLParser.LegacyDocLogContext = LegacyDocLogContext;

LegacyDocLogContext.prototype.LOG = function() {
    return this.getToken(JQLParser.LOG, 0);
};

LegacyDocLogContext.prototype.legacyDocMetric = function() {
    return this.getTypedRuleContext(LegacyDocMetricContext,0);
};

LegacyDocLogContext.prototype.integer = function() {
    return this.getTypedRuleContext(IntegerContext,0);
};
LegacyDocLogContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyDocLog(this);
	}
};

LegacyDocLogContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyDocLog(this);
	}
};


function LegacyDocMaxContext(parser, ctx) {
	LegacyDocMetricContext.call(this, parser);
    this.arg1 = null; // LegacyDocMetricContext;
    this.arg2 = null; // LegacyDocMetricContext;
    LegacyDocMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyDocMaxContext.prototype = Object.create(LegacyDocMetricContext.prototype);
LegacyDocMaxContext.prototype.constructor = LegacyDocMaxContext;

JQLParser.LegacyDocMaxContext = LegacyDocMaxContext;

LegacyDocMaxContext.prototype.MAX = function() {
    return this.getToken(JQLParser.MAX, 0);
};

LegacyDocMaxContext.prototype.legacyDocMetric = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LegacyDocMetricContext);
    } else {
        return this.getTypedRuleContext(LegacyDocMetricContext,i);
    }
};
LegacyDocMaxContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyDocMax(this);
	}
};

LegacyDocMaxContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyDocMax(this);
	}
};


function LegacyDocInequalityContext(parser, ctx) {
	LegacyDocMetricContext.call(this, parser);
    this.gte = null; // Token;
    this.gt = null; // Token;
    this.lte = null; // Token;
    this.lt = null; // Token;
    this.eq = null; // Token;
    this.neq = null; // Token;
    LegacyDocMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyDocInequalityContext.prototype = Object.create(LegacyDocMetricContext.prototype);
LegacyDocInequalityContext.prototype.constructor = LegacyDocInequalityContext;

JQLParser.LegacyDocInequalityContext = LegacyDocInequalityContext;

LegacyDocInequalityContext.prototype.legacyDocMetric = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LegacyDocMetricContext);
    } else {
        return this.getTypedRuleContext(LegacyDocMetricContext,i);
    }
};
LegacyDocInequalityContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyDocInequality(this);
	}
};

LegacyDocInequalityContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyDocInequality(this);
	}
};


function LegacyDocMetricParensContext(parser, ctx) {
	LegacyDocMetricContext.call(this, parser);
    LegacyDocMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyDocMetricParensContext.prototype = Object.create(LegacyDocMetricContext.prototype);
LegacyDocMetricParensContext.prototype.constructor = LegacyDocMetricParensContext;

JQLParser.LegacyDocMetricParensContext = LegacyDocMetricParensContext;

LegacyDocMetricParensContext.prototype.legacyDocMetric = function() {
    return this.getTypedRuleContext(LegacyDocMetricContext,0);
};
LegacyDocMetricParensContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyDocMetricParens(this);
	}
};

LegacyDocMetricParensContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyDocMetricParens(this);
	}
};


function LegacyDocAtomContext(parser, ctx) {
	LegacyDocMetricContext.call(this, parser);
    LegacyDocMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyDocAtomContext.prototype = Object.create(LegacyDocMetricContext.prototype);
LegacyDocAtomContext.prototype.constructor = LegacyDocAtomContext;

JQLParser.LegacyDocAtomContext = LegacyDocAtomContext;

LegacyDocAtomContext.prototype.legacyDocMetricAtom = function() {
    return this.getTypedRuleContext(LegacyDocMetricAtomContext,0);
};
LegacyDocAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyDocAtom(this);
	}
};

LegacyDocAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyDocAtom(this);
	}
};


function LegacyDocMultOrDivideOrModulusContext(parser, ctx) {
	LegacyDocMetricContext.call(this, parser);
    this.multiply = null; // Token;
    this.divide = null; // Token;
    this.modulus = null; // Token;
    LegacyDocMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyDocMultOrDivideOrModulusContext.prototype = Object.create(LegacyDocMetricContext.prototype);
LegacyDocMultOrDivideOrModulusContext.prototype.constructor = LegacyDocMultOrDivideOrModulusContext;

JQLParser.LegacyDocMultOrDivideOrModulusContext = LegacyDocMultOrDivideOrModulusContext;

LegacyDocMultOrDivideOrModulusContext.prototype.legacyDocMetric = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LegacyDocMetricContext);
    } else {
        return this.getTypedRuleContext(LegacyDocMetricContext,i);
    }
};
LegacyDocMultOrDivideOrModulusContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyDocMultOrDivideOrModulus(this);
	}
};

LegacyDocMultOrDivideOrModulusContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyDocMultOrDivideOrModulus(this);
	}
};



JQLParser.prototype.legacyDocMetric = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new LegacyDocMetricContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 46;
    this.enterRecursionRule(localctx, 46, JQLParser.RULE_legacyDocMetric, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 809;
        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
        switch(la_) {
        case 1:
            localctx = new LegacyDocNegateContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 756;
            this.match(JQLParser.T__0);
            this.state = 757;
            this.legacyDocMetric(7);
            break;

        case 2:
            localctx = new LegacyDocCountsContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 758;
            this.match(JQLParser.COUNT);
            this.state = 759;
            this.match(JQLParser.T__1);
            this.state = 760;
            this.match(JQLParser.T__2);
            break;

        case 3:
            localctx = new LegacyDocAbsContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 761;
            this.match(JQLParser.ABS);
            this.state = 762;
            this.match(JQLParser.T__1);
            this.state = 763;
            this.legacyDocMetric(0);
            this.state = 764;
            this.match(JQLParser.T__2);
            break;

        case 4:
            localctx = new LegacyDocSignumContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 766;
            this.match(JQLParser.SIGNUM);
            this.state = 767;
            this.match(JQLParser.T__1);
            this.state = 768;
            this.legacyDocMetric(0);
            this.state = 769;
            this.match(JQLParser.T__2);
            break;

        case 5:
            localctx = new LegacyDocLogContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 771;
            this.match(JQLParser.LOG);
            this.state = 772;
            this.match(JQLParser.T__1);
            this.state = 773;
            this.legacyDocMetric(0);
            this.state = 776;
            _la = this._input.LA(1);
            if(_la===JQLParser.T__3) {
                this.state = 774;
                this.match(JQLParser.T__3);
                this.state = 775;
                localctx.scaleFactor = this.integer();
            }

            this.state = 778;
            this.match(JQLParser.T__2);
            break;

        case 6:
            localctx = new LegacyDocExpContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 780;
            this.match(JQLParser.EXP);
            this.state = 781;
            this.match(JQLParser.T__1);
            this.state = 782;
            this.legacyDocMetric(0);
            this.state = 785;
            _la = this._input.LA(1);
            if(_la===JQLParser.T__3) {
                this.state = 783;
                this.match(JQLParser.T__3);
                this.state = 784;
                localctx.scaleFactor = this.integer();
            }

            this.state = 787;
            this.match(JQLParser.T__2);
            break;

        case 7:
            localctx = new LegacyDocMinContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 789;
            this.match(JQLParser.MIN);
            this.state = 790;
            this.match(JQLParser.T__1);
            this.state = 791;
            localctx.arg1 = this.legacyDocMetric(0);
            this.state = 792;
            this.match(JQLParser.T__3);
            this.state = 793;
            localctx.arg2 = this.legacyDocMetric(0);
            this.state = 794;
            this.match(JQLParser.T__2);
            break;

        case 8:
            localctx = new LegacyDocMaxContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 796;
            this.match(JQLParser.MAX);
            this.state = 797;
            this.match(JQLParser.T__1);
            this.state = 798;
            localctx.arg1 = this.legacyDocMetric(0);
            this.state = 799;
            this.match(JQLParser.T__3);
            this.state = 800;
            localctx.arg2 = this.legacyDocMetric(0);
            this.state = 801;
            this.match(JQLParser.T__2);
            break;

        case 9:
            localctx = new LegacyDocMetricParensContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 803;
            this.match(JQLParser.T__1);
            this.state = 804;
            this.legacyDocMetric(0);
            this.state = 805;
            this.match(JQLParser.T__2);
            break;

        case 10:
            localctx = new LegacyDocAtomContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 807;
            this.legacyDocMetricAtom();
            break;

        case 11:
            localctx = new LegacyDocIntContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 808;
            this.integer();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 836;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,53,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 834;
                var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new LegacyDocMultOrDivideOrModulusContext(this, new LegacyDocMetricContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JQLParser.RULE_legacyDocMetric);
                    this.state = 811;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 815;
                    switch(this._input.LA(1)) {
                    case JQLParser.T__9:
                        this.state = 812;
                        localctx.multiply = this.match(JQLParser.T__9);
                        break;
                    case JQLParser.T__24:
                        this.state = 813;
                        localctx.divide = this.match(JQLParser.T__24);
                        break;
                    case JQLParser.T__10:
                        this.state = 814;
                        localctx.modulus = this.match(JQLParser.T__10);
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    this.state = 817;
                    this.legacyDocMetric(7);
                    break;

                case 2:
                    localctx = new LegacyDocPlusOrMinusContext(this, new LegacyDocMetricContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JQLParser.RULE_legacyDocMetric);
                    this.state = 818;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 821;
                    switch(this._input.LA(1)) {
                    case JQLParser.T__11:
                        this.state = 819;
                        localctx.plus = this.match(JQLParser.T__11);
                        break;
                    case JQLParser.T__0:
                        this.state = 820;
                        localctx.minus = this.match(JQLParser.T__0);
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    this.state = 823;
                    this.legacyDocMetric(6);
                    break;

                case 3:
                    localctx = new LegacyDocInequalityContext(this, new LegacyDocMetricContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JQLParser.RULE_legacyDocMetric);
                    this.state = 824;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 831;
                    switch(this._input.LA(1)) {
                    case JQLParser.T__20:
                        this.state = 825;
                        localctx.gte = this.match(JQLParser.T__20);
                        break;
                    case JQLParser.T__19:
                        this.state = 826;
                        localctx.gt = this.match(JQLParser.T__19);
                        break;
                    case JQLParser.T__18:
                        this.state = 827;
                        localctx.lte = this.match(JQLParser.T__18);
                        break;
                    case JQLParser.T__17:
                        this.state = 828;
                        localctx.lt = this.match(JQLParser.T__17);
                        break;
                    case JQLParser.T__15:
                        this.state = 829;
                        localctx.eq = this.match(JQLParser.T__15);
                        break;
                    case JQLParser.T__16:
                        this.state = 830;
                        localctx.neq = this.match(JQLParser.T__16);
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    this.state = 833;
                    this.legacyDocMetric(5);
                    break;

                } 
            }
            this.state = 838;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,53,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function JqlDocMetricContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_jqlDocMetric;
    return this;
}

JqlDocMetricContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JqlDocMetricContext.prototype.constructor = JqlDocMetricContext;


 
JqlDocMetricContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function DocIdContext(parser, ctx) {
	JqlDocMetricContext.call(this, parser);
    JqlDocMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocIdContext.prototype = Object.create(JqlDocMetricContext.prototype);
DocIdContext.prototype.constructor = DocIdContext;

JQLParser.DocIdContext = DocIdContext;

DocIdContext.prototype.DOCID = function() {
    return this.getToken(JQLParser.DOCID, 0);
};
DocIdContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocId(this);
	}
};

DocIdContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocId(this);
	}
};


function DocIntContext(parser, ctx) {
	JqlDocMetricContext.call(this, parser);
    JqlDocMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocIntContext.prototype = Object.create(JqlDocMetricContext.prototype);
DocIntContext.prototype.constructor = DocIntContext;

JQLParser.DocIntContext = DocIntContext;

DocIntContext.prototype.integer = function() {
    return this.getTypedRuleContext(IntegerContext,0);
};
DocIntContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocInt(this);
	}
};

DocIntContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocInt(this);
	}
};


function DocIfThenElseContext(parser, ctx) {
	JqlDocMetricContext.call(this, parser);
    this.filter = null; // JqlDocFilterContext;
    this.trueCase = null; // JqlDocMetricContext;
    this.falseCase = null; // JqlDocMetricContext;
    JqlDocMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocIfThenElseContext.prototype = Object.create(JqlDocMetricContext.prototype);
DocIfThenElseContext.prototype.constructor = DocIfThenElseContext;

JQLParser.DocIfThenElseContext = DocIfThenElseContext;

DocIfThenElseContext.prototype.IF = function() {
    return this.getToken(JQLParser.IF, 0);
};

DocIfThenElseContext.prototype.THEN = function() {
    return this.getToken(JQLParser.THEN, 0);
};

DocIfThenElseContext.prototype.ELSE = function() {
    return this.getToken(JQLParser.ELSE, 0);
};

DocIfThenElseContext.prototype.jqlDocFilter = function() {
    return this.getTypedRuleContext(JqlDocFilterContext,0);
};

DocIfThenElseContext.prototype.jqlDocMetric = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JqlDocMetricContext);
    } else {
        return this.getTypedRuleContext(JqlDocMetricContext,i);
    }
};
DocIfThenElseContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocIfThenElse(this);
	}
};

DocIfThenElseContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocIfThenElse(this);
	}
};


function DocNegateContext(parser, ctx) {
	JqlDocMetricContext.call(this, parser);
    JqlDocMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocNegateContext.prototype = Object.create(JqlDocMetricContext.prototype);
DocNegateContext.prototype.constructor = DocNegateContext;

JQLParser.DocNegateContext = DocNegateContext;

DocNegateContext.prototype.jqlDocMetric = function() {
    return this.getTypedRuleContext(JqlDocMetricContext,0);
};
DocNegateContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocNegate(this);
	}
};

DocNegateContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocNegate(this);
	}
};


function DocAbsContext(parser, ctx) {
	JqlDocMetricContext.call(this, parser);
    JqlDocMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocAbsContext.prototype = Object.create(JqlDocMetricContext.prototype);
DocAbsContext.prototype.constructor = DocAbsContext;

JQLParser.DocAbsContext = DocAbsContext;

DocAbsContext.prototype.ABS = function() {
    return this.getToken(JQLParser.ABS, 0);
};

DocAbsContext.prototype.jqlDocMetric = function() {
    return this.getTypedRuleContext(JqlDocMetricContext,0);
};
DocAbsContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocAbs(this);
	}
};

DocAbsContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocAbs(this);
	}
};


function DocMinContext(parser, ctx) {
	JqlDocMetricContext.call(this, parser);
    this._jqlDocMetric = null; // JqlDocMetricContext;
    this.metrics = []; // of JqlDocMetricContexts;
    JqlDocMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocMinContext.prototype = Object.create(JqlDocMetricContext.prototype);
DocMinContext.prototype.constructor = DocMinContext;

JQLParser.DocMinContext = DocMinContext;

DocMinContext.prototype.MIN = function() {
    return this.getToken(JQLParser.MIN, 0);
};

DocMinContext.prototype.jqlDocMetric = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JqlDocMetricContext);
    } else {
        return this.getTypedRuleContext(JqlDocMetricContext,i);
    }
};
DocMinContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocMin(this);
	}
};

DocMinContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocMin(this);
	}
};


function DocPlusOrMinusContext(parser, ctx) {
	JqlDocMetricContext.call(this, parser);
    this.plus = null; // Token;
    this.minus = null; // Token;
    JqlDocMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocPlusOrMinusContext.prototype = Object.create(JqlDocMetricContext.prototype);
DocPlusOrMinusContext.prototype.constructor = DocPlusOrMinusContext;

JQLParser.DocPlusOrMinusContext = DocPlusOrMinusContext;

DocPlusOrMinusContext.prototype.jqlDocMetric = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JqlDocMetricContext);
    } else {
        return this.getTypedRuleContext(JqlDocMetricContext,i);
    }
};
DocPlusOrMinusContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocPlusOrMinus(this);
	}
};

DocPlusOrMinusContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocPlusOrMinus(this);
	}
};


function DocMetricParensContext(parser, ctx) {
	JqlDocMetricContext.call(this, parser);
    JqlDocMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocMetricParensContext.prototype = Object.create(JqlDocMetricContext.prototype);
DocMetricParensContext.prototype.constructor = DocMetricParensContext;

JQLParser.DocMetricParensContext = DocMetricParensContext;

DocMetricParensContext.prototype.jqlDocMetric = function() {
    return this.getTypedRuleContext(JqlDocMetricContext,0);
};
DocMetricParensContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocMetricParens(this);
	}
};

DocMetricParensContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocMetricParens(this);
	}
};


function DocAtomContext(parser, ctx) {
	JqlDocMetricContext.call(this, parser);
    JqlDocMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocAtomContext.prototype = Object.create(JqlDocMetricContext.prototype);
DocAtomContext.prototype.constructor = DocAtomContext;

JQLParser.DocAtomContext = DocAtomContext;

DocAtomContext.prototype.jqlDocMetricAtom = function() {
    return this.getTypedRuleContext(JqlDocMetricAtomContext,0);
};
DocAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocAtom(this);
	}
};

DocAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocAtom(this);
	}
};


function DocInequalityContext(parser, ctx) {
	JqlDocMetricContext.call(this, parser);
    this.gte = null; // Token;
    this.gt = null; // Token;
    this.lte = null; // Token;
    this.lt = null; // Token;
    this.eq = null; // Token;
    this.neq = null; // Token;
    JqlDocMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocInequalityContext.prototype = Object.create(JqlDocMetricContext.prototype);
DocInequalityContext.prototype.constructor = DocInequalityContext;

JQLParser.DocInequalityContext = DocInequalityContext;

DocInequalityContext.prototype.jqlDocMetric = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JqlDocMetricContext);
    } else {
        return this.getTypedRuleContext(JqlDocMetricContext,i);
    }
};
DocInequalityContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocInequality(this);
	}
};

DocInequalityContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocInequality(this);
	}
};


function DocExpContext(parser, ctx) {
	JqlDocMetricContext.call(this, parser);
    this.scaleFactor = null; // IntegerContext;
    JqlDocMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocExpContext.prototype = Object.create(JqlDocMetricContext.prototype);
DocExpContext.prototype.constructor = DocExpContext;

JQLParser.DocExpContext = DocExpContext;

DocExpContext.prototype.EXP = function() {
    return this.getToken(JQLParser.EXP, 0);
};

DocExpContext.prototype.jqlDocMetric = function() {
    return this.getTypedRuleContext(JqlDocMetricContext,0);
};

DocExpContext.prototype.integer = function() {
    return this.getTypedRuleContext(IntegerContext,0);
};
DocExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocExp(this);
	}
};

DocExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocExp(this);
	}
};


function DocMetricFilterContext(parser, ctx) {
	JqlDocMetricContext.call(this, parser);
    JqlDocMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocMetricFilterContext.prototype = Object.create(JqlDocMetricContext.prototype);
DocMetricFilterContext.prototype.constructor = DocMetricFilterContext;

JQLParser.DocMetricFilterContext = DocMetricFilterContext;

DocMetricFilterContext.prototype.M = function() {
    return this.getToken(JQLParser.M, 0);
};

DocMetricFilterContext.prototype.jqlDocFilter = function() {
    return this.getTypedRuleContext(JqlDocFilterContext,0);
};
DocMetricFilterContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocMetricFilter(this);
	}
};

DocMetricFilterContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocMetricFilter(this);
	}
};


function DocCountsContext(parser, ctx) {
	JqlDocMetricContext.call(this, parser);
    JqlDocMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocCountsContext.prototype = Object.create(JqlDocMetricContext.prototype);
DocCountsContext.prototype.constructor = DocCountsContext;

JQLParser.DocCountsContext = DocCountsContext;

DocCountsContext.prototype.COUNT = function() {
    return this.getToken(JQLParser.COUNT, 0);
};
DocCountsContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocCounts(this);
	}
};

DocCountsContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocCounts(this);
	}
};


function DocSignumContext(parser, ctx) {
	JqlDocMetricContext.call(this, parser);
    JqlDocMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocSignumContext.prototype = Object.create(JqlDocMetricContext.prototype);
DocSignumContext.prototype.constructor = DocSignumContext;

JQLParser.DocSignumContext = DocSignumContext;

DocSignumContext.prototype.SIGNUM = function() {
    return this.getToken(JQLParser.SIGNUM, 0);
};

DocSignumContext.prototype.jqlDocMetric = function() {
    return this.getTypedRuleContext(JqlDocMetricContext,0);
};
DocSignumContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocSignum(this);
	}
};

DocSignumContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocSignum(this);
	}
};


function DocMultOrDivideOrModulusContext(parser, ctx) {
	JqlDocMetricContext.call(this, parser);
    this.multiply = null; // Token;
    this.divide = null; // Token;
    this.modulus = null; // Token;
    JqlDocMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocMultOrDivideOrModulusContext.prototype = Object.create(JqlDocMetricContext.prototype);
DocMultOrDivideOrModulusContext.prototype.constructor = DocMultOrDivideOrModulusContext;

JQLParser.DocMultOrDivideOrModulusContext = DocMultOrDivideOrModulusContext;

DocMultOrDivideOrModulusContext.prototype.jqlDocMetric = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JqlDocMetricContext);
    } else {
        return this.getTypedRuleContext(JqlDocMetricContext,i);
    }
};
DocMultOrDivideOrModulusContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocMultOrDivideOrModulus(this);
	}
};

DocMultOrDivideOrModulusContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocMultOrDivideOrModulus(this);
	}
};


function DocLogContext(parser, ctx) {
	JqlDocMetricContext.call(this, parser);
    this.scaleFactor = null; // IntegerContext;
    JqlDocMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocLogContext.prototype = Object.create(JqlDocMetricContext.prototype);
DocLogContext.prototype.constructor = DocLogContext;

JQLParser.DocLogContext = DocLogContext;

DocLogContext.prototype.LOG = function() {
    return this.getToken(JQLParser.LOG, 0);
};

DocLogContext.prototype.jqlDocMetric = function() {
    return this.getTypedRuleContext(JqlDocMetricContext,0);
};

DocLogContext.prototype.integer = function() {
    return this.getTypedRuleContext(IntegerContext,0);
};
DocLogContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocLog(this);
	}
};

DocLogContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocLog(this);
	}
};


function DocMaxContext(parser, ctx) {
	JqlDocMetricContext.call(this, parser);
    this._jqlDocMetric = null; // JqlDocMetricContext;
    this.metrics = []; // of JqlDocMetricContexts;
    JqlDocMetricContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocMaxContext.prototype = Object.create(JqlDocMetricContext.prototype);
DocMaxContext.prototype.constructor = DocMaxContext;

JQLParser.DocMaxContext = DocMaxContext;

DocMaxContext.prototype.MAX = function() {
    return this.getToken(JQLParser.MAX, 0);
};

DocMaxContext.prototype.jqlDocMetric = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JqlDocMetricContext);
    } else {
        return this.getTypedRuleContext(JqlDocMetricContext,i);
    }
};
DocMaxContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocMax(this);
	}
};

DocMaxContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocMax(this);
	}
};



JQLParser.prototype.jqlDocMetric = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new JqlDocMetricContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 48;
    this.enterRecursionRule(localctx, 48, JQLParser.RULE_jqlDocMetric, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 918;
        var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
        switch(la_) {
        case 1:
            localctx = new DocIfThenElseContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 840;
            this.match(JQLParser.IF);
            this.state = 841;
            localctx.filter = this.jqlDocFilter(0);
            this.state = 842;
            this.match(JQLParser.THEN);
            this.state = 843;
            localctx.trueCase = this.jqlDocMetric(0);
            this.state = 844;
            this.match(JQLParser.ELSE);
            this.state = 845;
            localctx.falseCase = this.jqlDocMetric(9);
            break;

        case 2:
            localctx = new DocNegateContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 847;
            this.match(JQLParser.T__0);
            this.state = 848;
            this.jqlDocMetric(8);
            break;

        case 3:
            localctx = new DocCountsContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 849;
            this.match(JQLParser.COUNT);
            this.state = 850;
            this.match(JQLParser.T__1);
            this.state = 851;
            this.match(JQLParser.T__2);
            break;

        case 4:
            localctx = new DocAbsContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 852;
            this.match(JQLParser.ABS);
            this.state = 853;
            this.match(JQLParser.T__1);
            this.state = 854;
            this.jqlDocMetric(0);
            this.state = 855;
            this.match(JQLParser.T__2);
            break;

        case 5:
            localctx = new DocSignumContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 857;
            this.match(JQLParser.SIGNUM);
            this.state = 858;
            this.match(JQLParser.T__1);
            this.state = 859;
            this.jqlDocMetric(0);
            this.state = 860;
            this.match(JQLParser.T__2);
            break;

        case 6:
            localctx = new DocLogContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 862;
            this.match(JQLParser.LOG);
            this.state = 863;
            this.match(JQLParser.T__1);
            this.state = 864;
            this.jqlDocMetric(0);
            this.state = 867;
            _la = this._input.LA(1);
            if(_la===JQLParser.T__3) {
                this.state = 865;
                this.match(JQLParser.T__3);
                this.state = 866;
                localctx.scaleFactor = this.integer();
            }

            this.state = 869;
            this.match(JQLParser.T__2);
            break;

        case 7:
            localctx = new DocExpContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 871;
            this.match(JQLParser.EXP);
            this.state = 872;
            this.match(JQLParser.T__1);
            this.state = 873;
            this.jqlDocMetric(0);
            this.state = 876;
            _la = this._input.LA(1);
            if(_la===JQLParser.T__3) {
                this.state = 874;
                this.match(JQLParser.T__3);
                this.state = 875;
                localctx.scaleFactor = this.integer();
            }

            this.state = 878;
            this.match(JQLParser.T__2);
            break;

        case 8:
            localctx = new DocMinContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 880;
            this.match(JQLParser.MIN);
            this.state = 881;
            this.match(JQLParser.T__1);
            this.state = 882;
            localctx._jqlDocMetric = this.jqlDocMetric(0);
            localctx.metrics.push(localctx._jqlDocMetric);
            this.state = 887;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===JQLParser.T__3) {
                this.state = 883;
                this.match(JQLParser.T__3);
                this.state = 884;
                localctx._jqlDocMetric = this.jqlDocMetric(0);
                localctx.metrics.push(localctx._jqlDocMetric);
                this.state = 889;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 890;
            this.match(JQLParser.T__2);
            break;

        case 9:
            localctx = new DocMaxContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 892;
            this.match(JQLParser.MAX);
            this.state = 893;
            this.match(JQLParser.T__1);
            this.state = 894;
            localctx._jqlDocMetric = this.jqlDocMetric(0);
            localctx.metrics.push(localctx._jqlDocMetric);
            this.state = 899;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===JQLParser.T__3) {
                this.state = 895;
                this.match(JQLParser.T__3);
                this.state = 896;
                localctx._jqlDocMetric = this.jqlDocMetric(0);
                localctx.metrics.push(localctx._jqlDocMetric);
                this.state = 901;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 902;
            this.match(JQLParser.T__2);
            break;

        case 10:
            localctx = new DocMetricFilterContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 904;
            this.match(JQLParser.M);
            this.state = 905;
            this.match(JQLParser.T__1);
            this.state = 906;
            this.jqlDocFilter(0);
            this.state = 907;
            this.match(JQLParser.T__2);
            break;

        case 11:
            localctx = new DocMetricParensContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 909;
            this.match(JQLParser.T__1);
            this.state = 910;
            this.jqlDocMetric(0);
            this.state = 911;
            this.match(JQLParser.T__2);
            break;

        case 12:
            localctx = new DocAtomContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 913;
            this.jqlDocMetricAtom();
            break;

        case 13:
            localctx = new DocIntContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 914;
            this.integer();
            break;

        case 14:
            localctx = new DocIdContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 915;
            this.match(JQLParser.DOCID);
            this.state = 916;
            this.match(JQLParser.T__1);
            this.state = 917;
            this.match(JQLParser.T__2);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 945;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,63,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 943;
                var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new DocMultOrDivideOrModulusContext(this, new JqlDocMetricContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JQLParser.RULE_jqlDocMetric);
                    this.state = 920;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 924;
                    switch(this._input.LA(1)) {
                    case JQLParser.T__9:
                        this.state = 921;
                        localctx.multiply = this.match(JQLParser.T__9);
                        break;
                    case JQLParser.T__4:
                        this.state = 922;
                        localctx.divide = this.match(JQLParser.T__4);
                        break;
                    case JQLParser.T__10:
                        this.state = 923;
                        localctx.modulus = this.match(JQLParser.T__10);
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    this.state = 926;
                    this.jqlDocMetric(8);
                    break;

                case 2:
                    localctx = new DocPlusOrMinusContext(this, new JqlDocMetricContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JQLParser.RULE_jqlDocMetric);
                    this.state = 927;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 930;
                    switch(this._input.LA(1)) {
                    case JQLParser.T__11:
                        this.state = 928;
                        localctx.plus = this.match(JQLParser.T__11);
                        break;
                    case JQLParser.T__0:
                        this.state = 929;
                        localctx.minus = this.match(JQLParser.T__0);
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    this.state = 932;
                    this.jqlDocMetric(7);
                    break;

                case 3:
                    localctx = new DocInequalityContext(this, new JqlDocMetricContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JQLParser.RULE_jqlDocMetric);
                    this.state = 933;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 940;
                    switch(this._input.LA(1)) {
                    case JQLParser.T__20:
                        this.state = 934;
                        localctx.gte = this.match(JQLParser.T__20);
                        break;
                    case JQLParser.T__19:
                        this.state = 935;
                        localctx.gt = this.match(JQLParser.T__19);
                        break;
                    case JQLParser.T__18:
                        this.state = 936;
                        localctx.lte = this.match(JQLParser.T__18);
                        break;
                    case JQLParser.T__17:
                        this.state = 937;
                        localctx.lt = this.match(JQLParser.T__17);
                        break;
                    case JQLParser.T__15:
                        this.state = 938;
                        localctx.eq = this.match(JQLParser.T__15);
                        break;
                    case JQLParser.T__16:
                        this.state = 939;
                        localctx.neq = this.match(JQLParser.T__16);
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    this.state = 942;
                    this.jqlDocMetric(6);
                    break;

                } 
            }
            this.state = 947;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,63,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function TermValContext(parser, parent, invokingState, useLegacy) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_termVal;
    this.useLegacy = null
    this.useLegacy = useLegacy || null;
    return this;
}

TermValContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TermValContext.prototype.constructor = TermValContext;

TermValContext.prototype.legacyTermVal = function() {
    return this.getTypedRuleContext(LegacyTermValContext,0);
};

TermValContext.prototype.jqlTermVal = function() {
    return this.getTypedRuleContext(JqlTermValContext,0);
};

TermValContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterTermVal(this);
	}
};

TermValContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitTermVal(this);
	}
};




JQLParser.TermValContext = TermValContext;

JQLParser.prototype.termVal = function(useLegacy) {

    var localctx = new TermValContext(this, this._ctx, this.state, useLegacy);
    this.enterRule(localctx, 50, JQLParser.RULE_termVal);
    try {
        this.state = 952;
        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 948;
            if (!( localctx.useLegacy)) {
                throw new antlr4.error.FailedPredicateException(this, "$ctx.useLegacy");
            }
            this.state = 949;
            this.legacyTermVal();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 950;
            if (!( !localctx.useLegacy)) {
                throw new antlr4.error.FailedPredicateException(this, "!$ctx.useLegacy");
            }
            this.state = 951;
            this.jqlTermVal();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LegacyTermValContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_legacyTermVal;
    return this;
}

LegacyTermValContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LegacyTermValContext.prototype.constructor = LegacyTermValContext;


 
LegacyTermValContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function LegacyStringTermContext(parser, ctx) {
	LegacyTermValContext.call(this, parser);
    LegacyTermValContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyStringTermContext.prototype = Object.create(LegacyTermValContext.prototype);
LegacyStringTermContext.prototype.constructor = LegacyStringTermContext;

JQLParser.LegacyStringTermContext = LegacyStringTermContext;

LegacyStringTermContext.prototype.STRING_LITERAL = function() {
    return this.getToken(JQLParser.STRING_LITERAL, 0);
};

LegacyStringTermContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
LegacyStringTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyStringTerm(this);
	}
};

LegacyStringTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyStringTerm(this);
	}
};


function LegacyIntTermContext(parser, ctx) {
	LegacyTermValContext.call(this, parser);
    LegacyTermValContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyIntTermContext.prototype = Object.create(LegacyTermValContext.prototype);
LegacyIntTermContext.prototype.constructor = LegacyIntTermContext;

JQLParser.LegacyIntTermContext = LegacyIntTermContext;

LegacyIntTermContext.prototype.integer = function() {
    return this.getTypedRuleContext(IntegerContext,0);
};
LegacyIntTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyIntTerm(this);
	}
};

LegacyIntTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyIntTerm(this);
	}
};



JQLParser.LegacyTermValContext = LegacyTermValContext;

JQLParser.prototype.legacyTermVal = function() {

    var localctx = new LegacyTermValContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, JQLParser.RULE_legacyTermVal);
    try {
        this.state = 957;
        switch(this._input.LA(1)) {
        case JQLParser.T__0:
        case JQLParser.NAT:
            localctx = new LegacyIntTermContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 954;
            this.integer();
            break;
        case JQLParser.STRING_LITERAL:
            localctx = new LegacyStringTermContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 955;
            this.match(JQLParser.STRING_LITERAL);
            break;
        case JQLParser.LAG:
        case JQLParser.RUNNING:
        case JQLParser.PARENT:
        case JQLParser.DISTINCT:
        case JQLParser.DISTINCT_WINDOW:
        case JQLParser.WINDOW:
        case JQLParser.PERCENTILE:
        case JQLParser.MEDIAN:
        case JQLParser.PDIFF:
        case JQLParser.DIFF:
        case JQLParser.RATIODIFF:
        case JQLParser.SINGLESCORE:
        case JQLParser.RATIOSCORE:
        case JQLParser.AVG:
        case JQLParser.VARIANCE:
        case JQLParser.STDEV:
        case JQLParser.LOG:
        case JQLParser.ABS:
        case JQLParser.SUM_OVER:
        case JQLParser.AVG_OVER:
        case JQLParser.WHERE:
        case JQLParser.HASSTR:
        case JQLParser.HASINT:
        case JQLParser.FROM:
        case JQLParser.GROUP:
        case JQLParser.BY:
        case JQLParser.AGO:
        case JQLParser.COUNT:
        case JQLParser.AS:
        case JQLParser.NOT:
        case JQLParser.LUCENE:
        case JQLParser.QUERY:
        case JQLParser.TOP:
        case JQLParser.BOTTOM:
        case JQLParser.WITH:
        case JQLParser.DEFAULT:
        case JQLParser.TIME:
        case JQLParser.TIMEBUCKETS:
        case JQLParser.TO:
        case JQLParser.BUCKETS:
        case JQLParser.BUCKET:
        case JQLParser.IN:
        case JQLParser.DESCENDING:
        case JQLParser.DESC:
        case JQLParser.ASCENDING:
        case JQLParser.ASC:
        case JQLParser.DAYOFWEEK:
        case JQLParser.QUANTILES:
        case JQLParser.BETWEEN:
        case JQLParser.SAMPLE:
        case JQLParser.AND:
        case JQLParser.OR:
        case JQLParser.TRUE:
        case JQLParser.FALSE:
        case JQLParser.IF:
        case JQLParser.THEN:
        case JQLParser.ELSE:
        case JQLParser.FLOATSCALE:
        case JQLParser.SIGNUM:
        case JQLParser.LIMIT:
        case JQLParser.HAVING:
        case JQLParser.FIELD_MIN:
        case JQLParser.FIELD_MAX:
        case JQLParser.ALIASING:
        case JQLParser.HASSTRFIELD:
        case JQLParser.HASINTFIELD:
        case JQLParser.LEN:
        case JQLParser.INTTERMCOUNT:
        case JQLParser.STRTERMCOUNT:
        case JQLParser.SAME:
        case JQLParser.EXP:
        case JQLParser.WINDOW_SUM:
        case JQLParser.MIN:
        case JQLParser.MAX:
        case JQLParser.PRINTF:
        case JQLParser.EXTRACT:
        case JQLParser.RELATIVE:
        case JQLParser.DATASET:
        case JQLParser.RANDOM:
        case JQLParser.OPTIONS:
        case JQLParser.DOCID:
        case JQLParser.M:
        case JQLParser.Y:
        case JQLParser.TODAYS:
        case JQLParser.TOMORROWS:
        case JQLParser.YESTERDAYS:
        case JQLParser.TIME_UNIT:
        case JQLParser.TIME_PERIOD_ATOM:
        case JQLParser.ID:
        case JQLParser.BACKQUOTED_ID:
            localctx = new LegacyStringTermContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 956;
            this.identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function JqlTermValContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_jqlTermVal;
    return this;
}

JqlTermValContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JqlTermValContext.prototype.constructor = JqlTermValContext;


 
JqlTermValContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function JqlStringTermContext(parser, ctx) {
	JqlTermValContext.call(this, parser);
    JqlTermValContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JqlStringTermContext.prototype = Object.create(JqlTermValContext.prototype);
JqlStringTermContext.prototype.constructor = JqlStringTermContext;

JQLParser.JqlStringTermContext = JqlStringTermContext;

JqlStringTermContext.prototype.STRING_LITERAL = function() {
    return this.getToken(JQLParser.STRING_LITERAL, 0);
};
JqlStringTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterJqlStringTerm(this);
	}
};

JqlStringTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitJqlStringTerm(this);
	}
};


function JqlIntTermContext(parser, ctx) {
	JqlTermValContext.call(this, parser);
    JqlTermValContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JqlIntTermContext.prototype = Object.create(JqlTermValContext.prototype);
JqlIntTermContext.prototype.constructor = JqlIntTermContext;

JQLParser.JqlIntTermContext = JqlIntTermContext;

JqlIntTermContext.prototype.integer = function() {
    return this.getTypedRuleContext(IntegerContext,0);
};
JqlIntTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterJqlIntTerm(this);
	}
};

JqlIntTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitJqlIntTerm(this);
	}
};



JQLParser.JqlTermValContext = JqlTermValContext;

JQLParser.prototype.jqlTermVal = function() {

    var localctx = new JqlTermValContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, JQLParser.RULE_jqlTermVal);
    try {
        this.state = 961;
        switch(this._input.LA(1)) {
        case JQLParser.T__0:
        case JQLParser.NAT:
            localctx = new JqlIntTermContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 959;
            this.integer();
            break;
        case JQLParser.STRING_LITERAL:
            localctx = new JqlStringTermContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 960;
            this.match(JQLParser.STRING_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DocFilterContext(parser, parent, invokingState, useLegacy) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_docFilter;
    this.useLegacy = null
    this.useLegacy = useLegacy || null;
    return this;
}

DocFilterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DocFilterContext.prototype.constructor = DocFilterContext;

DocFilterContext.prototype.legacyDocFilter = function() {
    return this.getTypedRuleContext(LegacyDocFilterContext,0);
};

DocFilterContext.prototype.jqlDocFilter = function() {
    return this.getTypedRuleContext(JqlDocFilterContext,0);
};

DocFilterContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocFilter(this);
	}
};

DocFilterContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocFilter(this);
	}
};




JQLParser.DocFilterContext = DocFilterContext;

JQLParser.prototype.docFilter = function(useLegacy) {

    var localctx = new DocFilterContext(this, this._ctx, this.state, useLegacy);
    this.enterRule(localctx, 56, JQLParser.RULE_docFilter);
    try {
        this.state = 967;
        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 963;
            if (!( localctx.useLegacy)) {
                throw new antlr4.error.FailedPredicateException(this, "$ctx.useLegacy");
            }
            this.state = 964;
            this.legacyDocFilter(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 965;
            if (!( !localctx.useLegacy)) {
                throw new antlr4.error.FailedPredicateException(this, "!$ctx.useLegacy");
            }
            this.state = 966;
            this.jqlDocFilter(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DocFilterEofContext(parser, parent, invokingState, useLegacy) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_docFilterEof;
    this.useLegacy = null
    this.useLegacy = useLegacy || null;
    return this;
}

DocFilterEofContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DocFilterEofContext.prototype.constructor = DocFilterEofContext;

DocFilterEofContext.prototype.docFilter = function() {
    return this.getTypedRuleContext(DocFilterContext,0);
};

DocFilterEofContext.prototype.EOF = function() {
    return this.getToken(JQLParser.EOF, 0);
};

DocFilterEofContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocFilterEof(this);
	}
};

DocFilterEofContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocFilterEof(this);
	}
};




JQLParser.DocFilterEofContext = DocFilterEofContext;

JQLParser.prototype.docFilterEof = function(useLegacy) {

    var localctx = new DocFilterEofContext(this, this._ctx, this.state, useLegacy);
    this.enterRule(localctx, 58, JQLParser.RULE_docFilterEof);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 969;
        this.docFilter(localctx.useLegacy);
        this.state = 970;
        this.match(JQLParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LegacyDocFilterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_legacyDocFilter;
    return this;
}

LegacyDocFilterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LegacyDocFilterContext.prototype.constructor = LegacyDocFilterContext;


 
LegacyDocFilterContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function LegacyDocFieldInContext(parser, ctx) {
	LegacyDocFilterContext.call(this, parser);
    this.field = null; // IdentifierContext;
    this.not = null; // Token;
    this._legacyTermVal = null; // LegacyTermValContext;
    this.terms = []; // of LegacyTermValContexts;
    LegacyDocFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyDocFieldInContext.prototype = Object.create(LegacyDocFilterContext.prototype);
LegacyDocFieldInContext.prototype.constructor = LegacyDocFieldInContext;

JQLParser.LegacyDocFieldInContext = LegacyDocFieldInContext;

LegacyDocFieldInContext.prototype.IN = function() {
    return this.getToken(JQLParser.IN, 0);
};

LegacyDocFieldInContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

LegacyDocFieldInContext.prototype.NOT = function() {
    return this.getToken(JQLParser.NOT, 0);
};

LegacyDocFieldInContext.prototype.legacyTermVal = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LegacyTermValContext);
    } else {
        return this.getTypedRuleContext(LegacyTermValContext,i);
    }
};
LegacyDocFieldInContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyDocFieldIn(this);
	}
};

LegacyDocFieldInContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyDocFieldIn(this);
	}
};


function LegacyDocSampleContext(parser, ctx) {
	LegacyDocFilterContext.call(this, parser);
    this.field = null; // IdentifierContext;
    this.numerator = null; // Token;
    this.denominator = null; // Token;
    this.seed = null; // Token;
    LegacyDocFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyDocSampleContext.prototype = Object.create(LegacyDocFilterContext.prototype);
LegacyDocSampleContext.prototype.constructor = LegacyDocSampleContext;

JQLParser.LegacyDocSampleContext = LegacyDocSampleContext;

LegacyDocSampleContext.prototype.SAMPLE = function() {
    return this.getToken(JQLParser.SAMPLE, 0);
};

LegacyDocSampleContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

LegacyDocSampleContext.prototype.NAT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JQLParser.NAT);
    } else {
        return this.getToken(JQLParser.NAT, i);
    }
};


LegacyDocSampleContext.prototype.STRING_LITERAL = function() {
    return this.getToken(JQLParser.STRING_LITERAL, 0);
};
LegacyDocSampleContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyDocSample(this);
	}
};

LegacyDocSampleContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyDocSample(this);
	}
};


function LegacyLuceneContext(parser, ctx) {
	LegacyDocFilterContext.call(this, parser);
    LegacyDocFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyLuceneContext.prototype = Object.create(LegacyDocFilterContext.prototype);
LegacyLuceneContext.prototype.constructor = LegacyLuceneContext;

JQLParser.LegacyLuceneContext = LegacyLuceneContext;

LegacyLuceneContext.prototype.STRING_LITERAL = function() {
    return this.getToken(JQLParser.STRING_LITERAL, 0);
};

LegacyLuceneContext.prototype.LUCENE = function() {
    return this.getToken(JQLParser.LUCENE, 0);
};

LegacyLuceneContext.prototype.QUERY = function() {
    return this.getToken(JQLParser.QUERY, 0);
};
LegacyLuceneContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyLucene(this);
	}
};

LegacyLuceneContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyLucene(this);
	}
};


function LegacyDocFieldIsContext(parser, ctx) {
	LegacyDocFilterContext.call(this, parser);
    this.field = null; // IdentifierContext;
    LegacyDocFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyDocFieldIsContext.prototype = Object.create(LegacyDocFilterContext.prototype);
LegacyDocFieldIsContext.prototype.constructor = LegacyDocFieldIsContext;

JQLParser.LegacyDocFieldIsContext = LegacyDocFieldIsContext;

LegacyDocFieldIsContext.prototype.legacyTermVal = function() {
    return this.getTypedRuleContext(LegacyTermValContext,0);
};

LegacyDocFieldIsContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
LegacyDocFieldIsContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyDocFieldIs(this);
	}
};

LegacyDocFieldIsContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyDocFieldIs(this);
	}
};


function LegacyDocBetweenContext(parser, ctx) {
	LegacyDocFilterContext.call(this, parser);
    this.field = null; // IdentifierContext;
    this.lowerBound = null; // IntegerContext;
    this.upperBound = null; // IntegerContext;
    LegacyDocFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyDocBetweenContext.prototype = Object.create(LegacyDocFilterContext.prototype);
LegacyDocBetweenContext.prototype.constructor = LegacyDocBetweenContext;

JQLParser.LegacyDocBetweenContext = LegacyDocBetweenContext;

LegacyDocBetweenContext.prototype.BETWEEN = function() {
    return this.getToken(JQLParser.BETWEEN, 0);
};

LegacyDocBetweenContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

LegacyDocBetweenContext.prototype.integer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IntegerContext);
    } else {
        return this.getTypedRuleContext(IntegerContext,i);
    }
};
LegacyDocBetweenContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyDocBetween(this);
	}
};

LegacyDocBetweenContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyDocBetween(this);
	}
};


function LegacyDocAndContext(parser, ctx) {
	LegacyDocFilterContext.call(this, parser);
    LegacyDocFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyDocAndContext.prototype = Object.create(LegacyDocFilterContext.prototype);
LegacyDocAndContext.prototype.constructor = LegacyDocAndContext;

JQLParser.LegacyDocAndContext = LegacyDocAndContext;

LegacyDocAndContext.prototype.legacyDocFilter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LegacyDocFilterContext);
    } else {
        return this.getTypedRuleContext(LegacyDocFilterContext,i);
    }
};

LegacyDocAndContext.prototype.AND = function() {
    return this.getToken(JQLParser.AND, 0);
};
LegacyDocAndContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyDocAnd(this);
	}
};

LegacyDocAndContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyDocAnd(this);
	}
};


function LegacyDocLuceneFieldIsContext(parser, ctx) {
	LegacyDocFilterContext.call(this, parser);
    this.negate = null; // Token;
    this.field = null; // IdentifierContext;
    LegacyDocFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyDocLuceneFieldIsContext.prototype = Object.create(LegacyDocFilterContext.prototype);
LegacyDocLuceneFieldIsContext.prototype.constructor = LegacyDocLuceneFieldIsContext;

JQLParser.LegacyDocLuceneFieldIsContext = LegacyDocLuceneFieldIsContext;

LegacyDocLuceneFieldIsContext.prototype.legacyTermVal = function() {
    return this.getTypedRuleContext(LegacyTermValContext,0);
};

LegacyDocLuceneFieldIsContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
LegacyDocLuceneFieldIsContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyDocLuceneFieldIs(this);
	}
};

LegacyDocLuceneFieldIsContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyDocLuceneFieldIs(this);
	}
};


function LegacyDocNotContext(parser, ctx) {
	LegacyDocFilterContext.call(this, parser);
    LegacyDocFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyDocNotContext.prototype = Object.create(LegacyDocFilterContext.prototype);
LegacyDocNotContext.prototype.constructor = LegacyDocNotContext;

JQLParser.LegacyDocNotContext = LegacyDocNotContext;

LegacyDocNotContext.prototype.legacyDocFilter = function() {
    return this.getTypedRuleContext(LegacyDocFilterContext,0);
};

LegacyDocNotContext.prototype.NOT = function() {
    return this.getToken(JQLParser.NOT, 0);
};
LegacyDocNotContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyDocNot(this);
	}
};

LegacyDocNotContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyDocNot(this);
	}
};


function LegacyDocRegexContext(parser, ctx) {
	LegacyDocFilterContext.call(this, parser);
    this.field = null; // IdentifierContext;
    LegacyDocFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyDocRegexContext.prototype = Object.create(LegacyDocFilterContext.prototype);
LegacyDocRegexContext.prototype.constructor = LegacyDocRegexContext;

JQLParser.LegacyDocRegexContext = LegacyDocRegexContext;

LegacyDocRegexContext.prototype.STRING_LITERAL = function() {
    return this.getToken(JQLParser.STRING_LITERAL, 0);
};

LegacyDocRegexContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
LegacyDocRegexContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyDocRegex(this);
	}
};

LegacyDocRegexContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyDocRegex(this);
	}
};


function LegacyDocFieldIsntContext(parser, ctx) {
	LegacyDocFilterContext.call(this, parser);
    this.field = null; // IdentifierContext;
    LegacyDocFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyDocFieldIsntContext.prototype = Object.create(LegacyDocFilterContext.prototype);
LegacyDocFieldIsntContext.prototype.constructor = LegacyDocFieldIsntContext;

JQLParser.LegacyDocFieldIsntContext = LegacyDocFieldIsntContext;

LegacyDocFieldIsntContext.prototype.legacyTermVal = function() {
    return this.getTypedRuleContext(LegacyTermValContext,0);
};

LegacyDocFieldIsntContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
LegacyDocFieldIsntContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyDocFieldIsnt(this);
	}
};

LegacyDocFieldIsntContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyDocFieldIsnt(this);
	}
};


function LegacyDocFalseContext(parser, ctx) {
	LegacyDocFilterContext.call(this, parser);
    LegacyDocFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyDocFalseContext.prototype = Object.create(LegacyDocFilterContext.prototype);
LegacyDocFalseContext.prototype.constructor = LegacyDocFalseContext;

JQLParser.LegacyDocFalseContext = LegacyDocFalseContext;

LegacyDocFalseContext.prototype.FALSE = function() {
    return this.getToken(JQLParser.FALSE, 0);
};
LegacyDocFalseContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyDocFalse(this);
	}
};

LegacyDocFalseContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyDocFalse(this);
	}
};


function LegacyDocNotRegexContext(parser, ctx) {
	LegacyDocFilterContext.call(this, parser);
    this.field = null; // IdentifierContext;
    LegacyDocFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyDocNotRegexContext.prototype = Object.create(LegacyDocFilterContext.prototype);
LegacyDocNotRegexContext.prototype.constructor = LegacyDocNotRegexContext;

JQLParser.LegacyDocNotRegexContext = LegacyDocNotRegexContext;

LegacyDocNotRegexContext.prototype.STRING_LITERAL = function() {
    return this.getToken(JQLParser.STRING_LITERAL, 0);
};

LegacyDocNotRegexContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
LegacyDocNotRegexContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyDocNotRegex(this);
	}
};

LegacyDocNotRegexContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyDocNotRegex(this);
	}
};


function LegacyDocFilterParensContext(parser, ctx) {
	LegacyDocFilterContext.call(this, parser);
    LegacyDocFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyDocFilterParensContext.prototype = Object.create(LegacyDocFilterContext.prototype);
LegacyDocFilterParensContext.prototype.constructor = LegacyDocFilterParensContext;

JQLParser.LegacyDocFilterParensContext = LegacyDocFilterParensContext;

LegacyDocFilterParensContext.prototype.legacyDocFilter = function() {
    return this.getTypedRuleContext(LegacyDocFilterContext,0);
};
LegacyDocFilterParensContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyDocFilterParens(this);
	}
};

LegacyDocFilterParensContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyDocFilterParens(this);
	}
};


function LegacyDocTrueContext(parser, ctx) {
	LegacyDocFilterContext.call(this, parser);
    LegacyDocFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyDocTrueContext.prototype = Object.create(LegacyDocFilterContext.prototype);
LegacyDocTrueContext.prototype.constructor = LegacyDocTrueContext;

JQLParser.LegacyDocTrueContext = LegacyDocTrueContext;

LegacyDocTrueContext.prototype.TRUE = function() {
    return this.getToken(JQLParser.TRUE, 0);
};
LegacyDocTrueContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyDocTrue(this);
	}
};

LegacyDocTrueContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyDocTrue(this);
	}
};


function LegacyDocMetricInequalityContext(parser, ctx) {
	LegacyDocFilterContext.call(this, parser);
    this.op = null; // Token;
    LegacyDocFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyDocMetricInequalityContext.prototype = Object.create(LegacyDocFilterContext.prototype);
LegacyDocMetricInequalityContext.prototype.constructor = LegacyDocMetricInequalityContext;

JQLParser.LegacyDocMetricInequalityContext = LegacyDocMetricInequalityContext;

LegacyDocMetricInequalityContext.prototype.legacyDocMetric = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LegacyDocMetricContext);
    } else {
        return this.getTypedRuleContext(LegacyDocMetricContext,i);
    }
};
LegacyDocMetricInequalityContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyDocMetricInequality(this);
	}
};

LegacyDocMetricInequalityContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyDocMetricInequality(this);
	}
};


function LegacyDocOrContext(parser, ctx) {
	LegacyDocFilterContext.call(this, parser);
    LegacyDocFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LegacyDocOrContext.prototype = Object.create(LegacyDocFilterContext.prototype);
LegacyDocOrContext.prototype.constructor = LegacyDocOrContext;

JQLParser.LegacyDocOrContext = LegacyDocOrContext;

LegacyDocOrContext.prototype.legacyDocFilter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LegacyDocFilterContext);
    } else {
        return this.getTypedRuleContext(LegacyDocFilterContext,i);
    }
};

LegacyDocOrContext.prototype.OR = function() {
    return this.getToken(JQLParser.OR, 0);
};
LegacyDocOrContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLegacyDocOr(this);
	}
};

LegacyDocOrContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLegacyDocOr(this);
	}
};



JQLParser.prototype.legacyDocFilter = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new LegacyDocFilterContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 60;
    this.enterRecursionRule(localctx, 60, JQLParser.RULE_legacyDocFilter, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1059;
        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
        switch(la_) {
        case 1:
            localctx = new LegacyDocNotContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 973;
            _la = this._input.LA(1);
            if(!(_la===JQLParser.T__0 || _la===JQLParser.T__21)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 974;
            this.legacyDocFilter(7);
            break;

        case 2:
            localctx = new LegacyDocRegexContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 975;
            localctx.field = this.identifier();
            this.state = 976;
            this.match(JQLParser.T__12);
            this.state = 977;
            this.match(JQLParser.STRING_LITERAL);
            break;

        case 3:
            localctx = new LegacyDocNotRegexContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 979;
            localctx.field = this.identifier();
            this.state = 980;
            this.match(JQLParser.T__13);
            this.state = 981;
            this.match(JQLParser.STRING_LITERAL);
            break;

        case 4:
            localctx = new LegacyDocFieldIsContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 983;
            localctx.field = this.identifier();
            this.state = 984;
            this.match(JQLParser.T__15);
            this.state = 985;
            this.legacyTermVal();
            break;

        case 5:
            localctx = new LegacyDocLuceneFieldIsContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 988;
            _la = this._input.LA(1);
            if(_la===JQLParser.T__0) {
                this.state = 987;
                localctx.negate = this.match(JQLParser.T__0);
            }

            this.state = 990;
            localctx.field = this.identifier();
            this.state = 991;
            this.match(JQLParser.T__25);
            this.state = 992;
            this.legacyTermVal();
            break;

        case 6:
            localctx = new LegacyDocFieldIsntContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 994;
            localctx.field = this.identifier();
            this.state = 995;
            this.match(JQLParser.T__16);
            this.state = 996;
            this.legacyTermVal();
            break;

        case 7:
            localctx = new LegacyDocFieldInContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 998;
            localctx.field = this.identifier();
            this.state = 1000;
            _la = this._input.LA(1);
            if(_la===JQLParser.NOT) {
                this.state = 999;
                localctx.not = this.match(JQLParser.NOT);
            }

            this.state = 1002;
            this.match(JQLParser.IN);
            this.state = 1003;
            this.match(JQLParser.T__1);
            this.state = 1005;
            _la = this._input.LA(1);
            if(((((_la - 1)) & ~0x1f) == 0 && ((1 << (_la - 1)) & ((1 << (JQLParser.T__0 - 1)) | (1 << (JQLParser.LAG - 1)) | (1 << (JQLParser.RUNNING - 1)) | (1 << (JQLParser.PARENT - 1)) | (1 << (JQLParser.DISTINCT - 1)) | (1 << (JQLParser.DISTINCT_WINDOW - 1)))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (JQLParser.WINDOW - 33)) | (1 << (JQLParser.PERCENTILE - 33)) | (1 << (JQLParser.MEDIAN - 33)) | (1 << (JQLParser.PDIFF - 33)) | (1 << (JQLParser.DIFF - 33)) | (1 << (JQLParser.RATIODIFF - 33)) | (1 << (JQLParser.SINGLESCORE - 33)) | (1 << (JQLParser.RATIOSCORE - 33)) | (1 << (JQLParser.AVG - 33)) | (1 << (JQLParser.VARIANCE - 33)) | (1 << (JQLParser.STDEV - 33)) | (1 << (JQLParser.LOG - 33)) | (1 << (JQLParser.ABS - 33)) | (1 << (JQLParser.SUM_OVER - 33)) | (1 << (JQLParser.AVG_OVER - 33)) | (1 << (JQLParser.WHERE - 33)) | (1 << (JQLParser.HASSTR - 33)) | (1 << (JQLParser.HASINT - 33)) | (1 << (JQLParser.FROM - 33)) | (1 << (JQLParser.GROUP - 33)) | (1 << (JQLParser.BY - 33)) | (1 << (JQLParser.AGO - 33)) | (1 << (JQLParser.COUNT - 33)) | (1 << (JQLParser.AS - 33)) | (1 << (JQLParser.NOT - 33)) | (1 << (JQLParser.LUCENE - 33)) | (1 << (JQLParser.QUERY - 33)) | (1 << (JQLParser.TOP - 33)) | (1 << (JQLParser.BOTTOM - 33)) | (1 << (JQLParser.WITH - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (JQLParser.DEFAULT - 65)) | (1 << (JQLParser.TIME - 65)) | (1 << (JQLParser.TIMEBUCKETS - 65)) | (1 << (JQLParser.TO - 65)) | (1 << (JQLParser.BUCKETS - 65)) | (1 << (JQLParser.BUCKET - 65)) | (1 << (JQLParser.IN - 65)) | (1 << (JQLParser.DESCENDING - 65)) | (1 << (JQLParser.DESC - 65)) | (1 << (JQLParser.ASCENDING - 65)) | (1 << (JQLParser.ASC - 65)) | (1 << (JQLParser.DAYOFWEEK - 65)) | (1 << (JQLParser.QUANTILES - 65)) | (1 << (JQLParser.BETWEEN - 65)) | (1 << (JQLParser.SAMPLE - 65)) | (1 << (JQLParser.AND - 65)) | (1 << (JQLParser.OR - 65)) | (1 << (JQLParser.TRUE - 65)) | (1 << (JQLParser.FALSE - 65)) | (1 << (JQLParser.IF - 65)) | (1 << (JQLParser.THEN - 65)) | (1 << (JQLParser.ELSE - 65)) | (1 << (JQLParser.FLOATSCALE - 65)) | (1 << (JQLParser.SIGNUM - 65)) | (1 << (JQLParser.LIMIT - 65)) | (1 << (JQLParser.HAVING - 65)) | (1 << (JQLParser.FIELD_MIN - 65)) | (1 << (JQLParser.FIELD_MAX - 65)) | (1 << (JQLParser.ALIASING - 65)) | (1 << (JQLParser.HASSTRFIELD - 65)) | (1 << (JQLParser.HASINTFIELD - 65)) | (1 << (JQLParser.LEN - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (JQLParser.INTTERMCOUNT - 97)) | (1 << (JQLParser.STRTERMCOUNT - 97)) | (1 << (JQLParser.SAME - 97)) | (1 << (JQLParser.EXP - 97)) | (1 << (JQLParser.WINDOW_SUM - 97)) | (1 << (JQLParser.MIN - 97)) | (1 << (JQLParser.MAX - 97)) | (1 << (JQLParser.PRINTF - 97)) | (1 << (JQLParser.EXTRACT - 97)) | (1 << (JQLParser.RELATIVE - 97)) | (1 << (JQLParser.DATASET - 97)) | (1 << (JQLParser.RANDOM - 97)) | (1 << (JQLParser.OPTIONS - 97)) | (1 << (JQLParser.DOCID - 97)) | (1 << (JQLParser.M - 97)) | (1 << (JQLParser.Y - 97)) | (1 << (JQLParser.TODAYS - 97)) | (1 << (JQLParser.TOMORROWS - 97)) | (1 << (JQLParser.YESTERDAYS - 97)) | (1 << (JQLParser.TIME_UNIT - 97)) | (1 << (JQLParser.TIME_PERIOD_ATOM - 97)) | (1 << (JQLParser.NAT - 97)) | (1 << (JQLParser.ID - 97)) | (1 << (JQLParser.BACKQUOTED_ID - 97)) | (1 << (JQLParser.STRING_LITERAL - 97)))) !== 0)) {
                this.state = 1004;
                localctx._legacyTermVal = this.legacyTermVal();
                localctx.terms.push(localctx._legacyTermVal);
            }

            this.state = 1011;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===JQLParser.T__3) {
                this.state = 1007;
                this.match(JQLParser.T__3);
                this.state = 1008;
                localctx._legacyTermVal = this.legacyTermVal();
                localctx.terms.push(localctx._legacyTermVal);
                this.state = 1013;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1014;
            this.match(JQLParser.T__2);
            break;

        case 8:
            localctx = new LegacyDocMetricInequalityContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1016;
            this.legacyDocMetric(0);
            this.state = 1017;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JQLParser.T__15) | (1 << JQLParser.T__16) | (1 << JQLParser.T__17) | (1 << JQLParser.T__18) | (1 << JQLParser.T__19) | (1 << JQLParser.T__20))) !== 0))) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 1018;
            this.legacyDocMetric(0);
            break;

        case 9:
            localctx = new LegacyLuceneContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1020;
            _la = this._input.LA(1);
            if(!(_la===JQLParser.LUCENE || _la===JQLParser.QUERY)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 1021;
            this.match(JQLParser.T__1);
            this.state = 1022;
            this.match(JQLParser.STRING_LITERAL);
            this.state = 1023;
            this.match(JQLParser.T__2);
            break;

        case 10:
            localctx = new LegacyDocBetweenContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1024;
            this.match(JQLParser.BETWEEN);
            this.state = 1025;
            this.match(JQLParser.T__1);
            this.state = 1026;
            localctx.field = this.identifier();
            this.state = 1027;
            this.match(JQLParser.T__3);
            this.state = 1028;
            localctx.lowerBound = this.integer();
            this.state = 1029;
            this.match(JQLParser.T__3);
            this.state = 1030;
            localctx.upperBound = this.integer();
            this.state = 1031;
            this.match(JQLParser.T__2);
            break;

        case 11:
            localctx = new LegacyDocSampleContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1033;
            this.match(JQLParser.SAMPLE);
            this.state = 1034;
            this.match(JQLParser.T__1);
            this.state = 1035;
            localctx.field = this.identifier();
            this.state = 1036;
            this.match(JQLParser.T__3);
            this.state = 1037;
            localctx.numerator = this.match(JQLParser.NAT);
            this.state = 1044;
            _la = this._input.LA(1);
            if(_la===JQLParser.T__3) {
                this.state = 1038;
                this.match(JQLParser.T__3);
                this.state = 1039;
                localctx.denominator = this.match(JQLParser.NAT);
                this.state = 1042;
                _la = this._input.LA(1);
                if(_la===JQLParser.T__3) {
                    this.state = 1040;
                    this.match(JQLParser.T__3);
                    this.state = 1041;
                    localctx.seed = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===JQLParser.NAT || _la===JQLParser.STRING_LITERAL)) {
                        localctx.seed = this._errHandler.recoverInline(this);
                    }
                    else {
                        this.consume();
                    }
                }

            }

            this.state = 1046;
            this.match(JQLParser.T__2);
            break;

        case 12:
            localctx = new LegacyDocNotContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1048;
            this.match(JQLParser.NOT);
            this.state = 1049;
            this.match(JQLParser.T__1);
            this.state = 1050;
            this.legacyDocFilter(0);
            this.state = 1051;
            this.match(JQLParser.T__2);
            break;

        case 13:
            localctx = new LegacyDocFilterParensContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1053;
            this.match(JQLParser.T__1);
            this.state = 1054;
            this.legacyDocFilter(0);
            this.state = 1055;
            this.match(JQLParser.T__2);
            break;

        case 14:
            localctx = new LegacyDocTrueContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1057;
            this.match(JQLParser.TRUE);
            break;

        case 15:
            localctx = new LegacyDocFalseContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1058;
            this.match(JQLParser.FALSE);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1069;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,76,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1067;
                var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new LegacyDocAndContext(this, new LegacyDocFilterContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JQLParser.RULE_legacyDocFilter);
                    this.state = 1061;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 1062;
                    _la = this._input.LA(1);
                    if(!(_la===JQLParser.T__22 || _la===JQLParser.AND)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                        this.consume();
                    }
                    this.state = 1063;
                    this.legacyDocFilter(6);
                    break;

                case 2:
                    localctx = new LegacyDocOrContext(this, new LegacyDocFilterContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JQLParser.RULE_legacyDocFilter);
                    this.state = 1064;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 1065;
                    _la = this._input.LA(1);
                    if(!(_la===JQLParser.T__23 || _la===JQLParser.OR)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                        this.consume();
                    }
                    this.state = 1066;
                    this.legacyDocFilter(5);
                    break;

                } 
            }
            this.state = 1071;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,76,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function JqlDocFilterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_jqlDocFilter;
    return this;
}

JqlDocFilterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JqlDocFilterContext.prototype.constructor = JqlDocFilterContext;


 
JqlDocFilterContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function DocBetweenContext(parser, ctx) {
	JqlDocFilterContext.call(this, parser);
    this.lowerBound = null; // IntegerContext;
    this.upperBound = null; // IntegerContext;
    JqlDocFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocBetweenContext.prototype = Object.create(JqlDocFilterContext.prototype);
DocBetweenContext.prototype.constructor = DocBetweenContext;

JQLParser.DocBetweenContext = DocBetweenContext;

DocBetweenContext.prototype.BETWEEN = function() {
    return this.getToken(JQLParser.BETWEEN, 0);
};

DocBetweenContext.prototype.singlyScopedField = function() {
    return this.getTypedRuleContext(SinglyScopedFieldContext,0);
};

DocBetweenContext.prototype.integer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IntegerContext);
    } else {
        return this.getTypedRuleContext(IntegerContext,i);
    }
};
DocBetweenContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocBetween(this);
	}
};

DocBetweenContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocBetween(this);
	}
};


function DocSampleMetricContext(parser, ctx) {
	JqlDocFilterContext.call(this, parser);
    this.numerator = null; // Token;
    this.denominator = null; // Token;
    this.seed = null; // Token;
    JqlDocFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocSampleMetricContext.prototype = Object.create(JqlDocFilterContext.prototype);
DocSampleMetricContext.prototype.constructor = DocSampleMetricContext;

JQLParser.DocSampleMetricContext = DocSampleMetricContext;

DocSampleMetricContext.prototype.SAMPLE = function() {
    return this.getToken(JQLParser.SAMPLE, 0);
};

DocSampleMetricContext.prototype.jqlDocMetric = function() {
    return this.getTypedRuleContext(JqlDocMetricContext,0);
};

DocSampleMetricContext.prototype.NAT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JQLParser.NAT);
    } else {
        return this.getToken(JQLParser.NAT, i);
    }
};


DocSampleMetricContext.prototype.STRING_LITERAL = function() {
    return this.getToken(JQLParser.STRING_LITERAL, 0);
};
DocSampleMetricContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocSampleMetric(this);
	}
};

DocSampleMetricContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocSampleMetric(this);
	}
};


function DocFieldInContext(parser, ctx) {
	JqlDocFilterContext.call(this, parser);
    this.not = null; // Token;
    this._jqlTermVal = null; // JqlTermValContext;
    this.terms = []; // of JqlTermValContexts;
    JqlDocFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocFieldInContext.prototype = Object.create(JqlDocFilterContext.prototype);
DocFieldInContext.prototype.constructor = DocFieldInContext;

JQLParser.DocFieldInContext = DocFieldInContext;

DocFieldInContext.prototype.singlyScopedField = function() {
    return this.getTypedRuleContext(SinglyScopedFieldContext,0);
};

DocFieldInContext.prototype.IN = function() {
    return this.getToken(JQLParser.IN, 0);
};

DocFieldInContext.prototype.NOT = function() {
    return this.getToken(JQLParser.NOT, 0);
};

DocFieldInContext.prototype.jqlTermVal = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JqlTermValContext);
    } else {
        return this.getTypedRuleContext(JqlTermValContext,i);
    }
};
DocFieldInContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocFieldIn(this);
	}
};

DocFieldInContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocFieldIn(this);
	}
};


function DocFieldIsntContext(parser, ctx) {
	JqlDocFilterContext.call(this, parser);
    JqlDocFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocFieldIsntContext.prototype = Object.create(JqlDocFilterContext.prototype);
DocFieldIsntContext.prototype.constructor = DocFieldIsntContext;

JQLParser.DocFieldIsntContext = DocFieldIsntContext;

DocFieldIsntContext.prototype.singlyScopedField = function() {
    return this.getTypedRuleContext(SinglyScopedFieldContext,0);
};

DocFieldIsntContext.prototype.jqlTermVal = function() {
    return this.getTypedRuleContext(JqlTermValContext,0);
};
DocFieldIsntContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocFieldIsnt(this);
	}
};

DocFieldIsntContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocFieldIsnt(this);
	}
};


function DocSampleContext(parser, ctx) {
	JqlDocFilterContext.call(this, parser);
    this.numerator = null; // Token;
    this.denominator = null; // Token;
    this.seed = null; // Token;
    JqlDocFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocSampleContext.prototype = Object.create(JqlDocFilterContext.prototype);
DocSampleContext.prototype.constructor = DocSampleContext;

JQLParser.DocSampleContext = DocSampleContext;

DocSampleContext.prototype.SAMPLE = function() {
    return this.getToken(JQLParser.SAMPLE, 0);
};

DocSampleContext.prototype.singlyScopedField = function() {
    return this.getTypedRuleContext(SinglyScopedFieldContext,0);
};

DocSampleContext.prototype.NAT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JQLParser.NAT);
    } else {
        return this.getToken(JQLParser.NAT, i);
    }
};


DocSampleContext.prototype.STRING_LITERAL = function() {
    return this.getToken(JQLParser.STRING_LITERAL, 0);
};
DocSampleContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocSample(this);
	}
};

DocSampleContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocSample(this);
	}
};


function DocNotContext(parser, ctx) {
	JqlDocFilterContext.call(this, parser);
    JqlDocFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocNotContext.prototype = Object.create(JqlDocFilterContext.prototype);
DocNotContext.prototype.constructor = DocNotContext;

JQLParser.DocNotContext = DocNotContext;

DocNotContext.prototype.jqlDocFilter = function() {
    return this.getTypedRuleContext(JqlDocFilterContext,0);
};

DocNotContext.prototype.NOT = function() {
    return this.getToken(JQLParser.NOT, 0);
};
DocNotContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocNot(this);
	}
};

DocNotContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocNot(this);
	}
};


function DocRegexContext(parser, ctx) {
	JqlDocFilterContext.call(this, parser);
    JqlDocFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocRegexContext.prototype = Object.create(JqlDocFilterContext.prototype);
DocRegexContext.prototype.constructor = DocRegexContext;

JQLParser.DocRegexContext = DocRegexContext;

DocRegexContext.prototype.singlyScopedField = function() {
    return this.getTypedRuleContext(SinglyScopedFieldContext,0);
};

DocRegexContext.prototype.STRING_LITERAL = function() {
    return this.getToken(JQLParser.STRING_LITERAL, 0);
};
DocRegexContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocRegex(this);
	}
};

DocRegexContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocRegex(this);
	}
};


function DocFieldIsContext(parser, ctx) {
	JqlDocFilterContext.call(this, parser);
    JqlDocFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocFieldIsContext.prototype = Object.create(JqlDocFilterContext.prototype);
DocFieldIsContext.prototype.constructor = DocFieldIsContext;

JQLParser.DocFieldIsContext = DocFieldIsContext;

DocFieldIsContext.prototype.singlyScopedField = function() {
    return this.getTypedRuleContext(SinglyScopedFieldContext,0);
};

DocFieldIsContext.prototype.jqlTermVal = function() {
    return this.getTypedRuleContext(JqlTermValContext,0);
};
DocFieldIsContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocFieldIs(this);
	}
};

DocFieldIsContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocFieldIs(this);
	}
};


function DocOrContext(parser, ctx) {
	JqlDocFilterContext.call(this, parser);
    JqlDocFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocOrContext.prototype = Object.create(JqlDocFilterContext.prototype);
DocOrContext.prototype.constructor = DocOrContext;

JQLParser.DocOrContext = DocOrContext;

DocOrContext.prototype.jqlDocFilter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JqlDocFilterContext);
    } else {
        return this.getTypedRuleContext(JqlDocFilterContext,i);
    }
};

DocOrContext.prototype.OR = function() {
    return this.getToken(JQLParser.OR, 0);
};
DocOrContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocOr(this);
	}
};

DocOrContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocOr(this);
	}
};


function DocTrueContext(parser, ctx) {
	JqlDocFilterContext.call(this, parser);
    JqlDocFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocTrueContext.prototype = Object.create(JqlDocFilterContext.prototype);
DocTrueContext.prototype.constructor = DocTrueContext;

JQLParser.DocTrueContext = DocTrueContext;

DocTrueContext.prototype.TRUE = function() {
    return this.getToken(JQLParser.TRUE, 0);
};
DocTrueContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocTrue(this);
	}
};

DocTrueContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocTrue(this);
	}
};


function DocNotFieldEqualContext(parser, ctx) {
	JqlDocFilterContext.call(this, parser);
    JqlDocFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocNotFieldEqualContext.prototype = Object.create(JqlDocFilterContext.prototype);
DocNotFieldEqualContext.prototype.constructor = DocNotFieldEqualContext;

JQLParser.DocNotFieldEqualContext = DocNotFieldEqualContext;

DocNotFieldEqualContext.prototype.singlyScopedField = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SinglyScopedFieldContext);
    } else {
        return this.getTypedRuleContext(SinglyScopedFieldContext,i);
    }
};
DocNotFieldEqualContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocNotFieldEqual(this);
	}
};

DocNotFieldEqualContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocNotFieldEqual(this);
	}
};


function DocMetricInequalityContext(parser, ctx) {
	JqlDocFilterContext.call(this, parser);
    this.op = null; // Token;
    JqlDocFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocMetricInequalityContext.prototype = Object.create(JqlDocFilterContext.prototype);
DocMetricInequalityContext.prototype.constructor = DocMetricInequalityContext;

JQLParser.DocMetricInequalityContext = DocMetricInequalityContext;

DocMetricInequalityContext.prototype.jqlDocMetric = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JqlDocMetricContext);
    } else {
        return this.getTypedRuleContext(JqlDocMetricContext,i);
    }
};
DocMetricInequalityContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocMetricInequality(this);
	}
};

DocMetricInequalityContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocMetricInequality(this);
	}
};


function DocAndContext(parser, ctx) {
	JqlDocFilterContext.call(this, parser);
    JqlDocFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocAndContext.prototype = Object.create(JqlDocFilterContext.prototype);
DocAndContext.prototype.constructor = DocAndContext;

JQLParser.DocAndContext = DocAndContext;

DocAndContext.prototype.jqlDocFilter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JqlDocFilterContext);
    } else {
        return this.getTypedRuleContext(JqlDocFilterContext,i);
    }
};

DocAndContext.prototype.AND = function() {
    return this.getToken(JQLParser.AND, 0);
};
DocAndContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocAnd(this);
	}
};

DocAndContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocAnd(this);
	}
};


function LuceneContext(parser, ctx) {
	JqlDocFilterContext.call(this, parser);
    JqlDocFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LuceneContext.prototype = Object.create(JqlDocFilterContext.prototype);
LuceneContext.prototype.constructor = LuceneContext;

JQLParser.LuceneContext = LuceneContext;

LuceneContext.prototype.STRING_LITERAL = function() {
    return this.getToken(JQLParser.STRING_LITERAL, 0);
};

LuceneContext.prototype.LUCENE = function() {
    return this.getToken(JQLParser.LUCENE, 0);
};

LuceneContext.prototype.QUERY = function() {
    return this.getToken(JQLParser.QUERY, 0);
};
LuceneContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterLucene(this);
	}
};

LuceneContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitLucene(this);
	}
};


function DocNotRegexContext(parser, ctx) {
	JqlDocFilterContext.call(this, parser);
    JqlDocFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocNotRegexContext.prototype = Object.create(JqlDocFilterContext.prototype);
DocNotRegexContext.prototype.constructor = DocNotRegexContext;

JQLParser.DocNotRegexContext = DocNotRegexContext;

DocNotRegexContext.prototype.singlyScopedField = function() {
    return this.getTypedRuleContext(SinglyScopedFieldContext,0);
};

DocNotRegexContext.prototype.STRING_LITERAL = function() {
    return this.getToken(JQLParser.STRING_LITERAL, 0);
};
DocNotRegexContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocNotRegex(this);
	}
};

DocNotRegexContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocNotRegex(this);
	}
};


function DocFilterParensContext(parser, ctx) {
	JqlDocFilterContext.call(this, parser);
    JqlDocFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocFilterParensContext.prototype = Object.create(JqlDocFilterContext.prototype);
DocFilterParensContext.prototype.constructor = DocFilterParensContext;

JQLParser.DocFilterParensContext = DocFilterParensContext;

DocFilterParensContext.prototype.jqlDocFilter = function() {
    return this.getTypedRuleContext(JqlDocFilterContext,0);
};
DocFilterParensContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocFilterParens(this);
	}
};

DocFilterParensContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocFilterParens(this);
	}
};


function DocFalseContext(parser, ctx) {
	JqlDocFilterContext.call(this, parser);
    JqlDocFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocFalseContext.prototype = Object.create(JqlDocFilterContext.prototype);
DocFalseContext.prototype.constructor = DocFalseContext;

JQLParser.DocFalseContext = DocFalseContext;

DocFalseContext.prototype.FALSE = function() {
    return this.getToken(JQLParser.FALSE, 0);
};
DocFalseContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocFalse(this);
	}
};

DocFalseContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocFalse(this);
	}
};


function DocFieldInQueryContext(parser, ctx) {
	JqlDocFilterContext.call(this, parser);
    this.not = null; // Token;
    JqlDocFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocFieldInQueryContext.prototype = Object.create(JqlDocFilterContext.prototype);
DocFieldInQueryContext.prototype.constructor = DocFieldInQueryContext;

JQLParser.DocFieldInQueryContext = DocFieldInQueryContext;

DocFieldInQueryContext.prototype.singlyScopedField = function() {
    return this.getTypedRuleContext(SinglyScopedFieldContext,0);
};

DocFieldInQueryContext.prototype.IN = function() {
    return this.getToken(JQLParser.IN, 0);
};

DocFieldInQueryContext.prototype.queryNoSelect = function() {
    return this.getTypedRuleContext(QueryNoSelectContext,0);
};

DocFieldInQueryContext.prototype.NOT = function() {
    return this.getToken(JQLParser.NOT, 0);
};
DocFieldInQueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocFieldInQuery(this);
	}
};

DocFieldInQueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocFieldInQuery(this);
	}
};


function DocFieldEqualContext(parser, ctx) {
	JqlDocFilterContext.call(this, parser);
    JqlDocFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocFieldEqualContext.prototype = Object.create(JqlDocFilterContext.prototype);
DocFieldEqualContext.prototype.constructor = DocFieldEqualContext;

JQLParser.DocFieldEqualContext = DocFieldEqualContext;

DocFieldEqualContext.prototype.singlyScopedField = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SinglyScopedFieldContext);
    } else {
        return this.getTypedRuleContext(SinglyScopedFieldContext,i);
    }
};
DocFieldEqualContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDocFieldEqual(this);
	}
};

DocFieldEqualContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDocFieldEqual(this);
	}
};



JQLParser.prototype.jqlDocFilter = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new JqlDocFilterContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 62;
    this.enterRecursionRule(localctx, 62, JQLParser.RULE_jqlDocFilter, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1184;
        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
        switch(la_) {
        case 1:
            localctx = new DocNotContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 1073;
            this.match(JQLParser.T__21);
            this.state = 1074;
            this.jqlDocFilter(7);
            break;

        case 2:
            localctx = new DocRegexContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1075;
            this.singlyScopedField();
            this.state = 1076;
            this.match(JQLParser.T__12);
            this.state = 1077;
            this.match(JQLParser.STRING_LITERAL);
            break;

        case 3:
            localctx = new DocNotRegexContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1079;
            this.singlyScopedField();
            this.state = 1080;
            this.match(JQLParser.T__13);
            this.state = 1081;
            this.match(JQLParser.STRING_LITERAL);
            break;

        case 4:
            localctx = new DocFieldEqualContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1083;
            this.singlyScopedField();
            this.state = 1084;
            this.match(JQLParser.T__15);
            this.state = 1085;
            this.singlyScopedField();
            break;

        case 5:
            localctx = new DocNotFieldEqualContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1087;
            this.singlyScopedField();
            this.state = 1088;
            this.match(JQLParser.T__16);
            this.state = 1089;
            this.singlyScopedField();
            break;

        case 6:
            localctx = new DocFieldIsContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1091;
            this.singlyScopedField();
            this.state = 1092;
            this.match(JQLParser.T__15);
            this.state = 1093;
            this.jqlTermVal();
            break;

        case 7:
            localctx = new DocFieldIsntContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1095;
            this.singlyScopedField();
            this.state = 1096;
            this.match(JQLParser.T__16);
            this.state = 1097;
            this.jqlTermVal();
            break;

        case 8:
            localctx = new DocFieldInContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1099;
            this.singlyScopedField();
            this.state = 1101;
            _la = this._input.LA(1);
            if(_la===JQLParser.NOT) {
                this.state = 1100;
                localctx.not = this.match(JQLParser.NOT);
            }

            this.state = 1103;
            this.match(JQLParser.IN);
            this.state = 1104;
            this.match(JQLParser.T__1);
            this.state = 1106;
            _la = this._input.LA(1);
            if(_la===JQLParser.T__0 || _la===JQLParser.NAT || _la===JQLParser.STRING_LITERAL) {
                this.state = 1105;
                localctx._jqlTermVal = this.jqlTermVal();
                localctx.terms.push(localctx._jqlTermVal);
            }

            this.state = 1112;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===JQLParser.T__3) {
                this.state = 1108;
                this.match(JQLParser.T__3);
                this.state = 1109;
                localctx._jqlTermVal = this.jqlTermVal();
                localctx.terms.push(localctx._jqlTermVal);
                this.state = 1114;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1115;
            this.match(JQLParser.T__2);
            break;

        case 9:
            localctx = new DocFieldInQueryContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1117;
            this.singlyScopedField();
            this.state = 1119;
            _la = this._input.LA(1);
            if(_la===JQLParser.NOT) {
                this.state = 1118;
                localctx.not = this.match(JQLParser.NOT);
            }

            this.state = 1121;
            this.match(JQLParser.IN);
            this.state = 1122;
            this.match(JQLParser.T__1);
            this.state = 1123;
            this.queryNoSelect();
            this.state = 1124;
            this.match(JQLParser.T__2);
            break;

        case 10:
            localctx = new DocMetricInequalityContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1126;
            this.jqlDocMetric(0);
            this.state = 1127;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JQLParser.T__15) | (1 << JQLParser.T__16) | (1 << JQLParser.T__17) | (1 << JQLParser.T__18) | (1 << JQLParser.T__19) | (1 << JQLParser.T__20))) !== 0))) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 1128;
            this.jqlDocMetric(0);
            break;

        case 11:
            localctx = new LuceneContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1130;
            _la = this._input.LA(1);
            if(!(_la===JQLParser.LUCENE || _la===JQLParser.QUERY)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 1131;
            this.match(JQLParser.T__1);
            this.state = 1132;
            this.match(JQLParser.STRING_LITERAL);
            this.state = 1133;
            this.match(JQLParser.T__2);
            break;

        case 12:
            localctx = new DocBetweenContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1134;
            this.match(JQLParser.BETWEEN);
            this.state = 1135;
            this.match(JQLParser.T__1);
            this.state = 1136;
            this.singlyScopedField();
            this.state = 1137;
            this.match(JQLParser.T__3);
            this.state = 1138;
            localctx.lowerBound = this.integer();
            this.state = 1139;
            this.match(JQLParser.T__3);
            this.state = 1140;
            localctx.upperBound = this.integer();
            this.state = 1141;
            this.match(JQLParser.T__2);
            break;

        case 13:
            localctx = new DocSampleContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1143;
            this.match(JQLParser.SAMPLE);
            this.state = 1144;
            this.match(JQLParser.T__1);
            this.state = 1145;
            this.singlyScopedField();
            this.state = 1146;
            this.match(JQLParser.T__3);
            this.state = 1147;
            localctx.numerator = this.match(JQLParser.NAT);
            this.state = 1154;
            _la = this._input.LA(1);
            if(_la===JQLParser.T__3) {
                this.state = 1148;
                this.match(JQLParser.T__3);
                this.state = 1149;
                localctx.denominator = this.match(JQLParser.NAT);
                this.state = 1152;
                _la = this._input.LA(1);
                if(_la===JQLParser.T__3) {
                    this.state = 1150;
                    this.match(JQLParser.T__3);
                    this.state = 1151;
                    localctx.seed = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===JQLParser.NAT || _la===JQLParser.STRING_LITERAL)) {
                        localctx.seed = this._errHandler.recoverInline(this);
                    }
                    else {
                        this.consume();
                    }
                }

            }

            this.state = 1156;
            this.match(JQLParser.T__2);
            break;

        case 14:
            localctx = new DocSampleMetricContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1158;
            this.match(JQLParser.SAMPLE);
            this.state = 1159;
            this.match(JQLParser.T__1);
            this.state = 1160;
            this.jqlDocMetric(0);
            this.state = 1161;
            this.match(JQLParser.T__3);
            this.state = 1162;
            localctx.numerator = this.match(JQLParser.NAT);
            this.state = 1169;
            _la = this._input.LA(1);
            if(_la===JQLParser.T__3) {
                this.state = 1163;
                this.match(JQLParser.T__3);
                this.state = 1164;
                localctx.denominator = this.match(JQLParser.NAT);
                this.state = 1167;
                _la = this._input.LA(1);
                if(_la===JQLParser.T__3) {
                    this.state = 1165;
                    this.match(JQLParser.T__3);
                    this.state = 1166;
                    localctx.seed = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===JQLParser.NAT || _la===JQLParser.STRING_LITERAL)) {
                        localctx.seed = this._errHandler.recoverInline(this);
                    }
                    else {
                        this.consume();
                    }
                }

            }

            this.state = 1171;
            this.match(JQLParser.T__2);
            break;

        case 15:
            localctx = new DocNotContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1173;
            this.match(JQLParser.NOT);
            this.state = 1174;
            this.match(JQLParser.T__1);
            this.state = 1175;
            this.jqlDocFilter(0);
            this.state = 1176;
            this.match(JQLParser.T__2);
            break;

        case 16:
            localctx = new DocFilterParensContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1178;
            this.match(JQLParser.T__1);
            this.state = 1179;
            this.jqlDocFilter(0);
            this.state = 1180;
            this.match(JQLParser.T__2);
            break;

        case 17:
            localctx = new DocTrueContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1182;
            this.match(JQLParser.TRUE);
            break;

        case 18:
            localctx = new DocFalseContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1183;
            this.match(JQLParser.FALSE);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1194;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,87,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1192;
                var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new DocAndContext(this, new JqlDocFilterContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JQLParser.RULE_jqlDocFilter);
                    this.state = 1186;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 1187;
                    _la = this._input.LA(1);
                    if(!(_la===JQLParser.T__22 || _la===JQLParser.AND)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                        this.consume();
                    }
                    this.state = 1188;
                    this.jqlDocFilter(6);
                    break;

                case 2:
                    localctx = new DocOrContext(this, new JqlDocFilterContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JQLParser.RULE_jqlDocFilter);
                    this.state = 1189;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 1190;
                    _la = this._input.LA(1);
                    if(!(_la===JQLParser.T__23 || _la===JQLParser.OR)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                        this.consume();
                    }
                    this.state = 1191;
                    this.jqlDocFilter(5);
                    break;

                } 
            }
            this.state = 1196;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,87,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function GroupByEntryContext(parser, parent, invokingState, useLegacy) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_groupByEntry;
    this.useLegacy = null
    this.filter = null; // AggregateFilterContext
    this.alias = null; // IdentifierContext
    this.useLegacy = useLegacy || null;
    return this;
}

GroupByEntryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupByEntryContext.prototype.constructor = GroupByEntryContext;

GroupByEntryContext.prototype.groupByElement = function() {
    return this.getTypedRuleContext(GroupByElementContext,0);
};

GroupByEntryContext.prototype.HAVING = function() {
    return this.getToken(JQLParser.HAVING, 0);
};

GroupByEntryContext.prototype.AS = function() {
    return this.getToken(JQLParser.AS, 0);
};

GroupByEntryContext.prototype.aggregateFilter = function() {
    return this.getTypedRuleContext(AggregateFilterContext,0);
};

GroupByEntryContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

GroupByEntryContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterGroupByEntry(this);
	}
};

GroupByEntryContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitGroupByEntry(this);
	}
};




JQLParser.GroupByEntryContext = GroupByEntryContext;

JQLParser.prototype.groupByEntry = function(useLegacy) {

    var localctx = new GroupByEntryContext(this, this._ctx, this.state, useLegacy);
    this.enterRule(localctx, 64, JQLParser.RULE_groupByEntry);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1197;
        this.groupByElement(localctx.useLegacy);
        this.state = 1201;
        var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
        if(la_===1) {
            this.state = 1198;
            if (!( !localctx.useLegacy)) {
                throw new antlr4.error.FailedPredicateException(this, "!$ctx.useLegacy");
            }
            this.state = 1199;
            this.match(JQLParser.HAVING);
            this.state = 1200;
            localctx.filter = this.aggregateFilter(localctx.useLegacy);

        }
        this.state = 1206;
        var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
        if(la_===1) {
            this.state = 1203;
            if (!( !localctx.useLegacy)) {
                throw new antlr4.error.FailedPredicateException(this, "!$ctx.useLegacy");
            }
            this.state = 1204;
            this.match(JQLParser.AS);
            this.state = 1205;
            localctx.alias = this.identifier();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GroupByElementContext(parser, parent, invokingState, useLegacy) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_groupByElement;
    this.useLegacy = null
    this.useLegacy = useLegacy || null;
    return this;
}

GroupByElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupByElementContext.prototype.constructor = GroupByElementContext;


 
GroupByElementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
    this.useLegacy = ctx.useLegacy;
};


function TimeGroupByContext(parser, ctx) {
	GroupByElementContext.call(this, parser);
    GroupByElementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TimeGroupByContext.prototype = Object.create(GroupByElementContext.prototype);
TimeGroupByContext.prototype.constructor = TimeGroupByContext;

JQLParser.TimeGroupByContext = TimeGroupByContext;

TimeGroupByContext.prototype.groupByTime = function() {
    return this.getTypedRuleContext(GroupByTimeContext,0);
};
TimeGroupByContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterTimeGroupBy(this);
	}
};

TimeGroupByContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitTimeGroupBy(this);
	}
};


function TopTermsGroupByContext(parser, ctx) {
	GroupByElementContext.call(this, parser);
    GroupByElementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TopTermsGroupByContext.prototype = Object.create(GroupByElementContext.prototype);
TopTermsGroupByContext.prototype.constructor = TopTermsGroupByContext;

JQLParser.TopTermsGroupByContext = TopTermsGroupByContext;

TopTermsGroupByContext.prototype.topTermsGroupByElem = function() {
    return this.getTypedRuleContext(TopTermsGroupByElemContext,0);
};
TopTermsGroupByContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterTopTermsGroupBy(this);
	}
};

TopTermsGroupByContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitTopTermsGroupBy(this);
	}
};


function GroupByFieldInQueryContext(parser, ctx) {
	GroupByElementContext.call(this, parser);
    this.field = null; // IdentifierContext;
    this.not = null; // Token;
    this.withDefault = null; // Token;
    GroupByElementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GroupByFieldInQueryContext.prototype = Object.create(GroupByElementContext.prototype);
GroupByFieldInQueryContext.prototype.constructor = GroupByFieldInQueryContext;

JQLParser.GroupByFieldInQueryContext = GroupByFieldInQueryContext;

GroupByFieldInQueryContext.prototype.IN = function() {
    return this.getToken(JQLParser.IN, 0);
};

GroupByFieldInQueryContext.prototype.queryNoSelect = function() {
    return this.getTypedRuleContext(QueryNoSelectContext,0);
};

GroupByFieldInQueryContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

GroupByFieldInQueryContext.prototype.DEFAULT = function() {
    return this.getToken(JQLParser.DEFAULT, 0);
};

GroupByFieldInQueryContext.prototype.NOT = function() {
    return this.getToken(JQLParser.NOT, 0);
};

GroupByFieldInQueryContext.prototype.WITH = function() {
    return this.getToken(JQLParser.WITH, 0);
};
GroupByFieldInQueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterGroupByFieldInQuery(this);
	}
};

GroupByFieldInQueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitGroupByFieldInQuery(this);
	}
};


function PredicateGroupByContext(parser, ctx) {
	GroupByElementContext.call(this, parser);
    GroupByElementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PredicateGroupByContext.prototype = Object.create(GroupByElementContext.prototype);
PredicateGroupByContext.prototype.constructor = PredicateGroupByContext;

JQLParser.PredicateGroupByContext = PredicateGroupByContext;

PredicateGroupByContext.prototype.jqlDocFilter = function() {
    return this.getTypedRuleContext(JqlDocFilterContext,0);
};
PredicateGroupByContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterPredicateGroupBy(this);
	}
};

PredicateGroupByContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitPredicateGroupBy(this);
	}
};


function GroupByFieldInContext(parser, ctx) {
	GroupByElementContext.call(this, parser);
    this.field = null; // IdentifierContext;
    this.not = null; // Token;
    this._termVal = null; // TermValContext;
    this.terms = []; // of TermValContexts;
    this.withDefault = null; // Token;
    GroupByElementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GroupByFieldInContext.prototype = Object.create(GroupByElementContext.prototype);
GroupByFieldInContext.prototype.constructor = GroupByFieldInContext;

JQLParser.GroupByFieldInContext = GroupByFieldInContext;

GroupByFieldInContext.prototype.IN = function() {
    return this.getToken(JQLParser.IN, 0);
};

GroupByFieldInContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

GroupByFieldInContext.prototype.DEFAULT = function() {
    return this.getToken(JQLParser.DEFAULT, 0);
};

GroupByFieldInContext.prototype.NOT = function() {
    return this.getToken(JQLParser.NOT, 0);
};

GroupByFieldInContext.prototype.termVal = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TermValContext);
    } else {
        return this.getTypedRuleContext(TermValContext,i);
    }
};

GroupByFieldInContext.prototype.WITH = function() {
    return this.getToken(JQLParser.WITH, 0);
};
GroupByFieldInContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterGroupByFieldIn(this);
	}
};

GroupByFieldInContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitGroupByFieldIn(this);
	}
};


function MetricGroupByContext(parser, ctx) {
	GroupByElementContext.call(this, parser);
    GroupByElementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MetricGroupByContext.prototype = Object.create(GroupByElementContext.prototype);
MetricGroupByContext.prototype.constructor = MetricGroupByContext;

JQLParser.MetricGroupByContext = MetricGroupByContext;

MetricGroupByContext.prototype.groupByMetric = function() {
    return this.getTypedRuleContext(GroupByMetricContext,0);
};
MetricGroupByContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterMetricGroupBy(this);
	}
};

MetricGroupByContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitMetricGroupBy(this);
	}
};


function RandomMetricGroupByContext(parser, ctx) {
	GroupByElementContext.call(this, parser);
    this.k = null; // Token;
    this.salt = null; // Token;
    GroupByElementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RandomMetricGroupByContext.prototype = Object.create(GroupByElementContext.prototype);
RandomMetricGroupByContext.prototype.constructor = RandomMetricGroupByContext;

JQLParser.RandomMetricGroupByContext = RandomMetricGroupByContext;

RandomMetricGroupByContext.prototype.RANDOM = function() {
    return this.getToken(JQLParser.RANDOM, 0);
};

RandomMetricGroupByContext.prototype.jqlDocMetric = function() {
    return this.getTypedRuleContext(JqlDocMetricContext,0);
};

RandomMetricGroupByContext.prototype.NAT = function() {
    return this.getToken(JQLParser.NAT, 0);
};

RandomMetricGroupByContext.prototype.STRING_LITERAL = function() {
    return this.getToken(JQLParser.STRING_LITERAL, 0);
};
RandomMetricGroupByContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterRandomMetricGroupBy(this);
	}
};

RandomMetricGroupByContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitRandomMetricGroupBy(this);
	}
};


function FieldGroupByContext(parser, ctx) {
	GroupByElementContext.call(this, parser);
    GroupByElementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FieldGroupByContext.prototype = Object.create(GroupByElementContext.prototype);
FieldGroupByContext.prototype.constructor = FieldGroupByContext;

JQLParser.FieldGroupByContext = FieldGroupByContext;

FieldGroupByContext.prototype.groupByField = function() {
    return this.getTypedRuleContext(GroupByFieldContext,0);
};
FieldGroupByContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterFieldGroupBy(this);
	}
};

FieldGroupByContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitFieldGroupBy(this);
	}
};


function QuantilesGroupByContext(parser, ctx) {
	GroupByElementContext.call(this, parser);
    this.field = null; // IdentifierContext;
    GroupByElementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QuantilesGroupByContext.prototype = Object.create(GroupByElementContext.prototype);
QuantilesGroupByContext.prototype.constructor = QuantilesGroupByContext;

JQLParser.QuantilesGroupByContext = QuantilesGroupByContext;

QuantilesGroupByContext.prototype.QUANTILES = function() {
    return this.getToken(JQLParser.QUANTILES, 0);
};

QuantilesGroupByContext.prototype.NAT = function() {
    return this.getToken(JQLParser.NAT, 0);
};

QuantilesGroupByContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
QuantilesGroupByContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterQuantilesGroupBy(this);
	}
};

QuantilesGroupByContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitQuantilesGroupBy(this);
	}
};


function DayOfWeekGroupByContext(parser, ctx) {
	GroupByElementContext.call(this, parser);
    this.hasParens = null; // Token;
    GroupByElementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DayOfWeekGroupByContext.prototype = Object.create(GroupByElementContext.prototype);
DayOfWeekGroupByContext.prototype.constructor = DayOfWeekGroupByContext;

JQLParser.DayOfWeekGroupByContext = DayOfWeekGroupByContext;

DayOfWeekGroupByContext.prototype.DAYOFWEEK = function() {
    return this.getToken(JQLParser.DAYOFWEEK, 0);
};
DayOfWeekGroupByContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDayOfWeekGroupBy(this);
	}
};

DayOfWeekGroupByContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDayOfWeekGroupBy(this);
	}
};


function RandomGroupByContext(parser, ctx) {
	GroupByElementContext.call(this, parser);
    this.field = null; // IdentifierContext;
    this.k = null; // Token;
    this.salt = null; // Token;
    GroupByElementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RandomGroupByContext.prototype = Object.create(GroupByElementContext.prototype);
RandomGroupByContext.prototype.constructor = RandomGroupByContext;

JQLParser.RandomGroupByContext = RandomGroupByContext;

RandomGroupByContext.prototype.RANDOM = function() {
    return this.getToken(JQLParser.RANDOM, 0);
};

RandomGroupByContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

RandomGroupByContext.prototype.NAT = function() {
    return this.getToken(JQLParser.NAT, 0);
};

RandomGroupByContext.prototype.STRING_LITERAL = function() {
    return this.getToken(JQLParser.STRING_LITERAL, 0);
};
RandomGroupByContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterRandomGroupBy(this);
	}
};

RandomGroupByContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitRandomGroupBy(this);
	}
};


function DatasetGroupByContext(parser, ctx) {
	GroupByElementContext.call(this, parser);
    GroupByElementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DatasetGroupByContext.prototype = Object.create(GroupByElementContext.prototype);
DatasetGroupByContext.prototype.constructor = DatasetGroupByContext;

JQLParser.DatasetGroupByContext = DatasetGroupByContext;

DatasetGroupByContext.prototype.DATASET = function() {
    return this.getToken(JQLParser.DATASET, 0);
};
DatasetGroupByContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDatasetGroupBy(this);
	}
};

DatasetGroupByContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDatasetGroupBy(this);
	}
};



JQLParser.GroupByElementContext = GroupByElementContext;

JQLParser.prototype.groupByElement = function(useLegacy) {

    var localctx = new GroupByElementContext(this, this._ctx, this.state, useLegacy);
    this.enterRule(localctx, 66, JQLParser.RULE_groupByElement);
    var _la = 0; // Token type
    try {
        this.state = 1287;
        var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
        switch(la_) {
        case 1:
            localctx = new DayOfWeekGroupByContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1208;
            this.match(JQLParser.DAYOFWEEK);
            this.state = 1211;
            var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
            if(la_===1) {
                this.state = 1209;
                localctx.hasParens = this.match(JQLParser.T__1);
                this.state = 1210;
                this.match(JQLParser.T__2);

            }
            break;

        case 2:
            localctx = new QuantilesGroupByContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1213;
            this.match(JQLParser.QUANTILES);
            this.state = 1214;
            this.match(JQLParser.T__1);
            this.state = 1215;
            localctx.field = this.identifier();
            this.state = 1216;
            this.match(JQLParser.T__3);
            this.state = 1217;
            this.match(JQLParser.NAT);
            this.state = 1218;
            this.match(JQLParser.T__2);
            break;

        case 3:
            localctx = new TopTermsGroupByContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1220;
            this.topTermsGroupByElem(localctx.useLegacy);
            break;

        case 4:
            localctx = new GroupByFieldInContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1221;
            localctx.field = this.identifier();
            this.state = 1223;
            _la = this._input.LA(1);
            if(_la===JQLParser.NOT) {
                this.state = 1222;
                localctx.not = this.match(JQLParser.NOT);
            }

            this.state = 1225;
            this.match(JQLParser.IN);
            this.state = 1226;
            this.match(JQLParser.T__1);
            this.state = 1228;
            var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
            if(la_===1) {
                this.state = 1227;
                localctx._termVal = this.termVal(localctx.useLegacy);
                localctx.terms.push(localctx._termVal);

            }
            this.state = 1234;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===JQLParser.T__3) {
                this.state = 1230;
                this.match(JQLParser.T__3);
                this.state = 1231;
                localctx._termVal = this.termVal(localctx.useLegacy);
                localctx.terms.push(localctx._termVal);
                this.state = 1236;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1237;
            this.match(JQLParser.T__2);
            this.state = 1240;
            var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
            if(la_===1) {
                this.state = 1238;
                localctx.withDefault = this.match(JQLParser.WITH);
                this.state = 1239;
                this.match(JQLParser.DEFAULT);

            }
            break;

        case 5:
            localctx = new GroupByFieldInQueryContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1242;
            localctx.field = this.identifier();
            this.state = 1244;
            _la = this._input.LA(1);
            if(_la===JQLParser.NOT) {
                this.state = 1243;
                localctx.not = this.match(JQLParser.NOT);
            }

            this.state = 1246;
            this.match(JQLParser.IN);
            this.state = 1247;
            this.match(JQLParser.T__1);
            this.state = 1248;
            this.queryNoSelect();
            this.state = 1249;
            this.match(JQLParser.T__2);
            this.state = 1252;
            var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
            if(la_===1) {
                this.state = 1250;
                localctx.withDefault = this.match(JQLParser.WITH);
                this.state = 1251;
                this.match(JQLParser.DEFAULT);

            }
            break;

        case 6:
            localctx = new MetricGroupByContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 1254;
            this.groupByMetric(localctx.useLegacy);
            break;

        case 7:
            localctx = new TimeGroupByContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 1255;
            this.groupByTime(localctx.useLegacy);
            break;

        case 8:
            localctx = new FieldGroupByContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 1256;
            this.groupByField(localctx.useLegacy);
            break;

        case 9:
            localctx = new DatasetGroupByContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 1257;
            if (!( !localctx.useLegacy)) {
                throw new antlr4.error.FailedPredicateException(this, "!$ctx.useLegacy");
            }
            this.state = 1258;
            this.match(JQLParser.DATASET);
            this.state = 1259;
            this.match(JQLParser.T__1);
            this.state = 1260;
            this.match(JQLParser.T__2);
            break;

        case 10:
            localctx = new PredicateGroupByContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 1261;
            if (!( !localctx.useLegacy)) {
                throw new antlr4.error.FailedPredicateException(this, "!$ctx.useLegacy");
            }
            this.state = 1262;
            this.jqlDocFilter(0);
            break;

        case 11:
            localctx = new RandomGroupByContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 1263;
            if (!( !localctx.useLegacy)) {
                throw new antlr4.error.FailedPredicateException(this, "!$ctx.useLegacy");
            }
            this.state = 1264;
            this.match(JQLParser.RANDOM);
            this.state = 1265;
            this.match(JQLParser.T__1);
            this.state = 1266;
            localctx.field = this.identifier();
            this.state = 1267;
            this.match(JQLParser.T__3);
            this.state = 1268;
            localctx.k = this.match(JQLParser.NAT);
            this.state = 1271;
            _la = this._input.LA(1);
            if(_la===JQLParser.T__3) {
                this.state = 1269;
                this.match(JQLParser.T__3);
                this.state = 1270;
                localctx.salt = this.match(JQLParser.STRING_LITERAL);
            }

            this.state = 1273;
            this.match(JQLParser.T__2);
            break;

        case 12:
            localctx = new RandomMetricGroupByContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 1275;
            if (!( !localctx.useLegacy)) {
                throw new antlr4.error.FailedPredicateException(this, "!$ctx.useLegacy");
            }
            this.state = 1276;
            this.match(JQLParser.RANDOM);
            this.state = 1277;
            this.match(JQLParser.T__1);
            this.state = 1278;
            this.jqlDocMetric(0);
            this.state = 1279;
            this.match(JQLParser.T__3);
            this.state = 1280;
            localctx.k = this.match(JQLParser.NAT);
            this.state = 1283;
            _la = this._input.LA(1);
            if(_la===JQLParser.T__3) {
                this.state = 1281;
                this.match(JQLParser.T__3);
                this.state = 1282;
                localctx.salt = this.match(JQLParser.STRING_LITERAL);
            }

            this.state = 1285;
            this.match(JQLParser.T__2);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GroupByElementEofContext(parser, parent, invokingState, useLegacy) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_groupByElementEof;
    this.useLegacy = null
    this.useLegacy = useLegacy || null;
    return this;
}

GroupByElementEofContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupByElementEofContext.prototype.constructor = GroupByElementEofContext;

GroupByElementEofContext.prototype.groupByElement = function() {
    return this.getTypedRuleContext(GroupByElementContext,0);
};

GroupByElementEofContext.prototype.EOF = function() {
    return this.getToken(JQLParser.EOF, 0);
};

GroupByElementEofContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterGroupByElementEof(this);
	}
};

GroupByElementEofContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitGroupByElementEof(this);
	}
};




JQLParser.GroupByElementEofContext = GroupByElementEofContext;

JQLParser.prototype.groupByElementEof = function(useLegacy) {

    var localctx = new GroupByElementEofContext(this, this._ctx, this.state, useLegacy);
    this.enterRule(localctx, 68, JQLParser.RULE_groupByElementEof);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1289;
        this.groupByElement(localctx.useLegacy);
        this.state = 1290;
        this.match(JQLParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TopTermsGroupByElemContext(parser, parent, invokingState, useLegacy) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_topTermsGroupByElem;
    this.useLegacy = null
    this.field = null; // IdentifierContext
    this.limit = null; // Token
    this.metric = null; // AggregateMetricContext
    this.order = null; // Token
    this.useLegacy = useLegacy || null;
    return this;
}

TopTermsGroupByElemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TopTermsGroupByElemContext.prototype.constructor = TopTermsGroupByElemContext;

TopTermsGroupByElemContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

TopTermsGroupByElemContext.prototype.NAT = function() {
    return this.getToken(JQLParser.NAT, 0);
};

TopTermsGroupByElemContext.prototype.aggregateMetric = function() {
    return this.getTypedRuleContext(AggregateMetricContext,0);
};

TopTermsGroupByElemContext.prototype.BOTTOM = function() {
    return this.getToken(JQLParser.BOTTOM, 0);
};

TopTermsGroupByElemContext.prototype.DESCENDING = function() {
    return this.getToken(JQLParser.DESCENDING, 0);
};

TopTermsGroupByElemContext.prototype.DESC = function() {
    return this.getToken(JQLParser.DESC, 0);
};

TopTermsGroupByElemContext.prototype.TOP = function() {
    return this.getToken(JQLParser.TOP, 0);
};

TopTermsGroupByElemContext.prototype.ASCENDING = function() {
    return this.getToken(JQLParser.ASCENDING, 0);
};

TopTermsGroupByElemContext.prototype.ASC = function() {
    return this.getToken(JQLParser.ASC, 0);
};

TopTermsGroupByElemContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterTopTermsGroupByElem(this);
	}
};

TopTermsGroupByElemContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitTopTermsGroupByElem(this);
	}
};




JQLParser.TopTermsGroupByElemContext = TopTermsGroupByElemContext;

JQLParser.prototype.topTermsGroupByElem = function(useLegacy) {

    var localctx = new TopTermsGroupByElemContext(this, this._ctx, this.state, useLegacy);
    this.enterRule(localctx, 70, JQLParser.RULE_topTermsGroupByElem);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1292;
        this.match(JQLParser.T__26);
        this.state = 1293;
        this.match(JQLParser.T__1);
        this.state = 1294;
        localctx.field = this.identifier();
        this.state = 1305;
        _la = this._input.LA(1);
        if(_la===JQLParser.T__3) {
            this.state = 1295;
            this.match(JQLParser.T__3);
            this.state = 1296;
            localctx.limit = this.match(JQLParser.NAT);
            this.state = 1303;
            _la = this._input.LA(1);
            if(_la===JQLParser.T__3) {
                this.state = 1297;
                this.match(JQLParser.T__3);
                this.state = 1298;
                localctx.metric = this.aggregateMetric(localctx.useLegacy);
                this.state = 1301;
                _la = this._input.LA(1);
                if(_la===JQLParser.T__3) {
                    this.state = 1299;
                    this.match(JQLParser.T__3);
                    this.state = 1300;
                    localctx.order = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (JQLParser.TOP - 62)) | (1 << (JQLParser.BOTTOM - 62)) | (1 << (JQLParser.DESCENDING - 62)) | (1 << (JQLParser.DESC - 62)) | (1 << (JQLParser.ASCENDING - 62)) | (1 << (JQLParser.ASC - 62)))) !== 0))) {
                        localctx.order = this._errHandler.recoverInline(this);
                    }
                    else {
                        this.consume();
                    }
                }

            }

        }

        this.state = 1307;
        this.match(JQLParser.T__2);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GroupByMetricContext(parser, parent, invokingState, useLegacy) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_groupByMetric;
    this.useLegacy = null
    this.min = null; // IntegerContext
    this.max = null; // IntegerContext
    this.interval = null; // Token
    this.gutterID = null; // IdentifierContext
    this.gutterNumber = null; // NumberContext
    this.withDefault = null; // Token
    this.useLegacy = useLegacy || null;
    return this;
}

GroupByMetricContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupByMetricContext.prototype.constructor = GroupByMetricContext;

GroupByMetricContext.prototype.docMetric = function() {
    return this.getTypedRuleContext(DocMetricContext,0);
};

GroupByMetricContext.prototype.BUCKET = function() {
    return this.getToken(JQLParser.BUCKET, 0);
};

GroupByMetricContext.prototype.BUCKETS = function() {
    return this.getToken(JQLParser.BUCKETS, 0);
};

GroupByMetricContext.prototype.integer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IntegerContext);
    } else {
        return this.getTypedRuleContext(IntegerContext,i);
    }
};

GroupByMetricContext.prototype.NAT = function() {
    return this.getToken(JQLParser.NAT, 0);
};

GroupByMetricContext.prototype.DEFAULT = function() {
    return this.getToken(JQLParser.DEFAULT, 0);
};

GroupByMetricContext.prototype.WITH = function() {
    return this.getToken(JQLParser.WITH, 0);
};

GroupByMetricContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

GroupByMetricContext.prototype.number = function() {
    return this.getTypedRuleContext(NumberContext,0);
};

GroupByMetricContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterGroupByMetric(this);
	}
};

GroupByMetricContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitGroupByMetric(this);
	}
};




JQLParser.GroupByMetricContext = GroupByMetricContext;

JQLParser.prototype.groupByMetric = function(useLegacy) {

    var localctx = new GroupByMetricContext(this, this._ctx, this.state, useLegacy);
    this.enterRule(localctx, 72, JQLParser.RULE_groupByMetric);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1309;
        _la = this._input.LA(1);
        if(!(_la===JQLParser.BUCKETS || _la===JQLParser.BUCKET)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
        this.state = 1310;
        this.match(JQLParser.T__1);
        this.state = 1311;
        this.docMetric(localctx.useLegacy);
        this.state = 1312;
        this.match(JQLParser.T__3);
        this.state = 1313;
        localctx.min = this.integer();
        this.state = 1314;
        this.match(JQLParser.T__3);
        this.state = 1315;
        localctx.max = this.integer();
        this.state = 1316;
        this.match(JQLParser.T__3);
        this.state = 1317;
        localctx.interval = this.match(JQLParser.NAT);
        this.state = 1323;
        _la = this._input.LA(1);
        if(_la===JQLParser.T__3) {
            this.state = 1318;
            this.match(JQLParser.T__3);
            this.state = 1321;
            switch(this._input.LA(1)) {
            case JQLParser.LAG:
            case JQLParser.RUNNING:
            case JQLParser.PARENT:
            case JQLParser.DISTINCT:
            case JQLParser.DISTINCT_WINDOW:
            case JQLParser.WINDOW:
            case JQLParser.PERCENTILE:
            case JQLParser.MEDIAN:
            case JQLParser.PDIFF:
            case JQLParser.DIFF:
            case JQLParser.RATIODIFF:
            case JQLParser.SINGLESCORE:
            case JQLParser.RATIOSCORE:
            case JQLParser.AVG:
            case JQLParser.VARIANCE:
            case JQLParser.STDEV:
            case JQLParser.LOG:
            case JQLParser.ABS:
            case JQLParser.SUM_OVER:
            case JQLParser.AVG_OVER:
            case JQLParser.WHERE:
            case JQLParser.HASSTR:
            case JQLParser.HASINT:
            case JQLParser.FROM:
            case JQLParser.GROUP:
            case JQLParser.BY:
            case JQLParser.AGO:
            case JQLParser.COUNT:
            case JQLParser.AS:
            case JQLParser.NOT:
            case JQLParser.LUCENE:
            case JQLParser.QUERY:
            case JQLParser.TOP:
            case JQLParser.BOTTOM:
            case JQLParser.WITH:
            case JQLParser.DEFAULT:
            case JQLParser.TIME:
            case JQLParser.TIMEBUCKETS:
            case JQLParser.TO:
            case JQLParser.BUCKETS:
            case JQLParser.BUCKET:
            case JQLParser.IN:
            case JQLParser.DESCENDING:
            case JQLParser.DESC:
            case JQLParser.ASCENDING:
            case JQLParser.ASC:
            case JQLParser.DAYOFWEEK:
            case JQLParser.QUANTILES:
            case JQLParser.BETWEEN:
            case JQLParser.SAMPLE:
            case JQLParser.AND:
            case JQLParser.OR:
            case JQLParser.TRUE:
            case JQLParser.FALSE:
            case JQLParser.IF:
            case JQLParser.THEN:
            case JQLParser.ELSE:
            case JQLParser.FLOATSCALE:
            case JQLParser.SIGNUM:
            case JQLParser.LIMIT:
            case JQLParser.HAVING:
            case JQLParser.FIELD_MIN:
            case JQLParser.FIELD_MAX:
            case JQLParser.ALIASING:
            case JQLParser.HASSTRFIELD:
            case JQLParser.HASINTFIELD:
            case JQLParser.LEN:
            case JQLParser.INTTERMCOUNT:
            case JQLParser.STRTERMCOUNT:
            case JQLParser.SAME:
            case JQLParser.EXP:
            case JQLParser.WINDOW_SUM:
            case JQLParser.MIN:
            case JQLParser.MAX:
            case JQLParser.PRINTF:
            case JQLParser.EXTRACT:
            case JQLParser.RELATIVE:
            case JQLParser.DATASET:
            case JQLParser.RANDOM:
            case JQLParser.OPTIONS:
            case JQLParser.DOCID:
            case JQLParser.M:
            case JQLParser.Y:
            case JQLParser.TODAYS:
            case JQLParser.TOMORROWS:
            case JQLParser.YESTERDAYS:
            case JQLParser.TIME_UNIT:
            case JQLParser.TIME_PERIOD_ATOM:
            case JQLParser.ID:
            case JQLParser.BACKQUOTED_ID:
                this.state = 1319;
                localctx.gutterID = this.identifier();
                break;
            case JQLParser.T__0:
            case JQLParser.NAT:
            case JQLParser.DOUBLE:
                this.state = 1320;
                localctx.gutterNumber = this.number();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
        }

        this.state = 1325;
        this.match(JQLParser.T__2);
        this.state = 1328;
        var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
        if(la_===1) {
            this.state = 1326;
            localctx.withDefault = this.match(JQLParser.WITH);
            this.state = 1327;
            this.match(JQLParser.DEFAULT);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GroupByTimeContext(parser, parent, invokingState, useLegacy) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_groupByTime;
    this.useLegacy = null
    this.timeFormat = null; // Token
    this.timeField = null; // IdentifierContext
    this.isRelative = null; // Token
    this.useLegacy = useLegacy || null;
    return this;
}

GroupByTimeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupByTimeContext.prototype.constructor = GroupByTimeContext;

GroupByTimeContext.prototype.TIME = function() {
    return this.getToken(JQLParser.TIME, 0);
};

GroupByTimeContext.prototype.TIMEBUCKETS = function() {
    return this.getToken(JQLParser.TIMEBUCKETS, 0);
};

GroupByTimeContext.prototype.timePeriod = function() {
    return this.getTypedRuleContext(TimePeriodContext,0);
};

GroupByTimeContext.prototype.RELATIVE = function() {
    return this.getToken(JQLParser.RELATIVE, 0);
};

GroupByTimeContext.prototype.DEFAULT = function() {
    return this.getToken(JQLParser.DEFAULT, 0);
};

GroupByTimeContext.prototype.STRING_LITERAL = function() {
    return this.getToken(JQLParser.STRING_LITERAL, 0);
};

GroupByTimeContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

GroupByTimeContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterGroupByTime(this);
	}
};

GroupByTimeContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitGroupByTime(this);
	}
};




JQLParser.GroupByTimeContext = GroupByTimeContext;

JQLParser.prototype.groupByTime = function(useLegacy) {

    var localctx = new GroupByTimeContext(this, this._ctx, this.state, useLegacy);
    this.enterRule(localctx, 74, JQLParser.RULE_groupByTime);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1333;
        var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1330;
            this.match(JQLParser.TIME);
            break;

        case 2:
            this.state = 1331;
            if (!( localctx.useLegacy)) {
                throw new antlr4.error.FailedPredicateException(this, "$ctx.useLegacy");
            }
            this.state = 1332;
            this.match(JQLParser.TIMEBUCKETS);
            break;

        }
        this.state = 1351;
        var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
        if(la_===1) {
            this.state = 1335;
            this.match(JQLParser.T__1);
            this.state = 1345;
            _la = this._input.LA(1);
            if(_la===JQLParser.BUCKETS || _la===JQLParser.BUCKET || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (JQLParser.M - 112)) | (1 << (JQLParser.Y - 112)) | (1 << (JQLParser.TIME_UNIT - 112)) | (1 << (JQLParser.TIME_PERIOD_ATOM - 112)) | (1 << (JQLParser.NAT - 112)) | (1 << (JQLParser.STRING_LITERAL - 112)))) !== 0)) {
                this.state = 1336;
                this.timePeriod();
                this.state = 1343;
                _la = this._input.LA(1);
                if(_la===JQLParser.T__3) {
                    this.state = 1337;
                    this.match(JQLParser.T__3);
                    this.state = 1338;
                    localctx.timeFormat = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===JQLParser.DEFAULT || _la===JQLParser.STRING_LITERAL)) {
                        localctx.timeFormat = this._errHandler.recoverInline(this);
                    }
                    else {
                        this.consume();
                    }
                    this.state = 1341;
                    _la = this._input.LA(1);
                    if(_la===JQLParser.T__3) {
                        this.state = 1339;
                        this.match(JQLParser.T__3);
                        this.state = 1340;
                        localctx.timeField = this.identifier();
                    }

                }

            }

            this.state = 1348;
            _la = this._input.LA(1);
            if(_la===JQLParser.RELATIVE) {
                this.state = 1347;
                localctx.isRelative = this.match(JQLParser.RELATIVE);
            }

            this.state = 1350;
            this.match(JQLParser.T__2);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GroupByFieldContext(parser, parent, invokingState, useLegacy) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_groupByField;
    this.useLegacy = null
    this.field = null; // IdentifierContext
    this.order = null; // Token
    this.limit = null; // Token
    this.metric = null; // AggregateMetricContext
    this.filter = null; // AggregateFilterContext
    this.withDefault = null; // Token
    this.useLegacy = useLegacy || null;
    return this;
}

GroupByFieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupByFieldContext.prototype.constructor = GroupByFieldContext;

GroupByFieldContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

GroupByFieldContext.prototype.DEFAULT = function() {
    return this.getToken(JQLParser.DEFAULT, 0);
};

GroupByFieldContext.prototype.WITH = function() {
    return this.getToken(JQLParser.WITH, 0);
};

GroupByFieldContext.prototype.BY = function() {
    return this.getToken(JQLParser.BY, 0);
};

GroupByFieldContext.prototype.HAVING = function() {
    return this.getToken(JQLParser.HAVING, 0);
};

GroupByFieldContext.prototype.NAT = function() {
    return this.getToken(JQLParser.NAT, 0);
};

GroupByFieldContext.prototype.aggregateMetric = function() {
    return this.getTypedRuleContext(AggregateMetricContext,0);
};

GroupByFieldContext.prototype.aggregateFilter = function() {
    return this.getTypedRuleContext(AggregateFilterContext,0);
};

GroupByFieldContext.prototype.TOP = function() {
    return this.getToken(JQLParser.TOP, 0);
};

GroupByFieldContext.prototype.BOTTOM = function() {
    return this.getToken(JQLParser.BOTTOM, 0);
};

GroupByFieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterGroupByField(this);
	}
};

GroupByFieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitGroupByField(this);
	}
};




JQLParser.GroupByFieldContext = GroupByFieldContext;

JQLParser.prototype.groupByField = function(useLegacy) {

    var localctx = new GroupByFieldContext(this, this._ctx, this.state, useLegacy);
    this.enterRule(localctx, 76, JQLParser.RULE_groupByField);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1353;
        localctx.field = this.identifier();
        this.state = 1376;
        var la_ = this._interp.adaptivePredict(this._input,117,this._ctx);
        if(la_===1) {
            this.state = 1354;
            this.match(JQLParser.T__6);
            this.state = 1356;
            _la = this._input.LA(1);
            if(_la===JQLParser.TOP || _la===JQLParser.BOTTOM) {
                this.state = 1355;
                localctx.order = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===JQLParser.TOP || _la===JQLParser.BOTTOM)) {
                    localctx.order = this._errHandler.recoverInline(this);
                }
                else {
                    this.consume();
                }
            }

            this.state = 1359;
            _la = this._input.LA(1);
            if(_la===JQLParser.NAT) {
                this.state = 1358;
                localctx.limit = this.match(JQLParser.NAT);
            }

            this.state = 1363;
            _la = this._input.LA(1);
            if(_la===JQLParser.BY) {
                this.state = 1361;
                this.match(JQLParser.BY);
                this.state = 1362;
                localctx.metric = this.aggregateMetric(localctx.useLegacy);
            }

            this.state = 1367;
            _la = this._input.LA(1);
            if(_la===JQLParser.HAVING) {
                this.state = 1365;
                this.match(JQLParser.HAVING);
                this.state = 1366;
                localctx.filter = this.aggregateFilter(localctx.useLegacy);
            }

            this.state = 1369;
            this.match(JQLParser.T__7);
            this.state = 1372;
            var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
            if(la_===1) {
                this.state = 1370;
                localctx.withDefault = this.match(JQLParser.WITH);
                this.state = 1371;
                this.match(JQLParser.DEFAULT);

            }

        } else if(la_===2) {
            this.state = 1374;
            localctx.withDefault = this.match(JQLParser.WITH);
            this.state = 1375;
            this.match(JQLParser.DEFAULT);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DateTimeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_dateTime;
    return this;
}

DateTimeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DateTimeContext.prototype.constructor = DateTimeContext;

DateTimeContext.prototype.DATETIME_TOKEN = function() {
    return this.getToken(JQLParser.DATETIME_TOKEN, 0);
};

DateTimeContext.prototype.DATE_TOKEN = function() {
    return this.getToken(JQLParser.DATE_TOKEN, 0);
};

DateTimeContext.prototype.STRING_LITERAL = function() {
    return this.getToken(JQLParser.STRING_LITERAL, 0);
};

DateTimeContext.prototype.NAT = function() {
    return this.getToken(JQLParser.NAT, 0);
};

DateTimeContext.prototype.timePeriod = function() {
    return this.getTypedRuleContext(TimePeriodContext,0);
};

DateTimeContext.prototype.TODAYS = function() {
    return this.getToken(JQLParser.TODAYS, 0);
};

DateTimeContext.prototype.TO = function() {
    return this.getToken(JQLParser.TO, 0);
};

DateTimeContext.prototype.TOMORROWS = function() {
    return this.getToken(JQLParser.TOMORROWS, 0);
};

DateTimeContext.prototype.YESTERDAYS = function() {
    return this.getToken(JQLParser.YESTERDAYS, 0);
};

DateTimeContext.prototype.AGO = function() {
    return this.getToken(JQLParser.AGO, 0);
};

DateTimeContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDateTime(this);
	}
};

DateTimeContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDateTime(this);
	}
};




JQLParser.DateTimeContext = DateTimeContext;

JQLParser.prototype.dateTime = function() {

    var localctx = new DateTimeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, JQLParser.RULE_dateTime);
    try {
        this.state = 1388;
        var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1378;
            this.match(JQLParser.DATETIME_TOKEN);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1379;
            this.match(JQLParser.DATE_TOKEN);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1380;
            this.match(JQLParser.STRING_LITERAL);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1381;
            this.match(JQLParser.NAT);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1382;
            this.timePeriod();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1383;
            this.match(JQLParser.TODAYS);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1384;
            this.match(JQLParser.TO);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1385;
            this.match(JQLParser.TOMORROWS);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1386;
            this.match(JQLParser.YESTERDAYS);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 1387;
            this.match(JQLParser.AGO);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AliasesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_aliases;
    this._identifier = null; // IdentifierContext
    this.actual = []; // of IdentifierContexts
    this.virtual = []; // of IdentifierContexts
    return this;
}

AliasesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AliasesContext.prototype.constructor = AliasesContext;

AliasesContext.prototype.ALIASING = function() {
    return this.getToken(JQLParser.ALIASING, 0);
};

AliasesContext.prototype.AS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JQLParser.AS);
    } else {
        return this.getToken(JQLParser.AS, i);
    }
};


AliasesContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

AliasesContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterAliases(this);
	}
};

AliasesContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitAliases(this);
	}
};




JQLParser.AliasesContext = AliasesContext;

JQLParser.prototype.aliases = function() {

    var localctx = new AliasesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, JQLParser.RULE_aliases);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1390;
        this.match(JQLParser.ALIASING);
        this.state = 1391;
        this.match(JQLParser.T__1);
        this.state = 1392;
        localctx._identifier = this.identifier();
        localctx.actual.push(localctx._identifier);
        this.state = 1393;
        this.match(JQLParser.AS);
        this.state = 1394;
        localctx._identifier = this.identifier();
        localctx.virtual.push(localctx._identifier);
        this.state = 1402;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===JQLParser.T__3) {
            this.state = 1395;
            this.match(JQLParser.T__3);
            this.state = 1396;
            localctx._identifier = this.identifier();
            localctx.actual.push(localctx._identifier);
            this.state = 1397;
            this.match(JQLParser.AS);
            this.state = 1398;
            localctx._identifier = this.identifier();
            localctx.virtual.push(localctx._identifier);
            this.state = 1404;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1405;
        this.match(JQLParser.T__2);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DatasetContext(parser, parent, invokingState, useLegacy) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_dataset;
    this.useLegacy = null
    this.index = null; // IdentifierContext
    this.start = null; // DateTimeContext
    this.end = null; // DateTimeContext
    this.name = null; // IdentifierContext
    this.useLegacy = useLegacy || null;
    return this;
}

DatasetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DatasetContext.prototype.constructor = DatasetContext;

DatasetContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

DatasetContext.prototype.dateTime = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DateTimeContext);
    } else {
        return this.getTypedRuleContext(DateTimeContext,i);
    }
};

DatasetContext.prototype.whereContents = function() {
    return this.getTypedRuleContext(WhereContentsContext,0);
};

DatasetContext.prototype.AS = function() {
    return this.getToken(JQLParser.AS, 0);
};

DatasetContext.prototype.aliases = function() {
    return this.getTypedRuleContext(AliasesContext,0);
};

DatasetContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterDataset(this);
	}
};

DatasetContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitDataset(this);
	}
};




JQLParser.DatasetContext = DatasetContext;

JQLParser.prototype.dataset = function(useLegacy) {

    var localctx = new DatasetContext(this, this._ctx, this.state, useLegacy);
    this.enterRule(localctx, 82, JQLParser.RULE_dataset);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1407;
        localctx.index = this.identifier();
        this.state = 1413;
        var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
        if(la_===1) {
            this.state = 1408;
            if (!( !localctx.useLegacy)) {
                throw new antlr4.error.FailedPredicateException(this, "!$ctx.useLegacy");
            }
            this.state = 1409;
            this.match(JQLParser.T__1);
            this.state = 1410;
            this.whereContents(localctx.useLegacy);
            this.state = 1411;
            this.match(JQLParser.T__2);

        }
        this.state = 1415;
        localctx.start = this.dateTime();
        this.state = 1416;
        localctx.end = this.dateTime();
        this.state = 1419;
        _la = this._input.LA(1);
        if(_la===JQLParser.AS) {
            this.state = 1417;
            this.match(JQLParser.AS);
            this.state = 1418;
            localctx.name = this.identifier();
        }

        this.state = 1422;
        _la = this._input.LA(1);
        if(_la===JQLParser.ALIASING) {
            this.state = 1421;
            this.aliases();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DatasetOptTimeContext(parser, parent, invokingState, useLegacy) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_datasetOptTime;
    this.useLegacy = null
    this.useLegacy = useLegacy || null;
    return this;
}

DatasetOptTimeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DatasetOptTimeContext.prototype.constructor = DatasetOptTimeContext;


 
DatasetOptTimeContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
    this.useLegacy = ctx.useLegacy;
};


function FullDatasetContext(parser, ctx) {
	DatasetOptTimeContext.call(this, parser);
    DatasetOptTimeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FullDatasetContext.prototype = Object.create(DatasetOptTimeContext.prototype);
FullDatasetContext.prototype.constructor = FullDatasetContext;

JQLParser.FullDatasetContext = FullDatasetContext;

FullDatasetContext.prototype.dataset = function() {
    return this.getTypedRuleContext(DatasetContext,0);
};
FullDatasetContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterFullDataset(this);
	}
};

FullDatasetContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitFullDataset(this);
	}
};


function PartialDatasetContext(parser, ctx) {
	DatasetOptTimeContext.call(this, parser);
    this.index = null; // IdentifierContext;
    this.name = null; // IdentifierContext;
    DatasetOptTimeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PartialDatasetContext.prototype = Object.create(DatasetOptTimeContext.prototype);
PartialDatasetContext.prototype.constructor = PartialDatasetContext;

JQLParser.PartialDatasetContext = PartialDatasetContext;

PartialDatasetContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

PartialDatasetContext.prototype.whereContents = function() {
    return this.getTypedRuleContext(WhereContentsContext,0);
};

PartialDatasetContext.prototype.AS = function() {
    return this.getToken(JQLParser.AS, 0);
};

PartialDatasetContext.prototype.aliases = function() {
    return this.getTypedRuleContext(AliasesContext,0);
};
PartialDatasetContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterPartialDataset(this);
	}
};

PartialDatasetContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitPartialDataset(this);
	}
};



JQLParser.DatasetOptTimeContext = DatasetOptTimeContext;

JQLParser.prototype.datasetOptTime = function(useLegacy) {

    var localctx = new DatasetOptTimeContext(this, this._ctx, this.state, useLegacy);
    this.enterRule(localctx, 84, JQLParser.RULE_datasetOptTime);
    var _la = 0; // Token type
    try {
        this.state = 1440;
        var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
        switch(la_) {
        case 1:
            localctx = new FullDatasetContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1424;
            this.dataset(localctx.useLegacy);
            break;

        case 2:
            localctx = new PartialDatasetContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1425;
            localctx.index = this.identifier();
            this.state = 1431;
            var la_ = this._interp.adaptivePredict(this._input,123,this._ctx);
            if(la_===1) {
                this.state = 1426;
                if (!( !localctx.useLegacy)) {
                    throw new antlr4.error.FailedPredicateException(this, "!$ctx.useLegacy");
                }
                this.state = 1427;
                this.match(JQLParser.T__1);
                this.state = 1428;
                this.whereContents(localctx.useLegacy);
                this.state = 1429;
                this.match(JQLParser.T__2);

            }
            this.state = 1435;
            _la = this._input.LA(1);
            if(_la===JQLParser.AS) {
                this.state = 1433;
                this.match(JQLParser.AS);
                this.state = 1434;
                localctx.name = this.identifier();
            }

            this.state = 1438;
            _la = this._input.LA(1);
            if(_la===JQLParser.ALIASING) {
                this.state = 1437;
                this.aliases();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FromContentsContext(parser, parent, invokingState, useLegacy) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_fromContents;
    this.useLegacy = null
    this.useLegacy = useLegacy || null;
    return this;
}

FromContentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FromContentsContext.prototype.constructor = FromContentsContext;

FromContentsContext.prototype.dataset = function() {
    return this.getTypedRuleContext(DatasetContext,0);
};

FromContentsContext.prototype.datasetOptTime = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DatasetOptTimeContext);
    } else {
        return this.getTypedRuleContext(DatasetOptTimeContext,i);
    }
};

FromContentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterFromContents(this);
	}
};

FromContentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitFromContents(this);
	}
};




JQLParser.FromContentsContext = FromContentsContext;

JQLParser.prototype.fromContents = function(useLegacy) {

    var localctx = new FromContentsContext(this, this._ctx, this.state, useLegacy);
    this.enterRule(localctx, 86, JQLParser.RULE_fromContents);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1442;
        this.dataset(localctx.useLegacy);
        this.state = 1447;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===JQLParser.T__3) {
            this.state = 1443;
            this.match(JQLParser.T__3);
            this.state = 1444;
            this.datasetOptTime(localctx.useLegacy);
            this.state = 1449;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WhereContentsContext(parser, parent, invokingState, useLegacy) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_whereContents;
    this.useLegacy = null
    this._docFilter = null; // DocFilterContext
    this.docFilters = []; // of DocFilterContexts
    this.useLegacy = useLegacy || null;
    return this;
}

WhereContentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhereContentsContext.prototype.constructor = WhereContentsContext;

WhereContentsContext.prototype.docFilter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DocFilterContext);
    } else {
        return this.getTypedRuleContext(DocFilterContext,i);
    }
};

WhereContentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterWhereContents(this);
	}
};

WhereContentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitWhereContents(this);
	}
};




JQLParser.WhereContentsContext = WhereContentsContext;

JQLParser.prototype.whereContents = function(useLegacy) {

    var localctx = new WhereContentsContext(this, this._ctx, this.state, useLegacy);
    this.enterRule(localctx, 88, JQLParser.RULE_whereContents);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1453;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,128,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1450;
                localctx._docFilter = this.docFilter(localctx.useLegacy);
                localctx.docFilters.push(localctx._docFilter); 
            }
            this.state = 1455;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,128,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GroupByContentsContext(parser, parent, invokingState, useLegacy) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_groupByContents;
    this.useLegacy = null
    this.useLegacy = useLegacy || null;
    return this;
}

GroupByContentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupByContentsContext.prototype.constructor = GroupByContentsContext;

GroupByContentsContext.prototype.groupByEntry = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GroupByEntryContext);
    } else {
        return this.getTypedRuleContext(GroupByEntryContext,i);
    }
};

GroupByContentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterGroupByContents(this);
	}
};

GroupByContentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitGroupByContents(this);
	}
};




JQLParser.GroupByContentsContext = GroupByContentsContext;

JQLParser.prototype.groupByContents = function(useLegacy) {

    var localctx = new GroupByContentsContext(this, this._ctx, this.state, useLegacy);
    this.enterRule(localctx, 90, JQLParser.RULE_groupByContents);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1464;
        var la_ = this._interp.adaptivePredict(this._input,130,this._ctx);
        if(la_===1) {
            this.state = 1456;
            this.groupByEntry(localctx.useLegacy);
            this.state = 1461;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===JQLParser.T__3) {
                this.state = 1457;
                this.match(JQLParser.T__3);
                this.state = 1458;
                this.groupByEntry(localctx.useLegacy);
                this.state = 1463;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FormattedAggregateMetricContext(parser, parent, invokingState, useLegacy) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_formattedAggregateMetric;
    this.useLegacy = null
    this.useLegacy = useLegacy || null;
    return this;
}

FormattedAggregateMetricContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormattedAggregateMetricContext.prototype.constructor = FormattedAggregateMetricContext;

FormattedAggregateMetricContext.prototype.aggregateMetric = function() {
    return this.getTypedRuleContext(AggregateMetricContext,0);
};

FormattedAggregateMetricContext.prototype.PRINTF = function() {
    return this.getToken(JQLParser.PRINTF, 0);
};

FormattedAggregateMetricContext.prototype.STRING_LITERAL = function() {
    return this.getToken(JQLParser.STRING_LITERAL, 0);
};

FormattedAggregateMetricContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterFormattedAggregateMetric(this);
	}
};

FormattedAggregateMetricContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitFormattedAggregateMetric(this);
	}
};




JQLParser.FormattedAggregateMetricContext = FormattedAggregateMetricContext;

JQLParser.prototype.formattedAggregateMetric = function(useLegacy) {

    var localctx = new FormattedAggregateMetricContext(this, this._ctx, this.state, useLegacy);
    this.enterRule(localctx, 92, JQLParser.RULE_formattedAggregateMetric);
    try {
        this.state = 1474;
        var la_ = this._interp.adaptivePredict(this._input,131,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1466;
            this.aggregateMetric(localctx.useLegacy);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1467;
            this.match(JQLParser.PRINTF);
            this.state = 1468;
            this.match(JQLParser.T__1);
            this.state = 1469;
            this.match(JQLParser.STRING_LITERAL);
            this.state = 1470;
            this.match(JQLParser.T__3);
            this.state = 1471;
            this.aggregateMetric(localctx.useLegacy);
            this.state = 1472;
            this.match(JQLParser.T__2);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SelectContentsContext(parser, parent, invokingState, useLegacy) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_selectContents;
    this.useLegacy = null
    this.precision = null; // Token
    this.useLegacy = useLegacy || null;
    return this;
}

SelectContentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectContentsContext.prototype.constructor = SelectContentsContext;

SelectContentsContext.prototype.formattedAggregateMetric = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FormattedAggregateMetricContext);
    } else {
        return this.getTypedRuleContext(FormattedAggregateMetricContext,i);
    }
};

SelectContentsContext.prototype.ROUNDING = function() {
    return this.getToken(JQLParser.ROUNDING, 0);
};

SelectContentsContext.prototype.NAT = function() {
    return this.getToken(JQLParser.NAT, 0);
};

SelectContentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterSelectContents(this);
	}
};

SelectContentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitSelectContents(this);
	}
};




JQLParser.SelectContentsContext = SelectContentsContext;

JQLParser.prototype.selectContents = function(useLegacy) {

    var localctx = new SelectContentsContext(this, this._ctx, this.state, useLegacy);
    this.enterRule(localctx, 94, JQLParser.RULE_selectContents);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1484;
        var la_ = this._interp.adaptivePredict(this._input,133,this._ctx);
        if(la_===1) {
            this.state = 1476;
            this.formattedAggregateMetric(localctx.useLegacy);
            this.state = 1481;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===JQLParser.T__3) {
                this.state = 1477;
                this.match(JQLParser.T__3);
                this.state = 1478;
                this.formattedAggregateMetric(localctx.useLegacy);
                this.state = 1483;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }

        }
        this.state = 1488;
        _la = this._input.LA(1);
        if(_la===JQLParser.ROUNDING) {
            this.state = 1486;
            this.match(JQLParser.ROUNDING);
            this.state = 1487;
            localctx.precision = this.match(JQLParser.NAT);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QueryContext(parser, parent, invokingState, useLegacy) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_query;
    this.useLegacy = null
    this._selectContents = null; // SelectContentsContext
    this.selects = []; // of SelectContentsContexts
    this._STRING_LITERAL = null; // Token
    this.options = []; // of Tokens
    this.limit = null; // Token
    this.useLegacy = useLegacy || null;
    return this;
}

QueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryContext.prototype.constructor = QueryContext;

QueryContext.prototype.FROM = function() {
    return this.getToken(JQLParser.FROM, 0);
};

QueryContext.prototype.fromContents = function() {
    return this.getTypedRuleContext(FromContentsContext,0);
};

QueryContext.prototype.EOF = function() {
    return this.getToken(JQLParser.EOF, 0);
};

QueryContext.prototype.SELECT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JQLParser.SELECT);
    } else {
        return this.getToken(JQLParser.SELECT, i);
    }
};


QueryContext.prototype.WHERE = function() {
    return this.getToken(JQLParser.WHERE, 0);
};

QueryContext.prototype.whereContents = function() {
    return this.getTypedRuleContext(WhereContentsContext,0);
};

QueryContext.prototype.GROUP = function() {
    return this.getToken(JQLParser.GROUP, 0);
};

QueryContext.prototype.BY = function() {
    return this.getToken(JQLParser.BY, 0);
};

QueryContext.prototype.groupByContents = function() {
    return this.getTypedRuleContext(GroupByContentsContext,0);
};

QueryContext.prototype.OPTIONS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JQLParser.OPTIONS);
    } else {
        return this.getToken(JQLParser.OPTIONS, i);
    }
};


QueryContext.prototype.LIMIT = function() {
    return this.getToken(JQLParser.LIMIT, 0);
};

QueryContext.prototype.selectContents = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SelectContentsContext);
    } else {
        return this.getTypedRuleContext(SelectContentsContext,i);
    }
};

QueryContext.prototype.NAT = function() {
    return this.getToken(JQLParser.NAT, 0);
};

QueryContext.prototype.STRING_LITERAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JQLParser.STRING_LITERAL);
    } else {
        return this.getToken(JQLParser.STRING_LITERAL, i);
    }
};


QueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterQuery(this);
	}
};

QueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitQuery(this);
	}
};




JQLParser.QueryContext = QueryContext;

JQLParser.prototype.query = function(useLegacy) {

    var localctx = new QueryContext(this, this._ctx, this.state, useLegacy);
    this.enterRule(localctx, 96, JQLParser.RULE_query);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1492;
        _la = this._input.LA(1);
        if(_la===JQLParser.SELECT) {
            this.state = 1490;
            this.match(JQLParser.SELECT);
            this.state = 1491;
            localctx._selectContents = this.selectContents(localctx.useLegacy);
            localctx.selects.push(localctx._selectContents);
        }

        this.state = 1494;
        this.match(JQLParser.FROM);
        this.state = 1495;
        this.fromContents(localctx.useLegacy);
        this.state = 1498;
        _la = this._input.LA(1);
        if(_la===JQLParser.WHERE) {
            this.state = 1496;
            this.match(JQLParser.WHERE);
            this.state = 1497;
            this.whereContents(localctx.useLegacy);
        }

        this.state = 1503;
        _la = this._input.LA(1);
        if(_la===JQLParser.GROUP) {
            this.state = 1500;
            this.match(JQLParser.GROUP);
            this.state = 1501;
            this.match(JQLParser.BY);
            this.state = 1502;
            this.groupByContents(localctx.useLegacy);
        }

        this.state = 1507;
        _la = this._input.LA(1);
        if(_la===JQLParser.SELECT) {
            this.state = 1505;
            this.match(JQLParser.SELECT);
            this.state = 1506;
            localctx._selectContents = this.selectContents(localctx.useLegacy);
            localctx.selects.push(localctx._selectContents);
        }

        this.state = 1522;
        var la_ = this._interp.adaptivePredict(this._input,141,this._ctx);
        if(la_===1) {
            this.state = 1509;
            this.match(JQLParser.OPTIONS);
            this.state = 1510;
            this.match(JQLParser.T__6);
            this.state = 1519;
            _la = this._input.LA(1);
            if(_la===JQLParser.STRING_LITERAL) {
                this.state = 1511;
                localctx._STRING_LITERAL = this.match(JQLParser.STRING_LITERAL);
                localctx.options.push(localctx._STRING_LITERAL);
                this.state = 1516;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===JQLParser.T__3) {
                    this.state = 1512;
                    this.match(JQLParser.T__3);
                    this.state = 1513;
                    localctx._STRING_LITERAL = this.match(JQLParser.STRING_LITERAL);
                    localctx.options.push(localctx._STRING_LITERAL);
                    this.state = 1518;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 1521;
            this.match(JQLParser.T__7);

        }
        this.state = 1526;
        _la = this._input.LA(1);
        if(_la===JQLParser.LIMIT) {
            this.state = 1524;
            this.match(JQLParser.LIMIT);
            this.state = 1525;
            localctx.limit = this.match(JQLParser.NAT);
        }

        this.state = 1541;
        _la = this._input.LA(1);
        if(_la===JQLParser.OPTIONS) {
            this.state = 1528;
            this.match(JQLParser.OPTIONS);
            this.state = 1529;
            this.match(JQLParser.T__6);
            this.state = 1538;
            _la = this._input.LA(1);
            if(_la===JQLParser.STRING_LITERAL) {
                this.state = 1530;
                localctx._STRING_LITERAL = this.match(JQLParser.STRING_LITERAL);
                localctx.options.push(localctx._STRING_LITERAL);
                this.state = 1535;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===JQLParser.T__3) {
                    this.state = 1531;
                    this.match(JQLParser.T__3);
                    this.state = 1532;
                    localctx._STRING_LITERAL = this.match(JQLParser.STRING_LITERAL);
                    localctx.options.push(localctx._STRING_LITERAL);
                    this.state = 1537;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 1540;
            this.match(JQLParser.T__7);
        }

        this.state = 1543;
        this.match(JQLParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QueryNoSelectContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JQLParser.RULE_queryNoSelect;
    this.same = null; // Token
    return this;
}

QueryNoSelectContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryNoSelectContext.prototype.constructor = QueryNoSelectContext;

QueryNoSelectContext.prototype.FROM = function() {
    return this.getToken(JQLParser.FROM, 0);
};

QueryNoSelectContext.prototype.GROUP = function() {
    return this.getToken(JQLParser.GROUP, 0);
};

QueryNoSelectContext.prototype.BY = function() {
    return this.getToken(JQLParser.BY, 0);
};

QueryNoSelectContext.prototype.groupByContents = function() {
    return this.getTypedRuleContext(GroupByContentsContext,0);
};

QueryNoSelectContext.prototype.fromContents = function() {
    return this.getTypedRuleContext(FromContentsContext,0);
};

QueryNoSelectContext.prototype.SAME = function() {
    return this.getToken(JQLParser.SAME, 0);
};

QueryNoSelectContext.prototype.WHERE = function() {
    return this.getToken(JQLParser.WHERE, 0);
};

QueryNoSelectContext.prototype.whereContents = function() {
    return this.getTypedRuleContext(WhereContentsContext,0);
};

QueryNoSelectContext.prototype.enterRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.enterQueryNoSelect(this);
	}
};

QueryNoSelectContext.prototype.exitRule = function(listener) {
    if(listener instanceof JQLListener ) {
        listener.exitQueryNoSelect(this);
	}
};




JQLParser.QueryNoSelectContext = QueryNoSelectContext;

JQLParser.prototype.queryNoSelect = function() {

    var localctx = new QueryNoSelectContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, JQLParser.RULE_queryNoSelect);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1545;
        this.match(JQLParser.FROM);
        this.state = 1548;
        var la_ = this._interp.adaptivePredict(this._input,146,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1546;
            localctx.same = this.match(JQLParser.SAME);
            break;

        case 2:
            this.state = 1547;
            this.fromContents(false);
            break;

        }
        this.state = 1552;
        _la = this._input.LA(1);
        if(_la===JQLParser.WHERE) {
            this.state = 1550;
            this.match(JQLParser.WHERE);
            this.state = 1551;
            this.whereContents(false);
        }

        this.state = 1554;
        this.match(JQLParser.GROUP);
        this.state = 1555;
        this.match(JQLParser.BY);
        this.state = 1556;
        this.groupByContents(false);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


JQLParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 7:
			return this.legacyAggregateMetric_sempred(localctx, predIndex);
	case 8:
			return this.aggregateMetric_sempred(localctx, predIndex);
	case 10:
			return this.jqlAggregateMetric_sempred(localctx, predIndex);
	case 15:
			return this.aggregateFilter_sempred(localctx, predIndex);
	case 17:
			return this.jqlAggregateFilter_sempred(localctx, predIndex);
	case 21:
			return this.docMetric_sempred(localctx, predIndex);
	case 23:
			return this.legacyDocMetric_sempred(localctx, predIndex);
	case 24:
			return this.jqlDocMetric_sempred(localctx, predIndex);
	case 25:
			return this.termVal_sempred(localctx, predIndex);
	case 28:
			return this.docFilter_sempred(localctx, predIndex);
	case 30:
			return this.legacyDocFilter_sempred(localctx, predIndex);
	case 31:
			return this.jqlDocFilter_sempred(localctx, predIndex);
	case 32:
			return this.groupByEntry_sempred(localctx, predIndex);
	case 33:
			return this.groupByElement_sempred(localctx, predIndex);
	case 37:
			return this.groupByTime_sempred(localctx, predIndex);
	case 41:
			return this.dataset_sempred(localctx, predIndex);
	case 42:
			return this.datasetOptTime_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

JQLParser.prototype.legacyAggregateMetric_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 4);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JQLParser.prototype.aggregateMetric_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 1:
			return localctx.useLegacy;
		case 2:
			return !localctx.useLegacy;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JQLParser.prototype.jqlAggregateMetric_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 3:
			return this.precpred(this._ctx, 7);
		case 4:
			return this.precpred(this._ctx, 6);
		case 5:
			return this.precpred(this._ctx, 5);
		case 6:
			return this.precpred(this._ctx, 4);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JQLParser.prototype.aggregateFilter_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 7:
			return localctx.useLegacy;
		case 8:
			return false;
		case 9:
			return !localctx.useLegacy;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JQLParser.prototype.jqlAggregateFilter_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 10:
			return this.precpred(this._ctx, 5);
		case 11:
			return this.precpred(this._ctx, 4);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JQLParser.prototype.docMetric_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 12:
			return localctx.useLegacy;
		case 13:
			return !localctx.useLegacy;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JQLParser.prototype.legacyDocMetric_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 14:
			return this.precpred(this._ctx, 6);
		case 15:
			return this.precpred(this._ctx, 5);
		case 16:
			return this.precpred(this._ctx, 4);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JQLParser.prototype.jqlDocMetric_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 17:
			return this.precpred(this._ctx, 7);
		case 18:
			return this.precpred(this._ctx, 6);
		case 19:
			return this.precpred(this._ctx, 5);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JQLParser.prototype.termVal_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 20:
			return localctx.useLegacy;
		case 21:
			return !localctx.useLegacy;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JQLParser.prototype.docFilter_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 22:
			return localctx.useLegacy;
		case 23:
			return !localctx.useLegacy;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JQLParser.prototype.legacyDocFilter_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 24:
			return this.precpred(this._ctx, 5);
		case 25:
			return this.precpred(this._ctx, 4);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JQLParser.prototype.jqlDocFilter_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 26:
			return this.precpred(this._ctx, 5);
		case 27:
			return this.precpred(this._ctx, 4);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JQLParser.prototype.groupByEntry_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 28:
			return !localctx.useLegacy;
		case 29:
			return !localctx.useLegacy;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JQLParser.prototype.groupByElement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 30:
			return !localctx.useLegacy;
		case 31:
			return !localctx.useLegacy;
		case 32:
			return !localctx.useLegacy;
		case 33:
			return !localctx.useLegacy;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JQLParser.prototype.groupByTime_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 34:
			return localctx.useLegacy;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JQLParser.prototype.dataset_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 35:
			return !localctx.useLegacy;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JQLParser.prototype.datasetOptTime_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 36:
			return !localctx.useLegacy;
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.JQLParser = JQLParser;
